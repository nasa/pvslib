(|trig_approx| (|sin_term_TCC1| 0 (|sin_term_TCC1-1| |nil| 3320763259 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|sin_term| SUBTYPE "((number_fields.+)(number_fields.*(2, trig_approx.n), 1))" "{i: integers.int | booleans.OR(trig_approx.a /= 0, reals.>=(i, 0))}"))) (|sin_term_next| 0 (|sin_term_next-1| |nil| 3320769270 ("" (SKOSIMP) (("" (EXPAND "sin_term") (("" (EXPAND "^") (("" (EXPAND "expt" 1 2) (("" (EXPAND "expt" 1 2) (("" (EXPAND "expt" 1 1) (("" (NAME-REPLACE "X" "expt((-1), n!1) * expt(a!1, 1 + 2 * n!1)") (("" (REWRITE "cross_mult") (("" (EXPAND "factorial" 1 1) (("" (EXPAND "factorial" 1 1) (("" (EXPAND "factorial" 1 5) (("" (TYPEPRED "factorial(1+2*n!1)") (("" (NAME-REPLACE "F" "factorial(1 + 2 * n!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL)) SHOSTAK)) (|sin_term_neg| 0 (|sin_term_neg-1| |nil| 3320922359 ("" (SKOSIMP) (("" (EXPAND "sin_term") (("" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (NAME-REPLACE "S" "expt((-1), n!1)") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "expt_plus" ("i" "1" "j" "2*n!1")) (("2" (INST-CP - "a!1") (("1" (INST - "-a!1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (LEMMA "expt_times" ("i" "2" "j" "n!1")) (("1" (INST-CP - "a!1") (("1" (INST - "-a!1") (("1" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|a!1| SKOLEM-CONST-DECL "real" |trig_approx| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|sin_terms_alternate| 0 (|sin_terms_alternate-2| "" 3790092325 ("" (SKOSIMP) (("" (EXPAND "sin_term") (("" (REWRITE "div_mult_pos_gt1" 2) (("" (REWRITE "div_mult_pos_lt1" 2) (("" (REWRITE "zero_times1") (("" (REWRITE "expt_plus" 2) (("" (NAME-REPLACE "S" "(-1)^n!1") (("" (LEMMA "both_sides_times_neg_lt1" ("nz" "-1" "x" "S * a!1 ^ (3 + 2 * n!1)" "y" "0")) (("" (REPLACE -1 2) (("" (HIDE -1) (("" (EXPAND ">") (("" (LEMMA "trichotomy" ("x" "S")) (("" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "S" "x" "0")) (("1" (REWRITE "zero_times1" -1) (("1" (INST-CP - "a!1 ^ (1 + 2 * n!1)") (("1" (ASSERT) (("1" (REPLACE -2 2) (("1" (INST - "a!1 ^ (3 + 2 * n!1)") (("1" (REPLACE -1 2) (("1" (HIDE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 1) (("1" (EXPAND "expt" 2 1) (("1" (CASE-REPLACE "0 < expt(a!1, (1 + 2 * n!1))") (("1" (ASSERT) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "a!1*a!1" "py" "expt(a!1, 1 + 2 * n!1)")) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "0 <a!1*a!1") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1*a!1" "x" "0" "y" "expt(a!1, 1 + 2 * n!1)")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "S" -1) (("2" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "S" "x" "0")) (("1" (INST-CP - "a!1 ^ (1 + 2 * n!1)") (("1" (INST - "a!1 ^ (3 + 2 * n!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2 -3) (("1" (CASE "0<a!1*a!1") (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 1) (("1" (EXPAND "expt" 2 1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1*a!1" "x" "expt(a!1, 1 + 2 * n!1)" "y" "0")) (("1" (ASSERT) (("1" (REPLACE -1 2 RL) (("1" (REWRITE "zero_times1") (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "expt(a!1, 1 + 2 * n!1) * (a!1 * a!1) < 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (S SKOLEM-CONST-DECL "{x: int | x /= 0}" |trig_approx| NIL) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK) (|sin_terms_alternate-1| |nil| 3320772448 ("" (SKOSIMP) (("" (EXPAND "sin_term") (("" (REWRITE "div_mult_pos_gt1" 2) (("" (REWRITE "div_mult_pos_lt1" 2) (("" (REWRITE "zero_times1") (("" (REWRITE "expt_plus" 2) (("" (REWRITE "expt_x1") (("" (NAME-REPLACE "S" "(-1)^n!1") (("" (LEMMA "both_sides_times_neg_lt1" ("nz" "-1" "x" "S * a!1 ^ (3 + 2 * n!1)" "y" "0")) (("" (REPLACE -1 2) (("" (HIDE -1) (("" (EXPAND ">") (("" (LEMMA "trichotomy" ("x" "S")) (("" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "S" "x" "0")) (("1" (REWRITE "zero_times1" -1) (("1" (INST-CP - "a!1 ^ (1 + 2 * n!1)") (("1" (ASSERT) (("1" (REPLACE -2 2) (("1" (INST - "a!1 ^ (3 + 2 * n!1)") (("1" (REPLACE -1 2) (("1" (HIDE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 1) (("1" (EXPAND "expt" 2 1) (("1" (CASE-REPLACE "0 < expt(a!1, (1 + 2 * n!1))") (("1" (ASSERT) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "a!1*a!1" "py" "expt(a!1, 1 + 2 * n!1)")) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "0 <a!1*a!1") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1*a!1" "x" "0" "y" "expt(a!1, 1 + 2 * n!1)")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "S" -1) (("2" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "S" "x" "0")) (("1" (INST-CP - "a!1 ^ (1 + 2 * n!1)") (("1" (INST - "a!1 ^ (3 + 2 * n!1)") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2 -3) (("1" (CASE "0<a!1*a!1") (("1" (EXPAND "^") (("1" (EXPAND "expt" 2 1) (("1" (EXPAND "expt" 2 1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1*a!1" "x" "expt(a!1, 1 + 2 * n!1)" "y" "0")) (("1" (ASSERT) (("1" (REPLACE -1 2 RL) (("1" (REWRITE "zero_times1") (("1" (HIDE -1 -2) (("1" (CASE-REPLACE "expt(a!1, 1 + 2 * n!1) * (a!1 * a!1) < 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_term_nonzero| 0 (|sin_term_nonzero-1| |nil| 3320769218 ("" (EXPAND "sin_term") (("" (SKOSIMP*) (("" (REWRITE "div_cancel3") (("" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("" (SPLIT) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "zero_times1") (("2" (REWRITE "zero_times3") (("2" (LEMMA "expt_nonzero" ("n0x" "a!1" "i" "1+2*n!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|sin_term_zero| 0 (|sin_term_zero-1| |nil| 3320924247 ("" (SKOSIMP) (("" (LEMMA "sin_term_nonzero" ("a" "a!1" "n" "n!1")) (("" (ASSERT) (("" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_term_nonzero| FORMULA-DECL NIL |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|sin_term_gt0| 0 (|sin_term_gt0-2| "" 3790092327 ("" (EXPAND "sin_term") (("" (SKOSIMP) (("" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^" 1 2) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "(a!1 ^ 2) ^ n!1" "py" "factorial(1 + 2 * n!1)")) (("1" (LEMMA "both_sides_times_pos_gt1" ("pz" "(a!1 ^ 2) ^ n!1 / factorial(1 + 2 * n!1)" "x" "(-1)^n!1*a!1" "y" "0")) (("1" (REWRITE "zero_times1") (("1" (REPLACE -1 2) (("1" (HIDE-ALL-BUT (1 2)) (("1" (CASE "forall (n:nat): (-1)^(2*n) =1") (("1" (LEMMA "trichotomy" ("x" "a!1")) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "even_or_odd") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (HIDE 1 2) (("1" (EXPAND "odd?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_plus") (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "even?") (("2" (SKOSIMP) (("2" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) (("3" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "even_or_odd" ("x" "n!1")) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (REWRITE "expt_times") (("2" (EXPAND "^" 1 1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|j!1| SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|j!1| SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|j!1| SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|j!1| SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|sin_term_gt0-1| |nil| 3320931387 ("" (EXPAND "sin_term") (("" (SKOSIMP) (("" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^" 1 2) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (REWRITE "expt_times") (("2" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "(a!1 ^ 2) ^ n!1" "py" "factorial(1 + 2 * n!1)")) (("1" (LEMMA "both_sides_times_pos_gt1" ("pz" "(a!1 ^ 2) ^ n!1 / factorial(1 + 2 * n!1)" "x" "(-1)^n!1*a!1" "y" "0")) (("1" (REWRITE "zero_times1") (("1" (REPLACE -1 2) (("1" (HIDE-ALL-BUT (1 2)) (("1" (CASE "forall (n:nat): (-1)^(2*n) =1") (("1" (LEMMA "trichotomy" ("x" "a!1")) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "even_or_odd") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (HIDE 1 2) (("1" (EXPAND "odd?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_x1") (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "even?") (("2" (SKOSIMP) (("2" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) (("3" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "even_or_odd" ("x" "n!1")) (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_x1") (("2" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (REWRITE "expt_times") (("2" (EXPAND "^" 1 1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_term_lt0| 0 (|sin_term_lt0-1| |nil| 3320932130 ("" (SKOSIMP) (("" (LEMMA "trichotomy" ("x" "a!1")) (("" (SPLIT -1) (("1" (ASSERT) (("1" (LEMMA "sin_term_gt0" ("a" "a!1" "n" "n!1")) (("1" (ASSERT) (("1" (REWRITE "even_or_odd") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "sin_term_nonzero" ("a" "a!1" "n" "n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "sin_term_zero" ("a" "0" "n" "n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (LEMMA "sin_term_gt0" ("a" "a!1" "n" "n!1")) (("3" (ASSERT) (("3" (REWRITE "even_or_odd") (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "sin_term_nonzero" ("a" "a!1" "n" "n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|sin_term_zero| FORMULA-DECL NIL |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_term_nonzero| FORMULA-DECL NIL |trig_approx| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|sin_term_gt0| FORMULA-DECL NIL |trig_approx| NIL)) SHOSTAK)) (|sin_tends_to_0| 0 (|sin_tends_to_0-2| "" 3790092328 ("" (SKOSIMP) (("" (CASE-REPLACE "a!1=0") (("1" (HIDE -1) (("1" (EXPAND "tends_to_0?") (("1" (SKOSIMP) (("1" (INST + "0") (("1" (SKOSIMP) (("1" (EXPAND "sin_term") (("1" (EXPAND "^" 1 2) (("1" (ASSERT) (("1" (EXPAND "expt" 1) (("1" (REWRITE "abs_div") (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "exp_tends_to_0" ("n0a" "a!1")) (("1" (EXPAND "exp_term") (("1" (EXPAND "sin_term") (("1" (EXPAND "tends_to_0?") (("1" (SKOSIMP*) (("1" (INST - "epsilon!1") (("1" (SKOSIMP) (("1" (INST + "1+2*n!1") (("1" (SKOSIMP) (("1" (INST - "1+2*i!1") (("1" (ASSERT) (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs((-1) ^ i!1) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 =1") (("1" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|tends_to_0?| CONST-DECL "bool" |exp_term| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nnrat_exp| APPLICATION-JUDGEMENT "nnrat" |exponentiation| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|rat_abs_is_nonneg| APPLICATION-JUDGEMENT "{r: nonneg_rat | r >= q}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|exp_term| CONST-DECL "real" |exp_term| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|exp_tends_to_0| FORMULA-DECL NIL |exp_term| NIL)) SHOSTAK) (|sin_tends_to_0-1| |nil| 3320988819 ("" (SKOSIMP) (("" (CASE-REPLACE "a!1=0") (("1" (HIDE -1) (("1" (EXPAND "tends_to_0?") (("1" (SKOSIMP) (("1" (INST + "0") (("1" (SKOSIMP) (("1" (EXPAND "sin_term") (("1" (EXPAND "^" 1 2) (("1" (ASSERT) (("1" (EXPAND "expt" 1) (("1" (REWRITE "abs_div") (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "exp_tends_to_0" ("n0a" "a!1")) (("1" (EXPAND "exp_term") (("1" (EXPAND "sin_term") (("1" (EXPAND "tends_to_0?") (("1" (SKOSIMP*) (("1" (INST - "epsilon!1") (("1" (SKOSIMP) (("1" (INST + "1+2*n!1") (("1" (SKOSIMP) (("1" (INST - "1+2*i!1") (("1" (ASSERT) (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (CASE-REPLACE "abs((-1) ^ i!1) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 =1") (("1" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_x1") (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_term_TCC1| 0 (|cos_term_TCC1-1| |nil| 3320763259 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|cos_term| SUBTYPE "(number_fields.*(2, trig_approx.n))" "{i: integers.int | booleans.OR(trig_approx.a /= 0, reals.>=(i, 0))}"))) (|cos_term_next| 0 (|cos_term_next-2| "" 3790092329 ("" (SKOSIMP*) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "expt_plus" 2) (("2" (NAME-REPLACE "S" "(-1)^n!1") (("2" (EXPAND "factorial" 2 1) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 1) (("2" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" 3) (("2" (TYPEPRED "factorial(2*n!1)") (("2" (NAME-REPLACE "F" "factorial(2*n!1)") (("2" (EXPAND "^" 3 1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "cross_mult") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK) (|cos_term_next-1| |nil| 3320770358 ("" (SKOSIMP*) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "expt_plus" 2) (("2" (NAME-REPLACE "S" "(-1)^n!1") (("2" (REWRITE "expt_x1") (("2" (EXPAND "factorial" 2 1) (("2" (EXPAND "factorial" 2 2) (("2" (EXPAND "factorial" 2 1) (("2" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "expt_plus" 3) (("2" (TYPEPRED "factorial(2*n!1)") (("2" (NAME-REPLACE "F" "factorial(2*n!1)") (("2" (EXPAND "^" 3 1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "cross_mult") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_term_neg| 0 (|cos_term_neg-2| "" 3744227010 ("" (EXPAND "cos_term") (("" (SKOSIMP) (("" (CASE-REPLACE "n!1=0") (("" (ASSERT) (("" (CASE-REPLACE "a!1=0") (("" (LEMMA "expt_times" ("i" "2" "j" "n!1")) (("" (INST-CP - "a!1") (("" (INST - "-a!1") (("" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK) (|cos_term_neg-1| |nil| 3320922908 ("" (EXPAND "cos_term") (("" (SKOSIMP) (("" (CASE-REPLACE "n!1=0") (("" (ASSERT) (("" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "expt_times" ("i" "2" "j" "n!1")) (("2" (INST-CP - "a!1") (("2" (INST - "-a!1") (("2" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|cos_terms_alternate| 0 (|cos_terms_alternate-2| "" 3790092330 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (CASE "a!1^2>0") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" 3 2) (("2" (EXPAND "expt" 3 2) (("2" (EXPAND "expt" 3 1) (("2" (NAME-REPLACE "S" "expt((-1), n!1) * expt(a!1, (2 * n!1))") (("2" (CASE "a!1*a!1>0") (("1" (ASSERT) (("1" (REWRITE "div_mult_pos_gt1" 3) (("1" (REWRITE "div_mult_pos_lt1" 3) (("1" (REWRITE "zero_times1") (("1" (LEMMA "trichotomy" ("x" "S")) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "S" "x" "-1*(a!1*a!1)" "y" "0")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "S" -1) (("2" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("2" (LEMMA "expt_nonzero" ("n0x" "a!1" "i" "2*n!1")) (("2" (EXPAND "^") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "S" "x" "-1*(a!1*a!1)" "y" "0")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (S SKOLEM-CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|cos_terms_alternate-1| |nil| 3320771767 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (CASE "a!1^2>0") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" 3 2) (("2" (EXPAND "expt" 3 2) (("2" (EXPAND "expt" 3 1) (("2" (NAME-REPLACE "S" "expt((-1), n!1) * expt(a!1, (2 * n!1))") (("2" (CASE "a!1*a!1>0") (("1" (ASSERT) (("1" (REWRITE "div_mult_pos_gt1" 3) (("1" (REWRITE "div_mult_pos_lt1" 3) (("1" (REWRITE "zero_times1") (("1" (LEMMA "trichotomy" ("x" "S")) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "S" "x" "-1*(a!1*a!1)" "y" "0")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "S" -1) (("2" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("2" (LEMMA "expt_nonzero" ("n0x" "a!1" "i" "2*n!1")) (("2" (EXPAND "^") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "S" "x" "-1*(a!1*a!1)" "y" "0")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 4) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "a!1" "x" "0" "y" "a!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_term_nonzero| 0 (|cos_term_nonzero-2| "" 3790092331 ("" (SKOSIMP) (("" (SPLIT) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (EXPAND "cos_term") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACE -1) (("1" (EXPAND "cos_term") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "cos_term") (("2" (CASE-REPLACE "n!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "expt_nonzero" ("n0x" "a!1" "i" "2*n!1")) (("2" (ASSERT) (("2" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("2" (LEMMA "div_cancel3" ("x" "(-1) ^ n!1 * a!1 ^ (2 * n!1)" "n0z" "factorial(2 * n!1)" "y" "0")) (("2" (REPLACE -1 -5) (("2" (HIDE -1) (("2" (REWRITE "zero_times3" -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|zero_times3| FORMULA-DECL NIL |real_props| NIL) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|cos_term_nonzero-1| |nil| 3320924341 ("" (SKOSIMP) (("" (SPLIT) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (EXPAND "cos_term") (("1" (ASSERT) (("1" (EXPAND "^" 1) (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACE -1) (("1" (EXPAND "cos_term") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "cos_term") (("2" (CASE-REPLACE "n!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "expt_nonzero" ("n0x" "a!1" "i" "2*n!1")) (("2" (ASSERT) (("2" (LEMMA "expt_nonzero" ("n0x" "-1" "i" "n!1")) (("2" (LEMMA "div_cancel3" ("x" "(-1) ^ n!1 * a!1 ^ (2 * n!1)" "n0z" "factorial(2 * n!1)" "y" "0")) (("2" (REPLACE -1 -5) (("2" (HIDE -1) (("2" (REWRITE "zero_times3" -4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_term_zero| 0 (|cos_term_zero-1| |nil| 3320924852 ("" (SKOSIMP) (("" (LEMMA "cos_term_nonzero" ("a" "a!1" "n" "n!1")) (("" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_term_nonzero| FORMULA-DECL NIL |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|cos_term_gt0| 0 (|cos_term_gt0-2| "" 3790092331 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (REWRITE "div_mult_pos_gt1") (("2" (REWRITE "zero_times1") (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND ">") (("1" (REWRITE "pos_times_lt" -1) (("1" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "a!1^2 > 0") (("1" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (REWRITE "expt_times") (("1" (ASSERT) (("1" (HIDE -1 -2 1) (("1" (REWRITE "even_or_odd" 1) (("1" (EXPAND "odd?") (("1" (SKOSIMP) (("1" (REPLACE -2) (("1" (HIDE -2 1) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_times") (("1" (CASE-REPLACE "(-1) ^ 2 = 1") (("1" (REWRITE "expt_1i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "(-1)^n!1=1") (("1" (REWRITE "expt_times") (("1" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "even?") (("2" (SKOSIMP) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (REWRITE "expt_times") (("2" (CASE-REPLACE "(-1)^2 =1") (("1" (REWRITE "expt_1i") NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_term| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|cos_term_gt0-1| |nil| 3320925011 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (REWRITE "div_mult_pos_gt1") (("2" (REWRITE "zero_times1") (("2" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND ">") (("1" (REWRITE "pos_times_lt" -1) (("1" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "a!1^2 > 0") (("1" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (REWRITE "expt_times") (("1" (ASSERT) (("1" (HIDE -1 -2 1) (("1" (REWRITE "even_or_odd" 1) (("1" (EXPAND "odd?") (("1" (SKOSIMP) (("1" (REPLACE -2) (("1" (HIDE -2 1) (("1" (REWRITE "expt_plus") (("1" (REWRITE "expt_times") (("1" (REWRITE "expt_x1") (("1" (CASE-REPLACE "(-1) ^ 2 = 1") (("1" (REWRITE "expt_1i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE-REPLACE "(-1)^n!1=1") (("1" (REWRITE "expt_times") (("1" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "trichotomy" ("x" "a!1")) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "even?") (("2" (SKOSIMP) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (REWRITE "expt_times") (("2" (CASE-REPLACE "(-1)^2 =1") (("1" (REWRITE "expt_1i") NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_term_lt0| 0 (|cos_term_lt0-2| "" 3790092332 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "a!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "(-1) ^ n!1 < 0 IFF odd?(n!1)") (("1" (LEMMA "both_sides_times_pos_lt1" ("x" "(-1) ^ n!1" "pz" "a!1 ^ (2 * n!1) / factorial(2 * n!1)" "y" "0")) (("1" (REPLACE -2 -1) (("1" (REWRITE "zero_times1") (("1" (ASSERT) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a!1^2>0") (("1" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (REWRITE "expt_times" 1) (("1" (ASSERT) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "(a!1 ^ 2) ^ n!1" "py" "factorial(2 * n!1)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall (n:nat): (-1)^(2*n) = 1") (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "even_or_odd") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus" 1) (("2" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (REWRITE "expt_times") (("2" (EXPAND "^" 1 1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_term| CONST-DECL "real" |trig_approx| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|j!1| SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|j!1| SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|cos_term_lt0-1| |nil| 3320926707 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (ASSERT) (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE-REPLACE "a!1=0") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "(-1) ^ n!1 < 0 IFF odd?(n!1)") (("1" (LEMMA "both_sides_times_pos_lt1" ("x" "(-1) ^ n!1" "pz" "a!1 ^ (2 * n!1) / factorial(2 * n!1)" "y" "0")) (("1" (REPLACE -2 -1) (("1" (REWRITE "zero_times1") (("1" (ASSERT) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "a!1^2>0") (("1" (LEMMA "expt_pos" ("px" "a!1^2" "i" "n!1")) (("1" (REWRITE "expt_times" 1) (("1" (ASSERT) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "(a!1 ^ 2) ^ n!1" "py" "factorial(2 * n!1)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (LEMMA "pos_times_lt" ("x" "a!1" "y" "a!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "forall (n:nat): (-1)^(2*n) = 1") (("1" (SPLIT) (("1" (FLATTEN) (("1" (LEMMA "even_or_odd") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (HIDE 1) (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus" 1) (("2" (REWRITE "expt_x1" 1) (("2" (INST - "j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (REWRITE "expt_times") (("2" (EXPAND "^" 1 1) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_tends_to_0| 0 (|cos_tends_to_0-2| "" 3790092333 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (LEMMA "exp_tends_to_0" ("n0a" "n0x!1")) (("" (EXPAND "exp_term") (("" (EXPAND "tends_to_0?") (("" (SKOSIMP*) (("" (INST - "epsilon!1") (("" (SKOSIMP) (("" (INST + "2*n!1") (("" (SKOSIMP) (("" (INST - "2*i!1") (("" (ASSERT) (("" (CASE-REPLACE "i!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (REWRITE "abs_div") (("2" (REWRITE "abs_div") (("2" (REWRITE "abs_mult") (("2" (CASE-REPLACE "abs((-1) ^ i!1) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 = 1") (("1" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_term| CONST-DECL "real" |trig_approx| NIL) (|exp_term| CONST-DECL "real" |exp_term| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|tends_to_0?| CONST-DECL "bool" |exp_term| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|exp_tends_to_0| FORMULA-DECL NIL |exp_term| NIL)) SHOSTAK) (|cos_tends_to_0-1| |nil| 3320988406 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (LEMMA "exp_tends_to_0" ("n0a" "n0x!1")) (("" (EXPAND "exp_term") (("" (EXPAND "tends_to_0?") (("" (SKOSIMP*) (("" (INST - "epsilon!1") (("" (SKOSIMP) (("" (INST + "2*n!1") (("" (SKOSIMP) (("" (INST - "2*i!1") (("" (ASSERT) (("" (CASE-REPLACE "i!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (REWRITE "abs_div") (("2" (REWRITE "abs_div") (("2" (REWRITE "abs_mult") (("2" (CASE-REPLACE "abs((-1) ^ i!1) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 = 1") (("1" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_x1") (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_term_deriv| 0 (|sin_term_deriv-3| "" 3790092334 ("" (SKOSIMP) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "deriv_id_fun[real]") (("" (EXPAND "I") (("" (EXPAND "sin_term") (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (REWRITE "expt_x0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "deriv_exp_fun[real]" ("f" "LAMBDA (x: real): x" "n" "2*n!1+1")) (("2" (ASSERT) (("2" (EXPAND "^" -1) (("2" (FLATTEN) (("2" (LEMMA "scal_derivable_fun[real]" ("f" "LAMBDA (t: real): t ^ (1 + 2 * n!1)" "b" "(-1) ^ n!1 / factorial(1 + 2 * n!1)")) (("2" (ASSERT) (("2" (LEMMA "deriv_scal_fun[real]" ("ff" "LAMBDA (t: real): t ^ (1 + 2 * n!1)" "b" "(-1) ^ n!1 / factorial(1 + 2 * n!1)")) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (EXPAND "*") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (NAME-REPLACE "X" "x!1 ^ (2 * n!1)") (("2" (NAME-REPLACE "S" "(-1) ^ n!1") (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (ASSERT) (("2" (TYPEPRED "factorial(2*n!1)") (("2" (NAME-REPLACE "F" "factorial(2 * n!1)") (("2" (LEMMA "div_cancel1") (("2" (INST - "2*n!1+1" "S*X/F") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|deriv_exp_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|scal_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_scal_fun| FORMULA-DECL NIL |derivatives| |analysis|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|)) SHOSTAK) (|sin_term_deriv-2| |nil| 3346173169 ("" (SKOSIMP) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "deriv_id_fun[real]") (("" (EXPAND "I") (("" (EXPAND "const_fun") (("" (EXPAND "sin_term") (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (REWRITE "expt_x0") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_exp_fun[real]" ("f" "LAMBDA (x: real): x" "n" "2*n!1+1")) (("2" (ASSERT) (("2" (EXPAND "^" -1) (("2" (FLATTEN) (("2" (LEMMA "scal_derivable_fun[real]" ("f" "LAMBDA (t: real): t ^ (1 + 2 * n!1)" "b" "(-1) ^ n!1 / factorial(1 + 2 * n!1)")) (("2" (ASSERT) (("2" (LEMMA "deriv_scal_fun[real]" ("ff" "LAMBDA (t: real): t ^ (1 + 2 * n!1)" "b" "(-1) ^ n!1 / factorial(1 + 2 * n!1)")) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (EXPAND "*") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (NAME-REPLACE "X" "x!1 ^ (2 * n!1)") (("2" (NAME-REPLACE "S" "(-1) ^ n!1") (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (ASSERT) (("2" (TYPEPRED "factorial(2*n!1)") (("2" (NAME-REPLACE "F" "factorial(2 * n!1)") (("2" (LEMMA "div_cancel1") (("2" (INST - "2*n!1+1" "S*X/F") (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE "div_div2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|sin_term_deriv-1| |nil| 3320765733 ("" (SKOSIMP) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "deriv_id_fun[real]") (("" (EXPAND "I") (("" (EXPAND "const_fun") (("" (EXPAND "sin_term") (("" (EXPAND "cos_term") (("" (CASE-REPLACE "n!1=0") (("1" (REWRITE "expt_x0") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_exp_fun" ("f" "LAMBDA (x: real): x" "n" "2*n!1+1")) (("2" (ASSERT) (("2" (EXPAND "^" -1) (("2" (FLATTEN) (("2" (LEMMA "scal_derivable_fun[real]" ("f" "LAMBDA (t: real): t ^ (1 + 2 * n!1)" "b" "(-1) ^ n!1 / factorial(1 + 2 * n!1)")) (("2" (ASSERT) (("2" (LEMMA "deriv_scal_fun[real]" ("ff" "LAMBDA (t: real): t ^ (1 + 2 * n!1)" "b" "(-1) ^ n!1 / factorial(1 + 2 * n!1)")) (("2" (REPLACE -5) (("2" (ASSERT) (("2" (EXPAND "*") (("2" (REPLACE -4) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("2" (NAME-REPLACE "X" "x!1 ^ (2 * n!1)") (("2" (NAME-REPLACE "S" "(-1) ^ n!1") (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (ASSERT) (("2" (TYPEPRED "factorial(2*n!1)") (("2" (NAME-REPLACE "F" "factorial(2 * n!1)") (("2" (LEMMA "div_cancel1") (("2" (INST - "2*n!1+1" "S*X/F") (("2" (ASSERT) (("2" (ASSERT) (("2" (REWRITE "div_div2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_term_deriv_TCC1| 0 (|cos_term_deriv_TCC1-1| |nil| 3320765601 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|cos_term_deriv| SUBTYPE "(number_fields.-)(trig_approx.n, 1)" "nat"))) (|cos_term_deriv| 0 (|cos_term_deriv-2| "" 3790092335 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (EXPAND "sin_term") (("" (CASE-REPLACE "n!1=0") (("1" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("1" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "identity_derivable_fun[real]") (("2" (LEMMA "deriv_id_fun[real]") (("2" (EXPAND "I") (("2" (LEMMA "deriv_exp_fun[real]" ("f" "LAMBDA (x: real): x" "n" "2*n!1")) (("2" (ASSERT) (("2" (EXPAND "^" -1) (("2" (FLATTEN) (("2" (LEMMA "scal_derivable_fun[real]" ("f" "LAMBDA (t: real): t ^ (2 * n!1)" "b" "(-1)^n!1/factorial(2 * n!1)")) (("2" (LEMMA "deriv_scal_fun[real]" ("ff" "LAMBDA (t: real): t ^ (2 * n!1)" "b" "(-1)^n!1/factorial(2 * n!1)")) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (REPLACE -4) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (1 2)) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (NAME-REPLACE "X" "x!1 ^ (2 * n!1 - 1)") (("1" (EXPAND "^") (("1" (EXPAND "expt" 1 1) (("1" (NAME-REPLACE "S" "expt((-1), n!1 - 1)") (("1" (EXPAND "factorial" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_term| CONST-DECL "real" |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|const_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_scal_fun| FORMULA-DECL NIL |derivatives| |analysis|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|scal_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_exp_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|cos_term_deriv-1| |nil| 3320767680 ("" (SKOSIMP) (("" (EXPAND "cos_term") (("" (EXPAND "sin_term") (("" (CASE-REPLACE "n!1=0") (("1" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("1" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("1" (EXPAND "const_fun") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "identity_derivable_fun[real]") (("2" (LEMMA "deriv_id_fun[real]") (("2" (EXPAND "I") (("2" (EXPAND "const_fun") (("2" (LEMMA "deriv_exp_fun[real]" ("f" "LAMBDA (x: real): x" "n" "2*n!1")) (("2" (ASSERT) (("2" (EXPAND "^" -1) (("2" (FLATTEN) (("2" (LEMMA "scal_derivable_fun[real]" ("f" "LAMBDA (t: real): t ^ (2 * n!1)" "b" "(-1)^n!1/factorial(2 * n!1)")) (("2" (LEMMA "deriv_scal_fun[real]" ("ff" "LAMBDA (t: real): t ^ (2 * n!1)" "b" "(-1)^n!1/factorial(2 * n!1)")) (("1" (REPLACE -5) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (REPLACE -4) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT (1 2)) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (NAME-REPLACE "X" "x!1 ^ (2 * n!1 - 1)") (("1" (EXPAND "^") (("1" (EXPAND "expt" 1 1) (("1" (NAME-REPLACE "S" "expt((-1), n!1 - 1)") (("1" (EXPAND "factorial" 1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_approx_a0| 0 (|sin_approx_a0-2| "" 3790092335 ("" (EXPAND "sin_approx") (("" (EXPAND "sin_term") (("" (EXPAND "^" 1 2) (("" (EXPAND "expt") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK) (|sin_approx_a0-1| |nil| 3321006684 ("" (EXPAND "sin_approx") (("" (EXPAND "sin_term") (("" (EXPAND "^" 1 2) (("" (EXPAND "expt") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_approx_neg| 0 (|sin_approx_neg-2| "" 3790092339 ("" (EXPAND "sin_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sin_term") (("1" (SKOSIMP) (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (INST - "a!1") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (HIDE -1) (("2" (EXPAND "sin_term") (("2" (ASSERT) (("2" (CASE-REPLACE "(-a!1) ^ (3 + 2 * j!1) = - a!1 ^ (3 + 2 * j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "expt_plus" ("i" "1" "j" "2*j!1+2")) (("2" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^" 1) (("1" (EXPAND "expt" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST-CP - "-a!1") (("1" (INST - "a!1") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (LEMMA "expt_times" ("i" "2" "j" "1+j!1")) (("1" (INST-CP - "a!1") (("1" (INST - "-a!1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|factorial_1| FORMULA-DECL NIL |factorial| |ints|) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|a!1| SKOLEM-CONST-DECL "real" |trig_approx| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|sin_approx_neg-1| |nil| 3320921408 ("" (EXPAND "sin_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sin_term") (("1" (SKOSIMP) (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (ASSERT) (("1" (EXPAND "sigma") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (INST - "a!1") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (HIDE -1) (("2" (EXPAND "sin_term") (("2" (ASSERT) (("2" (CASE-REPLACE "(-a!1) ^ (3 + 2 * j!1) = - a!1 ^ (3 + 2 * j!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "expt_plus" ("i" "1" "j" "2*j!1+2")) (("2" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^" 1) (("1" (EXPAND "expt" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST-CP - "-a!1") (("1" (INST - "a!1") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (HIDE -1 -2) (("1" (LEMMA "expt_times" ("i" "2" "j" "1+j!1")) (("1" (INST-CP - "a!1") (("1" (INST - "-a!1") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_approx_next| 0 (|sin_approx_next-1| |nil| 3320919641 ("" (SKOSIMP) (("" (EXPAND "sin_approx") (("" (EXPAND "sigma" 1 1) (("" (EXPAND "sigma" 1 1) (("" (EXPAND "sin_term") (("" (EXPAND "^") (("" (EXPAND "expt" 1 1) (("" (NAME-REPLACE "S" "expt((-1), 1 + n!1)") (("" (EXPAND "expt" 1 1) (("" (EXPAND "expt" 1 1) (("" (NAME-REPLACE "AA" "expt(a!1, 3 + 2 * n!1)") (("" (REWRITE "div_times") (("" (ASSERT) (("" (EXPAND "factorial" 1 1) (("" (EXPAND "factorial" 1 2) (("" (EXPAND "factorial" 1 1) (("" (NAME-REPLACE "DRL100" "(20 * factorial(3 + 2 * n!1) +
            18 * (factorial(3 + 2 * n!1) * n!1)
            + 4 * (factorial(3 + 2 * n!1) * n!1 * n!1))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|)) SHOSTAK)) (|sin_approx_eq| 0 (|sin_approx_eq-1| |nil| 3321006162 ("" (SKOSIMP) (("" (LEMMA "sin_approx_next" ("a" "a!1" "n" "n!1")) (("" (REPLACE -2) (("" (LEMMA "div_simp" ("n0x" "(2 * n!1 + 5) * (2 * n!1 + 4)")) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_simp| FORMULA-DECL NIL |real_props| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|sin_approx_sin| 0 (|sin_approx_sin-3| "" 3790092342 ("" (SKOSIMP) (("" (LEMMA "sin_series" ("x" "a!1" "n" "n!1")) (("" (EXPAND "sin_term") (("" (CASE "forall (n:nat): sin_series_n(a!1, n) = sin_approx(a!1, n)") (("1" (INST - "n!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" 1 4) (("1" (CASE-REPLACE "abs((-1) ^ (1 + n!1)) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 =1") (("1" (CASE "even?(1+n!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sin_series_n") (("2" (EXPAND "sin_approx") (("2" (EXPAND "sin_term") (("2" (EXPAND "sin_series_term") (("2" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "sigma_rew" 1) (("2" (SWAP-REL 1) (("2" (REWRITE "sigma_rew" 1) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "sigma_eq" ("low" "0" "high" "j!1" "F" "LAMBDA (i: nat):
                     IF i > 1 + j!1 THEN 0
                     ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
                     ENDIF" "G" "LAMBDA (i: nat):
                      IF i > j!1 THEN 0
                      ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
                      ENDIF")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_series| FORMULA-DECL NIL |sincos| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|sin_series_n| CONST-DECL "real" |sincos| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sigma_rew| FORMULA-DECL NIL |sigma| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sin_series_term| CONST-DECL "[nat -> real]" |sincos| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL)) SHOSTAK) (|sin_approx_sin-2| |nil| 3403526502 ("" (SKOSIMP) (("" (LEMMA "sin_series" ("x" "a!1" "n" "n!1")) (("" (EXPAND "sin_term") (("" (CASE "forall (n:nat): sin_series_n(a!1, n) = sin_approx(a!1, n)") (("1" (INST - "n!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" 1 4) (("1" (CASE-REPLACE "abs((-1) ^ (1 + n!1)) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 =1") (("1" (CASE "even?(1+n!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (REWRITE "expt_x1") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sin_series_n") (("2" (EXPAND "sin_approx") (("2" (EXPAND "sin_term") (("2" (EXPAND "sin_series_term") (("2" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REWRITE "sigma_rew" 1) (("2" (SWAP-REL 1) (("2" (REWRITE "sigma_rew" 1) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "sigma_eq" ("low" "0" "high" "j!1" "F" "LAMBDA (i: nat):
                     IF i > 1 + j!1 THEN 0
                     ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
                     ENDIF" "G" "LAMBDA (i: nat):
                      IF i > j!1 THEN 0
                      ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
                      ENDIF")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|sin_approx_sin-1| |nil| 3320991568 ("" (SKOSIMP) (("" (LEMMA "sin_series" ("x" "a!1" "n" "n!1")) (("" (EXPAND "sin_term") (("" (CASE "forall (n:nat): sin_series_n(a!1, n) = sin_approx(a!1, n)") (("1" (INST - "n!1") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" 1 4) (("1" (CASE-REPLACE "abs((-1) ^ (1 + n!1)) = 1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2 =1") (("1" (CASE "even?(1+n!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (REWRITE "expt_x1") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sin_series_n") (("2" (EXPAND "sin_approx") (("2" (EXPAND "sin_term") (("2" (EXPAND "sin_series_term") (("2" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "sigma_eq" ("low" "0" "high" "j!1" "F" "LAMBDA (i: nat):
              IF i > 1 + j!1 THEN 0
              ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
              ENDIF" "G" "LAMBDA (i: nat):
               IF i > j!1 THEN 0
               ELSE ((-1) ^ i * a!1 ^ (1 + 2 * i)) / factorial(1 + 2 * i)
               ENDIF")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL) SHOSTAK)) (|cos_approx_a0| 0 (|cos_approx_a0-1| |nil| 3321006785 ("" (EXPAND "cos_approx") (("" (EXPAND "cos_term") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (EXPAND "^" 1 4) (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_term| CONST-DECL "real" |trig_approx| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|hat_02n| FORMULA-DECL NIL |power_series| |series|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK)) (|cos_approx_neg| 0 (|cos_approx_neg-2| "" 3744227310 ("" (EXPAND "cos_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (SKOSIMP*) (("1" (EXPAND "sigma" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (INST - "a!1") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (HIDE -1) (("2" (EXPAND "cos_term") (("2" (CASE-REPLACE "a!1=0") (("2" (LEMMA "expt_times" ("i" "2" "j" "1+j!1")) (("2" (INST-CP - "a!1") (("2" (INST - "-a!1") (("2" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK) (|cos_approx_neg-1| |nil| 3320922036 ("" (EXPAND "cos_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (SKOSIMP*) (("1" (EXPAND "sigma" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (INST - "a!1") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (HIDE -1) (("2" (EXPAND "cos_term") (("2" (CASE-REPLACE "a!1=0") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "expt_times" ("i" "2" "j" "1+j!1")) (("2" (INST-CP - "a!1") (("2" (INST - "-a!1") (("2" (CASE-REPLACE "(-a!1) ^ 2 = a!1 ^ 2") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL) SHOSTAK)) (|cos_approx_cos| 0 (|cos_approx_cos-2| "" 3790092344 ("" (SKOSIMP) (("" (LEMMA "cos_series" ("x" "a!1" "n" "n!1")) (("" (EXPAND "cos_term") (("" (REWRITE "abs_div") (("" (EXPAND "abs" 1 3) (("" (REWRITE "abs_mult") (("" (CASE-REPLACE "abs((-1)^(1+n!1))=1") (("1" (CASE "forall (n:nat): cos_series_n(a!1, n) = cos_approx(a!1, n)") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "cos_approx") (("2" (EXPAND "cos_series_n") (("2" (EXPAND "cos_series_term") (("2" (EXPAND "cos_term") (("2" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "sigma_eq" ("low" "0" "high" "j!1" "F" "LAMBDA (i: nat):
              IF i > 1 + j!1 THEN 0
              ELSE IF i = 0 THEN 1
                   ELSE (-1) ^ i * a!1 ^ (2 * i) / factorial(2 * i)
                   ENDIF
              ENDIF" "G" "LAMBDA (i: nat):
               IF i > j!1 THEN 0
               ELSE IF i = 0 THEN 1
                    ELSE (-1) ^ i * a!1 ^ (2 * i) / factorial(2 * i)
                    ENDIF
               ENDIF")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2=1") (("1" (CASE "even?(1+n!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_series| FORMULA-DECL NIL |sincos| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|cos_series_n| CONST-DECL "real" |sincos| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_series_term| CONST-DECL "[nat -> real]" |sincos| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL)) SHOSTAK) (|cos_approx_cos-1| |nil| 3320992237 ("" (SKOSIMP) (("" (LEMMA "cos_series" ("x" "a!1" "n" "n!1")) (("" (EXPAND "cos_term") (("" (REWRITE "abs_div") (("" (EXPAND "abs" 1 3) (("" (REWRITE "abs_mult") (("" (CASE-REPLACE "abs((-1)^(1+n!1))=1") (("1" (CASE "forall (n:nat): cos_series_n(a!1, n) = cos_approx(a!1, n)") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "cos_approx") (("2" (EXPAND "cos_series_n") (("2" (EXPAND "cos_series_term") (("2" (EXPAND "cos_term") (("2" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "sigma" 1) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "sigma_eq" ("low" "0" "high" "j!1" "F" "LAMBDA (i: nat):
              IF i > 1 + j!1 THEN 0
              ELSE IF i = 0 THEN 1
                   ELSE (-1) ^ i * a!1 ^ (2 * i) / factorial(2 * i)
                   ENDIF
              ENDIF" "G" "LAMBDA (i: nat):
               IF i > j!1 THEN 0
               ELSE IF i = 0 THEN 1
                    ELSE (-1) ^ i * a!1 ^ (2 * i) / factorial(2 * i)
                    ENDIF
               ENDIF")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "(-1)^2=1") (("1" (CASE "even?(1+n!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP) (("1" (REPLACE -1) (("1" (REWRITE "expt_times") (("1" (REPLACE -2) (("1" (REWRITE "expt_1i") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOSIMP*) (("2" (REPLACE -1) (("2" (REWRITE "expt_plus") (("2" (REWRITE "expt_times") (("2" (REWRITE "expt_x1") (("2" (REPLACE -2) (("2" (REWRITE "expt_1i") (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_approx_next| 0 (|cos_approx_next-1| |nil| 3320919986 ("" (SKOSIMP) (("" (EXPAND "cos_approx") (("" (EXPAND "sigma" 1 1) (("" (EXPAND "sigma" 1 1) (("" (EXPAND "cos_term") (("" (EXPAND "^") (("" (EXPAND "expt" 1 1) (("" (NAME-REPLACE "S" "expt((-1), 1 + n!1)") (("" (EXPAND "expt" 1 1) (("" (EXPAND "expt" 1 1) (("" (NAME-REPLACE "AA" "expt(a!1, 2 + 2 * n!1)") (("" (EXPAND "factorial" 1 1) (("" (EXPAND "factorial" 1 2) (("" (EXPAND "factorial" 1 1) (("" (REWRITE "div_times") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|)) SHOSTAK)) (|cos_approx_eq| 0 (|cos_approx_eq-1| |nil| 3321006042 ("" (SKOSIMP*) (("" (LEMMA "cos_approx_next" ("a" "a!1" "n" "n!1")) (("" (REPLACE -2 -1) (("" (LEMMA "div_simp" ("n0x" "(2 * n!1 + 4) * (2 * n!1 + 3)")) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_simp| FORMULA-DECL NIL |real_props| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|sin_approx_deriv| 0 (|sin_approx_deriv-1| |nil| 3320763896 ("" (EXPAND "sin_approx") (("" (EXPAND "cos_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (LEMMA "sin_term_deriv" ("n" "0")) (("1" (FLATTEN) (("1" (LEMMA "sin_term_deriv" ("n" "0")) (("1" (FLATTEN) (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_term_deriv" ("n" "0")) (("2" (FLATTEN) (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP) (("3" (EXPAND "sigma" 1) (("3" (LEMMA "sin_term_deriv" ("n" "1+j!1")) (("3" (FLATTEN) (("3" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA a: sin_term(a)(1 + j!1)" "f2" "LAMBDA a: sigma(0, j!1, sin_term(a))")) (("3" (ASSERT) (("3" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA a: sin_term(a)(1 + j!1)" "ff2" "LAMBDA a: sigma(0, j!1, sin_term(a))")) (("3" (REPLACE -4) (("3" (REPLACE -6) (("3" (EXPAND "+") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_approx| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|sin_term_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|cos_approx_deriv_TCC1| 0 (|cos_approx_deriv_TCC1-1| |nil| 3320763874 ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|cos_approx_deriv| SUBTYPE "(number_fields.-)(trig_approx.n, 1)" "nat"))) (|cos_approx_deriv| 0 (|cos_approx_deriv-2| "" 3790092347 ("" (EXPAND "cos_approx") (("" (EXPAND "sin_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("2" (EXPAND "sigma") (("2" (EXPAND "cos_term") (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (CASE-REPLACE "j!1=0") (("1" (ASSERT) (("1" (EXPAND "sigma" 1) (("1" (LEMMA "cos_term_deriv" ("n" "1")) (("1" (FLATTEN) (("1" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA a: cos_term(a)(1)" "f2" "LAMBDA a: sigma(0, 0, cos_term(a))")) (("1" (ASSERT) (("1" (EXPAND "+") (("1" (ASSERT) (("1" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA a: cos_term(a)(1)" "ff2" "LAMBDA a: sigma(0, 0, cos_term(a))")) (("1" (REPLACE -7) (("1" (REPLACE -4) (("1" (EXPAND "+") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma" 2) (("2" (LEMMA "cos_term_deriv" ("n" "1+j!1")) (("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA a: cos_term(a)(1 + j!1)" "f2" "LAMBDA a: sigma(0, j!1, cos_term(a))")) (("2" (ASSERT) (("2" (EXPAND "+") (("2" (ASSERT) (("2" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA a: cos_term(a)(1+j!1)" "ff2" "LAMBDA a: sigma(0, j!1, cos_term(a))")) (("2" (REPLACE -4) (("2" (REPLACE -6) (("2" (EXPAND "+") (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_term_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|const_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|cos_approx_deriv-1| |nil| 3320768203 ("" (EXPAND "cos_approx") (("" (EXPAND "sin_approx") (("" (INDUCT "n") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("2" (EXPAND "sigma") (("2" (EXPAND "cos_term") (("2" (EXPAND "sigma") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (CASE-REPLACE "j!1=0") (("1" (ASSERT) (("1" (EXPAND "sigma" 1) (("1" (LEMMA "cos_term_deriv" ("n" "1")) (("1" (FLATTEN) (("1" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA a: cos_term(a)(1)" "f2" "LAMBDA a: sigma(0, 0, cos_term(a))")) (("1" (ASSERT) (("1" (EXPAND "+") (("1" (ASSERT) (("1" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA a: cos_term(a)(1)" "ff2" "LAMBDA a: sigma(0, 0, cos_term(a))")) (("1" (REPLACE -7) (("1" (REPLACE -4) (("1" (EXPAND "+") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sigma" 2) (("2" (LEMMA "cos_term_deriv" ("n" "1+j!1")) (("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA a: cos_term(a)(1 + j!1)" "f2" "LAMBDA a: sigma(0, j!1, cos_term(a))")) (("2" (ASSERT) (("2" (EXPAND "+") (("2" (ASSERT) (("2" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA a: cos_term(a)(1+j!1)" "ff2" "LAMBDA a: sigma(0, j!1, cos_term(a))")) (("2" (REPLACE -4) (("2" (REPLACE -6) (("2" (EXPAND "+") (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (APPLY-EXTENSIONALITY 2 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOSIMP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_lb_neg| 0 (|sin_lb_neg-2| "" 3790092347 ("" (EXPAND "sin_lb") (("" (EXPAND "sin_ub") (("" (SKOSIMP) (("" (LEMMA "trichotomy" ("x" "a!1")) (("" (SPLIT -1) (("1" (ASSERT) (("1" (REWRITE "sin_approx_neg") NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (REWRITE "sin_approx_a0") (("2" (REWRITE "sin_approx_a0") NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REWRITE "sin_approx_neg") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|sin_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|sin_approx_neg| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK) (|sin_lb_neg-1| |nil| 3321098562 ("" (EXPAND "sin_lb") (("" (EXPAND "sin_ub") (("" (SKOSIMP) (("" (LEMMA "trichotomy" ("x" "a!1")) (("" (SPLIT -1) (("1" (ASSERT) (("1" (REWRITE "sin_approx_neg") NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) (("2" (REWRITE "sin_approx_a0") (("2" (REWRITE "sin_approx_a0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REWRITE "sin_approx_neg") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_ub_neg| 0 (|sin_ub_neg-1| |nil| 3321098748 ("" (SKOSIMP) (("" (LEMMA "sin_lb_neg" ("a" "-a!1" "n" "n!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_lb_neg| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK)) (|sin_lb_a0| 0 (|sin_lb_a0-1| |nil| 3321123319 ("" (EXPAND "sin_lb") (("" (SKOSIMP) (("" (REWRITE "sin_approx_a0") NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|sin_ub_a0| 0 (|sin_ub_a0-1| |nil| 3321123338 ("" (EXPAND "sin_ub") (("" (SKOSIMP) (("" (REWRITE "sin_approx_a0") NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK)) (|sin_lb_ub| 0 (|sin_lb_ub-2| |nil| 3321626202 ("" (SKOSIMP) (("" (EXPAND "sin_lb") (("" (EXPAND "sin_ub") (("" (LIFT-IF) (("" (CASE-REPLACE "n0x!1 < 0") (("1" (EXPAND "sin_approx") (("1" (EXPAND "sigma" 1 2) (("1" (LEMMA "sin_term_gt0" ("a" "n0x!1" "n" "1+2*n!1")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "sin_approx") (("2" (EXPAND "sigma" 2 1) (("2" (LEMMA "sin_term_lt0" ("a" "n0x!1" "n" "1+2*n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|sin_term_lt0| FORMULA-DECL NIL |trig_approx| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sin_lb_inc| 0 (|sin_lb_inc-1| |nil| 3321007393 ("" (CASE "FORALL (n: nat, px: posreal):
        px * px < (4 * n + 7) * (4 * n + 6) =>
         sin_lb(px, n) < sin_lb(px, n + 1)") (("1" (INDUCT "pm" 1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (CASE-REPLACE "j!1=0") (("1" (INST - "n!1" "px!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "n!1" "px!1") (("2" (ASSERT) (("2" (INST - "1+n!1" "px!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (EXPAND "sin_lb") (("2" (LEMMA "sin_approx_next" ("a" "px!1" "n" "1+2*n!1")) (("2" (LEMMA "div_mult_pos_lt1" ("z" "px!1 * px!1" "py" "(4 * n!1 + 7) * (4 * n!1 + 6)" "x" "1")) (("2" (REPLACE -1 -3 RL) (("2" (HIDE -1) (("2" (NAME-REPLACE "TT" "px!1 * px!1 / ((4 * n!1 + 7) * (4 * n!1 + 6))") (("2" (LEMMA "sin_term_gt0" ("a" "px!1" "n" "2*(1+n!1)")) (("2" (ASSERT) (("2" (NAME-REPLACE "ST" "sin_term(px!1)(2 + 2 * n!1)") (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "ST" "x" "0" "y" "1-TT")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|sin_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sin_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) SHOSTAK)) (|sin_ub_dec| 0 (|sin_ub_dec-2| |nil| 3321626241 ("" (CASE "FORALL (n: nat, px: posreal):
               px * px < (4 * n + 5) * (4 * n + 4) =>
                sin_ub(px, n + 1) < sin_ub(px, n)") (("1" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (CASE-REPLACE "j!1=0") (("1" (INST - "n!1" "px!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "n!1" "px!1") (("2" (ASSERT) (("2" (INST - "n!1+1" "px!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (EXPAND "sin_ub") (("2" (LEMMA "sin_approx_next" ("a" "px!1" "n" "2*n!1")) (("2" (LEMMA "div_mult_pos_lt1" ("z" "px!1 * px!1" "py" "(4 * n!1 + 5) * (4 * n!1 + 4)" "x" "1")) (("2" (NAME-REPLACE "TT" "px!1 * px!1 / ((4 * n!1 + 5) * (4 * n!1 + 4))") (("2" (ASSERT) (("2" (HIDE -3) (("2" (LEMMA "sin_term_lt0" ("a" "px!1" "n" "1+2*n!1")) (("2" (ASSERT) (("2" (NAME-REPLACE "ST" "sin_term(px!1)(1 + 2 * n!1)") (("2" (LEMMA "both_sides_times_neg_lt1" ("nz" "ST" "y" "0" "x" "1-TT")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_term_lt0| FORMULA-DECL NIL |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|sin_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL)) (|sin_lb_lt| 0 (|sin_lb_lt-1| |nil| 3321014972 ("" (SKOSIMP) (("" (NAME "EPS" "sin_ub(px!1,n!1+1) - sin_lb(px!1,n!1)") (("" (CASE "sin_term(px!1)(2*(n!1+1)) = EPS") (("1" (LEMMA "sin_term_gt0" ("a" "px!1" "n" "2*(n!1+1)")) (("1" (REPLACE -2) (("1" (SIMPLIFY -1) (("1" (LEMMA "sin_approx_sin" ("a" "px!1")) (("1" (EXPAND "sin_lb") (("1" (EXPAND "sin_ub") (("1" (NAME-REPLACE "SN" "sin_approx(px!1, 1 + 2 * n!1)") (("1" (INST - "2*(n!1+1)") (("1" (NAME-REPLACE "SN2" "sin_approx(px!1, 2 * (n!1 + 1))") (("1" (REWRITE "sin_term_next" -1) (("1" (REPLACE -3) (("1" (NAME-REPLACE "M" "(4 * n!1 + 7) * (4 * n!1 + 6)") (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" -1) (("1" (ASSERT) (("1" (LEMMA "div_mult_pos_lt1" ("z" "px!1*px!1" "py" "M" "x" "1")) (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "EPS" "x" "px!1 * px!1 / M" "y" "1")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -2) (("2" (EXPAND "sin_ub") (("2" (EXPAND "sin_lb") (("2" (EXPAND "sin_approx") (("2" (EXPAND "sigma" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|sin_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_term_next| FORMULA-DECL NIL |trig_approx| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|sin_approx_sin| FORMULA-DECL NIL |trig_approx| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|sin_ub_lt| 0 (|sin_ub_lt-1| |nil| 3321016985 ("" (SKOSIMP) (("" (LEMMA "sin_ub_dec" ("px" "px!1" "n" "n!1" "pm" "1")) (("" (REPLACE -2) (("" (LEMMA "sin_lb_ub" ("n0x" "px!1" "n" "n!1+1")) (("" (EXPAND "sin_lb") (("" (LEMMA "sin_approx_sin" ("a" "px!1" "n" "3+2*n!1")) (("" (LEMMA "sin_term_neg" ("a" "px!1" "n" "3+2*n!1")) (("" (SIMPLIFY -1) (("" (NAME-REPLACE "S" "sin(px!1)") (("" (CASE "sin_ub(px!1, 1 + n!1) - sin_approx(px!1, 3 + 2 * n!1) = -sin_term(px!1)(3+2*n!1)") (("1" (NAME-REPLACE "SN" "sin_ub(px!1, n!1)") (("1" (NAME-REPLACE "SN1" "sin_ub(px!1, n!1+1)") (("1" (NAME-REPLACE "SN3" "sin_approx(px!1, 2*n!1+3)") (("1" (REWRITE "sin_term_next" -3) (("1" (NAME-REPLACE "ST" "sin_term(px!1)(3 + 2 * n!1)") (("1" (REWRITE "abs_div") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (REWRITE "abs_mult") (("1" (EXPAND "abs" -3) (("1" (ASSERT) (("1" (LEMMA "div_mult_pos_lt1" ("z" "px!1*px!1" "py" "72 + 36 * n!1 + (16 * (n!1 * n!1) + 32 * n!1)" "x" "1")) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "-ST" "x" "px!1 * px!1 / (72 + 36 * n!1 + (16 * (n!1 * n!1) + 32 * n!1))" "y" "1")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "sin_ub") (("2" (EXPAND "sin_approx") (("2" (EXPAND "sigma" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_ub_dec| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sin_lb_ub| FORMULA-DECL NIL |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_approx_sin| FORMULA-DECL NIL |trig_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sin_term_next| FORMULA-DECL NIL |trig_approx| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sin_term_neg| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK)) (|sin_lb_gt| 0 (|sin_lb_gt-1| |nil| 3321010974 ("" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "sin_lb") (("1" (EXPAND "sin_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sin_term") (("1" (EXPAND "sigma") (("1" (REWRITE "expt_x0") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (ASSERT) (("1" (CASE "px!1<=6") (("1" (LEMMA "le_times_le_pos" ("nnx" "px!1" "y" "6" "nnz" "px!1" "w" "6")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "6<px!1") (("1" (HIDE 1) (("1" (CASE "1-px!1*px!1/6 < -6") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "px!1" "x" "1 - px!1 * px!1 / 6" "y" "-6")) (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_div_pos_lt1" ("pz" "6" "x" "42" "y" "px!1*px!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "px!1") (("2" (ASSERT) (("2" (EXPAND "sin_lb") (("2" (LEMMA "sin_approx_next" ("a" "px!1" "n" "1+2*j!1")) (("2" (LEMMA "div_mult_pos_gt1" ("z" "px!1*px!1" "py" "110 + 44 * j!1 + (16 * (j!1 * j!1) + 40 * j!1)" "x" "1")) (("2" (ASSERT) (("2" (NAME-REPLACE "SN" "sin_approx(px!1, 1 + 2 * j!1)") (("2" (NAME-REPLACE "SN2" "sin_approx(px!1, 3 + 2 * j!1)") (("2" (LEMMA "sin_term_gt0" ("a" "px!1" "n" "2*(1+j!1)")) (("2" (ASSERT) (("2" (NAME-REPLACE "ST" "sin_term(px!1)(2 + 2 * j!1)") (("2" (CASE "1-px!1 * px!1 / (42 + 28 * j!1 + (16 * (j!1 * j!1) + 24 * j!1))<0") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "ST" "x" "1 - px!1 * px!1 / (42 + 28 * j!1 + (16 * (j!1 * j!1) + 24 * j!1))" "y" "0")) (("1" (ASSERT) (("1" (ASSERT) (("1" (NAME-REPLACE "TT" "(px!1 * px!1 / (42 + 16 * (j!1 * j!1) + 52 * j!1))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 -1 -3 -4) (("2" (HIDE -1) (("2" (LEMMA "div_mult_pos_gt1" ("z" "px!1*px!1" "py" "(42 + 28 * j!1 + (16 * (j!1 * j!1) + 24 * j!1))" "x" "1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|sin_ub_gt| 0 (|sin_ub_gt-2| |nil| 3321626316 ("" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "sin_ub") (("1" (EXPAND "sin_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sin_term") (("1" (REWRITE "expt_x0") (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (CASE "px!1<=4") (("1" (LEMMA "le_times_le_pos" ("nnx" "px!1" "y" "4" "nnz" "px!1" "w" "4")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "px!1") (("2" (ASSERT) (("2" (EXPAND "sin_ub") (("2" (LEMMA "sin_approx_next" ("a" "px!1" "n" "2*j!1")) (("2" (NAME-REPLACE "SN" "sin_approx(px!1, 2 * j!1)") (("2" (NAME-REPLACE "SN2" "sin_approx(px!1, 2 * j!1+2)") (("2" (LEMMA "sin_term_lt0" ("a" "px!1" "n" "1+2*j!1")) (("2" (SIMPLIFY -1) (("2" (NAME-REPLACE "ST" "sin_term(px!1)(1 + 2 * j!1)") (("2" (LEMMA "negreal_times_negreal_is_posreal" ("nx" "ST" "ny" "1 - px!1 * px!1 / ((2 * (2 * j!1) + 5) * (2 * (2 * j!1) + 4))")) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 -3 2) (("2" (LEMMA "div_mult_pos_gt1" ("z" "px!1*px!1" "py" "20 + 20 * j!1 + (16 * (j!1 * j!1) + 16 * j!1)" "x" "1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sin_term_lt0| FORMULA-DECL NIL |trig_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|sin_lb| 0 (|sin_lb-1| |nil| 3321098107 ("" (SKOSIMP) (("" (LEMMA "trichotomy" ("x" "n0x!1")) (("" (SPLIT -1) (("1" (LEMMA "trich_lt" ("x" "n0x!1*n0x!1" "y" "(4*n!1+7)*(4*n!1+6)")) (("1" (SPLIT -1) (("1" (LEMMA "sin_lb_lt" ("px" "n0x!1" "n" "n!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE-REPLACE "sin_lb(n0x!1,n!1)=sin_lb(n0x!1,n!1+1)") (("1" (LEMMA "sin_lb_lt" ("px" "n0x!1" "n" "n!1+1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "sin_lb") (("2" (ASSERT) (("2" (LEMMA "sin_approx_eq" ("a" "n0x!1" "n" "1+2*n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sin_lb_gt" ("px" "n0x!1" "n" "n!1")) (("1" (TYPEPRED "sin(n0x!1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "sin_neg" ("a" "n0x!1")) (("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "-1" "y" "sin_lb(n0x!1, n!1)" "x" "sin(n0x!1)")) (("3" (REPLACE -1 1 RL) (("3" (REPLACE -2 1 RL) (("3" (LEMMA "sin_ub_neg" ("a" "n0x!1" "n" "n!1")) (("3" (REPLACE -1 1 RL) (("3" (HIDE -1 -2 -3) (("3" (LEMMA "trich_lt" ("x" "-n0x!1*-n0x!1" "y" "(4*n!1+5)*(4*n!1+4)")) (("3" (SPLIT -1) (("1" (LEMMA "sin_ub_lt" ("px" "-n0x!1" "n" "n!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "sin_ub_lt" ("px" "-n0x!1" "n" "n!1+1")) (("1" (ASSERT) (("1" (CASE-REPLACE "sin_ub(-n0x!1, 1 + n!1) = sin_ub(-n0x!1, n!1)") (("1" (HIDE -1 2) (("1" (EXPAND "sin_ub") (("1" (LEMMA "sin_approx_eq" ("a" "-n0x!1" "n" "2*n!1")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "sin_ub_gt" ("px" "-n0x!1" "n" "n!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|sin_neg| FORMULA-DECL NIL |sincos_def| NIL) (|sin_ub_neg| FORMULA-DECL NIL |trig_approx| NIL) (|sin_ub_lt| FORMULA-DECL NIL |trig_approx| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|sin_ub_gt| FORMULA-DECL NIL |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|trich_lt| FORMULA-DECL NIL |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sin_lb_gt| FORMULA-DECL NIL |trig_approx| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|sin_approx_eq| FORMULA-DECL NIL |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sin_lb_lt| FORMULA-DECL NIL |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL)) SHOSTAK)) (|sin_ub| 0 (|sin_ub-1| |nil| 3321099757 ("" (SKOSIMP) (("" (LEMMA "trichotomy" ("x" "n0x!1")) (("" (SPLIT -1) (("1" (LEMMA "sin_lb" ("n0x" "-n0x!1" "n" "n!1")) (("1" (REWRITE "sin_lb_neg") (("1" (REWRITE "sin_neg") (("1" (LEMMA "both_sides_times_neg_lt1" ("nz" "-1" "y" "sin(n0x!1)" "x" "sin_ub(n0x!1, n!1)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "sin_lb" ("n0x" "-n0x!1" "n" "n!1")) (("3" (REWRITE "sin_neg") (("3" (REWRITE "sin_lb_neg") (("3" (LEMMA "both_sides_times_neg_lt1" ("nz" "-1" "y" "sin(n0x!1)" "x" "sin_ub(n0x!1, n!1)")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sin_lb| FORMULA-DECL NIL |trig_approx| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|sin_neg| FORMULA-DECL NIL |sincos_def| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_lb_neg| FORMULA-DECL NIL |trig_approx| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|sin_bounds| 0 (|sin_bounds-1| |nil| 3321009206 ("" (SKOSIMP) (("" (CASE-REPLACE "a!1=0") (("1" (REWRITE "sin_0") (("1" (EXPAND "sin_lb") (("1" (EXPAND "sin_ub") (("1" (REWRITE "sin_approx_a0") (("1" (REWRITE "sin_approx_a0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_lb" ("n0x" "a!1" "n" "n!1")) (("1" (LEMMA "sin_ub" ("n0x" "a!1" "n" "n!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|sin_0| FORMULA-DECL NIL |sincos_def| NIL) (|sin_ub| FORMULA-DECL NIL |trig_approx| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|sin_lb| FORMULA-DECL NIL |trig_approx| NIL)) SHOSTAK)) (|sin_lb_gt0| 0 (|sin_lb_gt0-1| |nil| 3321123536 ("" (SKOSIMP*) (("" (ASSERT) (("" (CASE "sin_lb(px!1,0) > 0") (("1" (CASE-REPLACE "n!1=0") (("1" (LEMMA "sin_lb_inc" ("px" "px!1" "n" "0" "pm" "n!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "sin_lb") (("2" (ASSERT) (("2" (EXPAND "sin_approx") (("2" (EXPAND "sigma") (("2" (EXPAND "sigma") (("2" (EXPAND "sin_term") (("2" (EXPAND "^") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "px!1/6" "py" "6-px!1*px!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sin_lb_inc| FORMULA-DECL NIL |trig_approx| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|cos_lb_neg| 0 (|cos_lb_neg-1| |nil| 3321100129 ("" (SKOSIMP) (("" (EXPAND "cos_lb") (("" (REWRITE "cos_approx_neg") NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_neg| FORMULA-DECL NIL |trig_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK)) (|cos_ub_neg| 0 (|cos_ub_neg-1| |nil| 3321100152 ("" (SKOSIMP) (("" (EXPAND "cos_ub") (("" (REWRITE "cos_approx_neg") NIL NIL)) NIL)) NIL) ((|cos_ub| CONST-DECL "real" |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_neg| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|cos_lb_a0| 0 (|cos_lb_a0-1| |nil| 3321123502 ("" (EXPAND "cos_lb") (("" (SKOSIMP) (("" (REWRITE "cos_approx_a0") NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|cos_ub_a0| 0 (|cos_ub_a0-1| |nil| 3321123407 ("" (EXPAND "cos_ub") (("" (SKOSIMP) (("" (REWRITE "cos_approx_a0") NIL NIL)) NIL)) NIL) ((* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK)) (|cos_lb_ub| 0 (|cos_lb_ub-2| |nil| 3321626381 ("" (SKOSIMP) (("" (EXPAND "cos_lb") (("" (EXPAND "cos_ub") (("" (EXPAND "cos_approx") (("" (EXPAND "sigma" 1 1) (("" (LEMMA "cos_term_lt0" ("a" "n0x!1" "n" "1+2*n!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_term_lt0| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL)) NIL)) (|cos_lb_inc| 0 (|cos_lb_inc-1| |nil| 3321021787 ("" (CASE "FORALL (n: nat, n0x: nzreal):
        n0x * n0x < (4 * n + 6) * (4 * n + 5) =>
         cos_lb(n0x, n) < cos_lb(n0x, n + 1)") (("1" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (INST - "n!1" "n0x!1") (("3" (REPLACE -3) (("3" (CASE-REPLACE "j!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST - "n!1+1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (EXPAND "cos_lb") (("2" (LEMMA "cos_approx_next" ("a" "n0x!1" "n" "1+2*n!1")) (("2" (LEMMA "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+n!1)")) (("2" (SIMPLIFY -1) (("2" (NAME-REPLACE "CT" "cos_term(n0x!1)(2 + 2 * n!1)") (("2" (NAME-REPLACE "CN" "cos_approx(n0x!1, 1 + 2 * n!1)") (("2" (NAME-REPLACE "CN2" "cos_approx(n0x!1, 3 + 2 * n!1)") (("2" (LEMMA "div_mult_pos_lt1" ("z" "n0x!1*n0x!1" "py" "(4 * n!1 + 6) * (4 * n!1 + 5)" "x" "1")) (("2" (NAME-REPLACE "TT" "n0x!1 * n0x!1 / ((4 * n!1 + 6) * (4 * n!1 + 5))") (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "CT" "py" "1-TT")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK)) (|cos_ub_dec| 0 (|cos_ub_dec-2| |nil| 3321626426 ("" (CASE "FORALL (n: nat, n0x: nzreal):
               n0x * n0x < (4 * n + 4) * (4 * n + 3) =>
                cos_ub(n0x, n + 1) < cos_ub(n0x, n)") (("1" (INDUCT "pm") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOSIMP*) (("3" (INST - "n!1" "n0x!1") (("3" (CASE-REPLACE "j!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST - "n!1+1" "n0x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP) (("2" (EXPAND "cos_ub") (("2" (LEMMA "cos_approx_next" ("a" "n0x!1" "n" "2*n!1")) (("2" (LEMMA "div_mult_pos_lt1" ("z" "n0x!1 * n0x!1" "py" "(4 * n!1 + 4) * (4 * n!1 + 3)" "x" "1")) (("2" (LEMMA "cos_term_lt0" ("a" "n0x!1" "n" "1+2*n!1")) (("2" (NAME-REPLACE "TT" "n0x!1 * n0x!1 / ((4 * n!1 + 4) * (4 * n!1 + 3))") (("2" (NAME-REPLACE "CT" "cos_term(n0x!1)(1 + 2 * n!1)") (("2" (ASSERT) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "1-TT" "x" "CT" "y" "0")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_term_lt0| FORMULA-DECL NIL |trig_approx| NIL) (|cos_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) NIL)) (|cos_lb_lt| 0 (|cos_lb_lt-2| "" 3882931053 ("" (SKOSIMP) (("" (LEMMA "cos_lb_inc" ("n0x" "n0x!1" "n" "n!1" "pm" "1")) (("" (REPLACE -2 -1) (("" (LEMMA "cos_lb_ub" ("n0x" "n0x!1" "n" "n!1+1")) (("" (EXPAND "cos_lb") (("" (EXPAND "cos_ub") (("" (LEMMA "cos_approx_next" ("a" "n0x!1" "n" "1 + 2 * n!1")) (("" (LEMMA "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+n!1)")) (("" (SIMPLIFY -1) (("" (LEMMA "cos_approx_cos" ("a" "n0x!1" "n" "2*(1+n!1)")) (("" (NAME-REPLACE "CC" "cos(n0x!1)") (("" (REWRITE "cos_term_next" -1) (("" (CASE "cos_approx(n0x!1, 2 + 2 * n!1) - cos_approx(n0x!1, 3 + 2 * n!1) = -cos_term(n0x!1)(3 + 2 * n!1)") (("1" (NAME-REPLACE "CN1" "cos_approx(n0x!1, 1 + 2 * n!1)") (("1" (NAME-REPLACE "CN2" "cos_approx(n0x!1, 2 + 2 * n!1)") (("1" (NAME-REPLACE "CN3" "cos_approx(n0x!1, 3 + 2 * n!1)") (("1" (REWRITE "cos_term_next" -1) (("1" (NAME-REPLACE "CT" "cos_term(n0x!1)(2 + 2 * n!1)") (("1" (LEMMA "div_mult_pos_lt1" ("z" "n0x!1 * n0x!1" "py" "(4 * n!1 + 6) * (4 * n!1 + 5)" "x" "1")) (("1" (REPLACE -8 -1) (("1" (SIMPLIFY -1) (("1" (NAME-REPLACE "M" "(4 * n!1 + 6) * (4 * n!1 + 5)") (("1" (CASE-REPLACE "-1 * (CT * n0x!1 * n0x!1) / M = -CT*((n0x!1 * n0x!1) / M)") (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "n0x!1*n0x!1" "py" "M")) (("1" (NAME-REPLACE "TT" "n0x!1 * n0x!1 / M") (("1" (REWRITE "abs_mult" -5) (("1" (EXPAND "abs" -5) (("1" (CASE-REPLACE "CC - CN2 < 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "cos_approx") (("2" (EXPAND "sigma" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cos_lb_lt-1| |nil| 3321023357 ("" (SKOSIMP) (("" (LEMMA "cos_lb_inc" ("n0x" "n0x!1" "n" "n!1" "pm" "1")) (("" (REPLACE -2 -1) (("" (LEMMA "cos_lb_ub" ("n0x" "n0x!1" "n" "n!1+1")) (("" (EXPAND "cos_lb") (("" (EXPAND "cos_ub") (("" (LEMMA "cos_approx_next" ("a" "n0x!1" "n" "1 + 2 * n!1")) (("" (LEMMA "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+n!1)")) (("" (SIMPLIFY -1) (("" (LEMMA "cos_approx_cos" ("a" "n0x!1" "n" "2*(1+n!1)")) (("" (NAME-REPLACE "CC" "cos(n0x!1)") (("" (REWRITE "cos_term_next" -1) (("" (CASE "cos_approx(n0x!1, 2 + 2 * n!1) - cos_approx(n0x!1, 3 + 2 * n!1) = -cos_term(n0x!1)(3 + 2 * n!1)") (("1" (NAME-REPLACE "CN1" "cos_approx(n0x!1, 1 + 2 * n!1)") (("1" (NAME-REPLACE "CN2" "cos_approx(n0x!1, 2 + 2 * n!1)") (("1" (NAME-REPLACE "CN3" "cos_approx(n0x!1, 3 + 2 * n!1)") (("1" (REWRITE "cos_term_next" -1) (("1" (NAME-REPLACE "CT" "cos_term(n0x!1)(2 + 2 * n!1)") (("1" (LEMMA "div_mult_pos_lt1" ("z" "n0x!1 * n0x!1" "py" "(4 * n!1 + 6) * (4 * n!1 + 5)" "x" "1")) (("1" (REPLACE -8 -1) (("1" (SIMPLIFY -1) (("1" (NAME-REPLACE "M" "(4 * n!1 + 6) * (4 * n!1 + 5)") (("1" (CASE-REPLACE "-1 * (CT * n0x!1 * n0x!1) / M = -CT*((n0x!1 * n0x!1) / M)") (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "n0x!1*n0x!1" "py" "M")) (("1" (NAME-REPLACE "TT" "n0x!1 * n0x!1 / M") (("1" (REWRITE "abs_mult" -5) (("1" (EXPAND "abs" -5) (("1" (CASE-REPLACE "CC - CN2 < 0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "cos_approx") (("2" (EXPAND "sigma" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_lb_inc| FORMULA-DECL NIL |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cos_lb_ub| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|cos_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cos_approx_cos| FORMULA-DECL NIL |trig_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_term_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|even?| CONST-DECL "bool" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK)) (|cos_ub_lt| 0 (|cos_ub_lt-1| |nil| 3321030211 ("" (SKOSIMP) (("" (LEMMA "cos_ub_dec" ("n0x" "n0x!1" "n" "n!1" "pm" "1")) (("" (REPLACE -2 -1) (("" (LEMMA "cos_lb_ub" ("n0x" "n0x!1" "n" "n!1+1")) (("" (CASE "cos_ub(n0x!1, n!1 + 1) - cos_lb(n0x!1, n!1+1) = -cos_term(n0x!1)(3+2*n!1)") (("1" (LEMMA "cos_approx_cos" ("a" "n0x!1" "n" "2*n!1+3")) (("1" (EXPAND "cos_lb") (("1" (NAME-REPLACE "CC" "cos(n0x!1)") (("1" (NAME-REPLACE "CN3" "cos_approx(n0x!1, 2 * n!1 + 3)") (("1" (REWRITE "cos_term_next" -1) (("1" (LEMMA "cos_term_neg" ("a" "n0x!1" "n" "3+2*n!1")) (("1" (SIMPLIFY -1) (("1" (NAME-REPLACE "CT" "cos_term(n0x!1)(3 + 2 * n!1)") (("1" (LEMMA "div_mult_pos_lt1" ("z" "n0x!1 * n0x!1" "py" "(56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1))" "x" "1")) (("1" (ASSERT) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "n0x!1 * n0x!1" "py" "(56 + 16 * (n!1 * n!1) + 60 * n!1)")) (("1" (CASE-REPLACE "(-1 * (CT * n0x!1 * n0x!1) /
            (56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1))) = -CT*((n0x!1 * n0x!1) /
            (56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1)))") (("1" (NAME-REPLACE "TT" "((n0x!1 * n0x!1) / (56 + 32 * n!1 + (16 * (n!1 * n!1) + 28 * n!1)))") (("1" (HIDE -1) (("1" (REWRITE "abs_mult" -4) (("1" (EXPAND "abs" -4) (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "-CT" "x" "TT" "y" "1")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "cos_ub") (("2" (EXPAND "cos_lb") (("2" (EXPAND "cos_approx") (("2" (EXPAND "sigma" 1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cos_ub_dec| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cos_lb_ub| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|cos_approx_cos| FORMULA-DECL NIL |trig_approx| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cos_term_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cos_term_neg| FORMULA-DECL NIL |trig_approx| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|cos_lb_gt| 0 (|cos_lb_gt-1| |nil| 3321027181 ("" (INDUCT "n") (("1" (SKOSIMP) (("1" (EXPAND "cos_lb") (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (REWRITE "expt_x1") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "cos_lb") (("2" (INST - "n0x!1") (("2" (LEMMA "cos_approx_next" ("a" "n0x!1" "n" "1+2*j!1")) (("2" (NAME-REPLACE "CN1" "cos_approx(n0x!1, 1 + 2 * j!1)") (("2" (NAME-REPLACE "CN3" "cos_approx(n0x!1, 3 + 2 * j!1)") (("2" (LEMMA "cos_term_gt0" ("a" "n0x!1" "n" "2*(1+j!1)")) (("2" (SIMPLIFY -1) (("2" (NAME-REPLACE "CT" "cos_term(n0x!1)(1 + 2 * j!1 + 1)") (("2" (ASSERT) (("2" (LEMMA "div_mult_pos_gt1" ("z" "n0x!1*n0x!1" "py" "(30 + 24 * j!1 + (16 * (j!1 * j!1) + 20 * j!1))" "x" "1")) (("2" (ASSERT) (("2" (NAME-REPLACE "TT" "n0x!1 * n0x!1 / (30 + 16 * (j!1 * j!1) + 44 * j!1)") (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "CT" "x" "1-TT" "y" "0")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_term_gt0| FORMULA-DECL NIL |trig_approx| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (< CONST-DECL "bool" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|cos_ub_gt| 0 (|cos_ub_gt-4| |nil| 3321626563 ("" (CASE "FORALL (n: nat, px: posreal):
                                    px * px > (4 * n + 4) * (4 * n + 3) & n >= 1 => cos_ub(px, n) > 1") (("1" (SKOSIMP) (("1" (LEMMA "trichotomy" ("x" "n0x!1")) (("1" (SPLIT -1) (("1" (INST - "n!1" "n0x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (INST - "n!1" "-n0x!1") (("1" (ASSERT) (("1" (EXPAND "cos_ub") (("1" (REWRITE "cos_approx_neg") NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKOSIMP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE-REPLACE "j!1=0") (("1" (ASSERT) (("1" (HIDE -1 -2 -4) (("1" (EXPAND "cos_ub") (("1" (EXPAND "cos_approx") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (REWRITE "expt_x1") (("1" (LEMMA "expt_times" ("n0x" "px!1" "i" "2" "j" "2")) (("1" (CASE-REPLACE "px!1^2=px!1*px!1") (("1" (REPLACE -2) (("1" (NAME-REPLACE "X" "px!1 * px!1") (("1" (HIDE -1 -2) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "X" "py" "X/24-1/2")) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "24" "x" "0" "y" "X / 24 - 1 / 2")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST - "px!1") (("2" (EXPAND "cos_ub") (("2" (LEMMA "cos_approx_next" ("a" "px!1" "n" "2*j!1")) (("2" (LEMMA "cos_term_lt0" ("a" "px!1" "n" "2*j!1+1")) (("2" (SIMPLIFY -1) (("2" (NAME-REPLACE "CT" "cos_term(px!1)(1 + 2 * j!1)") (("2" (LEMMA "div_mult_pos_gt1" ("z" "px!1*px!1" "py" "(4*j!1+4)*(4*j!1+3)" "x" "1")) (("2" (NAME-REPLACE "TT" "px!1 * px!1 / ((4 * j!1 + 4) * (4 * j!1 + 3))") (("2" (ASSERT) (("2" (LEMMA "negreal_times_negreal_is_posreal" ("nx" "CT" "ny" "1-TT")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_approx_next| FORMULA-DECL NIL |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|cos_term_lt0| FORMULA-DECL NIL |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|n0x!1| SKOLEM-CONST-DECL "nzreal" |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_approx_neg| FORMULA-DECL NIL |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL)) NIL)) (|cos_lb| 0 (|cos_lb-1| |nil| 3321021268 ("" (SKOSIMP) (("" (LEMMA "trich_lt" ("x" "n0x!1*n0x!1" "y" "(4*n!1+6)*(4*n!1+5)")) (("" (SPLIT -1) (("1" (LEMMA "cos_lb_lt" ("n0x" "n0x!1" "n" "n!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_lb_lt" ("n0x" "n0x!1" "n" "n!1+1")) (("2" (CASE-REPLACE "cos_lb(n0x!1, n!1 + 1) = cos_lb(n0x!1, n!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -1) (("2" (EXPAND "cos_lb") (("2" (LEMMA "cos_approx_eq" ("a" "n0x!1" "n" "1+2*n!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cos_lb_gt" ("n0x" "n0x!1" "n" "n!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|trich_lt| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cos_lb_gt| FORMULA-DECL NIL |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_approx_eq| FORMULA-DECL NIL |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos_lb_lt| FORMULA-DECL NIL |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL)) SHOSTAK)) (|cos_ub| 0 (|cos_ub-1| |nil| 3321029937 ("" (SKOSIMP) (("" (LEMMA "trich_lt" ("x" "n0x!1*n0x!1" "y" "(4*pm!1+4)*(4*pm!1+3)")) (("" (SPLIT -1) (("1" (LEMMA "cos_ub_lt" ("n0x" "n0x!1" "n" "pm!1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_ub_lt" ("n0x" "n0x!1" "n" "pm!1+1")) (("2" (CASE-REPLACE "cos_ub(n0x!1, pm!1 + 1) = cos_ub(n0x!1, pm!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (EXPAND "cos_ub") (("2" (LEMMA "cos_approx_eq" ("a" "n0x!1" "n" "2*pm!1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cos_ub_gt" ("n0x" "n0x!1" "n" "pm!1")) (("3" (TYPEPRED "cos(n0x!1)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|trich_lt| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|cos_ub_gt| FORMULA-DECL NIL |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|cos_approx_eq| FORMULA-DECL NIL |trig_approx| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cos_ub_lt| FORMULA-DECL NIL |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL)) SHOSTAK)) (|cos_bounds| 0 (|cos_bounds-1| |nil| 3321021088 ("" (SKOSIMP) (("" (CASE-REPLACE "a!1=0") (("1" (REWRITE "cos_0") (("1" (EXPAND "cos_lb") (("1" (EXPAND "cos_ub") (("1" (REWRITE "cos_approx_a0") (("1" (REWRITE "cos_approx_a0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cos_lb" ("n0x" "a!1" "n" "n!1")) (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE "n!1=0") (("1" (EXPAND "cos_ub") (("1" (EXPAND "cos_approx") (("1" (REPLACE -1) (("1" (EXPAND "sigma") (("1" (EXPAND "cos_term") (("1" (TYPEPRED "cos(a!1)") (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cos_ub" ("n0x" "a!1" "pm" "n!1")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|cos_0| FORMULA-DECL NIL |sincos_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|cos| CONST-DECL "real" |sincos_def| NIL) (<= CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_ub| FORMULA-DECL NIL |trig_approx| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|cos_lb| FORMULA-DECL NIL |trig_approx| NIL)) SHOSTAK)) (|sin_lb_deriv_TCC1| 0 (|sin_lb_deriv_TCC1-1| |nil| 3551784317 ("" (LEMMA "deriv_domain_nnreal") (("" (PROPAX) NIL NIL)) NIL) ((|deriv_domain_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|)) NIL (|sin_lb_deriv| ASSUMING "analysis@derivatives[nnreal].derivatives" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|sin_lb_deriv_TCC2| 0 (|sin_lb_deriv_TCC2-1| |nil| 3551784317 ("" (LEMMA "not_one_element_nnreal") (("" (PROPAX) NIL NIL)) NIL) ((|not_one_element_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|)) NIL (|sin_lb_deriv| ASSUMING "analysis@derivatives[nnreal].derivatives" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|sin_lb_deriv| 0 (|sin_lb_deriv-2| "" 3790092371 ("" (SKOSIMP*) (("" (EXPAND "sin_lb") (("" (LEMMA "sin_approx_deriv" ("n" "1+2*n!1")) (("" (FLATTEN) (("" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 1+2*n!1)")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 1+2*n!1)")) (("1" (EXPAND "restrict2") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (EXPAND "cos_lb") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST - "x!1") (("1" (REPLACE -1 1 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|restrict2_deriv| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|restrict2| CONST-DECL "[T1 -> real]" |restrict2_deriv| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|restrict2_derivable| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_approx_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK) (|sin_lb_deriv-1| |nil| 3321116669 ("" (SKOSIMP*) (("" (EXPAND "sin_lb") (("" (LEMMA "sin_approx_deriv" ("n" "1+2*n!1")) (("" (FLATTEN) (("" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 1+2*n!1)")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 1+2*n!1)")) (("1" (EXPAND "restrict2") (("1" (ASSERT) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (EXPAND "cos_lb") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST - "x!1") (("1" (REPLACE -1 1 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP) (("4" (INST 1 "x!1+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP) (("5" (INST 1 "x!1+1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (LEMMA DERIV_DOMAIN_REAL) (("6" (PROPAX) NIL NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (LEMMA DERIV_DOMAIN_NNREAL) (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|sin_ub_deriv| 0 (|sin_ub_deriv-2| "" 3790092371 ("" (SKOSIMP*) (("" (EXPAND "sin_ub") (("" (EXPAND "cos_ub") (("" (LEMMA "sin_approx_deriv" ("n" "2*n!1")) (("" (FLATTEN) (("" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 2*n!1)")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 2*n!1)")) (("1" (EXPAND "restrict2") (("1" (REPLACE -4) (("1" (SIMPLIFY -1) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST - "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|sin_approx_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|restrict2_derivable| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|restrict2| CONST-DECL "[T1 -> real]" |restrict2_deriv| |analysis|) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|restrict2_deriv| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|sin_ub_deriv-1| |nil| 3321118579 ("" (SKOSIMP*) (("" (EXPAND "sin_ub") (("" (EXPAND "cos_ub") (("" (LEMMA "sin_approx_deriv" ("n" "2*n!1")) (("" (FLATTEN) (("" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 2*n!1)")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "LAMBDA a: sin_approx(a, 2*n!1)")) (("1" (EXPAND "restrict2") (("1" (REPLACE -4) (("1" (SIMPLIFY -1) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (INST - "x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP) (("4" (INST 1 "x!1+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKOSIMP) (("5" (INST 1 "x!1+1") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (ASSERT) (("6" (LEMMA DERIV_DOMAIN_REAL) (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (LEMMA DERIV_DOMAIN_NNREAL) (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|cos_lb_deriv| 0 (|cos_lb_deriv-1| |nil| 3321109593 ("" (SKOSIMP) (("" (EXPAND "cos_lb") (("" (LEMMA "cos_approx_deriv" ("n" "1+2*n!1")) (("" (FLATTEN) (("" (ASSERT) (("" (REPLACE -2) (("" (HIDE-ALL-BUT 1) (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (EXPAND "sin_lb") (("" (EXPAND "sin_ub") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK)) (|cos_ub_deriv_TCC1| 0 (|cos_ub_deriv_TCC1-1| |nil| 3321116581 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|cos_ub_deriv| SUBTYPE "(number_fields.-)(trig_approx.n, 1)" "nat"))) (|cos_ub_deriv_TCC2| 0 (|cos_ub_deriv_TCC2-1| |nil| 3321116581 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|cos_ub_deriv| SUBTYPE "(number_fields.-)(trig_approx.n, 1)" "nat"))) (|cos_ub_deriv| 0 (|cos_ub_deriv-1| |nil| 3321109867 ("" (SKOSIMP) (("" (EXPAND "cos_ub") (("" (LEMMA "cos_approx_deriv" ("n" "2*n!1")) (("" (FLATTEN) (("" (ASSERT) (("" (REPLACE -2 1) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (CASE-REPLACE "n!1=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "sin_ub") (("2" (EXPAND "sin_lb") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKOSIMP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_approx_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|cos_lb_nn_strict_decreasing| 0 (|cos_lb_nn_strict_decreasing-1| |nil| 3321105839 ("" (EXPAND "strict_decreasing?") (("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (TYPEPRED "y!1") (("" (EXPAND ">=") (("" (EXPAND "<=" -3) (("" (SPLIT -3) (("1" (LEMMA "cos_lb_deriv" ("n" "n!1")) (("1" (FLATTEN) (("1" (LEMMA "restrict2_derivable[{x: posreal | x <= pi},real]" ("f" "LAMBDA a: cos_lb(a, n!1)")) (("1" (LEMMA "restrict2_deriv[{x: posreal | x <= pi},real]" ("f" "LAMBDA a: cos_lb(a, n!1)")) (("1" (EXPAND "restrict2") (("1" (REPLACE -4) (("1" (SIMPLIFY -1) (("1" (LEMMA "negative_derivative[{x:posreal | x <= pi}]" ("g" "LAMBDA (a:{x:posreal | x <= pi}): cos_lb(a, n!1)")) (("1" (SPLIT -1) (("1" (EXPAND "strict_decreasing?") (("1" (INST - "x!1" "y!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP) (("2" (INST - "x!2") (("2" (EXPAND "deriv" -1) (("2" (REPLACE -1 1 RL) (("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "x!2") (("2" (LEMMA "sin_ub" ("n0x" "x!2" "n" "n!1")) (("2" (LEMMA "sin_ge_0" ("a" "x!2")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (ASSERT) (("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (SKOSIMP*) (("3" (INST 1 "x!2") NIL NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (ASSERT) (("4" (EXPAND "not_one_element?") (("4" (SKOSIMP*) (("4" (INST + "x!2/2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (LEMMA "deriv_domain_oc") (("5" (INST - "0" "pi") (("5" (ASSERT) (("5" (EXPAND "deriv_domain?") (("5" (SKOSIMP*) (("5" (INST - "e!1" "x!2") (("5" (SKOSIMP*) (("5" (INST + "y!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (LEMMA "cos_lb" ("n0x" "y!1" "n" "n!1")) (("1" (TYPEPRED "cos(y!1)") (("1" (EXPAND "cos_lb") (("1" (REWRITE "cos_approx_a0") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_approx_a0| FORMULA-DECL NIL |trig_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|cos_lb| FORMULA-DECL NIL |trig_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|cos_lb_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|restrict2_derivable| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|restrict2| CONST-DECL "[T1 -> real]" |restrict2_deriv| |analysis|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|x!1| SKOLEM-CONST-DECL "{x: nnreal | x <= pi}" |trig_approx| NIL) (|y!1| SKOLEM-CONST-DECL "{x: nnreal | x <= pi}" |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_ge_0| FORMULA-DECL NIL |trig_ineq| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_ub| FORMULA-DECL NIL |trig_approx| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|negative_derivative| FORMULA-DECL NIL |derivative_props| |analysis|) (|restrict2_deriv| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|deriv_domain_oc| FORMULA-DECL NIL |deriv_domain| |analysis|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|)) SHOSTAK)) (|cos_lb_np_strict_increasing| 0 (|cos_lb_np_strict_increasing-1| |nil| 3321105605 ("" (SKOSIMP) (("" (LEMMA "cos_lb_nn_strict_decreasing" ("n" "n!1")) (("" (EXPAND "strict_decreasing?") (("" (EXPAND "strict_increasing?") (("" (SKOSIMP) (("" (INST - "-y!1" "-x!1") (("" (ASSERT) (("" (REWRITE "cos_lb_neg") (("" (REWRITE "cos_lb_neg") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_lb_nn_strict_decreasing| FORMULA-DECL NIL |trig_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|npreal| TYPE-EQ-DECL NIL |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_lb_neg| FORMULA-DECL NIL |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|)) SHOSTAK)) (|sin_px| 0 (|sin_px-1| |nil| 3403980921 ("" (SKOSIMP) (("" (LEMMA "sin_lb" ("n0x" "px!1" "n" "0")) (("" (EXPAND "sin_lb") (("" (EXPAND "sin_approx") (("" (EXPAND "sigma") (("" (EXPAND "sigma") (("" (EXPAND "sin_term") (("" (EXPAND "^") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (EXPAND "factorial") (("" (EXPAND "factorial") (("" (EXPAND "factorial") (("" (EXPAND "factorial") (("" (CASE "1 - 1 / 1500000 < 1-px!1*px!1/6") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "px!1" "x" "1 - 1 / 1500000" "y" "1 - px!1 * px!1 / 6")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "sq_lt" ("nna" "px!1" "nnb" "1/500")) (("2" (ASSERT) (("2" (EXPAND "sq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_lb| FORMULA-DECL NIL |trig_approx| NIL) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_lt| FORMULA-DECL NIL |sq| |reals|) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|sin_lb| CONST-DECL "real" |trig_approx| NIL)) NIL)) (|cos_term_pi_lb| 0 (|cos_term_pi_lb-2| |nil| 3403981394 ("" (SKOSIMP) (("" (REWRITE "sin_shift" :DIR RL) (("" (LEMMA "pi_lb_diff" ("n" "n!1")) (("" (LEMMA "pi_lb_inc" ("n" "n!1" "m" "n!1+1")) (("" (SIMPLIFY -1) (("" (LEMMA "pi_bounds" ("n" "n!1+1")) (("" (FLATTEN) (("" (HIDE -2) (("" (NAME "KK" "16 * (1 / 5) ^ (4 * n!1 + 5) *
                      (1 / (4 * n!1 + 5) - 1 / (25 * (4 * n!1 + 7)))
                      +
                      4 * (1 / 239) ^ (4 * n!1 + 3) *
                       (1 / (4 * n!1 + 3) - 1 / (57121 * (4 * n!1 + 5)))") (("" (REPLACE -1) (("" (CASE "pi / 2 - pi_lbn(n!1) / 2 > KK / 2") (("1" (CASE "pi / 2 - pi_lbn(n!1) / 2 < 1/500") (("1" (LEMMA "sin_px" ("px" "pi / 2 - pi_lbn(n!1) / 2")) (("1" (SPLIT -1) (("1" (CASE "cos_term(pi_lbn(n!1) / 2)(2 * n!1 + 2) < KK/2 * (1 - 1 / 1500000)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (NAME "F" "lambda (n:nat): 8 * (1 / 5) ^ (4 * n + 5) *
                                         (1 / (4 * n + 5) - 1 / (25 * (4 * n + 7)))
                                         +
                                         2 * (1 / 239) ^ (4 * n + 3) *
                                          (1 / (4 * n + 3) - 1 / (57121 * (4 * n + 5)))") (("2" (CASE-REPLACE "KK/2=F(n!1)") (("1" (HIDE -1 -2 -5) (("1" (EXPAND "cos_term") (("1" (CASE-REPLACE "(-1) ^ (2 + 2 * n!1)=1") (("1" (LEMMA "both_sides_expt_pos_lt" ("px" "pi_lbn(n!1) / 2" "py" "31415927/20000000" "pm" "4 + 4 * n!1")) (("1" (LEMMA "pi_ub") (("1" (ASSERT) (("1" (NAME "G" "lambda (n:nat): (31415927 / 20000000) ^ (4 + 4 * n)/factorial(4 + 4 * n)") (("1" (CASE "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1) <G(n!1)") (("1" (CASE "forall (m:nat): m>=5 => G(m)<F(m)*(1 - 1 / 1500000)") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (NAME-REPLACE "DRL1" "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "G(5) < F(5) * (1 - 1 / 1500000)") (("1" (CASE "FORALL (m: nat): m >= 5 & G(m) < F(m) * (1 - 1 / 1500000) => G(m+1) < F(m+1) * (1 - 1 / 1500000)") (("1" (INDUCT "m") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE-REPLACE "j!1=4") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST - "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (SKOSIMP) (("2" (NAME "LHS" "(31415927 / 20000000) ^ 4/((5+4 * m!1)*(6+4 * m!1)*(7+4 * m!1)*(8+4 * m!1))") (("2" (CASE-REPLACE "G(m!1 + 1)=G(m!1)*LHS") (("1" (HIDE -1) (("1" (CASE "LHS*F(m!1)<F(m!1 + 1)") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "LHS" "x" "G(m!1)" "y" "F(m!1) * (1 - 1 / 1500000)")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -3 2) (("2" (EXPAND "F" 1) (("2" (LEMMA "expt_plus" ("n0x" "1/5" "i" "4" "j" "5+4*m!1")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (NAME-REPLACE "FIVE" "(1 / 5) ^ (5 + 4 * m!1)") (("2" (LEMMA "expt_plus" ("n0x" "1 / 239" "i" "4" "j" "3 + 4 * m!1")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (NAME-REPLACE "TWOTHREENINE" "(1 / 239) ^ (3 + 4 * m!1)") (("2" (CASE-REPLACE "(1 / 239) ^ 4 * TWOTHREENINE * (1 / (514089 + 228484 * m!1))= (1 / 239) ^ 6 * TWOTHREENINE * (1 / (9+4*m!1))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(TWOTHREENINE * (1 / (285605 + 228484 * m!1))) = (1/239)^2 * (TWOTHREENINE * (1 / (5 + 4 * m!1)))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(FIVE * (1 / (175 + 100 * m!1))) = (1/5)^2*FIVE*(1/(7+4*m!1))") (("1" (HIDE -1) (("1" (CASE "-2 * ((1 / 239) ^ 2 * (TWOTHREENINE * (1 / (5 + 4 * m!1))) * LHS) -
                                                                           8 * ((1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1)) * LHS)
                                                                           + 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)
                                                                           + 2 * ((TWOTHREENINE * (1 / (3 + 4 * m!1))) * LHS) < 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)") (("1" (CASE "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)<8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) +
                                                                                2 * ((1 / 239) ^ 4 * TWOTHREENINE * (1 / (7 + 4 * m!1)))
                                                                                - 2 * ((1 / 239) ^ 6 * TWOTHREENINE * (1 / (9 + 4 * m!1)))
                                                                                - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -1) (("2" (LEMMA "expt_plus" ("n0x" "1/239" "i" "2" "j" "4")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "2 * (1 / 239) ^ 4 * TWOTHREENINE" "y" "1 / (7 + 4 * m!1) -(1 / 239) ^ 2/ (9 + 4 * m!1)" "x" "0")) (("2" (FLATTEN -1) (("2" (HIDE -1) (("2" (SPLIT -1) (("1" (CASE "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS) <8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (CASE-REPLACE "1 / (275 + 100 * m!1) = (1/5)^2*1/(11+4*m!1)") (("1" (HIDE -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "8*FIVE" "x" "LHS/(5 + 4 * m!1)" "y" "(1 / 5) ^ 4*(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "(24/25)*(1 / (9 + 4 * m!1)) < (1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))") (("1" (CASE "LHS / (5 + 4 * m!1) <(1 / 5) ^ 4 *(24 / 25) * (1 / (9 + 4 * m!1))") (("1" (NAME-REPLACE "RHS" "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "(1/5)^4" "x" "(24 / 25) * (1 / (9 + 4 * m!1))" "y" "RHS")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (CASE "(31415927 / 20000000) ^ 4 < 609/100") (("1" (LEMMA "both_sides_div_pos_lt1" ("pz" "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))" "x" "(31415927 / 20000000) ^ 4" "y" "609 / 100")) (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (FLATTEN -1) (("1" (CASE "LHS < (1 / 5) ^ 4 * (12/15)") (("1" (HIDE -2 -3 -4) (("1" (LEMMA "both_sides_div_pos_lt1" ("pz" "5 + 4 * m!1" "x" "LHS" "y" "(1 / 5) ^ 4 * (12 / 15)")) (("1" (REPLACE -2) (("1" (FLATTEN) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "(1 / 5) ^ 4" "x" "(12 / 15) / (5 + 4 * m!1)" "y" "(24 / 25) * (1 / (9 + 4 * m!1))")) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "12/75" "x" "5/(5 + 4 * m!1)" "y" "6/(9 + 4 * m!1)")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (LEMMA "div_mult_pos_lt1" ("py" "5 + 4 * m!1" "z" "5" "x" "6 / (9 + 4 * m!1)")) (("2" (REPLACE -1) (("2" (LEMMA "div_mult_pos_lt2" ("py" "9 + 4 * m!1" "z" "6*(5 + 4 * m!1)" "x" "5")) (("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(1 / 5) ^ 4 * (12 / 15) = 12/9375") (("1" (HIDE -1) (("1" (LEMMA "both_sides_div_pos_le2" ("pz" "609/100" "py" "25*26*27*28" "px" "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))")) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT) (("1" (NAME-REPLACE "LHS2" "609 / 100 /
                                                                                                                        ((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -4)) (("2" (LEMMA "le_times_le_pos" ("nnx" "25" "y" "5 + 4 * m!1" "nnz" "26 * 27 * 28" "w" "(6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1)")) (("2" (LEMMA "le_times_le_pos" ("nnx" "26" "y" "6 + 4 * m!1" "nnz" "27 * 28" "w" "(7 + 4 * m!1) * (8 + 4 * m!1)")) (("2" (LEMMA "le_times_le_pos" ("nnx" "27" "y" "7 + 4 * m!1" "nnz" "28" "w" "(8 + 4 * m!1)")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "9 + 4 * m!1" "x" "(24 / 25) * (1 / (9 + 4 * m!1))" "y" "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "div_cancel2" ("x" "1" "n0z" "9+4*m!1")) (("2" (LEMMA "associative_mult" ("x" "24 / 25" "y" "1 / (9 + 4 * m!1)" "z" "9 + 4 * m!1")) (("2" (REPLACE -2) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1 -2) (("2" (LEMMA "both_sides_div_pos_lt2" ("pz" "1" "py" "9 + 4 * m!1" "px" "11 + 4 * m!1")) (("2" (SIMPLIFY -1) (("2" (CASE-REPLACE "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1)) * (9 + 4 * m!1) = 1- (1 / 5) ^ 2*(9 + 4 * m!1)/(11 + 4 * m!1)") (("1" (HIDE -1) (("1" (CASE "(1 / 5) ^ 2 * (9 + 4 * m!1) / (11 + 4 * m!1) < 1/25") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(1 / 5) ^ 2=1/25") (("1" (REWRITE "div_mult_pos_lt1" 1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (REWRITE "cross_mult") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "div_mult_pos_lt1" ("z" "(1 / 239) ^ 2" "py" "9 + 4 * m!1" "x" "1 / (7 + 4 * m!1)")) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (NAME-REPLACE "DRL1" "(1 / 239) ^ 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "div_mult_pos_lt2" ("py" "7 + 4 * m!1" "z" "9 + 4 * m!1" "x" "(1 / 239) ^ 2")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (LEMMA "lt_times_lt_pos1" ("px" "(1 / 239) ^ 2" "y" "1" "nnz" "7 + 4 * m!1" "w" "9 + 4 * m!1")) (("2" (LEMMA "both_sides_expt_pos_lt" ("px" "1/239" "py" "1" "pm" "2")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "(2*TWOTHREENINE)*(1 / (3 + 4 * m!1)-(1 / 239) ^ 2*(1 / (5 + 4 * m!1))) - 8*(1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))<0") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "LHS" "x" "(2 * TWOTHREENINE) *
                                                                                     (1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))
                                                                                     - 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))" "y" "0")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (CASE "2 * TWOTHREENINE/(3 + 4 * m!1) < 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))") (("1" (NAME-REPLACE "RHS" "8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))") (("1" (LEMMA "both_sides_times_pos_lt1" ("y" "1/(3 + 4 * m!1)" "x" "(1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))" "pz" "2 * TWOTHREENINE")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "times_div1") (("2" (LEMMA "div_mult_pos_lt1" ("py" "3 + 4 * m!1" "z" "2 * TWOTHREENINE" "x" "(8 * ((1 / 5) ^ 2 * FIVE))/(7 + 4 * m!1)")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (LEMMA "div_mult_pos_lt2" ("py" "7 + 4 * m!1" "z" "(8 * ((1 / 5) ^ 2 * FIVE))*(3 + 4 * m!1)" "x" "2 * TWOTHREENINE")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (EXPAND "FIVE") (("2" (EXPAND "TWOTHREENINE") (("2" (CASE "forall (m:nat): m>=5 => 14 * (1 / 239) ^ (3 + 4 * m) +
                                                                                       8 * ((1 / 239) ^ (3 + 4 * m) * m)
                                                                                       <
                                                                                       24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m)) +
                                                                                        32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m) * m)") (("1" (INST - "m!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP) (("2" (CASE-REPLACE "j!1=4") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "lt_times_lt_pos1" ("px" "14 * (1 / 239) ^ (3 + 4 * j!1) +
                                                                                                     8 * ((1 / 239) ^ (3 + 4 * j!1) * j!1)" "y" "24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1)) +
                                                                                                      32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1) * j!1)" "nnz" "(1 / 239) ^ 4" "w" "(1/5)^4")) (("2" (SPLIT -1) (("1" (CASE "8*(1 / 239) ^ (7 + 4 * j!1)<32*((1 / 5) ^ 2 * (1 / 5) ^ (9 + 4 * j!1))") (("1" (LEMMA "expt_plus" ("n0x" "1/5" "i" "4" "j" "5+4*j!1")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "1/239" "i" "4" "j" "3+4*j!1")) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 3) (("2" (LEMMA "expt_plus" ("n0x" "1/5" "i" "2" "j" "7+4*j!1")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (CASE "forall (m:nat): m>=27 => 8 * (1 / 239) ^ m <
                                                                                                           32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ m))") (("1" (INST - "7 + 4 * j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "m") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (CASE-REPLACE "j!2=26") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "lt_times_lt_pos1" ("px" "1/239" "y" "1/5" "nnz" "8 * (1 / 239) ^ j!2" "w" "32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ j!2))")) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2 (1 4)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "both_sides_expt_pos_lt" ("px" "1/239" "py" "1/5" "pm" "4")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "cross_mult") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "cross_mult") (("2" (REWRITE "expt_x2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "cross_mult") (("2" (EXPAND "^" 1) (("2" (EXPAND "expt" 1 (3 4)) (("2" (EXPAND "expt" 1 (3 4)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2 -2) (("2" (EXPAND "G") (("2" (HIDE -1) (("2" (LEMMA "expt_plus" ("n0x" "31415927 / 20000000" "i" "4" "j" "4 + 4 * m!1")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (EXPAND "LHS") (("2" (NAME-REPLACE "DRL11" "(31415927 / 20000000) ^ 4") (("2" (NAME-REPLACE "DRL12" "(31415927 / 20000000) ^ (4 + 4 * m!1)") (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 (1 2)) (("2" (EXPAND "factorial" 1 (1 2 3)) (("2" (EXPAND "factorial" 1 (1 2 3 4)) (("2" (ASSERT) (("2" (NAME-REPLACE "FACTORIAL" "factorial(4 + 4 * m!1)") (("2" (ASSERT) (("2" (REWRITE "div_times") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "F") (("2" (EXPAND "G") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "G" 1) (("2" (ASSERT) (("2" (LEMMA "both_sides_div_pos_lt1" ("pz" "factorial(4 + 4 * n!1)" "x" "(pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)" "y" "(31415927 / 20000000) ^ (4 + 4 * n!1)")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "expt_times" ("n0x" "-1" "i" "2" "j" "1+n!1")) (("2" (EXPAND "^" -1 2) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "F" 1) (("2" (EXPAND "KK" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "pi_lb_pi" ("n" "n!1")) (("2" (CASE "16 * ((1 / 5) ^ (4 * n!1 + 5) / (4 * n!1 + 5)) <= 16*(1/5)^25/25") (("1" (CASE "4 * ((1 / 239) ^ (4 * n!1 + 3) / (4 * n!1 + 3)) <= 4*(1/239)^23/23") (("1" (CASE "16 * (1 / 5) ^ 25 / 25< 1/1000000") (("1" (CASE "4 * (1 / 239) ^ 23 / 23< 1 / 1000000") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1)) (("2" (LEMMA "both_sides_expt_lt1_le" ("lt1x" "1/239" "j" "23" "i" "4*n!1+3")) (("2" (ASSERT) (("2" (LEMMA "both_sides_div_pos_le2" ("pz" "4" "px" "3+4*n!1" "py" "23")) (("2" (ASSERT) (("2" (LEMMA "le_times_le_pos" ("nnx" "4 / (3 + 4 * n!1)" "y" "4 / 23" "nnz" "(1 / 239) ^ (3 + 4 * n!1)" "w" "(1 / 239) ^ 23")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (LEMMA "both_sides_div_pos_le2" ("pz" "16" "px" "5+4*n!1" "py" "25")) (("2" (ASSERT) (("2" (LEMMA "both_sides_expt_lt1_le" ("lt1x" "1/5" "j" "25" "i" "4*n!1+5")) (("2" (LEMMA "le_times_le_pos" ("nnx" "16 / (5 + 4 * n!1)" "y" "16 / 25" "nnz" "(1 / 5) ^ (4 * n!1 + 5)" "w" "(1 / 5) ^ 25")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "both_sides_div_pos_lt1" ("pz" "2" "y" "pi-pi_lbn(n!1)" "x" "KK")) (("2" (EXPAND ">" 1) (("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_shift| FORMULA-DECL NIL |sincos| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_lb_inc| FORMULA-DECL NIL |atan_approx| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (KK SKOLEM-CONST-DECL "rat" |trig_approx| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|pi_ub| CONST-DECL "posreal" |atan_approx| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (LHS SKOLEM-CONST-DECL "posrat" |trig_approx| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (G SKOLEM-CONST-DECL "[nat -> posrat]" |trig_approx| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|both_sides_div_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|associative_mult| FORMULA-DECL NIL |number_fields| NIL) (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|both_sides_div_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|le_times_le_pos| FORMULA-DECL NIL |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (FIVE SKOLEM-CONST-DECL "posrat" |trig_approx| NIL) (TWOTHREENINE SKOLEM-CONST-DECL "posrat" |trig_approx| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (F SKOLEM-CONST-DECL "[nat -> rat]" |trig_approx| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|both_sides_expt_pos_lt| FORMULA-DECL NIL |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_px| FORMULA-DECL NIL |trig_approx| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pi_lb_pi| FORMULA-DECL NIL |atan_approx| NIL) (|both_sides_expt_lt1_le| FORMULA-DECL NIL |exponentiation| NIL) (<= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi_lb_diff| FORMULA-DECL NIL |atan_approx| NIL)) NIL) (|cos_term_pi_lb-1| |nil| 3403981026 ("" (SKOSIMP) (("" (REWRITE "sin_shift" :DIR RL) (("" (LEMMA "pi_lb_diff" ("n" "n!1")) (("" (LEMMA "pi_lb_inc" ("n" "n!1" "m" "n!1+1")) (("" (SIMPLIFY -1) (("" (LEMMA "pi_bounds" ("n" "n!1+1")) (("" (FLATTEN) (("" (HIDE -2) (("" (NAME "KK" "16 * (1 / 5) ^ (4 * n!1 + 5) *
               (1 / (4 * n!1 + 5) - 1 / (25 * (4 * n!1 + 7)))
               +
               4 * (1 / 239) ^ (4 * n!1 + 3) *
                (1 / (4 * n!1 + 3) - 1 / (57121 * (4 * n!1 + 5)))") (("" (REPLACE -1) (("" (CASE "pi / 2 - pi_lbn(n!1) / 2 > KK / 2") (("1" (CASE "pi / 2 - pi_lbn(n!1) / 2 < 1/500") (("1" (LEMMA "sin_px" ("px" "pi / 2 - pi_lbn(n!1) / 2")) (("1" (SPLIT -1) (("1" (CASE "cos_term(pi_lbn(n!1) / 2)(2 * n!1 + 2) < KK/2 * (1 - 1 / 1500000)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (NAME "F" "lambda (n:nat): 8 * (1 / 5) ^ (4 * n + 5) *
                        (1 / (4 * n + 5) - 1 / (25 * (4 * n + 7)))
                        +
                        2 * (1 / 239) ^ (4 * n + 3) *
                         (1 / (4 * n + 3) - 1 / (57121 * (4 * n + 5)))") (("2" (CASE-REPLACE "KK/2=F(n!1)") (("1" (HIDE -1 -2 -5) (("1" (EXPAND "cos_term") (("1" (CASE-REPLACE "(-1) ^ (2 + 2 * n!1)=1") (("1" (LEMMA "both_sides_expt_pos_lt" ("px" "pi_lbn(n!1) / 2" "py" "31415927/20000000" "pm" "4 + 4 * n!1")) (("1" (LEMMA "pi_ub") (("1" (ASSERT) (("1" (NAME "G" "lambda (n:nat): (31415927 / 20000000) ^ (4 + 4 * n)/factorial(4 + 4 * n)") (("1" (CASE "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1) <G(n!1)") (("1" (CASE "forall (m:nat): m>=5 => G(m)<F(m)*(1 - 1 / 1500000)") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (NAME-REPLACE "DRL1" "(1 * (pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)) / factorial(4 + 4 * n!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "G(5) < F(5) * (1 - 1 / 1500000)") (("1" (CASE "FORALL (m: nat): m >= 5 & G(m) < F(m) * (1 - 1 / 1500000) => G(m+1) < F(m+1) * (1 - 1 / 1500000)") (("1" (INDUCT "m") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE-REPLACE "j!1=4") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST - "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (SKOSIMP) (("2" (NAME "LHS" "(31415927 / 20000000) ^ 4/((5+4 * m!1)*(6+4 * m!1)*(7+4 * m!1)*(8+4 * m!1))") (("2" (CASE-REPLACE "G(m!1 + 1)=G(m!1)*LHS") (("1" (HIDE -1) (("1" (CASE "LHS*F(m!1)<F(m!1 + 1)") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "LHS" "x" "G(m!1)" "y" "F(m!1) * (1 - 1 / 1500000)")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -3 2) (("2" (EXPAND "F" 1) (("2" (LEMMA "expt_plus" ("n0x" "1/5" "i" "4" "j" "5+4*m!1")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (NAME-REPLACE "FIVE" "(1 / 5) ^ (5 + 4 * m!1)") (("2" (LEMMA "expt_plus" ("n0x" "1 / 239" "i" "4" "j" "3 + 4 * m!1")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (NAME-REPLACE "TWOTHREENINE" "(1 / 239) ^ (3 + 4 * m!1)") (("2" (CASE-REPLACE "(1 / 239) ^ 4 * TWOTHREENINE * (1 / (514089 + 228484 * m!1))= (1 / 239) ^ 6 * TWOTHREENINE * (1 / (9+4*m!1))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(TWOTHREENINE * (1 / (285605 + 228484 * m!1))) = (1/239)^2 * (TWOTHREENINE * (1 / (5 + 4 * m!1)))") (("1" (HIDE -1) (("1" (CASE-REPLACE "(FIVE * (1 / (175 + 100 * m!1))) = (1/5)^2*FIVE*(1/(7+4*m!1))") (("1" (HIDE -1) (("1" (CASE "-2 * ((1 / 239) ^ 2 * (TWOTHREENINE * (1 / (5 + 4 * m!1))) * LHS) -
                                         8 * ((1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1)) * LHS)
                                         + 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)
                                         + 2 * ((TWOTHREENINE * (1 / (3 + 4 * m!1))) * LHS) < 8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)") (("1" (CASE "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS)<8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) +
                                            2 * ((1 / 239) ^ 4 * TWOTHREENINE * (1 / (7 + 4 * m!1)))
                                            - 2 * ((1 / 239) ^ 6 * TWOTHREENINE * (1 / (9 + 4 * m!1)))
                                            - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2 -1) (("2" (LEMMA "expt_plus" ("n0x" "1/239" "i" "2" "j" "4")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "2 * (1 / 239) ^ 4 * TWOTHREENINE" "y" "1 / (7 + 4 * m!1) -(1 / 239) ^ 2/ (9 + 4 * m!1)" "x" "0")) (("2" (FLATTEN -1) (("2" (HIDE -1) (("2" (SPLIT -1) (("1" (CASE "8 * ((FIVE * (1 / (5 + 4 * m!1))) * LHS) <8 * ((1 / 5) ^ 4 * FIVE * (1 / (9 + 4 * m!1))) - 8 * ((1 / 5) ^ 4 * FIVE * (1 / (275 + 100 * m!1)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (CASE-REPLACE "1 / (275 + 100 * m!1) = (1/5)^2*1/(11+4*m!1)") (("1" (HIDE -1) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "8*FIVE" "x" "LHS/(5 + 4 * m!1)" "y" "(1 / 5) ^ 4*(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "(24/25)*(1 / (9 + 4 * m!1)) < (1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))") (("1" (CASE "LHS / (5 + 4 * m!1) <(1 / 5) ^ 4 *(24 / 25) * (1 / (9 + 4 * m!1))") (("1" (NAME-REPLACE "RHS" "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "(1/5)^4" "x" "(24 / 25) * (1 / (9 + 4 * m!1))" "y" "RHS")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (CASE "(31415927 / 20000000) ^ 4 < 609/100") (("1" (LEMMA "both_sides_div_pos_lt1" ("pz" "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))" "x" "(31415927 / 20000000) ^ 4" "y" "609 / 100")) (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (FLATTEN -1) (("1" (CASE "LHS < (1 / 5) ^ 4 * (12/15)") (("1" (HIDE -2 -3 -4) (("1" (LEMMA "both_sides_div_pos_lt1" ("pz" "5 + 4 * m!1" "x" "LHS" "y" "(1 / 5) ^ 4 * (12 / 15)")) (("1" (REPLACE -2) (("1" (FLATTEN) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "(1 / 5) ^ 4" "x" "(12 / 15) / (5 + 4 * m!1)" "y" "(24 / 25) * (1 / (9 + 4 * m!1))")) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "12/75" "x" "5/(5 + 4 * m!1)" "y" "6/(9 + 4 * m!1)")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (LEMMA "div_mult_pos_lt1" ("py" "5 + 4 * m!1" "z" "5" "x" "6 / (9 + 4 * m!1)")) (("2" (REPLACE -1) (("2" (LEMMA "div_mult_pos_lt2" ("py" "9 + 4 * m!1" "z" "6*(5 + 4 * m!1)" "x" "5")) (("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(1 / 5) ^ 4 * (12 / 15) = 12/9375") (("1" (HIDE -1) (("1" (LEMMA "both_sides_div_pos_le2" ("pz" "609/100" "py" "25*26*27*28" "px" "((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))")) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (SPLIT) (("1" (NAME-REPLACE "LHS2" "609 / 100 /
                                                                ((5 + 4 * m!1) * (6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1))") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -4)) (("2" (LEMMA "le_times_le_pos" ("nnx" "25" "y" "5 + 4 * m!1" "nnz" "26 * 27 * 28" "w" "(6 + 4 * m!1) * (7 + 4 * m!1) * (8 + 4 * m!1)")) (("2" (LEMMA "le_times_le_pos" ("nnx" "26" "y" "6 + 4 * m!1" "nnz" "27 * 28" "w" "(7 + 4 * m!1) * (8 + 4 * m!1)")) (("2" (LEMMA "le_times_le_pos" ("nnx" "27" "y" "7 + 4 * m!1" "nnz" "28" "w" "(8 + 4 * m!1)")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "both_sides_times_pos_lt1" ("pz" "9 + 4 * m!1" "x" "(24 / 25) * (1 / (9 + 4 * m!1))" "y" "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1))")) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (LEMMA "div_cancel2" ("x" "1" "n0z" "9+4*m!1")) (("2" (LEMMA "associative_mult" ("x" "24 / 25" "y" "1 / (9 + 4 * m!1)" "z" "9 + 4 * m!1")) (("2" (REPLACE -2) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1 -2) (("2" (LEMMA "both_sides_div_pos_lt2" ("pz" "1" "py" "9 + 4 * m!1" "px" "11 + 4 * m!1")) (("2" (SIMPLIFY -1) (("2" (CASE-REPLACE "(1 / (9 + 4 * m!1) - (1 / 5) ^ 2 / (11 + 4 * m!1)) * (9 + 4 * m!1) = 1- (1 / 5) ^ 2*(9 + 4 * m!1)/(11 + 4 * m!1)") (("1" (HIDE -1) (("1" (CASE "(1 / 5) ^ 2 * (9 + 4 * m!1) / (11 + 4 * m!1) < 1/25") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (CASE-REPLACE "(1 / 5) ^ 2=1/25") (("1" (REWRITE "div_mult_pos_lt1" 1) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (REWRITE "cross_mult") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "div_mult_pos_lt1" ("z" "(1 / 239) ^ 2" "py" "9 + 4 * m!1" "x" "1 / (7 + 4 * m!1)")) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (NAME-REPLACE "DRL1" "(1 / 239) ^ 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "div_mult_pos_lt2" ("py" "7 + 4 * m!1" "z" "9 + 4 * m!1" "x" "(1 / 239) ^ 2")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (LEMMA "lt_times_lt_pos1" ("px" "(1 / 239) ^ 2" "y" "1" "nnz" "7 + 4 * m!1" "w" "9 + 4 * m!1")) (("2" (LEMMA "both_sides_expt_pos_lt" ("px" "1/239" "py" "1" "pm" "2")) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "(2*TWOTHREENINE)*(1 / (3 + 4 * m!1)-(1 / 239) ^ 2*(1 / (5 + 4 * m!1))) - 8*(1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))<0") (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "LHS" "x" "(2 * TWOTHREENINE) *
                                              (1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))
                                              - 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))" "y" "0")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (CASE "2 * TWOTHREENINE/(3 + 4 * m!1) < 8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))") (("1" (NAME-REPLACE "RHS" "8 * (1 / 5) ^ 2 * FIVE * (1 / (7 + 4 * m!1))") (("1" (LEMMA "both_sides_times_pos_lt1" ("y" "1/(3 + 4 * m!1)" "x" "(1 / (3 + 4 * m!1) - (1 / 239) ^ 2 * (1 / (5 + 4 * m!1)))" "pz" "2 * TWOTHREENINE")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "times_div1") (("2" (LEMMA "div_mult_pos_lt1" ("py" "3 + 4 * m!1" "z" "2 * TWOTHREENINE" "x" "(8 * ((1 / 5) ^ 2 * FIVE))/(7 + 4 * m!1)")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (LEMMA "div_mult_pos_lt2" ("py" "7 + 4 * m!1" "z" "(8 * ((1 / 5) ^ 2 * FIVE))*(3 + 4 * m!1)" "x" "2 * TWOTHREENINE")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (EXPAND "FIVE") (("2" (EXPAND "TWOTHREENINE") (("2" (CASE "forall (m:nat): m>=5 => 14 * (1 / 239) ^ (3 + 4 * m) +
                                               8 * ((1 / 239) ^ (3 + 4 * m) * m)
                                               <
                                               24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m)) +
                                                32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * m) * m)") (("1" (INST - "m!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "m") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP) (("2" (CASE-REPLACE "j!1=4") (("1" (EVAL-FORMULA) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "lt_times_lt_pos1" ("px" "14 * (1 / 239) ^ (3 + 4 * j!1) +
                                                      8 * ((1 / 239) ^ (3 + 4 * j!1) * j!1)" "y" "24 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1)) +
                                                       32 * ((1 / 5) ^ 2 * (1 / 5) ^ (5 + 4 * j!1) * j!1)" "nnz" "(1 / 239) ^ 4" "w" "(1/5)^4")) (("2" (SPLIT -1) (("1" (CASE "8*(1 / 239) ^ (7 + 4 * j!1)<32*((1 / 5) ^ 2 * (1 / 5) ^ (9 + 4 * j!1))") (("1" (LEMMA "expt_plus" ("n0x" "1/5" "i" "4" "j" "5+4*j!1")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "1/239" "i" "4" "j" "3+4*j!1")) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 3) (("2" (LEMMA "expt_plus" ("n0x" "1/5" "i" "2" "j" "7+4*j!1")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (CASE "forall (m:nat): m>=27 => 8 * (1 / 239) ^ m <
                                                         32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ m))") (("1" (INST - "7 + 4 * j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "m") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP) (("2" (CASE-REPLACE "j!2=26") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (LEMMA "lt_times_lt_pos1" ("px" "1/239" "y" "1/5" "nnz" "8 * (1 / 239) ^ j!2" "w" "32 * ((1 / 5) ^ 2 * ((1 / 5) ^ 2 * (1 / 5) ^ j!2))")) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2 (1 4)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "both_sides_expt_pos_lt" ("px" "1/239" "py" "1/5" "pm" "4")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "cross_mult") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "cross_mult") (("2" (REWRITE "expt_x2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "times_div1") (("2" (REWRITE "times_div1") (("2" (REWRITE "cross_mult") (("2" (EXPAND "^" 1) (("2" (EXPAND "expt" 1 (3 4)) (("2" (EXPAND "expt" 1 (3 4)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 2 -2) (("2" (EXPAND "G") (("2" (HIDE -1) (("2" (LEMMA "expt_plus" ("n0x" "31415927 / 20000000" "i" "4" "j" "4 + 4 * m!1")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (EXPAND "LHS") (("2" (NAME-REPLACE "DRL11" "(31415927 / 20000000) ^ 4") (("2" (NAME-REPLACE "DRL12" "(31415927 / 20000000) ^ (4 + 4 * m!1)") (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 (1 2)) (("2" (EXPAND "factorial" 1 (1 2 3)) (("2" (EXPAND "factorial" 1 (1 2 3 4)) (("2" (ASSERT) (("2" (NAME-REPLACE "FACTORIAL" "factorial(4 + 4 * m!1)") (("2" (ASSERT) (("2" (REWRITE "div_times") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "F") (("2" (EXPAND "G") (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "G" 1) (("2" (ASSERT) (("2" (LEMMA "both_sides_div_pos_lt1" ("pz" "factorial(4 + 4 * n!1)" "x" "(pi_lbn(n!1) / 2) ^ (4 + 4 * n!1)" "y" "(31415927 / 20000000) ^ (4 + 4 * n!1)")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "expt_times" ("n0x" "-1" "i" "2" "j" "1+n!1")) (("2" (EXPAND "^" -1 2) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (REWRITE "sq_rew") (("2" (REWRITE "sq_neg") (("2" (REWRITE "expt_1i") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "F" 1) (("2" (EXPAND "KK" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "pi_lb_pi" ("n" "n!1")) (("2" (CASE "16 * ((1 / 5) ^ (4 * n!1 + 5) / (4 * n!1 + 5)) <= 16*(1/5)^25/25") (("1" (CASE "4 * ((1 / 239) ^ (4 * n!1 + 3) / (4 * n!1 + 3)) <= 4*(1/239)^23/23") (("1" (CASE "16 * (1 / 5) ^ 25 / 25< 1/1000000") (("1" (CASE "4 * (1 / 239) ^ 23 / 23< 1 / 1000000") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 1)) (("2" (LEMMA "both_sides_expt_lt1_le" ("lt1x" "1/239" "j" "23" "i" "4*n!1+3")) (("2" (ASSERT) (("2" (LEMMA "both_sides_div_pos_le2" ("pz" "4" "px" "3+4*n!1" "py" "23")) (("2" (ASSERT) (("2" (LEMMA "le_times_le_pos" ("nnx" "4 / (3 + 4 * n!1)" "y" "4 / 23" "nnz" "(1 / 239) ^ (3 + 4 * n!1)" "w" "(1 / 239) ^ 23")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 1)) (("2" (LEMMA "both_sides_div_pos_le2" ("pz" "16" "px" "5+4*n!1" "py" "25")) (("2" (ASSERT) (("2" (LEMMA "both_sides_expt_lt1_le" ("lt1x" "1/5" "j" "25" "i" "4*n!1+5")) (("2" (LEMMA "le_times_le_pos" ("nnx" "16 / (5 + 4 * n!1)" "y" "16 / 25" "nnz" "(1 / 5) ^ (4 * n!1 + 5)" "w" "(1 / 5) ^ 25")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "both_sides_div_pos_lt1" ("pz" "2" "y" "pi-pi_lbn(n!1)" "x" "KK")) (("2" (EXPAND ">" 1) (("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|cos_lb_pi2_eps| 0 (|cos_lb_pi2_eps-1| |nil| 3403981585 ("" (SKOSIMP) (("" (LEMMA "cos_approx_cos" ("a" "pi / 2 - px!1" "n" "1+2*n!1")) (("" (LEMMA "cos_bounds" ("a" "pi / 2 - px!1" "n" "n!1")) (("" (FLATTEN) (("" (HIDE -2) (("" (EXPAND "cos_lb") (("" (EXPAND "abs" -2 1) (("" (ASSERT) (("" (NAME-REPLACE "COS_APPROX" "cos_approx(pi / 2 - px!1, 1 + 2 * n!1)") (("" (REWRITE "cos_shift") (("" (LEMMA "sin_gt_0" ("a" "px!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_approx_cos| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_shift| FORMULA-DECL NIL |sincos| NIL) (|sin_gt_0| FORMULA-DECL NIL |trig_ineq| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|cos_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL)) NIL)) (|cos_lb_pi2_pos0| 0 (|cos_lb_pi2_pos0-3| "" 3790092391 ("" (SKOSIMP) (("" (EXPAND "cos_lb") (("" (EXPAND "cos_approx") (("" (REPLACE -1) (("" (EXPAND "sigma") (("" (EXPAND "sigma") (("" (EXPAND "cos_term") (("" (EXPAND "pi_lbn") (("" (EXPAND "atan_pos_le1_lb") (("" (EXPAND "atan_pos_le1_ub") (("" (EXPAND "sigma") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|atan_pos_le1_ub| CONST-DECL "real" |atan_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|atan_series_it| CONST-DECL "real" |atan_approx| NIL) (|atan_series_iter| DEF-DECL "real" |atan_approx| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|atan_pos_le1_lb| CONST-DECL "real" |atan_approx| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|cos_approx| CONST-DECL "real" |trig_approx| NIL)) SHOSTAK) (|cos_lb_pi2_pos0-2| |nil| 3403981610 ("" (SKOSIMP) (("" (EXPAND "cos_lb") (("" (EXPAND "cos_approx") (("" (REPLACE -1) (("" (EXPAND "sigma") (("" (EXPAND "sigma") (("" (EXPAND "cos_term") (("" (EXPAND "pi_lbn") (("" (EXPAND "atan_pos_le1_lb") (("" (EXPAND "atan_pos_le1_ub") (("" (EXPAND "atan_series_n") (("" (EXPAND "sigma") (("" (EXPAND "sigma") (("" (EXPAND "atan_series_term") (("" (EXPAND "atan_series_coef") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|cos_lb_pi2_pos0-1| |nil| 3403981522 ("" (SKOSIMP) (("" (LEMMA "cos_approx_cos" ("a" "pi / 2 - px!1" "n" "1+2*n!1")) (("" (LEMMA "cos_bounds" ("a" "pi / 2 - px!1" "n" "n!1")) (("" (FLATTEN) (("" (HIDE -2) (("" (EXPAND "cos_lb") (("" (EXPAND "abs" -2 1) (("" (ASSERT) (("" (NAME-REPLACE "COS_APPROX" "cos_approx(pi / 2 - px!1, 1 + 2 * n!1)") (("" (REWRITE "cos_shift") (("" (LEMMA "sin_gt_0" ("a" "px!1")) (("" (ASSERT) NIL)))))))))))))))))))))) NIL) NIL NIL)) (|cos_lb_pi2_pos1| 0 (|cos_lb_pi2_pos1-1| |nil| 3403981651 ("" (SKOSIMP) (("" (REPLACE -1) (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|atan_pos_le1_ub| CONST-DECL "real" |atan_approx| NIL) (|atan_pos_le1_lb| CONST-DECL "real" |atan_approx| NIL) (|atan_series_it| CONST-DECL "real" |atan_approx| NIL) (|atan_series_iter| DEF-DECL "real" |atan_approx| NIL)) NIL)) (|cos_lb_pi2_pos2| 0 (|cos_lb_pi2_pos2-1| |nil| 3403981676 ("" (SKOSIMP) (("" (REPLACE -1) (("" (HIDE -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|cos_approx| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|atan_pos_le1_ub| CONST-DECL "real" |atan_approx| NIL) (|atan_pos_le1_lb| CONST-DECL "real" |atan_approx| NIL) (|atan_series_it| CONST-DECL "real" |atan_approx| NIL) (|atan_series_iter| DEF-DECL "real" |atan_approx| NIL)) NIL)) (|cos_lb_pi2_pos| 0 (|cos_lb_pi2_pos-2| "" 3790092393 ("" (SKOSIMP) (("" (LEMMA "cos_lb_pi2_eps" ("n" "n!1" "px" "pi/2-pi_lbn(n!1) / 2")) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "pi_bounds" ("n" "n!1")) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LEMMA "pi_bounds0") (("1" (FLATTEN) (("1" (LEMMA "pi_lb_inc" ("n" "0" "m" "n!1")) (("1" (ASSERT) (("1" (REWRITE "sin_shift" 1) (("1" (LEMMA "cos_term_pi_lb" ("n" "n!1")) (("1" (ASSERT) (("1" (NAME "TERM" "cos_term(pi_lbn(n!1) / 2)(2 + 2 * n!1)") (("1" (REPLACE -1) (("1" (EXPAND "cos_term") (("1" (LEMMA "expt_times" ("n0x" "-1" "i" "2" "j" "1+n!1")) (("1" (EXPAND "^" -1 2) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (REWRITE "expt_1i") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (TYPEPRED "factorial(4 + 4 * n!1)") (("1" (LEMMA "expt_pos" ("px" "pi_lbn(n!1) / 2" "i" "4 + 4 * n!1")) (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "pi_bounds" ("n" "n!1")) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cos_lb_pi2_eps| FORMULA-DECL NIL |trig_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi_bounds0| FORMULA-DECL NIL |atan_approx| NIL) (|pi_lb_inc| FORMULA-DECL NIL |atan_approx| NIL) (|sin_shift| FORMULA-DECL NIL |sincos| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cos_term_pi_lb| FORMULA-DECL NIL |trig_approx| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL)) SHOSTAK) (|cos_lb_pi2_pos-1| |nil| 3403981773 ("" (SKOSIMP) (("" (LEMMA "cos_lb_pi2_eps" ("n" "n!1" "px" "pi/2-pi_lbn(n!1) / 2")) (("1" (ASSERT) (("1" (HIDE 2) (("1" (LEMMA "pi_bounds" ("n" "n!1")) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LEMMA "pi_bounds0") (("1" (FLATTEN) (("1" (LEMMA "pi_lb_inc" ("n" "0" "m" "n!1")) (("1" (ASSERT) (("1" (REWRITE "sin_shift" 1) (("1" (LEMMA "cos_term_pi_lb" ("n" "n!1")) (("1" (ASSERT) (("1" (NAME "TERM" "cos_term(pi_lbn(n!1) / 2)(2 + 2 * n!1)") (("1" (REPLACE -1) (("1" (EXPAND "cos_term") (("1" (LEMMA "expt_times" ("n0x" "-1" "i" "2" "j" "1+n!1")) (("1" (EXPAND "^" -1 2) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (EXPAND "expt" -1) (("1" (REWRITE "sq_rew") (("1" (REWRITE "sq_neg") (("1" (REWRITE "expt_1i") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (TYPEPRED "factorial(4 + 4 * n!1)") (("1" (LEMMA "expt_pos" ("px" "pi_lbn(n!1) / 2" "i" "4 + 4 * n!1")) (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "pi_bounds" ("n" "n!1")) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|sin_term_pi_lb| 0 (|sin_term_pi_lb-4| |nil| 3566173322 ("" (CASE "FORALL (n: nat):
                                    n >= 12 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))") (("1" (SKEEP) (("1" (INST - "n") (("1" (ASSERT) (("1" (CASE "n = 11") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(12)" "14") (("1" (FLATTEN) (("1" (INVOKE (CASE "%1 < %2") (! 2 1) (! -1 1)) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "FORALL (n: nat):
                                                                                                                  n >= 20 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))") (("1" (CASE "FORALL (nnn: subrange(12,20)):
                                                                                                                                              sin_term(pi_lbn(nnn+1))(2 * nnn + 2) < sin_lb(pi_lbn(nnn+1),nnn)") (("1" (SKEEP) (("1" (INST -2 "n") (("1" (ASSERT) (("1" (INST - "n") (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(n+1)" "n") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_px") (("2" (SKOSIMP*) (("2" (LEMMA "sin_pi_minus") (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (INST?) (("1" (SPLIT -) (("1" (LEMMA "pi_bounds") (("1" (INST - "n!1+1+1") (("1" (FLATTEN) (("1" (LEMMA "pi_lbn_lt") (("1" (INST - "n!1+1") (("1" (CASE "pi-pi_lbn(n!1+1) >= pi_lbn(n!1+1+1)-pi_lbn(n!1+1)") (("1" (MULT-BY -1 "(1 - 1 / 1500000)") (("1" (NAME "KZ" "pi_lbn(n!1+1+1)-pi_lbn(n!1+1)") (("1" (CASE "sin_term(pi_lbn(n!1+1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "pi_lb_diff_bounds") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn+1))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (10 + 5 * nn)") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (CASE "j < 19") (("1" (ASSERT) NIL NIL) ("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 2) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (CASE "NOT j>=20") (("1" (ASSERT) NIL NIL) ("2" (HIDE (1 2)) (("2" (NAME "M" "1-1 / 1500000") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "sin_term") (("2" (CASE "FORALL (k:nat): (-1)^(2*k) = 1") (("1" (INST-CP - "1+j") (("1" (INST - "2+j") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "FORALL (aa:real): 1*aa = aa") (("1" (REWRITE -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LEMMA "pi_lb_quot_bounds") (("1" (INST - "j+1") (("1" (SKOLETIN -1 :OLD? T) (("1" (FLATTEN) (("1" (NAME "disepsi" "(1 - 14.5 * (1 / 5) ^ (4 * j + 7))") (("1" (CASE "disepsi > 0") (("1" (NAME "epsi" "1/(disepsi)") (("1" (REPLACE -3) (("1" (CASE "epsi > 1") (("1" (CASE "((epsi*pi_lbn(j+1)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                                                                                                                                                                                                                                 14 * (((1 / 5) ^ (15 + 5 * j)) * M)") (("1" (CASE "pi_lbn(2+ j) <= epsi*pi_lbn(1+j)") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "pi_lbn(2 + j)" "epsi * pi_lbn(1+j)") (("1" (ASSERT) (("1" (MULT-BY -1 "1/factorial(9+4*j)") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "xquot" -6) (("2" (CROSS-MULT -6) (("2" (EXPAND "epsi" 1) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "epsi^(9+4*j) * pi_lbn(j+1)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5") (("1" (MULT-INEQ -1 -10) (("1" (INVOKE (CASE "%1 = %2") (! -1 1) (! 1 1)) (("1" (INVOKE (CASE "%1 = %2") (! -2 2) (! 1 2)) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3)) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "10+5*j" "5" "1/5") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)") (("1" (CASE "(epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4)
                                                                                                                                                                                                                                                                                                                                                                                                                               * (pi_lbn(j+1) ^ (5 + 4 * j)) = (epsi * pi_lbn(j+1)) ^ (9 + 4 * j)") (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 -2 -3 2 3)) (("2" (LEMMA "mult_expt") (("2" (INST - "9+4*j" "epsi" "pi_lbn(j+1)") (("2" (REPLACES -1) (("2" (HIDE -1) (("2" (LEMMA "expt_plus") (("2" (INST - "5+4*j" "4" "pi_lbn(j+1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 2 3)) (("2" (INVOKE (NAME "ej1" "%1") (! 1 1 1)) (("2" (INVOKE (NAME "ej2" "%1") (! 1 1 2)) (("2" (INVOKE (NAME "ej3" "%1") (! 1 1 3)) (("2" (INVOKE (NAME "ej4" "%1") (! 1 1 4)) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (EXPAND "factorial" + 2) (("2" (ASSERT) (("2" (CASE "ej1 -1 = ej2") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej2 -1 = ej3") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej3-1 = ej4") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4 <= 1.1*3.1415927^4") (("1" (MULT-BY -1 "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))") (("1" (INVOKE (CASE "%1 < %2") (! -1 2) (! 1 2)) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (NAME "RD" "j-18") (("2" (CASE "j = RD+18 AND RD>=0") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (CASE "EXISTS (RD2:nat): RD2 = RD") (("1" (SKEEP -1) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -) (("1" (ASSERT) (("1" (CROSS-MULT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "RD") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INVOKE (CASE "%1 < %2 AND %3 < %4") (! 1 1 1) (! 1 2 1) (! 1 1 2) (! 1 2 2)) (("1" (FLATTEN) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (HIDE-ALL-BUT (-8 1)) (("1" (EXPAND "epsi") (("1" (EXPAND "disepsi") (("1" (NAME "egrange" "(1 - 14.5 * (1 / 5) ^ (7 + 4 * j))") (("1" (REPLACE -1) (("1" (NAME "alpha" "14.5 * (1 / 5) ^ (7 + 4 * j)") (("1" (CASE "alpha < 1/3") (("1" (CASE "1/egrange < 1+2*alpha") (("1" (CASE "(1+2*alpha)^(9+4*j) < 1.1") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "1/egrange" "1+2*alpha") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "egrange > 0") (("1" (SPLIT +) (("1" (CROSS-MULT 1) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "14.5*(1/5)^(7+4*j) < 1") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "div_expt" 1) (("2" (CASE "FORALL (nnm:nat): 1^nnm = 1") (("1" (REWRITE -1) (("1" (CASE "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (7 + kkr)) < 1") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nnm") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "alpha" 1) (("2" (ASSERT) (("2" (NAME "FF" "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+2)") (("2" (CASE "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1") (("1" (INST - "7+4*j") (("1" (ASSERT) (("1" (EXPAND "FF" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "jj") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 82") (("1" (REPLACE -1) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND "FF" +) (("2" (CASE "FORALL (egv:nnreal): egv^(3+j!1) = egv^(2+j!1)*egv") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INVOKE (CASE "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)") (! 1 1 2) (! 1 1 1)) (("1" (FLATTEN) (("1" (BOTH-SIDES "+" "1" -2) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (CASE "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkj") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!2 = 74") (("1" (REPLACE -1) (("1" (HIDE -) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "FF") (("2" (NAME "K1" "2 * (14.5 * (1 / 5) ^ (j!1))") (("2" (REPLACE -1) (("2" (CASE "2 * (14.5 * (1 / 5) ^ (1+j!1)) = (1/5)*K1") (("1" (REPLACE -1) (("1" (NAME "pj" "2+j!1") (("1" (REPLACE -1) (("1" (LEMMA "binomial_theorem") (("1" (INST-CP - "pj" "1" "(1/5)*K1") (("1" (INST - "pj" "1" "K1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "sigma" + 1) (("1" (ASSERT) (("1" (CASE-REPLACE "C(pj,pj) = 1") (("1" (ASSERT) (("1" (EXPAND "sigma" + 2) (("1" (CASE-REPLACE "C(pj, pj) * K1 ^ 0 = 1") (("1" (ASSERT) (("1" (REWRITE "sigma_scal" :DIR RL) (("1" (REWRITE "sigma_le") (("1" (HIDE 2) (("1" (SKEEP) (("1" (REWRITE "mult_expt" +) (("1" (CASE "(1 / 5) ^ (pj - n) <= 1/5") (("1" (MULT-BY -1 "C(pj, n) * 1 ^ n * K1 ^ (pj - n)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5") (("1" (INST-CP - "pj-n-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "C") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE - 2) (("2" (EXPAND "C") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2) (("2" (REPLACE -3 :DIR RL) (("2" (CROSS-MULT 1) (("2" (ASSERT) (("2" (CASE "alpha > 2*sq(alpha)") (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (MULT-BY -1 "alpha") (("2" (EXPAND "sq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "alpha" +) (("2" (CASE "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 69") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST - "3" "pi_lbn(j+1)" "3.1415927") (("2" (ASSERT) (("2" (EXPAND "^") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "pi_bounds") (("2" (INST?) (("2" (FLATTEN) (("2" (LEMMA "pi_bounds") (("2" (INST - "10") (("2" (FLATTEN) (("2" (EVAL-EXPR "pi_ubn(10)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "epsi" +) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "FORALL (kkp:nat): kkp>=3 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 2") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "k") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST - "n!1+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (kkp:nat): kkp>=20 IMPLIES 1 / 500 > pi - pi_lbn(kkp)") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (LEMMA "pi_bounds") (("1" (INST - "19") (("1" (FLATTEN) (("1" (CASE "1/500 > pi_ubn(19)-pi_lbn(20)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "pi_lbn_lt") (("2" (INST - "j") (("2" (LEMMA "pi_bounds") (("2" (INST-CP - "j") (("2" (INST - "1+j") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "pi_bounds") (("2" (INST - "n!1+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_lb_quot_bounds| FORMULA-DECL NIL |atan_approx| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|posrat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nonneg_rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|alpha| SKOLEM-CONST-DECL "posrat" |trig_approx| NIL) (|nnreal_expt| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (C CONST-DECL "posnat" |binomial| |reals|) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|sigma_le| FORMULA-DECL NIL |sigma| |reals|) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|) (|sigma_rat| APPLICATION-JUDGEMENT "rational" |sigma_nat| |reals|) (|binomial_theorem| FORMULA-DECL NIL |polynomials| |reals|) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (FF SKOLEM-CONST-DECL "[nat -> posrat]" |trig_approx| NIL) (|div_expt| FORMULA-DECL NIL |exponentiation| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (|rat_expt| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|egrange| SKOLEM-CONST-DECL "rat" |trig_approx| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|pi_ubn| CONST-DECL "real" |atan_approx| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (RD SKOLEM-CONST-DECL "int" |trig_approx| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|mult_expt| FORMULA-DECL NIL |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|epsi| SKOLEM-CONST-DECL "nzrat" |trig_approx| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|both_sides_expt_pos_lt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|xquot| SKOLEM-CONST-DECL "posreal" |trig_approx| NIL) (|disepsi| SKOLEM-CONST-DECL "rat" |trig_approx| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|pi_lb_diff_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|pi_lbn_lt| FORMULA-DECL NIL |atan_approx| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|sin_pi_minus| FORMULA-DECL NIL |trig_extra| NIL) (|sin_px| FORMULA-DECL NIL |trig_approx| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) NIL) (|sin_term_pi_lb-3| |nil| 3554737763 ("" (CASE "FORALL (n: nat):
                             n >= 12 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))") (("1" (SKEEP) (("1" (INST - "n") (("1" (ASSERT) (("1" (CASE "n = 11") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(12)" "14") (("1" (FLATTEN) (("1" (INVOKE (CASE "%1 < %2") (! 2 1) (! -1 1)) (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL))))))))))))))) ("2" (ASSERT) NIL))))))))) ("2" (HIDE 2) (("2" (CASE "FORALL (n: nat):
                                                                                                         n >= 20 IMPLIES sin_term(pi_lbn(n+1))(2 * n + 2) < sin(pi_lbn(n+1))") (("1" (CASE "FORALL (nnn: subrange(12,20)):
                                                                                                                                   sin_term(pi_lbn(nnn+1))(2 * nnn + 2) < sin_lb(pi_lbn(nnn+1),nnn)") (("1" (SKEEP) (("1" (INST -2 "n") (("1" (ASSERT) (("1" (INST - "n") (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(n+1)" "n") (("1" (FLATTEN) (("1" (ASSERT) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_px") (("2" (SKOSIMP*) (("2" (LEMMA "sin_pi_minus") (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (INST?) (("1" (SPLIT -) (("1" (LEMMA "pi_bounds") (("1" (INST - "n!1+1+1") (("1" (FLATTEN) (("1" (LEMMA "pi_lbn_lt") (("1" (INST - "n!1+1") (("1" (CASE "pi-pi_lbn(n!1+1) >= pi_lbn(n!1+1+1)-pi_lbn(n!1+1)") (("1" (MULT-BY -1 "(1 - 1 / 1500000)") (("1" (NAME "KZ" "pi_lbn(n!1+1+1)-pi_lbn(n!1+1)") (("1" (CASE "sin_term(pi_lbn(n!1+1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ") (("1" (ASSERT) NIL) ("2" (LEMMA "pi_lb_diff_bounds") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn+1))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (10 + 5 * nn)") (("1" (INST - "n!1") (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (CASE "j < 19") (("1" (ASSERT) NIL) ("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 2) (("1" (EVAL-FORMULA) NIL))))) ("2" (CASE "NOT j>=20") (("1" (ASSERT) NIL) ("2" (HIDE (1 2)) (("2" (NAME "M" "1-1 / 1500000") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "sin_term") (("2" (CASE "FORALL (k:nat): (-1)^(2*k) = 1") (("1" (INST-CP - "1+j") (("1" (INST - "2+j") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "FORALL (aa:real): 1*aa = aa") (("1" (REWRITE -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LEMMA "pi_lb_quot_bounds") (("1" (INST - "j+1") (("1" (SKOLETIN -1) (("1" (FLATTEN) (("1" (NAME "disepsi" "(1 - 14.5 * (1 / 5) ^ (4 * j + 7))") (("1" (CASE "disepsi > 0") (("1" (NAME "epsi" "1/(disepsi)") (("1" (REPLACE -3) (("1" (CASE "epsi > 1") (("1" (CASE "((epsi*pi_lbn(j+1)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                                                                                                                                                                                               14 * (((1 / 5) ^ (15 + 5 * j)) * M)") (("1" (CASE "pi_lbn(2+ j) <= epsi*pi_lbn(1+j)") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "pi_lbn(2 + j)" "epsi * pi_lbn(1+j)") (("1" (ASSERT) (("1" (MULT-BY -1 "1/factorial(9+4*j)") (("1" (EXPAND "^") (("1" (ASSERT) NIL))))))) ("2" (ASSERT) NIL))))) ("2" (HIDE -1) (("2" (EXPAND "xquot" -6) (("2" (CROSS-MULT -6) (("2" (EXPAND "epsi" 1) (("2" (CROSS-MULT 1) NIL))))))))))) ("2" (HIDE 2) (("2" (CASE "epsi^(9+4*j) * pi_lbn(j+1)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5") (("1" (MULT-INEQ -1 -10) (("1" (INVOKE (CASE "%1 = %2") (! -1 1) (! 1 1)) (("1" (INVOKE (CASE "%1 = %2") (! -2 2) (! 1 2)) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2) (("1" (PROPAX) NIL))))) ("2" (HIDE (-1 -2 -3)) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "10+5*j" "5" "1/5") (("2" (ASSERT) NIL))))))))))) ("2" (CASE "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)") (("1" (CASE "(epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4)
                                                                                                                                                                                                                                                                                                                                                                                     * (pi_lbn(j+1) ^ (5 + 4 * j)) = (epsi * pi_lbn(j+1)) ^ (9 + 4 * j)") (("1" (ASSERT) NIL) ("2" (HIDE (-1 -2 -3 2 3)) (("2" (LEMMA "mult_expt") (("2" (INST - "9+4*j" "epsi" "pi_lbn(j+1)") (("2" (REPLACES -1) (("2" (HIDE -1) (("2" (LEMMA "expt_plus") (("2" (INST - "5+4*j" "4" "pi_lbn(j+1)") (("2" (ASSERT) NIL))))))))))))))))) ("2" (HIDE (-1 -2 2 3)) (("2" (INVOKE (NAME "ej1" "%1") (! 1 1 1)) (("2" (INVOKE (NAME "ej2" "%1") (! 1 1 2)) (("2" (INVOKE (NAME "ej3" "%1") (! 1 1 3)) (("2" (INVOKE (NAME "ej4" "%1") (! 1 1 4)) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (EXPAND "factorial" + 2) (("2" (ASSERT) (("2" (CASE "ej1 -1 = ej2") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej2 -1 = ej3") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej3-1 = ej4") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))))) ("2" (ASSERT) NIL))))))) ("2" (ASSERT) NIL))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (CASE "epsi ^ (9 + 4 * j) * pi_lbn(j+1) ^ 4 <= 1.1*3.1415927^4") (("1" (MULT-BY -1 "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))") (("1" (INVOKE (CASE "%1 < %2") (! -1 2) (! 1 2)) (("1" (ASSERT) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (NAME "RD" "j-18") (("2" (CASE "j = RD+18 AND RD>=0") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (CASE "EXISTS (RD2:nat): RD2 = RD") (("1" (SKEEP -1) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -) (("1" (ASSERT) (("1" (CROSS-MULT 1) (("1" (GRIND) NIL))))))))))) ("2" (INST + "RD") NIL))))))))) ("2" (ASSERT) NIL))))))))))))) ("2" (HIDE 2) (("2" (INVOKE (CASE "%1 < %2 AND %3 < %4") (! 1 1 1) (! 1 2 1) (! 1 1 2) (! 1 2 2)) (("1" (FLATTEN) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL))))) ("2" (SPLIT 1) (("1" (HIDE-ALL-BUT (-8 1)) (("1" (EXPAND "epsi") (("1" (EXPAND "disepsi") (("1" (NAME "egrange" "(1 - 14.5 * (1 / 5) ^ (7 + 4 * j))") (("1" (REPLACE -1) (("1" (NAME "alpha" "14.5 * (1 / 5) ^ (7 + 4 * j)") (("1" (CASE "alpha < 1/3") (("1" (CASE "1/egrange < 1+2*alpha") (("1" (CASE "(1+2*alpha)^(9+4*j) < 1.1") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "1/egrange" "1+2*alpha") (("1" (EXPAND "^") (("1" (ASSERT) NIL))) ("2" (ASSERT) (("2" (CASE "egrange > 0") (("1" (SPLIT +) (("1" (CROSS-MULT 1) NIL) ("2" (CROSS-MULT 1) NIL))) ("2" (HIDE 2) (("2" (CASE "14.5*(1/5)^(7+4*j) < 1") (("1" (ASSERT) NIL) ("2" (REWRITE "div_expt" 1) (("2" (CASE "FORALL (nnm:nat): 1^nnm = 1") (("1" (REWRITE -1) (("1" (CASE "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (7 + kkr)) < 1") (("1" (INST?) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nnm") (("1" (GRIND) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (EXPAND "alpha" 1) (("2" (ASSERT) (("2" (NAME "FF" "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+2)") (("2" (CASE "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1") (("1" (INST - "7+4*j") (("1" (ASSERT) (("1" (EXPAND "FF" -1) (("1" (PROPAX) NIL))))))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "jj") (("1" (ASSERT) NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 82") (("1" (REPLACE -1) (("1" (EVAL-FORMULA) NIL))) ("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND "FF" +) (("2" (CASE "FORALL (egv:nnreal): egv^(3+j!1) = egv^(2+j!1)*egv") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INVOKE (CASE "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)") (! 1 1 2) (! 1 1 1)) (("1" (FLATTEN) (("1" (BOTH-SIDES "+" "1" -2) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL))))))) ("2" (HIDE 2) (("2" (SPLIT) (("1" (CASE "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkj") (("1" (ASSERT) NIL) ("2" (SKOSIMP*) (("2" (CASE "j!2 = 74") (("1" (REPLACE -1) (("1" (HIDE -) (("1" (EVAL-FORMULA) NIL))))) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL))))))))))))))))) ("2" (EXPAND "FF") (("2" (NAME "K1" "2 * (14.5 * (1 / 5) ^ (j!1))") (("2" (REPLACE -1) (("2" (CASE "2 * (14.5 * (1 / 5) ^ (1+j!1)) = (1/5)*K1") (("1" (REPLACE -1) (("1" (NAME "pj" "2+j!1") (("1" (REPLACE -1) (("1" (LEMMA "binomial_theorem") (("1" (INST-CP - "pj" "1" "(1/5)*K1") (("1" (INST - "pj" "1" "K1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "sigma" + 1) (("1" (ASSERT) (("1" (CASE "C(pj, pj) * 1 ^ pj * ((1 / 5) * K1) ^ 0 = 1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "sigma" + 2) (("1" (CASE "C(pj, pj) * 1 ^ pj * K1 ^ 0 = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (REWRITE "sigma_le") (("1" (HIDE 2) (("1" (SKEEP) (("1" (REWRITE "mult_expt" +) (("1" (CASE "(1 / 5) ^ (pj - n) <= 1/5") (("1" (MULT-BY -1 "C(pj, n) * 1 ^ n * K1 ^ (pj - n)") (("1" (ASSERT) NIL))) ("2" (CASE "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5") (("1" (INST-CP - "pj-n-1") (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))))) ("2" (SKOSIMP*) (("2" (ASSERT) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1") (("1" (REWRITE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "C") (("1" (ASSERT) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (egv2:nat): 1^egv2 = 1") (("1" (INST?) NIL) ("2" (INDUCT "egv2") (("1" (GRIND) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1") (("1" (REWRITE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "C") (("1" (ASSERT) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (egv2:nat): 1^egv2 = 1") (("1" (INST?) NIL) ("2" (INDUCT "egv2") (("1" (GRIND) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL))))))))))))) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))) ("2" (REPLACE -2) (("2" (REPLACE -3 :DIR RL) (("2" (CROSS-MULT 1) (("2" (ASSERT) (("2" (CASE "alpha > 2*sq(alpha)") (("1" (EXPAND "sq") (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (CROSS-MULT -1) (("2" (MULT-BY -1 "alpha") (("2" (EXPAND "sq") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (ASSERT) (("2" (EXPAND "alpha" +) (("2" (CASE "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 69") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EVAL-FORMULA) NIL))))) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))) ("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST - "3" "pi_lbn(j+1)" "3.1415927") (("2" (ASSERT) (("2" (EXPAND "^") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "pi_bounds") (("2" (INST?) (("2" (FLATTEN) (("2" (LEMMA "pi_bounds") (("2" (INST - "10") (("2" (FLATTEN) (("2" (EVAL-EXPR "pi_ubn(10)") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "epsi" +) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL))))))))) ("2" (ASSERT) NIL))) ("2" (ASSERT) (("2" (CASE "FORALL (kkp:nat): kkp>=3 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 2") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "k") (("1" (GRIND) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (LEMMA "pi_bounds") (("2" (INST - "n!1+1") (("2" (GROUND) NIL))))))))))))))))) ("2" (CASE "FORALL (kkp:nat): kkp>=20 IMPLIES 1 / 500 > pi - pi_lbn(kkp)") (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkp") (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (LEMMA "pi_bounds") (("1" (INST - "19") (("1" (FLATTEN) (("1" (CASE "1/500 > pi_ubn(19)-pi_lbn(20)") (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL))))))))))))) ("2" (ASSERT) (("2" (LEMMA "pi_lbn_lt") (("2" (INST - "j") (("2" (LEMMA "pi_bounds") (("2" (INST-CP - "j") (("2" (INST - "1+j") (("2" (GROUND) NIL))))))))))))))))))))))))) ("2" (ASSERT) (("2" (LEMMA "pi_bounds") (("2" (INST - "n!1+1") (("2" (GROUND) NIL)))))))))))))))))))))))))) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|sin_term_pi_lb-2| |nil| 3554628727 ("" (CASE "FORALL (n: nat):
        n >= 10 IMPLIES sin_term(pi_lbn(n))(2 * n + 2) < sin(pi_lbn(n))") (("1" (SKEEP) (("1" (INST - "n") (("1" (ASSERT) (("1" (CASE "n = 9") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(9)" "14") (("1" (FLATTEN) (("1" (INVOKE (CASE "%1 < %2") (! 2 1) (! -1 1)) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "FORALL (n: nat):
                                                                              n >= 20 IMPLIES sin_term(pi_lbn(n))(2 * n + 2) < sin(pi_lbn(n))") (("1" (CASE "FORALL (nnn: subrange(10,20)):
                                                                                                  sin_term(pi_lbn(nnn))(2 * nnn + 2) < sin_lb(pi_lbn(nnn),nnn)") (("1" (SKEEP) (("1" (INST -2 "n") (("1" (ASSERT) (("1" (INST - "n") (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(n)" "n") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_px") (("2" (SKOSIMP*) (("2" (LEMMA "sin_pi_minus") (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (INST?) (("1" (SPLIT -) (("1" (LEMMA "pi_bounds") (("1" (INST - "n!1+1") (("1" (FLATTEN) (("1" (LEMMA "pi_lbn_lt") (("1" (INST - "n!1") (("1" (CASE "pi-pi_lbn(n!1) >= pi_lbn(n!1+1)-pi_lbn(n!1)") (("1" (MULT-BY -1 "(1 - 1 / 1500000)") (("1" (NAME "KZ" "pi_lbn(n!1+1)-pi_lbn(n!1)") (("1" (CASE "sin_term(pi_lbn(n!1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "pi_lb_diff_bounds") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (5 + 5 * nn)") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (CASE "j < 19") (("1" (ASSERT) NIL NIL) ("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 2) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (CASE "NOT j>=20") (("1" (ASSERT) NIL NIL) ("2" (HIDE (1 2)) (("2" (NAME "M" "1-1 / 1500000") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "sin_term") (("2" (CASE "FORALL (k:nat): (-1)^(2*k) = 1") (("1" (INST-CP - "1+j") (("1" (INST - "2+j") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "FORALL (aa:real): 1*aa = aa") (("1" (REWRITE -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LEMMA "pi_lb_quot_bounds") (("1" (INST - "j") (("1" (SKOLETIN -1) (("1" (FLATTEN) (("1" (NAME "disepsi" "(1 - 14.5 * (1 / 5) ^ (4 * j + 3))") (("1" (CASE "disepsi > 0") (("1" (NAME "epsi" "1/(disepsi)") (("1" (REPLACE -3) (("1" (CASE "epsi > 1") (("1" (CASE "((epsi*pi_lbn(j)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                                                                                         14 * (((1 / 5) ^ (10 + 5 * j)) * M)") (("1" (CASE "pi_lbn(1 + j) <= epsi*pi_lbn(j)") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "pi_lbn(1 + j)" "epsi * pi_lbn(j)") (("1" (ASSERT) (("1" (MULT-BY -1 "1/factorial(9+4*j)") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "xquot" -6) (("2" (CROSS-MULT -6) (("2" (EXPAND "epsi" 1) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "epsi^(9+4*j) * pi_lbn(j)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5") (("1" (MULT-INEQ -1 -10) (("1" (INVOKE (CASE "%1 = %2") (! -1 1) (! 1 1)) (("1" (INVOKE (CASE "%1 = %2") (! -2 2) (! 1 2)) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3)) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "5+5*j" "5" "1/5") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)") (("1" (CASE "(epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4)
                                                                                                                                                                                                                                                       * (pi_lbn(j) ^ (5 + 4 * j)) = (epsi * pi_lbn(j)) ^ (9 + 4 * j)") (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 -2 -3 2 3)) (("2" (LEMMA "mult_expt") (("2" (INST - "9+4*j" "epsi" "pi_lbn(j)") (("2" (REPLACES -1) (("2" (HIDE -1) (("2" (LEMMA "expt_plus") (("2" (INST - "5+4*j" "4" "pi_lbn(j)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 2 3)) (("2" (INVOKE (NAME "ej1" "%1") (! 1 1 1)) (("2" (INVOKE (NAME "ej2" "%1") (! 1 1 2)) (("2" (INVOKE (NAME "ej3" "%1") (! 1 1 3)) (("2" (INVOKE (NAME "ej4" "%1") (! 1 1 4)) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (EXPAND "factorial" + 2) (("2" (ASSERT) (("2" (CASE "ej1 -1 = ej2") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej2 -1 = ej3") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej3-1 = ej4") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4 <= 1.1*3.1415927^4") (("1" (MULT-BY -1 "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))") (("1" (INVOKE (CASE "%1 < %2") (! -1 2) (! 1 2)) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (NAME "RD" "j-18") (("2" (CASE "j = RD+18 AND RD>=0") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (CASE "EXISTS (RD2:nat): RD2 = RD") (("1" (SKEEP -1) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -) (("1" (ASSERT) (("1" (CROSS-MULT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "RD") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INVOKE (CASE "%1 < %2 AND %3 < %4") (! 1 1 1) (! 1 2 1) (! 1 1 2) (! 1 2 2)) (("1" (FLATTEN) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (HIDE-ALL-BUT (-8 1)) (("1" (EXPAND "epsi") (("1" (EXPAND "disepsi") (("1" (NAME "egrange" "(1 - 14.5 * (1 / 5) ^ (3 + 4 * j))") (("1" (REPLACE -1) (("1" (NAME "alpha" "14.5 * (1 / 5) ^ (3 + 4 * j)") (("1" (CASE "alpha < 1/3") (("1" (CASE "1/egrange < 1+2*alpha") (("1" (CASE "(1+2*alpha)^(9+4*j) < 1.1") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "1/egrange" "1+2*alpha") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "egrange > 0") (("1" (SPLIT +) (("1" (CROSS-MULT 1) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "14.5*(1/5)^(3+4*j) < 1") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "div_expt" 1) (("2" (CASE "FORALL (nnm:nat): 1^nnm = 1") (("1" (REWRITE -1) (("1" (CASE "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (3 + kkr)) < 1") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nnm") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "alpha" 1) (("2" (ASSERT) (("2" (NAME "FF" "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+6)") (("2" (CASE "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1") (("1" (INST - "3+4*j") (("1" (ASSERT) (("1" (EXPAND "FF" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "jj") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 82") (("1" (REPLACE -1) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND "FF" +) (("2" (CASE "FORALL (egv:nnreal): egv^(7+j!1) = egv^(6+j!1)*egv") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INVOKE (CASE "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)") (! 1 1 2) (! 1 1 1)) (("1" (FLATTEN) (("1" (BOTH-SIDES "+" "1" -2) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (CASE "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkj") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!2 = 74") (("1" (REPLACE -1) (("1" (HIDE -) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "FF") (("2" (NAME "K1" "2 * (14.5 * (1 / 5) ^ (j!1))") (("2" (REPLACE -1) (("2" (CASE "2 * (14.5 * (1 / 5) ^ (1 + j!1)) = (1/5)*K1") (("1" (REPLACE -1) (("1" (NAME "pj" "6+j!1") (("1" (REPLACE -1) (("1" (LEMMA "binomial_theorem") (("1" (INST-CP - "pj" "1" "(1/5)*K1") (("1" (INST - "pj" "1" "K1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "sigma" + 1) (("1" (ASSERT) (("1" (CASE "C(pj, pj) * 1 ^ pj * ((1 / 5) * K1) ^ 0 = 1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "sigma" + 2) (("1" (CASE "C(pj, pj) * 1 ^ pj * K1 ^ 0 = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (REWRITE "sigma_le") (("1" (HIDE 2) (("1" (SKEEP) (("1" (REWRITE "mult_expt" +) (("1" (CASE "(1 / 5) ^ (pj - n) <= 1/5") (("1" (MULT-BY -1 "C(pj, n) * 1 ^ n * K1 ^ (pj - n)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5") (("1" (INST-CP - "pj-n-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1") (("1" (REWRITE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (egv2:nat): 1^egv2 = 1") (("1" (INST?) NIL NIL) ("2" (INDUCT "egv2") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1") (("1" (REWRITE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (egv2:nat): 1^egv2 = 1") (("1" (INST?) NIL NIL) ("2" (INDUCT "egv2") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2) (("2" (REPLACE -3 :DIR RL) (("2" (CROSS-MULT 1) (("2" (ASSERT) (("2" (CASE "alpha > 2*sq(alpha)") (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (CROSS-MULT -1) (("2" (MULT-BY -1 "alpha") (("2" (EXPAND "sq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "alpha" +) (("2" (CASE "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 69") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST - "3" "pi_lbn(j)" "3.1415927") (("2" (ASSERT) (("2" (EXPAND "^") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "pi_bounds") (("2" (INST?) (("2" (FLATTEN) (("2" (LEMMA "pi_bounds") (("2" (INST - "10") (("2" (FLATTEN) (("2" (EVAL-EXPR "pi_ubn(10)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "epsi" +) (("2" (CROSS-MULT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "FORALL (kkp:nat): kkp>=3 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 2") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "k") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST - "n!1+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (kkp:nat): kkp>=20 IMPLIES 1 / 500 > pi - pi_lbn(kkp)") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (LEMMA "pi_bounds") (("1" (INST - "19") (("1" (FLATTEN) (("1" (CASE "1/500 > pi_ubn(19)-pi_lbn(20)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "pi_lbn_lt") (("2" (INST - "j") (("2" (LEMMA "pi_bounds") (("2" (INST-CP - "j") (("2" (INST - "1+j") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "pi_bounds") (("2" (INST - "n!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|sin_term_pi_lb-1| |nil| 3552209695 ("" (CASE "FORALL (n: nat):
                                                                n >= 20 IMPLIES sin_term(pi_lbn(n))(2 * n + 2) < sin(pi_lbn(n))") (("1" (CASE "FORALL (nnn: subrange(10,20)):
                                                                                sin_term(pi_lbn(nnn))(2 * nnn + 2) < sin_lb(pi_lbn(nnn),nnn)") (("1" (SKEEP) (("1" (INST -2 "n") (("1" (ASSERT) (("1" (INST - "n") (("1" (LEMMA "sin_bounds") (("1" (INST - "pi_lbn(n)" "n") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_px") (("2" (SKOSIMP*) (("2" (LEMMA "sin_pi_minus") (("2" (INST?) (("2" (REPLACE -1 :DIR RL) (("2" (INST?) (("1" (SPLIT -) (("1" (LEMMA "pi_bounds") (("1" (INST - "n!1+1") (("1" (FLATTEN) (("1" (LEMMA "pi_lbn_lt") (("1" (INST - "n!1") (("1" (CASE "pi-pi_lbn(n!1) >= pi_lbn(n!1+1)-pi_lbn(n!1)") (("1" (MULT-BY -1 "(1 - 1 / 1500000)") (("1" (NAME "KZ" "pi_lbn(n!1+1)-pi_lbn(n!1)") (("1" (CASE "sin_term(pi_lbn(n!1))(2 * n!1 + 2) <= (1 - 1 / 1500000)*KZ") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "pi_lb_diff_bounds") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "FORALL (nn:nat): nn>=20 IMPLIES sin_term(pi_lbn(nn))(2 + 2 * nn) < (1-1/1500000  )*14 * (1 / 5) ^ (5 + 5 * nn)") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (CASE "j < 19") (("1" (ASSERT) NIL NIL) ("2" (CASE "j = 19") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 2) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (CASE "NOT j>=20") (("1" (ASSERT) NIL NIL) ("2" (HIDE (1 2)) (("2" (NAME "M" "1-1 / 1500000") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "sin_term") (("2" (CASE "FORALL (k:nat): (-1)^(2*k) = 1") (("1" (INST-CP - "1+j") (("1" (INST - "2+j") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "FORALL (aa:real): 1*aa = aa") (("1" (REWRITE -1) (("1" (REWRITE -1) (("1" (HIDE -1) (("1" (LEMMA "pi_lb_quot_bounds") (("1" (INST - "j") (("1" (SKOLETIN -1) (("1" (FLATTEN) (("1" (NAME "disepsi" "(1 - 14.5 * (1 / 5) ^ (4 * j + 3))") (("1" (CASE "disepsi > 0") (("1" (NAME "epsi" "1/(disepsi)") (("1" (REPLACE -3) (("1" (CASE "epsi > 1") (("1" (CASE "((epsi*pi_lbn(j)) ^ (9 + 4 * j)) / factorial(9 + 4 * j) <
                                                                                                                                                                                                                                         14 * (((1 / 5) ^ (10 + 5 * j)) * M)") (("1" (CASE "pi_lbn(1 + j) <= epsi*pi_lbn(j)") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "pi_lbn(1 + j)" "epsi * pi_lbn(j)") (("1" (ASSERT) (("1" (MULT-BY -1 "1/factorial(9+4*j)") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "xquot" -6) (("2" (CROSS-MULT -6) (("2" (EXPAND "epsi" 1) (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "epsi^(9+4*j) * pi_lbn(j)^4/((9+4*j)*(8+4*j)*(7+4*j)*(6+4*j)) < (1/5)^5") (("1" (MULT-INEQ -1 -10) (("1" (INVOKE (CASE "%1 = %2") (! -1 1) (! 1 1)) (("1" (INVOKE (CASE "%1 = %2") (! -2 2) (! 1 2)) (("1" (REPLACE -1 :DIR RL) (("1" (REPLACE -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 -3)) (("2" (ASSERT) (("2" (LEMMA "expt_plus") (("2" (INST - "5+5*j" "5" "1/5") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))*factorial(5 + 4 * j) = factorial(9 + 4 * j)") (("1" (CASE "(epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4)
                                                                                                                                                                       * (pi_lbn(j) ^ (5 + 4 * j)) = (epsi * pi_lbn(j)) ^ (9 + 4 * j)") (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 -2 -3 2 3)) (("2" (LEMMA "mult_expt") (("2" (INST - "9+4*j" "epsi" "pi_lbn(j)") (("2" (REPLACES -1) (("2" (HIDE -1) (("2" (LEMMA "expt_plus") (("2" (INST - "5+4*j" "4" "pi_lbn(j)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 -2 2 3)) (("2" (INVOKE (NAME "ej1" "%1") (! 1 1 1)) (("2" (INVOKE (NAME "ej2" "%1") (! 1 1 2)) (("2" (INVOKE (NAME "ej3" "%1") (! 1 1 3)) (("2" (INVOKE (NAME "ej4" "%1") (! 1 1 4)) (("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (REPLACE -3) (("2" (REPLACE -4) (("2" (EXPAND "factorial" + 2) (("2" (ASSERT) (("2" (CASE "ej1 -1 = ej2") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej2 -1 = ej3") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (CASE "ej3-1 = ej4") (("1" (REPLACES -1) (("1" (EXPAND "factorial" + 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "epsi ^ (9 + 4 * j) * pi_lbn(j) ^ 4 <= 1.1*3.1415927^4") (("1" (MULT-BY -1 "1/((9 + 4 * j) * (8 + 4 * j) * (7 + 4 * j) * (6 + 4 * j))") (("1" (INVOKE (CASE "%1 < %2") (! -1 2) (! 1 2)) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (NAME "RD" "j-18") (("2" (CASE "j = RD+18 AND RD>=0") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (CASE "EXISTS (RD2:nat): RD2 = RD") (("1" (SKEEP -1) (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -) (("1" (ASSERT) (("1" (CROSS-MULT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "RD") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INVOKE (CASE "%1 < %2 AND %3 < %4") (! 1 1 1) (! 1 2 1) (! 1 1 2) (! 1 2 2)) (("1" (FLATTEN) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SPLIT 1) (("1" (HIDE-ALL-BUT (-8 1)) (("1" (EXPAND "epsi") (("1" (EXPAND "disepsi") (("1" (NAME "egrange" "(1 - 14.5 * (1 / 5) ^ (3 + 4 * j))") (("1" (REPLACE -1) (("1" (NAME "alpha" "14.5 * (1 / 5) ^ (3 + 4 * j)") (("1" (CASE "alpha < 1/3") (("1" (CASE "1/egrange < 1+2*alpha") (("1" (CASE "(1+2*alpha)^(9+4*j) < 1.1") (("1" (LEMMA "both_sides_expt_pos_lt_aux") (("1" (INST - "8+4*j" "1/egrange" "1+2*alpha") (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "egrange > 0") (("1" (SPLIT +) (("1" (CROSS-MULT 1) NIL NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "14.5*(1/5)^(3+4*j) < 1") (("1" (ASSERT) NIL NIL) ("2" (REWRITE "div_expt" 1) (("2" (CASE "FORALL (nnm:nat): 1^nnm = 1") (("1" (REWRITE -1) (("1" (CASE "FORALL (kkr:nat): 14.5 * (1 / 5 ^ (3 + kkr)) < 1") (("1" (INST?) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nnm") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "alpha" 1) (("2" (ASSERT) (("2" (NAME "FF" "LAMBDA (jj:nat): (1 + 2 * (14.5 * (1 / 5) ^ (jj))) ^ (jj+6)") (("2" (CASE "FORALL (jj:nat): jj>=83 IMPLIES FF(jj) < 1.1") (("1" (INST - "3+4*j") (("1" (ASSERT) (("1" (EXPAND "FF" -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "jj") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 82") (("1" (REPLACE -1) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 1) (("2" (EXPAND "FF" +) (("2" (CASE "FORALL (egv:nnreal): egv^(7+j!1) = egv^(6+j!1)*egv") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INVOKE (CASE "%1 < 1.0001 AND (%2-1) <= (1/5)*(FF(j!1)-1)") (! 1 1 2) (! 1 1 1)) (("1" (FLATTEN) (("1" (BOTH-SIDES "+" "1" -2) (("1" (MULT-INEQ -1 -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SPLIT) (("1" (CASE "FORALL (kkj:nat): kkj >= 75 IMPLIES (1 + 2 * (14.5 * (1 / 5) ^ (kkj))) < 1.0001") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkj") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!2 = 74") (("1" (REPLACE -1) (("1" (HIDE -) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "FF") (("2" (NAME "K1" "2 * (14.5 * (1 / 5) ^ (j!1))") (("2" (REPLACE -1) (("2" (CASE "2 * (14.5 * (1 / 5) ^ (1 + j!1)) = (1/5)*K1") (("1" (REPLACE -1) (("1" (NAME "pj" "6+j!1") (("1" (REPLACE -1) (("1" (LEMMA "binomial_theorem") (("1" (INST-CP - "pj" "1" "(1/5)*K1") (("1" (INST - "pj" "1" "K1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "sigma" + 1) (("1" (ASSERT) (("1" (CASE "C(pj, pj) * 1 ^ pj * ((1 / 5) * K1) ^ 0 = 1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "sigma" + 2) (("1" (CASE "C(pj, pj) * 1 ^ pj * K1 ^ 0 = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "sigma_scal_right" :DIR RL) (("1" (REWRITE "sigma_le") (("1" (HIDE 2) (("1" (SKEEP) (("1" (REWRITE "mult_expt" +) (("1" (CASE "(1 / 5) ^ (pj - n) <= 1/5") (("1" (MULT-BY -1 "C(pj, n) * 1 ^ n * K1 ^ (pj - n)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "FORALL (kkr:nat): (1/5)^(kkr+1) <= 1/5") (("1" (INST-CP - "pj-n-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kkr") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1") (("1" (REWRITE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (egv2:nat): 1^egv2 = 1") (("1" (INST?) NIL NIL) ("2" (INDUCT "egv2") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (e1,e2,e3:real): e1=1 AND e2=1 AND e3=1 IMPLIES e1*e2*e3=1") (("1" (REWRITE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "C") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (egv2:nat): 1^egv2 = 1") (("1" (INST?) NIL NIL) ("2" (INDUCT "egv2") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "expt" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND "^") (("2" (EXPAND "expt" + 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2) (("2" (REPLACE -3 :DIR RL) (("2" (CROSS-MULT 1) (("2" (ASSERT) (("2" (CASE "alpha > 2*sq(alpha)") (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (CROSS-MULT -1) (("2" (MULT-BY -1 "alpha") (("2" (EXPAND "sq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "alpha" +) (("2" (CASE "FORALL (kkp:nat): kkp>=70 IMPLIES 14.5 * (1 / 5) ^ (kkp) < 1 / 3") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INDUCT "kkp") (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (CASE "j!1 = 69") (("1" (REPLACE -1) (("1" (HIDE-ALL-BUT 1) (("1" (EVAL-FORMULA) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^") (("2" (EXPAND "expt" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|sin_lb_pi_not_pos| 0 (|sin_lb_pi_not_pos-1| |nil| 3554629942 ("" (EVAL-FORMULA) NIL NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|sin_lb_pi_pos| 0 (|sin_lb_pi_pos-2| "" 3790092421 ("" (SKEEP) (("" (LEMMA "sin_approx_sin") (("" (CASE "pi_lbn(n+1) > 0") (("1" (EXPAND "sin_lb") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (CASE "sin_term(pi_lbn(n+1))(2 + 2 * n) > 0") (("1" (EXPAND "abs" - 2) (("1" (ASSERT) (("1" (LEMMA "sin_term_pi_lb") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sin_term" +) (("2" (CROSS-MULT 1) (("2" (LEMMA "posreal_times_posreal_is_posreal") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (CASE "FORALL (kn:nat): (-1)^(2*kn) = 1") (("1" (INST - "1+n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kn") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|sin_approx_sin| FORMULA-DECL NIL |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_term_pi_lb| FORMULA-DECL NIL |trig_approx| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|div_mult_pos_gt1| FORMULA-DECL NIL |extra_real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK) (|sin_lb_pi_pos-1| |nil| 3552149259 ("" (SKEEP) (("" (LEMMA "sin_approx_sin") (("" (CASE "pi_lbn(n+1) > 0") (("1" (EXPAND "sin_lb") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (CASE "sin_term(pi_lbn(n+1))(2 + 2 * n) > 0") (("1" (EXPAND "abs" - 2) (("1" (ASSERT) (("1" (LEMMA "sin_term_pi_lb") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "sin_term" +) (("2" (CROSS-MULT 1) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (CASE "FORALL (kn:nat): (-1)^(2*kn) = 1") (("1" (INST - "1+n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kn") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|pi_lb_est_TCC1| 0 (|pi_lb_est_TCC1-1| |nil| 3554740660 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL)) NIL (|pi_lb_est| SUBTYPE "3" "{i: integers.int | booleans.OR(trig_approx.n /= 0, reals.>=(i, 0))}"))) (|pi_lb_est_TCC2| 0 (|pi_lb_est_TCC2-1| |nil| 3554740660 ("" (SKEEP) (("" (ASSERT) (("" (SPLIT) (("1" (CASE "FORALL (nn:below(13)): pi_lbn(nn) - 2 / (1 + nn ^ 3) >= 0") (("1" (INST - "n") NIL NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST - "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|pi_lb_est| SUBTYPE "(number_fields.-)(atan_approx.pi_lbn(trig_approx.n), number_fields./(2, ((number_fields.+)(exponentiation.^(trig_approx.n, 3), 1))))" "{rr: real_types.nnreal | reals.<(rr, pi_def.pi)}"))) (|pi_lb_est_TCC3| 0 (|pi_lb_est_TCC3-1| |nil| 3554740660 ("" (SKEEP) (("" (LEMMA "pi_bounds") (("" (INST - "n") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|pi_lb_est| SUBTYPE "atan_approx.pi_lbn(trig_approx.n)" "{rr: real_types.nnreal | reals.<(rr, pi_def.pi)}"))) (|pi_lb_est_le| 0 (|pi_lb_est_le-1| |nil| 3554808433 ("" (SKEEP) (("" (LEMMA "pi_bounds") (("" (INST - "n") (("" (EXPAND "pi_lb_est") (("" (LIFT-IF) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|sin_lb_pi_est_pos| 0 (|sin_lb_pi_est_pos-1| |nil| 3554740662 ("" (SKEEP) (("" (LEMMA "sin_lb_pi_pos") (("" (INST - "n") (("" (CASE "n>=12") (("1" (ASSERT) (("1" (EXPAND "pi_lb_est") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn:below(12)): sin_lb(pi_lb_est(nn + 1), nn) > 0") (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_lb_pi_pos| FORMULA-DECL NIL |trig_approx| NIL) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|sin_lb_pi_range_pos| 0 (|sin_lb_pi_range_pos-3| |nil| 3554802047 ("" (SKEEP) (("" (CASE "NOT FORALL (pxx:posreal): pxx <= 1.8 IMPLIES sin_lb(pxx,n) > 0") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP) (("1" (CASE "sin_lb(pxx,0) > 0") (("1" (LEMMA "sin_lb_inc") (("1" (INST - "0" "n" "pxx") (("1" (ASSERT) (("1" (LEMMA "sq_lt") (("1" (INST - "pxx" "1.8") (("1" (ASSERT) (("1" (EXPAND "sq" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "1 > pxx^2/6") (("1" (MULT-BY -1 "pxx") (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (CROSS-MULT 1) (("2" (LEMMA "sq_lt") (("2" (INST - "pxx" "1.8") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "px") (("2" (ASSERT) (("2" (LEMMA "mean_value[nnreal]") (("1" (INST -2 "1.8") (("1" (ASSERT) (("1" (INST - "px" "pi_lb_est(1+n)" "LAMBDA (x:nnreal): sin_lb(x,n)") (("1" (ASSERT) (("1" (LEMMA "sin_lb_deriv") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LEMMA "sin_lb_pi_est_pos") (("1" (INST - "n") (("1" (ASSERT) (("1" (SKEEP -4) (("1" (DECOMPOSE-EQUALITY -3) (("1" (INST - "c") (("1" (EXPAND "deriv" -1) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE "cos_lb(c,n) < 0") (("1" (MULT-BY -1 "pi_lb_est(n+1)-px") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_lb_nn_strict_decreasing") (("2" (INST - "n") (("2" (EXPAND "strict_decreasing?") (("2" (INST - "1.8" "c") (("2" (ASSERT) (("2" (CASE "cos_lb(1.8,n) < 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "NOT FORALL (ii:below(10)): cos_lb(1.8,ii) < 0") (("1" (EVAL-FORMULA) NIL NIL) ("2" (CASE "n < 10") (("1" (INST - "n") NIL NIL) ("2" (ASSERT) (("2" (HIDE -) (("2" (LEMMA "cos_bounds") (("2" (INST - "1.8" "n") (("2" (FLATTEN) (("2" (LEMMA "cos_ub_dec") (("2" (INST - "8" "1.8" "n-8") (("2" (ASSERT) (("2" (CASE "cos_ub(1.8,8) < 0") (("1" (ASSERT) NIL NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|sin_term| CONST-DECL "real" |trig_approx| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|sin_approx| CONST-DECL "real" |trig_approx| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_gt2| FORMULA-DECL NIL |extra_real_props| NIL) (|sin_lb_inc| FORMULA-DECL NIL |trig_approx| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sq_lt| FORMULA-DECL NIL |sq| |reals|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|connected_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_lb_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb_pi_est_pos| FORMULA-DECL NIL |trig_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|cos_lb_nn_strict_decreasing| FORMULA-DECL NIL |trig_approx| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|cos_ub_dec| FORMULA-DECL NIL |trig_approx| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cos_bounds| FORMULA-DECL NIL |trig_approx| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)) NIL) (|sin_lb_pi_range_pos-2| |nil| 3554645774 ("" (SKEEP) (("" (CASE "px < pi_lbn(n)/2") (("1" (LEMMA "mean_value[nnreal]") (("1" (INST - "0" "px" "LAMBDA (x:nnreal): sin_lb(x,n)") (("1" (LEMMA "sin_lb_deriv") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKEEP -3) (("1" (DECOMPOSE-EQUALITY -2) (("1" (INST - "c") (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (LEMMA "sin_lb_a0") (("1" (INST?) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "posreal_times_posreal_is_posreal") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (CASE "cos_lb(c,n) > 0") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "cos_lb_nn_strict_decreasing") (("2" (INST - "n") (("2" (EXPAND "strict_decreasing?") (("2" (INST - "c" "pi_lbn(n)/2") (("1" (ASSERT) (("1" (LEMMA "cos_lb_pi2_pos") (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (LEMMA "pi_bounds") (("3" (INST - "n") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "NOT FORALL (pxx:posreal): 1.5 <= pxx AND pxx <= 1.8 IMPLIES sin_lb(pxx,n) > 0") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (SKEEP) (("1" (CASE "sin_lb(pxx,0) > 0") (("1" (LEMMA "sin_lb_inc") (("1" (INST - "0" "n" "pxx") (("1" (ASSERT) (("1" (LEMMA "sq_lt") (("1" (INST - "pxx" "1.8") (("1" (ASSERT) (("1" (EXPAND "sq" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (CASE "1 > pxx^2/6") (("1" (MULT-BY -1 "pxx") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (CROSS-MULT 1) (("2" (LEMMA "sq_lt") (("2" (INST - "pxx" "1.8") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "px") (("2" (ASSERT) (("2" (CASE "NOT px >= 1.8") (("1" (CASE "FORALL (n:nat): pi_lbn(n+9)/2 > 1.5") (("1" (INST - "n-9") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (EVAL-FORMULA) NIL NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (LEMMA "pi_lbn_lt") (("2" (INST - "9+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (HIDE 1) (("2" (LEMMA "mean_value[nnreal]") (("1" (INST -3 "1.8") (("1" (ASSERT) (("1" (INST - "px" "pi_lbn(n+1)" "LAMBDA (x:nnreal): sin_lb(x,n)") (("1" (ASSERT) (("1" (LEMMA "sin_lb_deriv") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LEMMA "sin_lb_pi_pos") (("1" (INST - "n") (("1" (ASSERT) (("1" (SKEEP -4) (("1" (DECOMPOSE-EQUALITY -3) (("1" (INST - "c") (("1" (EXPAND "deriv" -1) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE "cos_lb(c,n) < 0") (("1" (MULT-BY -1 "pi_lbn(n+1)-px") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_lb_nn_strict_decreasing") (("2" (INST - "n") (("2" (EXPAND "strict_decreasing?") (("2" (INST - "1.8" "c") (("1" (ASSERT) (("1" (CASE "cos_lb(1.8,n) < 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "n>=9") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (CASE "cos_ub(1.8,n) < 0") (("1" (LEMMA "cos_bounds") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "cos_ub_dec") (("2" (CASE "cos_ub(1.8,9) < 0") (("1" (INST - "9" "1.8" "n-9") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST - "n+1") (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "pi_bounds") (("3" (INST - "4") (("3" (FLATTEN) (("3" (EVAL-EXPR "pi_lbn(4)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|sin_lb_pi_range_pos-1| |nil| 3554645662 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|cos_ub_nn_strict_decreasing| 0 (|cos_ub_nn_strict_decreasing-3| "" 3790092426 ("" (EXPAND "strict_decreasing?") (("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (TYPEPRED "y!1") (("" (EXPAND ">=") (("" (LEMMA "cos_ub_deriv") (("" (INST - "n!1") (("" (FLATTEN) (("" (LEMMA "mean_value[real]") (("" (INST - "x!1" "y!1" "LAMBDA (xnn:real): cos_ub(xnn,n!1)") (("" (ASSERT) (("" (SKEEP -1) (("" (DECOMPOSE-EQUALITY -5) (("" (INST - "c") (("" (ASSERT) (("" (EXPAND "deriv" -1) (("" (REPLACES -1) (("" (HIDE -1) (("" (LEMMA "sin_lb_pi_range_pos") (("" (INST - "n!1-1" "c") (("" (ASSERT) (("" (MULT-BY -1 "y!1 - x!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_ub_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|sin_lb_pi_range_pos| FORMULA-DECL NIL |trig_approx| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|)) SHOSTAK) (|cos_ub_nn_strict_decreasing-2| |nil| 3554653590 ("" (EXPAND "strict_decreasing?") (("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (TYPEPRED "y!1") (("" (EXPAND ">=") (("" (LEMMA "cos_ub_deriv") (("" (INST - "n!1") (("" (FLATTEN) (("" (LEMMA "mean_value[real]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:real): cos_ub(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "sin_lb_pi_range_pos") (("1" (INST - "n!1-1" "c") (("1" (ASSERT) (("1" (MULT-BY -1 "y!1 - x!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_real") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|cos_ub_nn_strict_decreasing-1| |nil| 3554651782 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|cos_ub_np_strict_increasing| 0 (|cos_ub_np_strict_increasing-1| |nil| 3554654071 ("" (SKOSIMP) (("" (LEMMA "cos_ub_nn_strict_decreasing" ("n" "n!1")) (("" (ASSERT) (("" (EXPAND "strict_decreasing?") (("" (EXPAND "strict_increasing?") (("" (SKOSIMP) (("" (INST - "-y!1" "-x!1") (("" (ASSERT) (("" (REWRITE "cos_ub_neg") (("" (REWRITE "cos_ub_neg") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cos_ub_nn_strict_decreasing| FORMULA-DECL NIL |trig_approx| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_ub_neg| FORMULA-DECL NIL |trig_approx| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal| TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|sin_lb_increasing| 0 (|sin_lb_increasing-2| |nil| 3555062074 ("" (CASE "FORALL (n: nat):
                      strict_increasing?(LAMBDA (x:
                                                   {x: nnreal |
                                                    x <= pi_lb_est(n) / 2}):
                                           sin_lb(x, n))") (("1" (CASE "FORALL (n: nat):
                          strict_increasing?(LAMBDA (x:
                                                       {x: nnreal |
                                                        x <= pi_lb_est(n) / 2}):
                                               sin_ub(x, n))") (("1" (SKEEP) (("1" (INST - "n") (("1" (INST - "n") (("1" (EXPAND "strict_increasing?") (("1" (SKEEP) (("1" (CASE "x_1 >= 0") (("1" (INST -3 "x_1" "y") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "y<=0") (("1" (INST - "-y" "-x_1") (("1" (ASSERT) (("1" (REWRITE "sin_ub_neg") (("1" (REWRITE "sin_ub_neg") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE (-1 -2)) (("2" (CASE "sin_lb(x_1,n) <= 0 AND 0< sin_lb(y,n)") (("1" (GROUND) NIL NIL) ("2" (HIDE 4) (("2" (SPLIT) (("1" (LEMMA "sin_bounds") (("1" (INST - "x_1" "n") (("1" (FLATTEN) (("1" (LEMMA "sin_le_0") (("1" (INST - "x_1 + 2*pi") (("1" (ASSERT) (("1" (LEMMA "sin_period") (("1" (INST - "x_1" "1") (("1" (ASSERT) (("1" (CASE "-x_1 < pi") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "x_1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_lb_pi_range_pos") (("2" (INST - "n" "y") (("2" (ASSERT) (("2" (TYPEPRED "y") (("2" (ASSERT) (("2" (CASE "pi_lb_est(n) <= pi_lb_est(1+n)") (("1" (ASSERT) NIL NIL) ("2" (CASE "n<=20") (("1" (CASE "FORALL (nn:below(23)): pi_lb_est(nn) <= pi_lb_est(1+nn)") (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (EXPAND "pi_lb_est" 2) (("2" (ASSERT) (("2" (LEMMA "pi_lbn_lt") (("2" (INST - "n") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "strict_increasing?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_ub_deriv") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "mean_value[nnreal]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:nnreal): sin_ub(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (CASE "cos_ub(c,n!1) > 0") (("1" (MULT-BY -1 "y!1-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_bounds") (("2" (INST - "c" "n!1") (("2" (FLATTEN) (("2" (LEMMA "cos_gt_0") (("2" (INST - "c") (("2" (ASSERT) (("2" (TYPEPRED "x!1") (("2" (TYPEPRED "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "strict_increasing?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_lb_deriv") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "mean_value[nnreal]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:nnreal): sin_lb(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (CASE "cos_lb(c,n!1) > 0") (("1" (MULT-BY -1 "y!1-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_lb_pi2_pos") (("2" (CASE "FORALL (n: nat): cos_lb(pi_lb_est(n) / 2, n) > 0") (("1" (HIDE -2) (("1" (INST - "n!1") (("1" (LEMMA "cos_lb_nn_strict_decreasing") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (EXPAND "strict_decreasing?") (("1" (INST - "c" "pi_lb_est(n!1)/2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (egv1:below(12)): cos_lb(pi_lb_est(egv1)/2,egv1) > 0") (("1" (SKEEP) (("1" (CASE "n < 12") (("1" (INST - "n") NIL NIL) ("2" (INST -2 "n") (("2" (ASSERT) (("2" (EXPAND "pi_lb_est") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_lb_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|cos_lb_pi2_pos| FORMULA-DECL NIL |trig_approx| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|cos_lb_nn_strict_decreasing| FORMULA-DECL NIL |trig_approx| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|y| SKOLEM-CONST-DECL "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}" |trig_approx| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|x_1| SKOLEM-CONST-DECL "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}" |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_le_0| FORMULA-DECL NIL |trig_ineq| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_period| FORMULA-DECL NIL |sincos| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|pi_lbn_lt| FORMULA-DECL NIL |atan_approx| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sin_lb_pi_range_pos| FORMULA-DECL NIL |trig_approx| NIL) (|sin_ub_neg| FORMULA-DECL NIL |trig_approx| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|connected_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (|cos_gt_0| FORMULA-DECL NIL |trig_basic| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|sin_ub_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|sin_lb_increasing-1| |nil| 3555062035 ("" (SKEEP) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK)) (|sin_ub_increasing| 0 (|sin_ub_increasing-1| |nil| 3555068416 ("" (SKEEP) (("" (CASE "FORALL (n: nat):
                                    strict_increasing?(LAMBDA (x:
                                                                 {x: nnreal |
                                                                  x <= pi_lb_est(n) / 2}):
                                                         sin_ub(x, n))") (("1" (CASE "FORALL (n: nat):
                                            strict_increasing?(LAMBDA (x:
                                                                         {x: nnreal |
                                                                          x <= pi_lb_est(n) / 2}):
                                                                 sin_lb(x, n))") (("1" (INST - "n") (("1" (INST - "n") (("1" (EXPAND "strict_increasing?") (("1" (SKEEP) (("1" (CASE "x_1 >= 0") (("1" (INST -3 "x_1" "y") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "y<=0") (("1" (INST - "-y" "-x_1") (("1" (ASSERT) (("1" (REWRITE "sin_lb_neg") (("1" (REWRITE "sin_lb_neg") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE (-1 -2)) (("2" (CASE "sin_ub(x_1,n) <= 0 AND 0< sin_ub(y,n)") (("1" (GROUND) NIL NIL) ("2" (HIDE 4) (("2" (SPLIT) (("1" (LEMMA "sin_gt_0") (("1" (INST - "-x_1") (("1" (ASSERT) (("1" (LEMMA "sin_ub_neg") (("1" (INST - "-x_1" "n") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (LEMMA "sin_lb_pi_range_pos") (("1" (INST - "n" "-x_1") (("1" (ASSERT) (("1" (TYPEPRED "x_1") (("1" (ASSERT) (("1" (ASSERT) (("1" (CASE "pi_lb_est(n) < pi_lb_est(n+1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "n < 12") (("1" (CASE "FORALL (nn:below(12)): pi_lb_est(nn) < pi_lb_est(nn+1)") (("1" (INST?) NIL NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (EXPAND "pi_lb_est") (("2" (ASSERT) (("2" (LEMMA "pi_lbn_lt") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_gt_0") (("2" (INST - "y") (("2" (ASSERT) (("2" (LEMMA "sin_bounds") (("2" (INST?) (("2" (FLATTEN) (("2" (ASSERT) (("2" (TYPEPRED "y") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "strict_increasing?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_lb_deriv") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "mean_value[nnreal]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:nnreal): sin_lb(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (CASE "cos_lb(c,n!1) > 0") (("1" (MULT-BY -1 "y!1-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_lb_nn_strict_decreasing") (("2" (INST - "n!1") (("2" (EXPAND "strict_decreasing?") (("2" (INST - "c" "pi_lb_est(n!1)/2") (("1" (ASSERT) (("1" (CASE "NOT FORALL (nn:subrange(0,12)): cos_lb(pi_lb_est(nn)/2,nn) > 0") (("1" (EVAL-FORMULA) NIL NIL) ("2" (CASE "n!1 < 12") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "cos_lb_pi2_pos") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (EXPAND "pi_lb_est" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (TYPEPRED "y!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (EXPAND "strict_increasing?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_ub_deriv") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "mean_value[nnreal]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:nnreal): sin_ub(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (CASE "cos_ub(c,n!1) > 0") (("1" (MULT-BY -1 "y!1-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "cos_bounds") (("2" (INST - "c" "n!1") (("2" (FLATTEN) (("2" (LEMMA "cos_gt_0") (("2" (INST - "c") (("2" (ASSERT) (("2" (TYPEPRED "x!1") (("2" (TYPEPRED "y!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|sin_lb_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|cos_lb_nn_strict_decreasing| FORMULA-DECL NIL |trig_approx| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|cos_lb_pi2_pos| FORMULA-DECL NIL |trig_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|c| SKOLEM-CONST-DECL "nnreal" |trig_approx| NIL) (|both_sides_times_pos_gt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|connected_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|y| SKOLEM-CONST-DECL "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}" |trig_approx| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|x_1| SKOLEM-CONST-DECL "{x: real | -pi_lb_est(n) / 2 <= x AND x <= pi_lb_est(n) / 2}" |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_ub_neg| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb_pi_range_pos| FORMULA-DECL NIL |trig_approx| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pi_lbn_lt| FORMULA-DECL NIL |atan_approx| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|sin_gt_0| FORMULA-DECL NIL |trig_ineq| NIL) (|sin_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb_neg| FORMULA-DECL NIL |trig_approx| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|cos_gt_0| FORMULA-DECL NIL |trig_basic| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|sin_ub_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|sin_lb_nn_decreasing| 0 (|sin_lb_nn_decreasing-2| |nil| 3555075160 ("" (SKOSIMP*) (("" (EXPAND "strict_decreasing?") (("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (TYPEPRED "y!1") (("" (LEMMA "sin_lb_deriv") (("" (INST - "n!1") (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "mean_value[nnreal]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:nnreal): sin_lb(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (CASE "cos_lb(c,n!1) < 0") (("1" (MULT-BY -1 "y!1-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE (-3 -4 2)) (("2" (LEMMA "cos_lt_0") (("2" (INST - "c") (("2" (LEMMA "cos_bounds") (("2" (INST - "c" "n!1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|sin_lb_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_lb| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (TRUE CONST-DECL "bool" |booleans| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|cos_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|cos_lt_0| FORMULA-DECL NIL |trig_ineq| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_lb| CONST-DECL "real" |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|connected_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) NIL) (|sin_lb_nn_decreasing-1| |nil| 3555075104 ("" (SKEEP) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK)) (|cos_term_pi_ub| 0 (|cos_term_pi_ub-3| "" 3744228355 ("" (CASE "FORALL (n:nat):
                            n>=10 IMPLIES -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos(pi_ubn(n) / 2)") (("1" (SKEEP) (("1" (CASE "NOT FORALL (n: subrange(5,10)):
                           -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos_ub(pi_ubn(n) / 2,n+4)") (("1" (HIDE 2) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (CASE "n >= 10") (("1" (INST -3 "n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "n") (("1" (LEMMA "cos_bounds") (("1" (INST - "pi_ubn(n)/2" "n+4") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (LEMMA "sin_cos") (("2" (INST - "pi_ubn(n)/2-pi/2") (("2" (ASSERT) (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "sin_px") (("2" (INST?) (("1" (NAME "M" "1-1 / 1500000") (("1" (REPLACE -1) (("1" (NAME "pd" "pi_ubn(n) / 2 - pi / 2") (("1" (REPLACE -1) (("1" (SPLIT -) (("1" (INVOKE (CASE "%1 < pd*M") (! 1 1)) (("1" (ASSERT) NIL NIL) ("2" (HIDE (2 -1)) (("2" (CASE "pd >= pi_ubn(n)/2 - pi_ubn(n+1)/2") (("1" (MULT-BY -1 "M") (("1" (LEMMA "pi_ub_diff_bounds") (("1" (INST - "n") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INVOKE (CASE "%1 < 16 * M * (1 / 5) ^ (3 + 5 * n)") (! 1 1)) (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 -2 -3 -4 -5)) (("2" (HIDE 2) (("2" (EXPAND "cos_term") (("2" (CASE "(-1)^(1+2*n) = -1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE "(2) ^ (2 + 4 * n) / factorial(2 + 4 * n) < 16 * ((1 / 5) ^ (3 + 5 * n) * M)") (("1" (ASSERT) (("1" (CASE "(pi_ubn(n) / 2) ^ (2 + 4 * n) < (2) ^ (2 + 4 * n)") (("1" (MULT-BY -1 "1/factorial(2+4*n)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST - "1+4*n" "pi_ubn(n)/2" "2") (("2" (EXPAND "^") (("2" (ASSERT) (("2" (CASE "FORALL (nn:nat): pi_ubn(nn+10) < 4") (("1" (INST - "n-10") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (LEMMA "pi_ub_dec") (("2" (INST - "11+j" "10+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "FORALL (kk:nat): (2) ^ (2 + 4 * (kk+10)) / factorial(2 + 4 * (kk+10)) <
                                                     16 * ((1 / 5) ^ (3 + 5 * (kk+10)) * M)") (("1" (INST - "n-10") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kk") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (NAME "eg3" "43+4*j") (("2" (NAME "eg4" "44+4*j") (("2" (NAME "eg5" "45+4*j") (("2" (NAME "eg6" "46+4*j") (("2" (CASE "factorial(46+4*j) = eg6*eg5*eg4*eg3*factorial(42+4*j)") (("1" (REPLACES -1) (("1" (EXPAND "expt" +) (("1" (EXPAND "expt" +) (("1" (EXPAND "expt" +) (("1" (EXPAND "expt" +) (("1" (ASSERT) (("1" (EXPAND "expt" + 2) (("1" (ASSERT) (("1" (CASE "NOT 16/(eg3*eg4*eg5*eg6) < (1/3125)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "eg3") (("1" (EXPAND "eg4") (("1" (EXPAND "eg5") (("1" (EXPAND "eg6") (("1" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-INEQ -1 -6) (("2" (ASSERT) (("2" (REAL-PROPS) NIL NIL)) NIL)) NIL) ("3" (REPLACE -1 :DIR RL :HIDE? T) (("3" (REPLACE -1 :DIR RL :HIDE? T) (("3" (REPLACE -1 :DIR RL :HIDE? T) (("3" (REPLACE -1 :DIR RL :HIDE? T) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-5 2)) (("2" (REPLACE -1) (("2" (EXPAND "factorial" + 1) (("2" (ASSERT) (("2" (CASE "eg5 = eg6-1") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "factorial" + 1) (("1" (ASSERT) (("1" (CASE "eg4 = eg5-1") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "factorial" + 1) (("1" (ASSERT) (("1" (CASE "eg3 = eg4-1") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "factorial" + 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (CASE "FORALL (kk:nat): (-1)^(2*kk+1)=-1") (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kk") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST - "n+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "pi_ubn(n)/2 - pi_lbn(20)/2 < 1/500") (("1" (LEMMA "pi_bounds") (("1" (INST - "20") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn:nat): pi_ubn(nn+10) / 2 - pi_lbn(20) / 2 < 1 / 500") (("1" (INST - "n-10") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (LEMMA "pi_ub_dec") (("2" (INST - "11+j" "10+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "pi_bounds") (("2" (INST - "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_cos| FORMULA-DECL NIL |sincos| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|pi_ub_diff_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|eg3| SKOLEM-CONST-DECL "{x: odd_int | x > 0}" |trig_approx| NIL) (|eg5| SKOLEM-CONST-DECL "{x: odd_int | x > 0}" |trig_approx| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|times_div2| FORMULA-DECL NIL |real_props| NIL) (|eg6| SKOLEM-CONST-DECL "{x: even_int | x > 0}" |trig_approx| NIL) (|eg4| SKOLEM-CONST-DECL "{x: even_int | x > 0}" |trig_approx| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times_pos_le2| FORMULA-DECL NIL |real_props| NIL) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|neg_times_le| FORMULA-DECL NIL |real_props| NIL) (|pos_times_lt| FORMULA-DECL NIL |real_props| NIL) (|neg_times_lt| FORMULA-DECL NIL |real_props| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|odd_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|posrat_expt| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|posreal_expt| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (|pi_ub_dec| FORMULA-DECL NIL |atan_approx| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|both_sides_expt_pos_lt_aux| FORMULA-DECL NIL |exponentiation| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (M SKOLEM-CONST-DECL "rat" |trig_approx| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|sin_px| FORMULA-DECL NIL |trig_approx| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cos_bounds| FORMULA-DECL NIL |trig_approx| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_ubn| CONST-DECL "real" |atan_approx| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|cos_term_pi_ub-2| |nil| 3555153977 ("" (CASE "FORALL (n:nat):
                     n>=10 IMPLIES -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos(pi_ubn(n) / 2)") (("1" (SKEEP) (("1" (CASE "NOT FORALL (n: subrange(5,10)):
                  -cos_term(pi_ubn(n) / 2)(2 * n + 1) < -cos_ub(pi_ubn(n) / 2,n+4)") (("1" (HIDE 2) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (CASE "n >= 10") (("1" (INST -3 "n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "n") (("1" (LEMMA "cos_bounds") (("1" (INST - "pi_ubn(n)/2" "n+4") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (LEMMA "sin_cos") (("2" (INST - "pi_ubn(n)/2-pi/2") (("2" (ASSERT) (("2" (REPLACE -1 :DIR RL) (("2" (HIDE -1) (("2" (LEMMA "sin_px") (("2" (INST?) (("1" (NAME "M" "1-1 / 1500000") (("1" (REPLACE -1) (("1" (NAME "pd" "pi_ubn(n) / 2 - pi / 2") (("1" (REPLACE -1) (("1" (SPLIT -) (("1" (INVOKE (CASE "%1 < pd*M") (! 1 1)) (("1" (ASSERT) NIL NIL) ("2" (HIDE (2 -1)) (("2" (CASE "pd >= pi_ubn(n)/2 - pi_ubn(n+1)/2") (("1" (MULT-BY -1 "M") (("1" (LEMMA "pi_ub_diff_bounds") (("1" (INST - "n") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INVOKE (CASE "%1 < 16 * M * (1 / 5) ^ (3 + 5 * n)") (! 1 1)) (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 -2 -3 -4 -5)) (("2" (HIDE 2) (("2" (EXPAND "cos_term") (("2" (CASE "(-1)^(1+2*n) = -1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (CASE "(2) ^ (2 + 4 * n) / factorial(2 + 4 * n) < 16 * ((1 / 5) ^ (3 + 5 * n) * M)") (("1" (ASSERT) (("1" (CASE "(pi_ubn(n) / 2) ^ (2 + 4 * n) < (2) ^ (2 + 4 * n)") (("1" (MULT-BY -1 "1/factorial(2+4*n)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_expt_pos_lt_aux") (("2" (INST - "1+4*n" "pi_ubn(n)/2" "2") (("2" (EXPAND "^") (("2" (ASSERT) (("2" (CASE "FORALL (nn:nat): pi_ubn(nn+10) < 4") (("1" (INST - "n-10") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (LEMMA "pi_ub_dec") (("2" (INST - "11+j" "10+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (CASE "FORALL (kk:nat): (2) ^ (2 + 4 * (kk+10)) / factorial(2 + 4 * (kk+10)) <
                              16 * ((1 / 5) ^ (3 + 5 * (kk+10)) * M)") (("1" (INST - "n-10") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kk") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (NAME "eg3" "43+4*j") (("2" (NAME "eg4" "44+4*j") (("2" (NAME "eg5" "45+4*j") (("2" (NAME "eg6" "46+4*j") (("2" (CASE "factorial(46+4*j) = eg6*eg5*eg4*eg3*factorial(42+4*j)") (("1" (REPLACES -1) (("1" (EXPAND "expt" +) (("1" (EXPAND "expt" +) (("1" (EXPAND "expt" +) (("1" (EXPAND "expt" +) (("1" (ASSERT) (("1" (EXPAND "expt" + 2) (("1" (ASSERT) (("1" (CASE "NOT 16/(eg3*eg4*eg5*eg6) < (1/3125)") (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "eg3") (("1" (EXPAND "eg4") (("1" (EXPAND "eg5") (("1" (EXPAND "eg6") (("1" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MULT-INEQ -1 -6) (("2" (ASSERT) (("2" (REAL-PROPS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-5 2)) (("2" (REPLACE -1) (("2" (EXPAND "factorial" + 1) (("2" (ASSERT) (("2" (CASE "eg5 = eg6-1") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "factorial" + 1) (("1" (ASSERT) (("1" (CASE "eg4 = eg5-1") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "factorial" + 1) (("1" (ASSERT) (("1" (CASE "eg3 = eg4-1") (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "factorial" + 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^") (("2" (CASE "FORALL (kk:nat): (-1)^(2*kk+1)=-1") (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kk") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pi_bounds") (("2" (INST - "n+1") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "pi_ubn(n)/2 - pi_lbn(20)/2 < 1/500") (("1" (LEMMA "pi_bounds") (("1" (INST - "20") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn:nat): pi_ubn(nn+10) / 2 - pi_lbn(20) / 2 < 1 / 500") (("1" (INST - "n-10") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (LEMMA "pi_ub_dec") (("2" (INST - "11+j" "10+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "pi_bounds") (("2" (INST - "n") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|cos_term_pi_ub-1| |nil| 3555153841 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|cos_ub_pi2_neg| 0 (|cos_ub_pi2_neg-3| |nil| 3555164747 ("" (SKEEP) (("" (LEMMA "cos_approx_cos") (("" (EXPAND "cos_ub") (("" (INST?) (("" (CASE "cos_term(pi_ubn(n) / 2)(2 * n + 1) < 0") (("1" (EXPAND "abs" - 2) (("1" (ASSERT) (("1" (LEMMA "cos_term_pi_ub") (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-1 2)) (("2" (EXPAND "cos_term") (("2" (CROSS-MULT 1) (("2" (ASSERT) (("2" (CASE "FORALL (nn:nat): (-1)^(2*nn+1) = -1") (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "nn") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (EXPAND "^") (("2" (ASSERT) (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cos_approx_cos| FORMULA-DECL NIL |trig_approx| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pi_ubn| CONST-DECL "real" |atan_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|posreal_exp| APPLICATION-JUDGEMENT "posreal" |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|cos_term_pi_ub| FORMULA-DECL NIL |trig_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|cos_term| CONST-DECL "real" |trig_approx| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL)) NIL) (|cos_ub_pi2_neg-2| |nil| 3555164653 ("" (SKEEP) (("" (LEMMA "sin_lb_pi_pos") (("" (INST - "n") (("" (CASE "n>=12") (("1" (ASSERT) (("1" (EXPAND "pi_lb_est") (("1" (PROPAX) NIL))))) ("2" (CASE "FORALL (nn:below(12)): sin_lb(pi_lb_est(nn + 1), nn) > 0") (("1" (INST - "n") (("1" (ASSERT) NIL))) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL)))))))))))) NIL) NIL NIL) (|cos_ub_pi2_neg-1| |nil| 3555076643 ("" (SKEEP) (("" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK)) (|pi_ub_est_TCC1| 0 (|pi_ub_est_TCC1-1| |nil| 3555166679 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|pi_ub_est| SUBTYPE "4" "{i: integers.int | booleans.OR((booleans.NOT)((number_fields.+)(1, trig_approx.n) = 0), reals.>=(i, 0))}"))) (|pi_ub_est_TCC2| 0 (|pi_ub_est_TCC2-1| |nil| 3555166679 ("" (SKEEP) (("" (LEMMA "pi_bounds") (("" (INST - "10") (("" (CASE "n = 0 OR n = 1 OR n=2 OR n=3 OR n=4") (("1" (CASE "pi_ubn(n) + 1 / (n + 1) ^ 4 > pi_ubn(10) AND pi_ubn(n) + 1 / (n + 1) ^ 4 < 3 * pi_lbn(10) / 2") (("1" (HIDE -2) (("1" (GROUND) NIL NIL)) NIL) ("2" (HIDE -2) (("2" (HIDE 2) (("2" (SPLIT -) (("1" (REPLACES -1) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EVAL-FORMULA) NIL NIL)) NIL) ("3" (REPLACES -1) (("3" (EVAL-FORMULA) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (EVAL-FORMULA) NIL NIL)) NIL) ("5" (REPLACES -1) (("5" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_ubn| CONST-DECL "real" |atan_approx| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|pi_ub_est| SUBTYPE "(number_fields.+)(atan_approx.pi_ubn(trig_approx.n), number_fields./(1, exponentiation.^(((number_fields.+)(trig_approx.n, 1)), 4)))" "{rr: real_types.nnreal | booleans.AND(reals.<(pi_def.pi, rr), reals.<(rr, number_fields./(number_fields.*(3, pi_def.pi), 2)))}"))) (|pi_ub_est_TCC3| 0 (|pi_ub_est_TCC3-1| |nil| 3555167332 ("" (CASE "FORALL (n: nat): pi_ubn(n+5) < 3 * pi_lbn(10) / 2") (("1" (SKEEP) (("1" (SPLIT) (("1" (LEMMA "pi_bounds") (("1" (INST - "n") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (INST - "n-5") (("1" (ASSERT) (("1" (LEMMA "pi_bounds") (("1" (INST - "10") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (ASSERT) (("1" (EVAL-FORMULA) NIL NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (LEMMA "pi_ub_dec") (("2" (INST - "6+j" "5+j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_ub_dec| FORMULA-DECL NIL |atan_approx| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|n| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|pi_lb_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|pi_bounds| FORMULA-DECL NIL |atan_approx| NIL) (|pi_lbn| CONST-DECL "real" |atan_approx| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|pi_ubn| CONST-DECL "real" |atan_approx| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|pi_ub_est| SUBTYPE "atan_approx.pi_ubn(trig_approx.n)" "{rr: real_types.nnreal | booleans.AND(reals.<(pi_def.pi, rr), reals.<(rr, number_fields./(number_fields.*(3, pi_def.pi), 2)))}"))) (|sin_ub_nn_decreasing| 0 (|sin_ub_nn_decreasing-2| |nil| 3555167426 ("" (SKOSIMP*) (("" (EXPAND "strict_decreasing?") (("" (SKOSIMP*) (("" (LEMMA "sin_ub_deriv") (("" (INST - "n!1") (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "mean_value[nnreal]") (("1" (INST - "x!1" "y!1" "LAMBDA (xnn:nnreal): sin_ub(xnn,n!1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST - "c") (("1" (ASSERT) (("1" (EXPAND "deriv" -1) (("1" (REPLACES -1) (("1" (CASE "cos_ub(c,n!1) < 0") (("1" (MULT-BY -1 "y!1-x!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (LEMMA "cos_ub_nn_strict_decreasing") (("2" (INST - "n!1") (("2" (ASSERT) (("2" (EXPAND "strict_decreasing?") (("2" (INST - "pi_ub_est(n!1)/2" "c") (("2" (ASSERT) (("2" (CASE "n!1 >= 5") (("1" (LEMMA "cos_ub_pi2_neg") (("1" (INST - "n!1") (("1" (ASSERT) (("1" (EXPAND "pi_ub_est") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (nn:subrange(1,5)): cos_ub(pi_ub_est(nn) / 2, nn)<0") (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "x!1") (("2" (EXPAND "pi_ub_est") (("2" (LIFT-IF) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (TYPEPRED "x!1") (("3" (EXPAND "pi_ub_est") (("3" (LIFT-IF) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "connected_nnreal") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|strict_decreasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|sin_ub_deriv| FORMULA-DECL NIL |trig_approx| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_ub| CONST-DECL "real" |trig_approx| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|cos_ub_pi2_neg| FORMULA-DECL NIL |trig_approx| NIL) (|pi_ub_pos| APPLICATION-JUDGEMENT "posreal" |atan_approx| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}" |atan_approx| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|cos_ub_nn_strict_decreasing| FORMULA-DECL NIL |trig_approx| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|pi_ub_est| CONST-DECL "{rr: nnreal | pi < rr AND rr < 3 * pi / 2}" |trig_approx| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |trig_approx| NIL) (|pi_lb_est| CONST-DECL "{rr: nnreal | rr < pi}" |trig_approx| NIL) (|x!1| SKOLEM-CONST-DECL "{x: real | pi_ub_est(n!1) / 2 <= x AND x <= pi_lb_est(n!1)}" |trig_approx| NIL) (|y!1| SKOLEM-CONST-DECL "{x: real | pi_ub_est(n!1) / 2 <= x AND x <= pi_lb_est(n!1)}" |trig_approx| NIL) (|sin_ub| CONST-DECL "real" |trig_approx| NIL) (|connected_nnreal| FORMULA-DECL NIL |deriv_domain| |analysis|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL) (|sin_ub_nn_decreasing-1| |nil| 3555167399 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)))
