(|arcsin| (|IMP_derivative_props_TCC1| 0 (|IMP_derivative_props_TCC1-1| |nil| 3708362116 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|IMP_derivative_props| ASSUMING "derivative_props[real_abs_lt_pi2].derivative_props" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|IMP_derivative_props_TCC2| 0 (|IMP_derivative_props_TCC2-1| |nil| 3708362116 ("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST-CP + "pi/3") (("" (ASSERT) (("" (INST-CP + "pi/4") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) NIL (|IMP_derivative_props| ASSUMING "derivative_props[real_abs_lt_pi2].derivative_props" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|sin_restrict_range| 0 (|sin_restrict_range-1| |nil| 3706536774 ("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (CASE "sin(x!1) = 1 IMPLIES x!1 = pi/2") (("1" (CASE "sin(x!1) = -1 IMPLIES x!1 = -pi/2") (("1" (GROUND) NIL NIL) ("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (LEMMA "sin_eq_m1") (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (CASE "i!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "i!1 >= 1") (("1" (ASSERT) (("1" (MULT-BY -1 "2*pi") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i!1 <= -1") (("1" (ASSERT) (("1" (MULT-BY -1 "2*pi") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 2) (("2" (LEMMA "sin_eq_1") (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (HIDE -2) (("2" (CASE "i!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "i!1 >= 1") (("1" (ASSERT) (("1" (MULT-BY -1 "2*pi") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i!1 <= -1") (("1" (ASSERT) (("1" (MULT-BY -1 "2*pi") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|sin_eq_1| FORMULA-DECL NIL |trig_basic| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (>= CONST-DECL "bool" |reals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_eq_m1| FORMULA-DECL NIL |trig_basic| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) SHOSTAK)) (|sin_restrict_TCC1| 0 (|sin_restrict_TCC1-1| |nil| 3706537677 ("" (SKOSIMP*) (("" (LEMMA "sin_restrict_range") (("" (INST?) NIL NIL)) NIL)) NIL) ((|sin_restrict_range| FORMULA-DECL NIL |arcsin| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) NIL (|sin_restrict| SUBTYPE "sincos_def.sin(arcsin.x)" "real_abs_lt1"))) (|sin_restrict_inj| 0 (|sin_restrict_inj-1| |nil| 3706537706 ("" (EXPAND "injective?") (("" (SKOSIMP*) (("" (CASE "x1!1 <= x2!1") (("1" (LEMMA "sin_increasing") (("1" (INST - "x2!1" "x1!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x2!1") (("2" (LEMMA "sin_increasing") (("2" (INST - "x1!1" "x2!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_increasing| FORMULA-DECL NIL |trig_ineq| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) NIL)) (|sin_restrict_surj| 0 (|sin_restrict_surj-2| |nil| 3707049070 ("" (EXPAND "surjective?") (("" (SKOSIMP*) (("" (CASE "y!1 = 0") (("1" (INST + "0") (("1" (REWRITE "sin_0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "pi") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!1") (("2" (CASE "y!1 > 0") (("1" (LEMMA "intermediate_value2[0,pi/2]") (("1" (INST - "sin" "y!1") (("1" (ASSERT) (("1" (EXPAND "restrict") (("1" (REWRITE "sin_pi2") (("1" (REWRITE "sin_0") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (TYPEPRED "c!1") (("1" (CASE-REPLACE "c!1 = pi/2") (("1" (REWRITE "sin_pi2") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "continuous?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_continuous") (("2" (INST?) (("2" (EXPAND "continuous?") (("2" (SKOSIMP*) (("2" (INST - "epsilon!1") (("2" (SKOSIMP*) (("2" (INST + "delta!1") (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "intermediate_value2[-pi/2,0]") (("1" (INST - "sin" "y!1") (("1" (EXPAND "restrict") (("1" (REWRITE "sin_0") (("1" (LEMMA "sin_pi2") (("1" (LEMMA "sin_neg") (("1" (INST - "pi/2") (("1" (ASSERT) (("1" (SPLIT -3) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 4) (("2" (EXPAND "continuous?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_continuous") (("2" (INST?) (("2" (EXPAND "continuous?") (("2" (SKOSIMP*) (("2" (INST - "epsilon!1") (("2" (SKOSIMP*) (("2" (INST + "delta!1") (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 4) (("2" (TYPEPRED "pi") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|c!1| SKOLEM-CONST-DECL "J[-pi / 2, 0]" |arcsin| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_neg| FORMULA-DECL NIL |sincos_def| NIL) (|intermediate_value2| FORMULA-DECL NIL |continuity_interval| |analysis|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sin_pi2| FORMULA-DECL NIL |sincos| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_continuous| FORMULA-DECL NIL |sincos| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|c!1| SKOLEM-CONST-DECL "J[0, pi / 2]" |arcsin| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (J NONEMPTY-TYPE-EQ-DECL NIL |continuity_interval| |analysis|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_0| FORMULA-DECL NIL |sincos_def| NIL) (|pi_ub_new| CONST-DECL "posreal" |pi_def| NIL) (|pi_lb_new| CONST-DECL "posreal" |pi_def| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) NIL) (|sin_restrict_surj-1| |nil| 3707047899 ("" (EXPAND "surjective?") (("" (SKOSIMP*) (("" (CASE "y!1 = 0") (("1" (INST + "0") (("1" (REWRITE "sin_0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "pi") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "y!1") (("2" (CASE "y!1 > 0") (("1" (NAME "XX" "(y!1+1)/2") (("1" (LEMMA "intermediate_value2[0,XX]") (("1" (INST - "(LAMBDA (x:J[0,XX]): sin(x))" "y!1") (("1" (REWRITE "sin_0") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (INST + "c!1") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "continuous?") (("2" (SKOSIMP*) (("2" (LEMMA "sin_continuous") (("2" (INST?) (("2" (EXPAND "continuous?") (("2" (SKOSIMP*) (("2" (INST - "epsilon!1") (("2" (SKOSIMP*) (("2" (INST + "delta!1") (("2" (SKOSIMP*) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sin_restrict_bij| 0 (|sin_restrict_bij-1| |nil| 3706539040 ("" (EXPAND "bijective?") (("" (LEMMA "sin_restrict_surj") (("" (ASSERT) (("" (LEMMA "sin_restrict_inj") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_restrict_surj| FORMULA-DECL NIL |arcsin| NIL) (|sin_restrict_inj| FORMULA-DECL NIL |arcsin| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) SHOSTAK)) (|del_neigh_lem| 0 (|del_neigh_lem-1| |nil| 3706605371 ("" (EXPAND "del_neigh_all?") (("" (SKOSIMP*) (("" (INST + "min((pi/2-a!1)/2,(a!1+pi/2)/2.0)") (("1" (SKOSIMP*) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND :EXCLUDE "pi") NIL NIL)) NIL)) NIL)) NIL) ((|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|a!1| SKOLEM-CONST-DECL "real_abs_lt_pi2" |arcsin| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|del_neigh_all?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|deriv_sin_restrict| 0 (|deriv_sin_restrict-1| |nil| 3706515998 ("" (LEMMA "derivable_sin") (("" (LEMMA "derivable_subtype[real,real_abs_lt_pi2]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "restrict") (("" (ASSERT) (("" (LEMMA "deriv_subtype[real,real_abs_lt_pi2]") (("" (INST?) (("" (ASSERT) (("" (SPLIT -1) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_fun") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "del_neigh_lem") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|derivable_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|noa_real_lt_pi2| FORMULA-DECL NIL |sincos| NIL) (|deriv_domain_real_abs_lt_pi2| FORMULA-DECL NIL |sincos| NIL) (|deriv_sin_fun| FORMULA-DECL NIL |sincos| NIL) (|del_neigh_lem| FORMULA-DECL NIL |arcsin| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|deriv_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|) (|restrict| CONST-DECL "R" |restrict| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|derivable_sin| FORMULA-DECL NIL |sincos_def| NIL)) SHOSTAK)) (|arc_sin_exists| 0 (|arc_sin_exists-2| "" 3790092576 ("" (LEMMA "sin_restrict_range") (("" (INST + "inverse[real_abs_lt_pi2,real_abs_lt1](sin_restrict)") (("" (SKOSIMP*) (("" (LEMMA "inverse_surjective[real_abs_lt_pi2,real_abs_lt1]") (("" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_restrict_surj") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|inverse_surjective| FORMULA-DECL NIL |function_inverse| NIL) (|sin_restrict_surj| FORMULA-DECL NIL |arcsin| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|sin_restrict_range| FORMULA-DECL NIL |arcsin| NIL)) SHOSTAK) (|arc_sin_exists-1| |nil| 3706538326 ("" (LEMMA "sin_restrict_range") (("" (INST + "inverse[real_abs_lt_pi2,real_abs_lt1](sin_restrict)") (("1" (SKOSIMP*) (("1" (LEMMA "inverse_surjective[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_restrict_surj") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (INST?) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL)) (|arc_sin_TCC1| 0 (|arc_sin_TCC1-1| |nil| 3408970754 ("" (LEMMA "arc_sin_exists") (("" (PROPAX) NIL NIL)) NIL) ((|arc_sin_exists| FORMULA-DECL NIL |arcsin| NIL)) NIL (|arc_sin| EXISTENCE "" "[y: real_abs_lt1 -> {x: trig_types.real_abs_lt_pi2 | y = sincos_def.sin(x)}]"))) (|arc_sin_inverse| 0 (|arc_sin_inverse-4| "" 3882467472 ("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LEMMA "inverse_injective[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "arc_sin(x!1)" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_restrict_inj") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 -2 2) (("3" (SKOSIMP*) (("3" (LEMMA "sin_restrict_range") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_restrict_range") (("2" (PROPAX) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|arc_sin_inverse-3| "" 3790092576 ("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LEMMA "inverse_injective[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "arc_sin(x!1)" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_restrict_inj") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 -2 2) (("3" (SKOSIMP*) (("3" (LEMMA "sin_restrict_range") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "sin_restrict") (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (LEMMA "inverse_surjective[real_abs_lt_pi2, real_abs_lt1]") (("2" (INST?) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA SIN_RESTRICT_SURJ) (("2" (ASSERT) (("2" (EXPAND "sin_restrict") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sin_restrict_range") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ((|inverse_injective| FORMULA-DECL NIL |function_inverse| NIL) (|sin_restrict_range| FORMULA-DECL NIL |arcsin| NIL) (|sin_restrict_inj| FORMULA-DECL NIL |arcsin| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|inverse| CONST-DECL "D" |function_inverse| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL)) SHOSTAK) (|arc_sin_inverse-2| |nil| 3706880677 ("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (LEMMA "inverse_injective[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "arc_sin(x!1)" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_restrict_inj") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (HIDE -1 -2 2) (("3" (SKOSIMP*) (("3" (LEMMA "sin_restrict_range") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "sin_restrict") (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (LEMMA "inverse_surjective[real_abs_lt_pi2, real_abs_lt1]") (("2" (INST?) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA SIN_RESTRICT_SURJ) (("2" (ASSERT) (("2" (EXPAND "sin_restrict") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "sin_restrict_range") (("3" (ASSERT) (("3" (SKOSIMP*) (("3" (INST?) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|arc_sin_inverse-1| |nil| 3706871906 ("" (LEMMA "bijective_inverse_is_bijective[real_abs_lt_pi2,real_abs_lt1]") (("" (INST?) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (POSTPONE) NIL NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "bijective?") (("2" (LEMMA SIN_RESTRICT_INJ) (("2" (ASSERT) (("2" (LEMMA SIN_RESTRICT_SURJ) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "sin_restrict_range") (("3" (INST?) (("3" (ASSERT) (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sin_arc_sin| 0 (|sin_arc_sin-1| |nil| 3408970763 ("" (SKOSIMP*) (("" (TYPEPRED "arc_sin(y!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) SHOSTAK)) (|arc_sin_sin| 0 (|arc_sin_sin-1| |nil| 3408970777 ("" (SKOSIMP*) (("" (TYPEPRED "arc_sin(sin(x!1))") (("" (LEMMA "sin_restrict_inj") (("" (EXPAND "injective?") (("" (INST - "x!1" "arc_sin(sin(x!1))") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sin_restrict_inj| FORMULA-DECL NIL |arcsin| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) SHOSTAK)) (|arc_sin_0| 0 (|arc_sin_0-1| |nil| 3707141879 ("" (TYPEPRED "arc_sin(0)") (("" (LEMMA "sin_eq_0") (("" (INST?) (("" (ASSERT) (("" (SKOSIMP*) (("" (CASE "i!1 = 0") (("1" (ASSERT) NIL NIL) ("2" (CASE "i!1 >= 1") (("1" (MULT-BY -1 "2*pi") (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "i!1 <= -1") (("1" (MULT-BY -1 "2*pi") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin_eq_0| FORMULA-DECL NIL |sincos| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) SHOSTAK)) (|arc_sin_derivable_TCC1| 0 (|arc_sin_derivable_TCC1-1| |nil| 3706514856 ("" (LEMMA "deriv_domain_open") (("" (INST - "-1" "1") NIL NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|deriv_domain_open| FORMULA-DECL NIL |deriv_domain| |analysis|)) NIL (|arc_sin_derivable| ASSUMING "analysis@derivatives[real_abs_lt1].derivatives" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|arc_sin_derivable_TCC2| 0 (|arc_sin_derivable_TCC2-1| |nil| 3706524005 ("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST-CP + 0) (("" (INST-CP + 1/2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|arc_sin_derivable| ASSUMING "analysis@derivatives[real_abs_lt1].derivatives" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|arc_sin_derivable| 0 (|arc_sin_derivable-8| "" 3790092578 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "(LAMBDA (x: real_abs_lt_pi2): sin(x))" "(LAMBDA (x: real_abs_lt1): arc_sin(x))" "deriv[real_abs_lt_pi2](LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (SPLIT -1) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("3" (LEMMA "sin_restrict_bij") (("3" (PROPAX) NIL NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "inverse?") (("4" (SKOSIMP*) (("4" (TYPEPRED "arc_sin(r!1)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "deriv_sin") (("2" (INST?) (("2" (LEMMA "deriv_subtype[real,real_abs_lt_pi2]") (("2" (INST?) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (HIDE -1 -2 1) (("1" (LEMMA "cos_gt_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 1 2) (("2" (LEMMA "cos_gt_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_derivable_fun") (("2" (PROPAX) NIL NIL)) NIL) ("3" (HIDE -1 -2 2) (("3" (LEMMA DEL_NEIGH_LEM) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "x!1") (("4" (LEMMA "sin_restrict_range") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|inverse?| CONST-DECL "bool" |function_inverse_def| NIL) (|sin_restrict_bij| FORMULA-DECL NIL |arcsin| NIL) (|deriv_sin_restrict| FORMULA-DECL NIL |arcsin| NIL) (|deriv_sin| FORMULA-DECL NIL |sincos_def| NIL) (|deriv_subtype| FORMULA-DECL NIL |derivatives_subtype| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|noa_real_lt_pi2| FORMULA-DECL NIL |sincos| NIL) (|del_neigh_lem| FORMULA-DECL NIL |arcsin| NIL) (|sin_derivable_fun| FORMULA-DECL NIL |sincos| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|cos_gt_0| FORMULA-DECL NIL |trig_basic| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sin_restrict_range| FORMULA-DECL NIL |arcsin| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|inverse_derivable_fun| FORMULA-DECL NIL |derivative_inverse| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL)) SHOSTAK) (|arc_sin_derivable-7| "" 3706870451 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "(LAMBDA (x: real_abs_lt_pi2): sin(x))" "(LAMBDA (x: real_abs_lt1): arc_sin(x))" "deriv[real_abs_lt_pi2](LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (SPLIT -1) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("3" (LEMMA "sin_restrict_bij") (("3" (PROPAX) NIL NIL)) NIL) ("4" (HIDE 2) (("4" (EXPAND "inverse?") (("4" (SKOSIMP*) (("4" (TYPEPRED "arc_sin(r!1)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "deriv_sin") (("2" (INST?) (("2" (LEMMA "deriv_subtype[real,real_abs_lt_pi2]") (("2" (INST?) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (EXPAND "restrict") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (REPLACE -2) (("1" (REPLACE -1) (("1" (HIDE -1 -2 1) (("1" (LEMMA "cos_gt_0") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 1 2) (("2" (LEMMA "cos_gt_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sin_derivable_fun") (("2" (PROPAX) NIL NIL)) NIL) ("3" (HIDE -1 -2 2) (("3" (LEMMA DEL_NEIGH_LEM) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) (("4" (TYPEPRED "x!1") (("4" (LEMMA "sin_restrict_range") (("4" (INST?) (("4" (ASSERT) (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|arc_sin_derivable-6| |nil| 3706539890 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)") (("1" (ASSERT) (("1" (LEMMA "sin_restrict_bij") (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_restrict") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "arc_sin_inverse") (("1" (REPLACE -1 +) (("1" (HIDE -1 -2) (("1" (REWRITE RIGHT_INVERSE_IS_INVERSE) (("1" (HIDE 2) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (LEMMA "surj_right[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (LEMMA "arc_sin_inverse") (("2" (REPLACE -1) (("2" (REPLACE -1 + RL) (("2" (SKOSIMP*) (("2" (HIDE 1) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) (("2" (EXPAND "sin_restrict") (("2" (ASSERT) NIL))))))))))))))))) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL))))) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL))) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL)))))) NIL) NIL NIL) (|arc_sin_derivable-5| |nil| 3706539813 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)") (("1" (ASSERT) (("1" (LEMMA "sin_restrict_bij") (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_restrict") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "arc_sin_inverse") (("1" (REPLACE -1 +) (("1" (HIDE -1 -2) (("1" (REWRITE RIGHT_INVERSE_IS_INVERSE) (("1" (HIDE 2) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (LEMMA "surj_right[real_abs_lt_pi2,real]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (LEMMA "arc_sin_inverse") (("2" (REPLACE -1) (("2" (REPLACE -1 + RL) (("2" (SKOSIMP*) (("2" (HIDE 1) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) (("2" (EXPAND "sin_restrict") (("2" (ASSERT) NIL))))))))))))))))) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL))))) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL))) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL)))))) NIL) NIL NIL) (|arc_sin_derivable-4| |nil| 3706539461 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_pi2,real_abs_lt1]") (("1" (INST - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)") (("1" (ASSERT) (("1" (LEMMA "sin_restrict_bij") (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_restrict") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "asin_inverse") (("1" (REPLACE -1 +) (("1" (HIDE -1 -2) (("1" (REWRITE RIGHT_INVERSE_IS_INVERSE) (("1" (HIDE 2) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (LEMMA "surj_right[real_abs_lt_pi2,real]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (LEMMA "asin_inverse") (("2" (REPLACE -1) (("2" (REPLACE -1 + RL) (("2" (SKOSIMP*) (("2" (HIDE 1) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) (("2" (EXPAND "sin_restrict") (("2" (ASSERT) NIL))))))))))))))))) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL))))) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL))) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL)))))) NIL) NIL NIL) (|arc_sin_derivable-3| |nil| 3706539226 ("" (LEMMA "inverse_derivable_fun[real_abs_lt1,real_abs_lt_pi2]") (("1" (INST - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)") (("1" (ASSERT) (("1" (LEMMA "sin_restrict_bij") (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_restrict") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "asin_inverse") (("1" (REPLACE -1 +) (("1" (HIDE -1 -2) (("1" (REWRITE RIGHT_INVERSE_IS_INVERSE) (("1" (HIDE 2) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (LEMMA "surj_right[real_abs_lt_pi2,real]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (LEMMA "asin_inverse") (("2" (REPLACE -1) (("2" (REPLACE -1 + RL) (("2" (SKOSIMP*) (("2" (HIDE 1) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) (("2" (EXPAND "sin_restrict") (("2" (ASSERT) NIL))))))))))))))))) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL))))) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL))) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL)))))) NIL) NIL NIL) (|arc_sin_derivable-2| |nil| 3706537151 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_1,real_abs_lt_pi2]") (("1" (INST - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)") (("1" (ASSERT) (("1" (LEMMA "sin_restrict_bij") (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_restrict") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "asin_inverse") (("1" (REPLACE -1 +) (("1" (HIDE -1 -2) (("1" (REWRITE RIGHT_INVERSE_IS_INVERSE) (("1" (HIDE 2) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (LEMMA "surj_right[real_abs_lt_pi2,real]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (LEMMA "asin_inverse") (("2" (REPLACE -1) (("2" (REPLACE -1 + RL) (("2" (SKOSIMP*) (("2" (HIDE 1) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) (("2" (EXPAND "sin_restrict") (("2" (ASSERT) NIL))))))))))))))))) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL))))) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL))) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL)))))) NIL) NIL NIL) (|arc_sin_derivable-1| |nil| 3706537021 ("" (LEMMA "inverse_derivable_fun[real_abs_lt_pi2,real]") (("1" (INST - "sin_restrict" "asin" "deriv[real_abs_lt_pi2](sin_restrict)") (("1" (ASSERT) (("1" (LEMMA "sin_restrict_bij") (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (LEMMA "deriv_sin_restrict") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (ASSERT) (("1" (HIDE -2 2) (("1" (LEMMA "asin_inverse") (("1" (REPLACE -1 +) (("1" (HIDE -1 -2) (("1" (REWRITE RIGHT_INVERSE_IS_INVERSE) (("1" (HIDE 2) (("1" (EXPAND "bijective?") (("1" (FLATTEN) (("1" (LEMMA "surj_right[real_abs_lt_pi2,real]") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "sin_restrict") (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "sin_prep") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (LEMMA "asin_inverse") (("2" (REPLACE -1) (("2" (REPLACE -1 + RL) (("2" (SKOSIMP*) (("2" (HIDE 1) (("2" (LEMMA "deriv_sin_restrict") (("2" (FLATTEN) (("2" (EXPAND "sin_restrict") (("2" (ASSERT) NIL))))))))))))))))) ("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) NIL))))) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL))) ("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL)))))) NIL) NIL NIL)) (|arc_sin_range_lt| 0 (|arc_sin_range_lt-1| |nil| 3706529468 ("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (CASE "arc_sin(x!1) = pi/2 IMPLIES x!1 = 1") (("1" (CASE "arc_sin(x!1) = -pi/2 IMPLIES x!1 = -1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 2) (("2" (FLATTEN) (("2" (CASE "sin(-pi/2) = -1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1) (("2" (LEMMA "sin_pi2") (("2" (LEMMA "sin_neg") (("2" (INST - "pi/2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (LEMMA "sin_pi2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|sin_neg| FORMULA-DECL NIL |sincos_def| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sin_pi2| FORMULA-DECL NIL |sincos| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL)) SHOSTAK)) (|deriv_arc_sin_prep| 0 (|deriv_arc_sin_prep-1| |nil| 3706535745 ("" (SKOSIMP*) (("" (TYPEPRED "x!1") (("" (MULT-INEQ -2 -2) (("1" (ASSERT) (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|lt_times_lt_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL)) SHOSTAK)) (|deriv_arc_sin_fun_TCC1| 0 (|deriv_arc_sin_fun_TCC1-1| |nil| 3706514856 ("" (FLATTEN) (("" (SKOSIMP*) (("" (LEMMA "deriv_arc_sin_prep") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|deriv_arc_sin_prep| FORMULA-DECL NIL |arcsin| NIL)) NIL (|deriv_arc_sin_fun| SUBTYPE "(number_fields.-)(1, sq.sq(arcsin.x))" "nonneg_real"))) (|deriv_arc_sin_fun_TCC2| 0 (|deriv_arc_sin_fun_TCC2-1| |nil| 3706515994 ("" (SKOSIMP*) (("" (LEMMA "deriv_arc_sin_prep") (("" (INST?) (("" (LEMMA "sqrt_eq_0") (("" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deriv_arc_sin_prep| FORMULA-DECL NIL |arcsin| NIL) (|sqrt_eq_0| FORMULA-DECL NIL |sqrt| |reals|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|x!1| SKOLEM-CONST-DECL "real_abs_lt1" |arcsin| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL (|deriv_arc_sin_fun| SUBTYPE "sqrt.sqrt((number_fields.-)(1, sq.sq(arcsin.x)))" "nznum"))) (|deriv_arc_sin_fun| 0 (|deriv_arc_sin_fun-6| |nil| 3706536306 ("" (LEMMA "arc_sin_derivable") (("" (ASSERT) (("" (LEMMA "deriv_sin_restrict") (("" (FLATTEN) (("" (LEMMA "chain_rule[real_abs_lt1,real_abs_lt_pi2]") (("" (INST - "(LAMBDA (x: real_abs_lt1): arc_sin(x))" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CASE-REPLACE "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (ASSERT) (("1" (CASE-REPLACE "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "const_fun") (("1" (CROSS-MULT 1) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (LEMMA "sqrt_lem") (("1" (INST - "1-sq(x!1)" "cos(arc_sin(x!1))") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (ASSERT) (("1" (HIDE 2) (("1" (REPLACE -1 + RL) (("1" (LEMMA "sin2_cos2") (("1" (INST?) (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "cos_ge_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1 -2 -3) (("1" (EXPAND "const_fun") (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -3 -4) (("3" (HIDE -1) (("3" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1) (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -) (("3" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1) (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (SKOSIMP*) (("2" (LEMMA "deriv_arc_sin_prep") (("2" (INST?) (("2" (LEMMA "sqrt_eq_0") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -) (("3" (SKOSIMP*) (("3" (TYPEPRED "x!1") (("3" (LEMMA "sq_le") (("3" (CASE "x!1 >= 0") (("1" (INST - "x!1" "1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-x!1" "1") (("1" (ASSERT) (("1" (REWRITE "sq_neg") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cos_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sq_1| FORMULA-DECL NIL |sq| |reals|) (|x!1| SKOLEM-CONST-DECL "real_abs_lt1" |arcsin| NIL) (|sq_neg| FORMULA-DECL NIL |sq| |reals|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq_le| FORMULA-DECL NIL |sq| |reals|) (|deriv_arc_sin_prep| FORMULA-DECL NIL |arcsin| NIL) (|sqrt_eq_0| FORMULA-DECL NIL |sqrt| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|x!1| SKOLEM-CONST-DECL "real_abs_lt1" |arcsin| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |pi_def| NIL) (|constant_seq2| APPLICATION-JUDGEMENT "(convergent_nz?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_cancel4| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|x!1| SKOLEM-CONST-DECL "real_abs_lt1" |arcsin| NIL) (|sin2_cos2| FORMULA-DECL NIL |sincos_def| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cos_ge_0| FORMULA-DECL NIL |trig_ineq| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_lem| FORMULA-DECL NIL |sqrt| |reals|) (|deriv_linear_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|chain_rule| FORMULA-DECL NIL |chain_rule| |analysis|) (|deriv_sin_restrict| FORMULA-DECL NIL |arcsin| NIL) (|arc_sin_derivable| FORMULA-DECL NIL |arcsin| NIL)) NIL) (|deriv_arc_sin_fun-5| |nil| 3706529432 ("" (LEMMA "arc_sin_derivable") (("" (ASSERT) (("" (LEMMA "deriv_sin_restrict") (("" (FLATTEN) (("" (LEMMA "chain_rule[real_abs_lt1,real_abs_lt_pi2]") (("" (INST - "(LAMBDA (x: real_abs_lt1): arc_sin(x))" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CASE-REPLACE "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (ASSERT) (("1" (CASE-REPLACE "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "const_fun") (("1" (CROSS-MULT 1) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (LEMMA "sqrt_lem") (("1" (INST - "1-sq(x!1)" "cos(arc_sin(x!1))") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (ASSERT) (("1" (HIDE 2) (("1" (REPLACE -1 + RL) (("1" (LEMMA "sin2_cos2") (("1" (INST?) (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (LEMMA "cos_ge_0") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1 -2 -3) (("1" (EXPAND "const_fun") (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -3 -4) (("3" (HIDE -1) (("3" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1) (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -) (("3" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1) (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (SKOSIMP*) (("2" (LEMMA "sqrt_eq_0") (("2" (INST - "1-sq(x!1)") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (ASSERT) (("1" (TYPEPRED "x!1") (("1" (LEMMA "real_props.sqrt_1") (("1" (INST - "x!1") (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "real_props.sqrt_1") (("2" (EXPAND "sq") (("2" (INST - "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -) (("3" (SKOSIMP*) (("3" (TYPEPRED "x!1") (("3" (LEMMA "sq_le") (("3" (CASE "x!1 >= 0") (("1" (INST - "x!1" "1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-x!1" "1") (("1" (ASSERT) (("1" (REWRITE "sq_neg") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|deriv_arc_sin_fun-4| |nil| 3706528368 ("" (LEMMA "arc_sin_derivable") (("" (ASSERT) (("" (LEMMA "deriv_sin_restrict") (("" (FLATTEN) (("" (LEMMA "chain_rule[real_abs_lt1,real_abs_lt_pi2]") (("" (INST - "(LAMBDA (x: real_abs_lt1): arc_sin(x))" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CASE-REPLACE "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (ASSERT) (("1" (CASE-REPLACE "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "const_fun") (("1" (CROSS-MULT 1) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (NAME-REPLACE "AA" "arc_sin(x!1)") (("1" (LEMMA "sin2_cos2") (("1" (INST?) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1 -2 -3) (("1" (EXPAND "const_fun") (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -1 -3 -4) (("3" (HIDE -1) (("3" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1) (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -) (("3" (TYPEPRED "x1!1") (("3" (TYPEPRED "arc_sin(x1!1)") (("3" (LEMMA "arc_sin_range_lt") (("3" (INST?) (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE - 2) (("4" (LEMMA "arc_sin_range_lt") (("4" (INST?) (("4" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE -1 -3 -4 2) (("5" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -) (("1" (LEMMA "deriv_linear_fun[real_abs_lt1]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -) (("2" (SKOSIMP*) (("2" (LEMMA "sqrt_eq_0") (("2" (INST - "1-sq(x!1)") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (ASSERT) (("1" (TYPEPRED "x!1") (("1" (LEMMA "real_props.sqrt_1") (("1" (INST - "x!1") (("1" (EXPAND "sq") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "real_props.sqrt_1") (("2" (EXPAND "sq") (("2" (INST - "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -) (("3" (SKOSIMP*) (("3" (TYPEPRED "x!1") (("3" (LEMMA "sq_le") (("3" (CASE "x!1 >= 0") (("1" (INST - "x!1" "1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "-x!1" "1") (("1" (ASSERT) (("1" (REWRITE "sq_neg") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1 -2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) (("3" (HIDE -) (("3" (LEMMA "arc_sin_range_lt") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|deriv_arc_sin_fun-3| |nil| 3706525850 ("" (LEMMA "arc_sin_derivable") (("" (ASSERT) (("" (LEMMA "deriv_sin_restrict") (("" (FLATTEN) (("" (LEMMA "chain_rule[real_abs_lt1,real_abs_lt_pi2]") (("" (INST - "(LAMBDA (x: real_abs_lt1): arc_sin(x))" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CASE-REPLACE "deriv[real_abs_lt1](LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = const_fun(1)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -3) (("1" (HIDE -3) (("1" (ASSERT) (("1" (CASE-REPLACE "cos(arc_sin(x!1)) = sqrt(1-sq(x!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "const_fun") (("1" (CROSS-MULT 1) (("1" (ASSERT) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("1" (ASSERT) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))))))))))))) ("2" (HIDE -1 -2 -3 2) (("2" (CASE "(LAMBDA (x: real_abs_lt1): sin(arc_sin(x))) = (LAMBDA (x: real_abs_lt1): x)") (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (POSTPONE) NIL))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))))))))))))))))) ("2" (HIDE -1 -2 2) (("2" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt1): x_1)") (("1" (HIDE -1 -2 -3) (("1" (EXPAND "const_fun") (("1" (POSTPONE) NIL))))) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))))) ("3" (HIDE 2) (("3" (HIDE -1 -3 -4) (("3" (POSTPONE) NIL))))))))) ("2" (HIDE -4 -5 -6 2) (("2" (CASE-REPLACE "(LAMBDA (x: real_abs_lt1): arc_sin(x)) = arc_sin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))) ("3" (HIDE 2) (("3" (POSTPONE) NIL))) ("4" (POSTPONE) NIL) ("5" (HIDE -1 -3 -4 2) (("5" (POSTPONE) NIL))))) ("2" (HIDE -) (("2" (SKOSIMP*) (("2" (POSTPONE) NIL))))) ("3" (HIDE -) (("3" (SKOSIMP*) (("3" (POSTPONE) NIL))))))))))) ("2" (HIDE 2) (("2" (POSTPONE) NIL))) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) (("3" (POSTPONE) NIL)))))))))))))))))) NIL) NIL NIL) (|deriv_arc_sin_fun-2| |nil| 3706514948 ("" (LEMMA "arc_sin_derivable") (("" (ASSERT) (("" (LEMMA "deriv_sin_restrict") (("" (FLATTEN) (("" (NAME "Y" "(LAMBDA (x: real_abs_le1): arc_sin(x))") (("" (LEMMA "chain_rule[real_abs_le1,real_abs_lt_pi2]") (("1" (INST - "Y" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CASE-REPLACE "deriv[real_abs_lt_pi2](LAMBDA (x_1: real_abs_lt_pi2): sin(Y(x_1))) = const_fun(1)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (REPLACE -4) (("1" (HIDE -4) (("1" (ASSERT) (("1" (CASE-REPLACE "cos(Y(x!1)) = sqrt(1-sq(x!1))") (("1" (ASSERT) (("1" (HIDE -1) (("1" (CASE-REPLACE "deriv[real_abs_le1](LAMBDA (x_1: real_abs_le1): sin(Y(x_1))) = (LAMBDA (x_1: real_abs_le1): 1)") (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACE -2 -1 RL) (("1" (CROSS-MULT 1) (("1" (CASE-REPLACE "(LAMBDA (x: real_abs_le1): arc_sin(x)) =  arc_sin") (("1" (ASSERT) (("1" (HIDE -1 -3 -4 -5) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 2) (("2" (REPLACE -2 + RL) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: real_abs_le1): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_le1): x_1)") (("1" (HIDE -1 -2 -3) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (CASE "(LAMBDA (x: real_abs_le1): sin(Y(x))) = (LAMBDA (x: real_abs_le1): x)") (("1" (HIDE -2 -3 -4) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 * RL) (("2" (GROUND) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -4 -5) (("2" (REPLACE -1 * RL) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: real_abs_lt_pi2): sin(arc_sin(x_1))) = (LAMBDA (x_1: real_abs_lt_pi2): x_1)") (("1" (HIDE -1 -2 2) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("3" (HIDE 2 3) (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL)) NIL) ("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE -2 -3 -4 -5 -6) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|deriv_arc_sin_fun-1| |nil| 3706514920 ("" (LEMMA "asin_derivable") (("" (ASSERT) (("" (LEMMA "asin_prep") (("" (LEMMA "deriv_sin_restrict") (("" (FLATTEN) (("" (EXPAND "restrict") (("" (NAME "Y" "(LAMBDA x: asin(x))") (("" (LEMMA "chain_rule[real,real_abs_lt_pi2]") (("" (INST - "Y" "(LAMBDA (x: real_abs_lt_pi2): sin(x))") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CASE-REPLACE "deriv(LAMBDA (x_1: real): sin(Y(x_1))) = const_fun(1)") (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "sin_restrict") (("1" (REPLACE -4) (("1" (HIDE -4) (("1" (EXPAND "const_fun") (("1" (CASE-REPLACE "(LAMBDA (x_1: real): 1 / sq(cos(Y(x_1)))) = (LAMBDA x: 1 +x*x)") (("1" (CASE-REPLACE "deriv(asin) = deriv(Y)") (("1" (HIDE -1) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (CROSS-MULT 1) (("1" (ASSERT) NIL))))))))) ("2" (HIDE -4 1) (("2" (INST - "Y(x1!1)") (("2" (EXPAND "Sin?") (("2" (FLATTEN) (("2" (LEMMA "sq_eq_0") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))) ("2" (CASE "asin = (LAMBDA x: asin(x))") (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))))) ("2" (HIDE 2) (("2" (CASE "(LAMBDA x: sin(Y(x))) = (LAMBDA x: x)") (("1" (HIDE -3 -4 -5) (("1" (CASE "(LAMBDA x: sin(Y(x))*sin(Y(x))) = (LAMBDA x: x*x)") (("1" (HIDE -2) (("1" (EXPAND "sin") (("1" (HIDE -2) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (CROSS-MULT 1) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (CROSS-MULT -1) (("1" (LEMMA "sin2_cos2") (("1" (INST?) (("1" (EXPAND "sq") (("1" (ASSERT) NIL))))))))))) ("2" (HIDE -4 1) (("2" (REVEAL -9) (("2" (HIDE -2 -3 -5) (("2" (INST - "Y(x1!1)") (("2" (EXPAND "Sin?") (("2" (FLATTEN) NIL))))))))))))))) ("2" (HIDE -1) (("2" (LEMMA "sin_prep") (("2" (SKOSIMP*) (("2" (INST - "Y(x!2)") (("2" (EXPAND "Sin?") (("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "sq_eq_0") (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE -2 -3) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (DECOMPOSE-EQUALITY -1) (("1" (INST?) (("1" (ASSERT) NIL))) ("2" (LEMMA "sin_prep") (("2" (INST - "Y(x1!1)") NIL))))) ("2" (SKOSIMP*) (("2" (LEMMA "sin_prep") (("2" (INST - "Y(x!2)") NIL))))))))))))))) ("2" (HIDE 2) (("2" (ASSERT) (("2" (REPLACE -2 * RL) (("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sin_asin") NIL) ("2" (HIDE -1 -2 -3 -5) (("2" (SKOSIMP*) (("2" (INST?) NIL))))))))))))))) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (INST -4 "Y(x!2)") NIL))))))))) ("3" (HIDE -) (("3" (LEMMA "sin_prep") (("3" (SKOSIMP*) (("3" (INST - "Y(x!2)") (("3" (EXPAND "Sin?") (("3" (FLATTEN) (("3" (LEMMA "sq_eq_0") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE -1) (("2" (REPLACE -1 + RL) (("2" (ASSERT) (("2" (CASE-REPLACE "(LAMBDA (x_1: real): sin(asin(x_1))) = (LAMBDA x: x)") (("1" (HIDE -1 -2 -3) (("1" (ASSERT) (("1" (EXPAND "const_fun") (("1" (LEMMA "deriv_linear_fun[real]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL))))))))))))) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sin_asin") NIL) ("2" (SKOSIMP*) (("2" (INST - "asin(x!2)") NIL))))) ("3" (SKOSIMP*) (("3" (INST - "asin(x!2)") NIL))))))))))))) ("3" (HIDE 2) (("3" (REPLACE -2 + RL) (("3" (ASSERT) (("3" (CASE-REPLACE "(LAMBDA (x_1: real): sin(asin(x_1))) = (LAMBDA x: x)") (("1" (LEMMA "deriv_linear_fun[real]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL))))))) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sin_asin") NIL) ("2" (SKOSIMP*) (("2" (INST - "asin(x!2)") NIL))))) ("3" (SKOSIMP*) (("3" (INST - "asin(x!2)") NIL))))))))))) ("4" (SKOSIMP*) (("4" (HIDE -1 -2 -4) (("4" (INST?) NIL))))))))) ("2" (REPLACE -4 + RL) (("2" (HIDE -1 -2 -3 -4 -5 2) (("2" (CASE-REPLACE "(LAMBDA x: asin(x)) = asin") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL))))))) ("3" (HIDE 2) (("3" (LEMMA "deriv_sin_restrict") (("3" (FLATTEN) (("3" (EXPAND "sin_restrict") (("3" (PROPAX) NIL))))))))) ("4" (HIDE 2) (("4" (REPLACE -2 + RL) (("4" (ASSERT) (("4" (CASE-REPLACE "(LAMBDA (x_1: real): sin(asin(x_1))) = (LAMBDA x: x)") (("1" (LEMMA "deriv_linear_fun[real]") (("1" (INST - "1" "0") (("1" (ASSERT) (("1" (FLATTEN) NIL))))))) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (REWRITE "sin_asin") NIL) ("2" (SKOSIMP*) (("2" (INST - "asin(x!2)") NIL))))) ("3" (SKOSIMP*) (("3" (INST - "asin(x!2)") NIL))))))))))) ("5" (INST - "Y(x!2)") NIL))) ("2" (SKOSIMP*) (("2" (REWRITE "sq_rew") (("2" (ASSERT) NIL))))))))))) ("2" (EXPAND "sin_restrict") (("2" (PROPAX) NIL))) ("3" (EXPAND "sin_restrict") (("3" (REPLACE -1 + RL) (("3" (LEMMA "asin_derivable") (("3" (ASSERT) (("3" (CASE-REPLACE "(LAMBDA x: asin(x))  = asin") (("3" (APPLY-EXTENSIONALITY 1 :HIDE? T) NIL)))))))))))))))))))))))))))) NIL) NIL NIL)) (|arc_sin_continuous| 0 (|arc_sin_continuous-1| |nil| 3706883356 ("" (LEMMA "arc_sin_derivable") (("" (LEMMA "derivable_cont_fun[real_abs_lt1]") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|derivable_cont_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|arc_sin| CONST-DECL "{x: real_abs_lt_pi2 | y = sin(x)}" |arcsin| NIL) (|sin| CONST-DECL "real" |sincos_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|arc_sin_derivable| FORMULA-DECL NIL |arcsin| NIL)) NIL)) (|arc_sin_bij| 0 (|arc_sin_bij-1| |nil| 3706883482 ("" (LEMMA "bij_inv_is_bij[real_abs_lt_pi2,real_abs_lt1]") (("" (INST - "sin_restrict") (("" (ASSERT) (("" (SPLIT -1) (("1" (LEMMA "arc_sin_inverse") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "sin_restrict_bij") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sin| CONST-DECL "real" |sincos_def| NIL) (|arc_sin_inverse| FORMULA-DECL NIL |arcsin| NIL) (|sin_restrict_bij| FORMULA-DECL NIL |arcsin| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sin_range| APPLICATION-JUDGEMENT "real_abs_le1" |sincos| NIL) (|bij_inv_is_bij| FORMULA-DECL NIL |function_inverse| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cos| CONST-DECL "real" |sincos_def| NIL) (|pi| CONST-DECL "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}" |pi_def| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_abs_lt1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL)) SHOSTAK)) (|arcsin_TCC1| 0 (|arcsin_TCC1-1| |nil| 3707131618 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|arcsin| SUBTYPE "number_fields./((number_fields.-)(pi_def.pi), 2)" "real_abs_le_pi2"))) (|arcsin_TCC2| 0 (|arcsin_TCC2-1| |nil| 3707131618 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|arcsin| SUBTYPE "arcsin.y" "real_abs_lt1"))) (|arcsin_TCC3| 0 (|arcsin_TCC3-1| |nil| 3707131618 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|arcsin| SUBTYPE "arcsin.arc_sin(arcsin.y)" "real_abs_le_pi2"))) (|arcsin_TCC4| 0 (|arcsin_TCC4-1| |nil| 3707132718 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_abs_le1| NONEMPTY-TYPE-EQ-DECL NIL |trig_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" |pi_def| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|arcsin| SUBTYPE "number_fields./(pi_def.pi, 2)" "real_abs_le_pi2"))))
