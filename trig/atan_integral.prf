(|atan_integral| (|IMP_nth_derivatives_TCC1| 0 (|IMP_nth_derivatives_TCC1-1| |nil| 3514558647 ("" (LEMMA "deriv_domain[real]") (("1" (PROPAX) NIL NIL) ("2" (LEMMA "connected_real") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ((|connected_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|deriv_domain| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) NIL (|IMP_nth_derivatives| ASSUMING "analysis@nth_derivatives[real].nth_derivatives" "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))) (|IMP_nth_derivatives_TCC2| 0 (|IMP_nth_derivatives_TCC2-1| |nil| 3514558647 ("" (EXPAND "not_one_element?") (("" (SKOSIMP*) (("" (INST + "x!1+1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|IMP_nth_derivatives| ASSUMING "analysis@nth_derivatives[real].nth_derivatives" "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?"))) (|IMP_taylors_TCC1| 0 (|IMP_taylors_TCC1-1| |nil| 3514558647 ("" (ASSUMING-TCC) NIL NIL) ((|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|)) NIL (|IMP_taylors| ASSUMING "analysis@taylors[real].taylors" "connected_domain: ASSUMPTION deriv_domain_def[T].connected?"))) (|atan_deriv_fn_TCC1| 0 (|atan_deriv_fn_TCC1-1| |nil| 3255851189 ("" (SKOSIMP*) (("" (LEMMA "sq_pos" ("a" "x!1")) (("" (GRIND) NIL NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_deriv_fn| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.x)))" "nznum"))) (|atan_deriv_fn_TCC2| 0 (|atan_deriv_fn_TCC2-1| |nil| 3255875082 ("" (SKOSIMP*) (("" (LEMMA "sq_pos" ("a" "x!1")) (("" (EXPAND "sq") (("" (LEMMA "posreal_div_posreal_is_posreal" ("px" "1" "py" "1+x!1*x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|)) SHOSTAK (|atan_deriv_fn| SUBTYPE "number_fields./(1, ((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.x))))" "posreal"))) (|one_over_one_plus_t_sq_cont| 0 (|one_over_one_plus_t_sq_cont-2| |nil| 3352177935 ("" (EXPAND "atan_deriv_fn") (("" (EXPAND "continuous?") (("" (SKOLEM 1 ("x")) (("" (LEMMA "identity_continuous[real]" ("x0" "x")) (("" (EXPAND "I") (("" (LEMMA "prod_continuous[real]" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x" "x0" "x")) (("" (ASSERT) (("" (LEMMA "const_continuous[real]" ("u" "1" "x0" "x")) (("" (EXPAND "const_fun") (("" (EXPAND "*") (("" (LEMMA "sum_continuous[real]" ("f1" "LAMBDA (x: real): 1" "f2" "LAMBDA (x: real): x*x" "x0" "x")) (("" (ASSERT) (("" (EXPAND "+") (("" (LEMMA "inv_continuous[real]" ("g" "LAMBDA (x: real): 1 + x * x" "x0" "x")) (("1" (ASSERT) (("1" (EXPAND "/") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|identity_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|prod_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|) (|const_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|inv_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|sum_continuous| FORMULA-DECL NIL |continuous_functions| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL)) NIL) (|one_over_one_plus_t_sq_cont-1| |nil| 3255875106 ("" (EXPAND "atan_deriv_fn") (("" (EXPAND "continuous?") (("" (SKOLEM 1 ("x")) (("" (LEMMA "identity_continuous" ("x0" "x")) (("" (EXPAND "I") (("" (LEMMA "prod_continuous" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x" "x0" "x")) (("" (ASSERT) (("" (LEMMA "const_continuous" ("u" "1" "x0" "x")) (("" (EXPAND "const_fun") (("" (EXPAND "*") (("" (LEMMA "sum_continuous" ("f1" "LAMBDA (x: real): 1" "f2" "LAMBDA (x: real): x*x" "x0" "x")) (("" (ASSERT) (("" (EXPAND "+") (("" (LEMMA "inv_continuous" ("g" "LAMBDA (x: real): 1 + x * x" "x0" "x")) (("1" (ASSERT) (("1" (EXPAND "/") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_value_TCC1| 0 (|atan_value_TCC1-2| |nil| 3352178025 ("" (SKOLEM 1 ("x")) (("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (LEMMA "continuous_Integrable?[real]" ("f" "atan_deriv_fn" "a" "0" "b" "x")) (("1" (EXPAND "continuous?" -2) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST - "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|Closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|continuous_Integrable?| FORMULA-DECL NIL |integral| |analysis|)) NIL (|atan_value| SUBTYPE "atan_integral.atan_deriv_fn" "Integrable_funs[real](0, atan_integral.x)")) (|atan_value_TCC1-1| |nil| 3255851329 ("" (SKOLEM 1 ("x")) (("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (LEMMA "continuous_Integrable?" ("f" "atan_deriv_fn" "a" "0" "b" "x")) (("" (EXPAND "continuous?" -2) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST - "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL) SHOSTAK (|atan_value| SUBTYPE "atan_integral.atan_deriv_fn" "Integrable_funs[real](0, atan_integral.x)"))) (|atan_value_0| 0 (|atan_value_0-2| |nil| 3352180534 ("" (EXPAND "atan_value") (("" (LEMMA "Integral_a_to_a[real]" ("a" "0" "f" "atan_deriv_fn")) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|Integral_a_to_a| FORMULA-DECL NIL |integral| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL)) NIL) (|atan_value_0-1| |nil| 3255979393 ("" (EXPAND "atan_value") (("" (LEMMA "Integral_a_to_a" ("a" "0" "f" "atan_deriv_fn")) (("" (PROPAX) NIL NIL)) NIL)) NIL) (NIL) SHOSTAK)) (|atan_neg_value| 0 (|atan_neg_value-3| "fixit" 3394184058 ("" (LEMMA "derivs_eq[real]" ("F" "LAMBDA (z:real): atan_value(-z)" "G" "LAMBDA (z:real): -atan_value(z)")) (("1" (SKOLEM 1 ("x")) (("1" (LEMMA "identity_derivable_fun[real]") (("1" (LEMMA "deriv_id_fun[real]") (("1" (LEMMA "neg_derivable_fun[real]" ("f" "LAMBDA (x:real): x")) (("1" (LEMMA "deriv_neg_fun[real]" ("ff" "LAMBDA (x: real): x")) (("1" (EXPAND "I") (("1" (LEMMA "one_over_one_plus_t_sq_cont") (("1" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "a" "0" "F" "atan_value")) (("1" (SPLIT -1) (("1" (FLATTEN -1) (("1" (LEMMA "composition_derivable_fun[real,real]" ("f" "-(LAMBDA (x: real): x)" "g" "atan_value")) (("1" (LEMMA "composition_derivable_fun[real,real]" ("g" "-(LAMBDA (x: real): x)" "f" "atan_value")) (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "deriv_comp_fun[real,real]" ("ff" "-(LAMBDA (x: real): x)" "gg" "atan_value")) (("1" (LEMMA "deriv_comp_fun[real,real]" ("gg" "-(LAMBDA (x: real): x)" "ff" "atan_value")) (("1" (EXPAND "o") (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (EXPAND "const_fun") (("1" (REPLACE -10) (("1" (SIMPLIFY -8) (("1" (REPLACE -8) (("1" (SIMPLIFY -2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x: real): atan_deriv_fn(-x) * -1" "g" "LAMBDA (x: real): -1 * atan_deriv_fn(x)")) (("1" (SPLIT -13) (("1" (SKOSIMP*) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (z: real): atan_value(-z))" "g" "(LAMBDA (z: real): -atan_value(z)) + (LAMBDA (x: real): c!1)")) (("1" (REPLACE -1 -2 RL) (("1" (INST-CP -2 "0") (("1" (EXPAND "+") (("1" (REWRITE "atan_value_0") (("1" (INST -2 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "atan_deriv_fn") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan_value" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "I") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (LEMMA "not_one_element") (("2" (EXPAND "not_one_element?") (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |taylors| |analysis|) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_neg_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|composition_derivable_fun| FORMULA-DECL NIL |chain_rule| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|deriv_comp_fun| FORMULA-DECL NIL |chain_rule| |analysis|) (O CONST-DECL "T3" |function_props| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|fundamental| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |indefinite_integral| |analysis|) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |integral| |analysis|) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |integral_split_scaf| |analysis|) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |integral_step| |analysis|) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |unif_cont_fun| |analysis|) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |lim_of_composition| |analysis|) (|id_fun_continuous| NAME-JUDGEMENT "continuous_fun" |continuous_functions| |analysis|) (|derivable_id| NAME-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|neg_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|derivs_eq| FORMULA-DECL NIL |indefinite_integral| |analysis|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL) (|atan_neg_value-2| |nil| 3352180601 ("" (LEMMA "derivs_eq[real]" ("F" "LAMBDA (z:real): atan_value(-z)" "G" "LAMBDA (z:real): -atan_value(z)")) (("1" (SKOLEM 1 ("x")) (("1" (LEMMA "identity_derivable_fun[real]") (("1" (LEMMA "deriv_id_fun[real]") (("1" (LEMMA "neg_derivable_fun[real]" ("f" "LAMBDA (x:real): x")) (("1" (LEMMA "deriv_neg_fun[real]" ("ff" "LAMBDA (x: real): x")) (("1" (EXPAND "I") (("1" (LEMMA "one_over_one_plus_t_sq_cont") (("1" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "a" "0" "F" "atan_value")) (("1" (SPLIT -1) (("1" (FLATTEN -1) (("1" (LEMMA "composition_derivable_fun[real,real]" ("f" "-(LAMBDA (x: real): x)" "g" "atan_value")) (("1" (LEMMA "composition_derivable_fun[real,real]" ("g" "-(LAMBDA (x: real): x)" "f" "atan_value")) (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "deriv_comp_fun[real,real]" ("ff" "-(LAMBDA (x: real): x)" "gg" "atan_value")) (("1" (LEMMA "deriv_comp_fun[real,real]" ("gg" "-(LAMBDA (x: real): x)" "ff" "atan_value")) (("1" (EXPAND "o") (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (EXPAND "const_fun") (("1" (REPLACE -10) (("1" (SIMPLIFY -8) (("1" (REPLACE -8) (("1" (SIMPLIFY -2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x: real): atan_deriv_fn(-x) * -1" "g" "LAMBDA (x: real): -1 * atan_deriv_fn(x)")) (("1" (REPLACE -1 -13 RL) (("1" (SPLIT -13) (("1" (SKOSIMP*) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (z: real): atan_value(-z))" "g" "(LAMBDA (z: real): -atan_value(z)) + (LAMBDA (x: real): c!1)")) (("1" (REPLACE -1 -2 RL) (("1" (INST-CP -2 "0") (("1" (EXPAND "+") (("1" (REWRITE "atan_value_0") (("1" (INST -2 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "atan_deriv_fn") (("2" (LEMMA "sq_neg" ("a" "x!1")) (("2" (EXPAND "sq") (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan_value" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "I") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|atan_neg_value-1| |nil| 3255979648 ("" (LEMMA "derivs_eq" ("F" "LAMBDA (z:real): atan_value(-z)" "G" "LAMBDA (z:real): -atan_value(z)")) (("" (SKOLEM 1 ("x")) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "deriv_id_fun[real]") (("" (LEMMA "neg_derivable_fun[real]" ("f" "LAMBDA (x:real): x")) (("" (LEMMA "deriv_neg_fun" ("ff" "LAMBDA (x: real): x")) (("1" (EXPAND "I") (("1" (LEMMA "one_over_one_plus_t_sq_cont") (("1" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "a" "0" "F" "atan_value")) (("1" (SPLIT -1) (("1" (FLATTEN -1) (("1" (LEMMA "composition_derivable_fun" ("f" "-(LAMBDA (x: real): x)" "g" "atan_value")) (("1" (LEMMA "composition_derivable_fun" ("g" "-(LAMBDA (x: real): x)" "f" "atan_value")) (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "deriv_comp_fun" ("ff" "-(LAMBDA (x: real): x)" "gg" "atan_value")) (("1" (LEMMA "deriv_comp_fun" ("gg" "-(LAMBDA (x: real): x)" "ff" "atan_value")) (("1" (EXPAND "o") (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (EXPAND "const_fun") (("1" (REPLACE -10) (("1" (SIMPLIFY -8) (("1" (REPLACE -8) (("1" (SIMPLIFY -2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (ASSERT) (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x: real): atan_deriv_fn(-x) * -1" "g" "LAMBDA (x: real): -1 * atan_deriv_fn(x)")) (("1" (REPLACE -1 -13 RL) (("1" (SPLIT -13) (("1" (SKOSIMP*) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (z: real): atan_value(-z))" "g" "(LAMBDA (z: real): -atan_value(z)) + (LAMBDA (x: real): c!1)")) (("1" (REPLACE -1 -2 RL) (("1" (INST-CP -2 "0") (("1" (EXPAND "+") (("1" (REWRITE "atan_value_0") (("1" (INST -2 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "atan_deriv_fn") (("2" (LEMMA "sq_neg" ("a" "x!1")) (("2" (EXPAND "sq") (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan_value" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "I") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_inv_value| 0 (|atan_inv_value-2| |nil| 3352181608 ("" (LEMMA "derivs_eq[posreal]" ("F" "LAMBDA (x:posreal): atan_value(x)" "G" "LAMBDA (x:posreal): atan_value(-1/x)")) (("1" (SKOLEM 1 ("x")) (("1" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (SPLIT -1) (("1" (FLATTEN -1) (("1" (LEMMA "restrict2_derivable[posreal,real]" ("f" "atan_value")) (("1" (LEMMA "restrict2_deriv[posreal,real]" ("f" "atan_value")) (("1" (EXPAND "restrict2") (("1" (REPLACE -2) (("1" (LEMMA "composition_derivable_fun[posreal,real]" ("f" "LAMBDA (x: posreal): -(1 / x)" "g" "atan_value")) (("1" (LEMMA "identity_derivable_fun[posreal]") (("1" (LEMMA "deriv_id_fun[posreal]") (("1" (EXPAND "I") (("1" (EXPAND "const_fun") (("1" (LEMMA "inv_derivable_fun[posreal]" ("g" "(LAMBDA (x: posreal): x)")) (("1" (ASSERT) (("1" (EXPAND "/") (("1" (LEMMA "deriv_inv_fun[posreal]" ("gg" "(LAMBDA (x: posreal): x)")) (("1" (REPLACE -3) (("1" (EXPAND "-") (("1" (EXPAND "/") (("1" (EXPAND "*") (("1" (LEMMA "neg_derivable_fun[posreal]" ("f" "LAMBDA (x_1: posreal): 1 / x_1")) (("1" (ASSERT) (("1" (EXPAND "-") (("1" (LEMMA "deriv_neg_fun[posreal]" ("ff" "LAMBDA (x_1: posreal): 1 / x_1")) (("1" (EXPAND "-") (("1" (REPLACE -3 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "composition_derivable_fun[posreal,real]" ("f" "LAMBDA (x: posreal): -(1 / x)" "g" "atan_value")) (("1" (LEMMA "deriv_comp_fun[posreal,real]" ("ff" "LAMBDA (x: posreal): -(1 / x)" "gg" "atan_value")) (("1" (EXPAND "o") (("1" (ASSERT) (("1" (REPLACE -13) (("1" (REPLACE -3) (("1" (EXPAND "*") (("1" (EXPAND "atan_deriv_fn" -1) (("1" (LEMMA "deriv_comp_fun[posreal,real]" ("ff" "LAMBDA (x:posreal): x" "gg" "atan_value")) (("1" (EXPAND "o") (("1" (REPLACE -13) (("1" (REPLACE -8) (("1" (EXPAND "*") (("1" (EXPAND "atan_deriv_fn" -1) (("1" (REPLACE -1 -14) (("1" (REPLACE -2 -14) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (x_1: posreal): 1 / (1 + x_1 * x_1))" "g" "(LAMBDA (x_1: posreal): 1 / (1 + -(1 / x_1) * -(1 / x_1)) * -(-1 / (x_1 * x_1)))")) (("1" (REPLACE -1 -15 RL) (("1" (HIDE -1) (("1" (SIMPLIFY -14) (("1" (SPLIT -14) (("1" (SKOLEM -1 ("c")) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (x: posreal): atan_value(x))" "g" "(LAMBDA (x: posreal): atan_value(-1 / x)) + (LAMBDA (x: posreal): c)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "+") (("1" (INST-CP - "1") (("1" (INST - "x") (("1" (LEMMA "atan_neg_value") (("1" (INST-CP - "1") (("1" (INST - "1/x") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("z")) (("2" (LEMMA "div_times" ("x" "1" "n0x" "1 + -(1 / z) * -(1 / z)" "y" "1" "n0y" "z*z")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (REWRITE "cross_mult") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (TYPEPRED "1/x!1") (("2" (LEMMA "negreal_times_negreal_is_posreal" ("nx" "-(1/x!1)" "ny" "-(1/x!1)")) (("1" (ASSERT) (("1" (NAME-REPLACE "FF" "-(1 / x!1) * -(1 / x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "atan_value") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (LEMMA "not_one_element") (("2" (EXPAND "not_one_element?") (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|not_one_element| FORMULA-DECL NIL |taylors| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|restrict2_derivable| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|restrict2| CONST-DECL "[T1 -> real]" |restrict2_deriv| |analysis|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|composition_derivable_fun| FORMULA-DECL NIL |chain_rule| |analysis|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv_inv_fun| FORMULA-DECL NIL |derivatives| |analysis|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|deriv_neg_fun| FORMULA-DECL NIL |derivatives| |analysis|) (O CONST-DECL "T3" |function_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|deriv_comp_fun| FORMULA-DECL NIL |chain_rule| |analysis|) (|neg_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|inv_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|restrict2_deriv| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (|fundamental| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|derivs_eq| FORMULA-DECL NIL |indefinite_integral| |analysis|) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL)) NIL) (|atan_inv_value-1| |nil| 3256911357 ("" (LEMMA "derivs_eq[posreal]" ("F" "LAMBDA (x:posreal): atan_value(x)" "G" "LAMBDA (x:posreal): atan_value(-1/x)")) (("1" (SKOLEM 1 ("x")) (("1" (LEMMA "fundamental" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (SPLIT -1) (("1" (FLATTEN -1) (("1" (LEMMA "restrict2_derivable[posreal,real]" ("f" "atan_value")) (("1" (LEMMA "restrict2_deriv[posreal,real]" ("f" "atan_value")) (("1" (EXPAND "restrict2") (("1" (REPLACE -2) (("1" (LEMMA "composition_derivable_fun" ("f" "LAMBDA (x: posreal): -(1 / x)" "g" "atan_value")) (("1" (LEMMA "identity_derivable_fun[posreal]") (("1" (LEMMA "deriv_id_fun[posreal]") (("1" (EXPAND "I") (("1" (EXPAND "const_fun") (("1" (LEMMA "inv_derivable_fun" ("g" "(LAMBDA (x: posreal): x)")) (("1" (ASSERT) (("1" (EXPAND "/") (("1" (LEMMA "deriv_inv_fun" ("gg" "(LAMBDA (x: posreal): x)")) (("1" (REPLACE -3) (("1" (EXPAND "-") (("1" (EXPAND "/") (("1" (EXPAND "*") (("1" (LEMMA "neg_derivable_fun" ("f" "LAMBDA (x_1: posreal): 1 / x_1")) (("1" (ASSERT) (("1" (EXPAND "-") (("1" (LEMMA "deriv_neg_fun" ("ff" "LAMBDA (x_1: posreal): 1 / x_1")) (("1" (EXPAND "-") (("1" (REPLACE -3 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "composition_derivable_fun" ("f" "LAMBDA (x: posreal): -(1 / x)" "g" "atan_value")) (("1" (LEMMA "deriv_comp_fun" ("ff" "LAMBDA (x: posreal): -(1 / x)" "gg" "atan_value")) (("1" (EXPAND "o") (("1" (ASSERT) (("1" (REPLACE -13) (("1" (REPLACE -3) (("1" (EXPAND "*") (("1" (EXPAND "atan_deriv_fn" -1) (("1" (LEMMA "deriv_comp_fun" ("ff" "LAMBDA (x:posreal): x" "gg" "atan_value")) (("1" (EXPAND "o") (("1" (REPLACE -13) (("1" (REPLACE -8) (("1" (EXPAND "*") (("1" (EXPAND "atan_deriv_fn" -1) (("1" (REPLACE -1 -14) (("1" (REPLACE -2 -14) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (x_1: posreal): 1 / (1 + x_1 * x_1))" "g" "(LAMBDA (x_1: posreal): 1 / (1 + -(1 / x_1) * -(1 / x_1)) * -(-1 / (x_1 * x_1)))")) (("1" (REPLACE -1 -15 RL) (("1" (HIDE -1) (("1" (SIMPLIFY -14) (("1" (SPLIT -14) (("1" (SKOLEM -1 ("c")) (("1" (LEMMA "extensionality_postulate" ("f" "(LAMBDA (x: posreal): atan_value(x))" "g" "(LAMBDA (x: posreal): atan_value(-1 / x)) + (LAMBDA (x: posreal): c)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE-ALL-BUT (-2 1)) (("1" (EXPAND "+") (("1" (INST-CP - "1") (("1" (INST - "x") (("1" (LEMMA "atan_neg_value") (("1" (INST-CP - "1") (("1" (INST - "1/x") (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("z")) (("2" (LEMMA "div_times" ("x" "1" "n0x" "1 + -(1 / z) * -(1 / z)" "y" "1" "n0y" "z*z")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (REWRITE "cross_mult") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (TYPEPRED "1/x!1") (("2" (LEMMA "negreal_times_negreal_is_posreal" ("nx" "-(1/x!1)" "ny" "-(1/x!1)")) (("1" (ASSERT) (("1" (NAME-REPLACE "FF" "-(1 / x!1) * -(1 / x!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1") NIL NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "x!1+1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "atan_value") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST + "x!1/2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_inv_neg_value| 0 (|atan_inv_neg_value-1| |nil| 3256987888 ("" (SKOSIMP*) (("" (LEMMA "atan_inv_value" ("px" "-nx!1")) (("" (REWRITE "atan_neg_value" -1) (("" (LEMMA "atan_neg_value" ("x" "1/nx!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|atan_inv_value| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK)) (|atan_value_strict_increasing| 0 (|atan_value_strict_increasing-4| "" 3754886498 ("" (LEMMA "positive_derivative[real]" ("g" "atan_value")) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "deriv" -2) (("1" (LEMMA "extensionality_postulate[real,real]" ("g" "atan_deriv_fn" "f" "LAMBDA (x: real): deriv(atan_value, x)")) (("1" (REPLACE -1 -3 RL) (("1" (INST -3 "x") (("1" (REPLACE -3 1) (("1" (TYPEPRED "atan_deriv_fn(x)") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "derivable?" -1) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_value") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (ASSERT) (("1" (EXPAND "atan_value") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "connected?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|fundamental| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|) (|deriv| CONST-DECL "real" |derivatives_def| |analysis|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|positive_derivative| FORMULA-DECL NIL |derivative_props| |analysis|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) SHOSTAK) (|atan_value_strict_increasing-3| "" 3750520411 ("" (LEMMA "positive_derivative[real]" ("g" "atan_value")) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "deriv" -2) (("1" (LEMMA "extensionality_postulate" ("g" "atan_deriv_fn" "f" "LAMBDA (x: real): deriv(atan_value, x)")) (("1" (REPLACE -1 -3 RL) (("1" (INST -3 "x") (("1" (REPLACE -3 1) (("1" (TYPEPRED "atan_deriv_fn(x)") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (EXPAND "derivable?" -1) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_value") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (ASSERT) (("1" (EXPAND "atan_value") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "connected?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK) (|atan_value_strict_increasing-2| |nil| 3477838347 ("" (LEMMA "positive_derivative[real]" ("g" "atan_value")) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "deriv" -2) (("1" (LEMMA "extensionality_postulate" ("g" "atan_deriv_fn" "f" "LAMBDA (x: real): deriv(atan_value, x)")) (("1" (REPLACE -1 -3 RL) (("1" (INST -3 "x") (("1" (REPLACE -3 1) (("1" (TYPEPRED "atan_deriv_fn(x)") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "derivable?" -1) (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_value") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (ASSERT) (("1" (EXPAND "atan_value") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "connected?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|atan_value_strict_increasing-1| |nil| 3256837487 ("" (LEMMA "positive_derivative[real]" ("g" "atan_value")) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_value_minus_x1_TCC1| 0 (|atan_value_minus_x1_TCC1-1| |nil| 3256964578 ("" (SKOSIMP*) (("" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "py!1" "x" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|atan_value_minus_x1| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.py)))" "nznum"))) (|atan_value_minus_x1| 0 (|atan_value_minus_x1-3| "" 3744238673 ("" (SKOLEM 1 ("z" "x")) (("" (FLATTEN) (("" (TYPEPRED "z") (("" (HIDE -1) (("" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "x")) (("" (ASSERT) (("" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (LEMMA "one_over_one_plus_t_sq_cont") (("1" (EXPAND "atan_value" -2 1) (("1" (REPLACE -1) (("1" (FLATTEN -2) (("1" (LEMMA "identity_derivable_fun[{a:real| -1/z<a}]") (("1" (LEMMA "deriv_id_fun[{a:real| -1/z<a}]") (("1" (EXPAND "I") (("1" (LEMMA "deriv_const_fun[{a: real | -1 / z < a}]" ("b" "1")) (("1" (LEMMA "const_derivable_fun[{a: real | -1 / z < a}]" ("b" "1")) (("1" (LEMMA "const_derivable_fun[{a: real | -1 / z < a}]" ("b" "z")) (("1" (LEMMA "deriv_const_fun[{a: real | -1 / z < a}]" ("b" "z")) (("1" (LEMMA "prod_derivable_fun[{a: real | -1 / z < a}]" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): x" "f2" "LAMBDA (x: {a: real | -1 / z < a}): z")) (("1" (ASSERT) (("1" (LEMMA "deriv_prod_fun[{a: real | -1 / z < a}]" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): x" "ff2" "LAMBDA (x: {a: real | -1 / z < a}): z")) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (REPLACE -3) (("1" (REPLACE -7) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_sum_fun[{a: real | -1 / z < a}]" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): 1" "ff2" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 * z")) (("1" (LEMMA "sum_derivable_fun[{a: real | -1 / z < a}]" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): 1" "f2" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 * z")) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (EXPAND "+") (("1" (LEMMA "diff_derivable_fun[{a: real | -1 / z < a}]" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): x" "f2" "LAMBDA (x_1: {a: real | -1 / z < a}): z")) (("1" (ASSERT) (("1" (LEMMA "deriv_diff_fun[{a: real | -1 / z < a}]" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): x" "ff2" "LAMBDA (x_1: {a: real | -1 / z < a}): z")) (("1" (REPLACE -7) (("1" (REPLACE -11) (("1" (EXPAND "-") (("1" (LEMMA "div_derivable_fun[{a: real | -1 / z < a}]" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 - z" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): 1 + x_1 * z")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun[{a: real | -1 / z < a}]" ("ff" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 - z" "gg" "LAMBDA (x_1: {a: real | -1 / z < a}): 1 + x_1 * z")) (("1" (REPLACE -3) (("1" (REPLACE -6) (("1" (EXPAND "/") (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "composition_derivable_fun[{a: real | -1 / z < a},real]" ("f" "LAMBDA (x: {a: real | -1 / z < a}): x" "g" "atan_value")) (("1" (LEMMA "composition_derivable_fun[{a: real | -1 / z < a},real]" ("f" "LAMBDA (x: {a: real | -1 / z < a}): (x - z) / (1 + x * z)" "g" "atan_value")) (("1" (LEMMA "deriv_comp_fun[{a: real | -1 / z < a},real]" ("ff" "LAMBDA (x: {a: real | -1 / z < a}): (x - z) / (1 + x * z)" "gg" "atan_value")) (("1" (LEMMA "deriv_comp_fun[{a: real | -1 / z < a},real]" ("ff" "LAMBDA (x: {a: real | -1 / z < a}): x" "gg" "atan_value")) (("1" (ASSERT) (("1" (EXPAND "o") (("1" (REPLACE -17) (("1" (REPLACE -21) (("1" (REPLACE -5) (("1" (EXPAND "*") (("1" (LEMMA "derivs_eq[{a: real | -1 / z < a}]" ("F" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value((x_1 - z) / (1 + x_1 * z))" "G" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value(x_1)")) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (HIDE -2 -3 -6 -8 -11) (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_deriv_fn((x_1 - z) / (1 + x_1 * z)) * ((1 + z * z) / (1 + 2 * (x_1 * z) + x_1 * x_1 * z * z))" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_deriv_fn(x_1)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (SKOLEM -1 ("c")) (("1" (EXPAND "const_fun") (("1" (EXPAND "+") (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value((x_1 - z) / (1 + x_1 * z))" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value(x_1) + c")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (SIMPLIFY -1) (("1" (INST-CP -1 "0") (("1" (REWRITE "atan_value_0" -2) (("1" (SIMPLIFY -2) (("1" (LEMMA "atan_neg_value" ("x" "z")) (("1" (REPLACE -1) (("1" (REPLACE -3 -2 RL) (("1" (INST -2 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "0")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -18)) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "x" "x!1" "py" "z")) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "1+x!1*z" "py" "1+x!1*z")) (("2" (LEMMA "div_cancel3" ("x" "atan_deriv_fn((x!1 - z) / (1 + x!1 * z)) * (1 + z * z)" "n0z" "(1 + x!1 * z) * (1 + x!1 * z)" "y" "atan_deriv_fn(x!1)")) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1) (("1" (NAME "XMZ" "x!1-z") (("1" (REPLACE -1) (("1" (NAME "XZP1" "1+x!1*z") (("1" (REPLACE -1) (("1" (NAME "ZSQP1" "1+z*z") (("1" (REPLACE -1) (("1" (EXPAND "atan_deriv_fn") (("1" (LEMMA "sq_pos" ("a" "x!1")) (("1" (LEMMA "sq_pos" ("a" "XMZ/XZP1")) (("1" (EXPAND "sq") (("1" (LEMMA "cross_mult" ("x" "ZSQP1" "n0x" "1 + XMZ / XZP1 * (XMZ / XZP1)" "y" "XZP1 * XZP1" "n0y" "1 + x!1 * x!1")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA "div_times" ("x" "XMZ" "n0x" "XZP1" "y" "XMZ" "n0y" "XZP1")) (("1" (REPLACE -1 1) (("1" (LEMMA "div_cancel1" ("n0z" "XZP1 * XZP1" "x" "XMZ * XMZ")) (("1" (SIMPLIFY 1) (("1" (REPLACE -1 1) (("1" (REPLACE -7 * RL) (("1" (REPLACE -6 * RL) (("1" (REPLACE -5 * RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "x!1")) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "x!1*z+1" "py" "x!1*z+1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE-ALL-BUT 1) (("3" (INST + "0") (("3" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (CROSS-MULT -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "not_one_element?") (("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 -1 -2 -3) (("3" (EXPAND "deriv_domain?") (("3" (SKOSIMP*) (("3" (INST + "e!1/2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|const_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (O CONST-DECL "T3" |function_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (TRUE CONST-DECL "bool" |booleans| NIL) (|derivs_eq| FORMULA-DECL NIL |indefinite_integral| |analysis|) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|deriv_comp_fun| FORMULA-DECL NIL |chain_rule| |analysis|) (|composition_derivable_fun| FORMULA-DECL NIL |chain_rule| |analysis|) (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|div_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|deriv_diff_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|diff_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_prod_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|prod_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|fundamental| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) SHOSTAK) (|atan_value_minus_x1-2| |nil| 3352182175 ("" (SKOLEM 1 ("z" "x")) (("" (FLATTEN) (("" (TYPEPRED "z") (("" (HIDE -1) (("" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "x")) (("" (ASSERT) (("" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (LEMMA "one_over_one_plus_t_sq_cont") (("1" (EXPAND "atan_value" -2 1) (("1" (REPLACE -1) (("1" (FLATTEN -2) (("1" (LEMMA "identity_derivable_fun[{a:real| -1/z<a}]") (("1" (LEMMA "deriv_id_fun[{a:real| -1/z<a}]") (("1" (EXPAND "I") (("1" (LEMMA "deriv_const_fun[{a: real | -1 / z < a}]" ("b" "1")) (("1" (LEMMA "const_derivable_fun[{a: real | -1 / z < a}]" ("b" "1")) (("1" (LEMMA "const_derivable_fun[{a: real | -1 / z < a}]" ("b" "z")) (("1" (LEMMA "deriv_const_fun[{a: real | -1 / z < a}]" ("b" "z")) (("1" (LEMMA "prod_derivable_fun[{a: real | -1 / z < a}]" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): x" "f2" "LAMBDA (x: {a: real | -1 / z < a}): z")) (("1" (ASSERT) (("1" (LEMMA "deriv_prod_fun[{a: real | -1 / z < a}]" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): x" "ff2" "LAMBDA (x: {a: real | -1 / z < a}): z")) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (REPLACE -3) (("1" (REPLACE -7) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_sum_fun[{a: real | -1 / z < a}]" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): 1" "ff2" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 * z")) (("1" (LEMMA "sum_derivable_fun[{a: real | -1 / z < a}]" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): 1" "f2" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 * z")) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (EXPAND "+") (("1" (LEMMA "diff_derivable_fun[{a: real | -1 / z < a}]" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): x" "f2" "LAMBDA (x_1: {a: real | -1 / z < a}): z")) (("1" (ASSERT) (("1" (LEMMA "deriv_diff_fun[{a: real | -1 / z < a}]" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): x" "ff2" "LAMBDA (x_1: {a: real | -1 / z < a}): z")) (("1" (REPLACE -7) (("1" (REPLACE -11) (("1" (EXPAND "-") (("1" (LEMMA "div_derivable_fun[{a: real | -1 / z < a}]" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 - z" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): 1 + x_1 * z")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun[{a: real | -1 / z < a}]" ("ff" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 - z" "gg" "LAMBDA (x_1: {a: real | -1 / z < a}): 1 + x_1 * z")) (("1" (REPLACE -3) (("1" (REPLACE -6) (("1" (EXPAND "/") (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "composition_derivable_fun[{a: real | -1 / z < a},real]" ("f" "LAMBDA (x: {a: real | -1 / z < a}): x" "g" "atan_value")) (("1" (LEMMA "composition_derivable_fun[{a: real | -1 / z < a},real]" ("f" "LAMBDA (x: {a: real | -1 / z < a}): (x - z) / (1 + x * z)" "g" "atan_value")) (("1" (LEMMA "deriv_comp_fun[{a: real | -1 / z < a},real]" ("ff" "LAMBDA (x: {a: real | -1 / z < a}): (x - z) / (1 + x * z)" "gg" "atan_value")) (("1" (LEMMA "deriv_comp_fun[{a: real | -1 / z < a},real]" ("ff" "LAMBDA (x: {a: real | -1 / z < a}): x" "gg" "atan_value")) (("1" (ASSERT) (("1" (EXPAND "o") (("1" (REPLACE -17) (("1" (REPLACE -21) (("1" (REPLACE -5) (("1" (EXPAND "*") (("1" (LEMMA "derivs_eq[{a: real | -1 / z < a}]" ("F" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value((x_1 - z) / (1 + x_1 * z))" "G" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value(x_1)")) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (HIDE -2 -3 -6 -8 -11) (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_deriv_fn((x_1 - z) / (1 + x_1 * z)) * ((1 + z * z) / (1 + 2 * (x_1 * z) + x_1 * x_1 * z * z))" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_deriv_fn(x_1)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (SKOLEM -1 ("c")) (("1" (EXPAND "const_fun") (("1" (EXPAND "+") (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value((x_1 - z) / (1 + x_1 * z))" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value(x_1) + c")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (SIMPLIFY -1) (("1" (INST-CP -1 "0") (("1" (REWRITE "atan_value_0" -2) (("1" (SIMPLIFY -2) (("1" (LEMMA "atan_neg_value" ("x" "z")) (("1" (REPLACE -1) (("1" (REPLACE -3 -2 RL) (("1" (INST -2 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "0")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -18)) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "x" "x!1" "py" "z")) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "1+x!1*z" "py" "1+x!1*z")) (("2" (LEMMA "div_cancel3" ("x" "atan_deriv_fn((x!1 - z) / (1 + x!1 * z)) * (1 + z * z)" "n0z" "(1 + x!1 * z) * (1 + x!1 * z)" "y" "atan_deriv_fn(x!1)")) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1) (("1" (NAME "XMZ" "x!1-z") (("1" (REPLACE -1) (("1" (NAME "XZP1" "1+x!1*z") (("1" (REPLACE -1) (("1" (NAME "ZSQP1" "1+z*z") (("1" (REPLACE -1) (("1" (EXPAND "atan_deriv_fn") (("1" (LEMMA "sq_pos" ("a" "x!1")) (("1" (LEMMA "sq_pos" ("a" "XMZ/XZP1")) (("1" (EXPAND "sq") (("1" (LEMMA "cross_mult" ("x" "ZSQP1" "n0x" "1 + XMZ / XZP1 * (XMZ / XZP1)" "y" "XZP1 * XZP1" "n0y" "1 + x!1 * x!1")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA "div_times" ("x" "XMZ" "n0x" "XZP1" "y" "XMZ" "n0y" "XZP1")) (("1" (REPLACE -1 1) (("1" (LEMMA "div_cancel1" ("n0z" "XZP1 * XZP1" "x" "XMZ * XMZ")) (("1" (SIMPLIFY 1) (("1" (REPLACE -1 1) (("1" (REPLACE -7 * RL) (("1" (REPLACE -6 * RL) (("1" (REPLACE -5 * RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "x!1")) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "x!1*z+1" "py" "x!1*z+1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (INST + "0") (("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "connected?") (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (CROSS-MULT -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "not_one_element?") (("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2 -1 -2 -3) (("3" (EXPAND "deriv_domain?") (("3" (SKOSIMP*) (("3" (INST + "e!1/2") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|atan_value_minus_x1-1| |nil| 3256965562 ("" (SKOLEM 1 ("z" "x")) (("" (FLATTEN) (("" (TYPEPRED "z") (("" (HIDE -1) (("" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "x")) (("" (ASSERT) (("" (LEMMA "fundamental" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (EXPAND "atan_value" -2 1) (("" (REPLACE -1) (("" (FLATTEN -2) (("" (LEMMA "identity_derivable_fun[{a:real| -1/z<a}]") (("1" (LEMMA "deriv_id_fun[{a:real| -1/z<a}]") (("1" (EXPAND "I") (("1" (LEMMA "deriv_const_fun[{a: real | -1 / z < a}]" ("b" "1")) (("1" (LEMMA "const_derivable_fun[{a: real | -1 / z < a}]" ("b" "1")) (("1" (LEMMA "const_derivable_fun[{a: real | -1 / z < a}]" ("b" "z")) (("1" (LEMMA "deriv_const_fun[{a: real | -1 / z < a}]" ("b" "z")) (("1" (EXPAND "const_fun") (("1" (LEMMA "prod_derivable_fun" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): x" "f2" "LAMBDA (x: {a: real | -1 / z < a}): z")) (("1" (ASSERT) (("1" (LEMMA "deriv_prod_fun" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): x" "ff2" "LAMBDA (x: {a: real | -1 / z < a}): z")) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (REPLACE -3) (("1" (REPLACE -7) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_sum_fun" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): 1" "ff2" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 * z")) (("1" (LEMMA "sum_derivable_fun" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): 1" "f2" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 * z")) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (REPLACE -8) (("1" (EXPAND "+") (("1" (LEMMA "diff_derivable_fun" ("f1" "LAMBDA (x: {a: real | -1 / z < a}): x" "f2" "LAMBDA (x_1: {a: real | -1 / z < a}): z")) (("1" (ASSERT) (("1" (LEMMA "deriv_diff_fun" ("ff1" "LAMBDA (x: {a: real | -1 / z < a}): x" "ff2" "LAMBDA (x_1: {a: real | -1 / z < a}): z")) (("1" (REPLACE -7) (("1" (REPLACE -11) (("1" (EXPAND "-") (("1" (LEMMA "div_derivable_fun" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 - z" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): 1 + x_1 * z")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun" ("ff" "LAMBDA (x_1: {a: real | -1 / z < a}): x_1 - z" "gg" "LAMBDA (x_1: {a: real | -1 / z < a}): 1 + x_1 * z")) (("1" (REPLACE -3) (("1" (REPLACE -6) (("1" (EXPAND "/") (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "composition_derivable_fun" ("f" "LAMBDA (x: {a: real | -1 / z < a}): x" "g" "atan_value")) (("1" (LEMMA "composition_derivable_fun" ("f" "LAMBDA (x: {a: real | -1 / z < a}): (x - z) / (1 + x * z)" "g" "atan_value")) (("1" (LEMMA "deriv_comp_fun" ("ff" "LAMBDA (x: {a: real | -1 / z < a}): (x - z) / (1 + x * z)" "gg" "atan_value")) (("1" (LEMMA "deriv_comp_fun" ("ff" "LAMBDA (x: {a: real | -1 / z < a}): x" "gg" "atan_value")) (("1" (ASSERT) (("1" (EXPAND "o") (("1" (REPLACE -17) (("1" (REPLACE -21) (("1" (REPLACE -5) (("1" (EXPAND "*") (("1" (LEMMA "derivs_eq" ("F" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value((x_1 - z) / (1 + x_1 * z))" "G" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value(x_1)")) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (REPLACE -3) (("1" (HIDE -2 -3 -6 -8 -11) (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_deriv_fn((x_1 - z) / (1 + x_1 * z)) * ((1 + z * z) / (1 + 2 * (x_1 * z) + x_1 * x_1 * z * z))" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_deriv_fn(x_1)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (SKOLEM -1 ("c")) (("1" (EXPAND "const_fun") (("1" (EXPAND "+") (("1" (LEMMA "extensionality_postulate" ("f" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value((x_1 - z) / (1 + x_1 * z))" "g" "LAMBDA (x_1: {a: real | -1 / z < a}): atan_value(x_1) + c")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (SIMPLIFY -1) (("1" (INST-CP -1 "0") (("1" (REWRITE "atan_value_0" -2) (("1" (SIMPLIFY -2) (("1" (LEMMA "atan_neg_value" ("x" "z")) (("1" (REPLACE -1) (("1" (REPLACE -3 -2 RL) (("1" (INST -2 "x") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "0")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -18)) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "x" "x!1" "py" "z")) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "1+x!1*z" "py" "1+x!1*z")) (("2" (LEMMA "div_cancel3" ("x" "atan_deriv_fn((x!1 - z) / (1 + x!1 * z)) * (1 + z * z)" "n0z" "(1 + x!1 * z) * (1 + x!1 * z)" "y" "atan_deriv_fn(x!1)")) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1) (("1" (NAME "XMZ" "x!1-z") (("1" (REPLACE -1) (("1" (NAME "XZP1" "1+x!1*z") (("1" (REPLACE -1) (("1" (NAME "ZSQP1" "1+z*z") (("1" (REPLACE -1) (("1" (EXPAND "atan_deriv_fn") (("1" (LEMMA "sq_pos" ("a" "x!1")) (("1" (LEMMA "sq_pos" ("a" "XMZ/XZP1")) (("1" (EXPAND "sq") (("1" (LEMMA "cross_mult" ("x" "ZSQP1" "n0x" "1 + XMZ / XZP1 * (XMZ / XZP1)" "y" "XZP1 * XZP1" "n0y" "1 + x!1 * x!1")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA "div_times" ("x" "XMZ" "n0x" "XZP1" "y" "XMZ" "n0y" "XZP1")) (("1" (REPLACE -1 1) (("1" (LEMMA "div_cancel1" ("n0z" "XZP1 * XZP1" "x" "XMZ * XMZ")) (("1" (SIMPLIFY 1) (("1" (REPLACE -1 1) (("1" (REPLACE -7 * RL) (("1" (REPLACE -6 * RL) (("1" (REPLACE -5 * RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "z" "x" "x!1")) (("2" (ASSERT) (("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "x!1*z+1" "py" "x!1*z+1")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (CROSS-MULT -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2 -1 -2 -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_value_minus_x2_TCC1| 0 (|atan_value_minus_x2_TCC1-1| |nil| 3256964644 ("" (SKOSIMP*) (("" (LEMMA "div_mult_pos_lt2" ("z" "-1" "py" "py!1" "x" "x!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|atan_value_minus_x2| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.py)))" "nznum"))) (|atan_value_minus_x2| 0 (|atan_value_minus_x2-2| "" 3790092657 ("" (SKOLEM 1 ("z" "x")) (("" (FLATTEN) (("" (TYPEPRED "z") (("" (HIDE -1) (("" (LEMMA "atan_inv_value" ("px" "z")) (("" (LEMMA "posreal_div_posreal_is_posreal" ("px" "1" "py" "z")) (("" (LEMMA "atan_inv_neg_value" ("nx" "x")) (("1" (LEMMA "atan_value_minus_x1" ("py" "1/z" "x" "1/x")) (("1" (REWRITE "div_div1" -1) (("1" (LEMMA "div_mult_neg_lt2" ("z" "1" "x" "-z" "ny" "x")) (("1" (LEMMA "div_mult_pos_lt2" ("z" "-1" "x" "x" "py" "z")) (("1" (ASSERT) (("1" (LEMMA "minus_div1" ("x" "1" "y" "1" "n0x" "x" "n0y" "z")) (("1" (REPLACE -1 -4) (("1" (LEMMA "add_div" ("x" "1" "y" "1" "n0x" "1" "n0y" "x*z")) (("1" (REPLACE -1 -5) (("1" (REWRITE "div_div1" -5) (("1" (LEMMA "div_cancel2" ("x" "z-x" "n0z" "x*z")) (("1" (REPLACE -1 -6) (("1" (LEMMA "atan_neg_value" ("x" "(z - x) / (1 + x * z)")) (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|atan_value_minus_x1| FORMULA-DECL NIL |atan_integral| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|div_mult_neg_lt2| FORMULA-DECL NIL |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|npreal_div_posreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|add_div| FORMULA-DECL NIL |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|minus_div1| FORMULA-DECL NIL |real_props| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_div1| FORMULA-DECL NIL |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|atan_inv_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|atan_inv_value| FORMULA-DECL NIL |atan_integral| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)) SHOSTAK) (|atan_value_minus_x2-1| |nil| 3256974044 ("" (SKOLEM 1 ("z" "x")) (("" (FLATTEN) (("" (TYPEPRED "z") (("" (HIDE -1) (("" (LEMMA "atan_inv_value" ("px" "z")) (("" (LEMMA "posreal_div_posreal_is_posreal" ("px" "1" "py" "z")) (("" (LEMMA "atan_inv_neg_value" ("nx" "x")) (("1" (LEMMA "atan_value_minus_x1" ("py" "1/z" "x" "1/x")) (("1" (REWRITE "div_div1" -1) (("1" (LEMMA "div_mult_neg_lt2" ("z" "1" "x" "-z" "ny" "x")) (("1" (LEMMA "div_mult_pos_lt2" ("z" "-1" "x" "x" "py" "z")) (("1" (ASSERT) (("1" (LEMMA "minus_div1" ("x" "1" "y" "1" "n0x" "x" "n0y" "z")) (("1" (REPLACE -1 -4) (("1" (LEMMA "add_div" ("x" "1" "y" "1" "n0x" "1" "n0y" "x*z")) (("1" (REPLACE -1 -5) (("1" (REWRITE "div_div1" -5) (("1" (LEMMA "div_cancel2" ("x" "z-x" "n0z" "x*z")) (("1" (REPLACE -1 -6) (("1" (LEMMA "atan_neg_value" ("x" "(z - x) / (1 + x * z)")) (("1" (REPLACE -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_value_minus_TCC1| 0 (|atan_value_minus_TCC1-1| |nil| 3255979356 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|atan_value_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_value_minus_TCC2| 0 (|atan_value_minus_TCC2-2| "" 3744238717 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_value_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum")) (|atan_value_minus_TCC2-1| |nil| 3257273262 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (HIDE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_value_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_value_minus_TCC3| 0 (|atan_value_minus_TCC3-2| "" 3744238729 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_value_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum")) (|atan_value_minus_TCC3-1| |nil| 3257273262 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (HIDE -1 -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_value_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_value_minus| 0 (|atan_value_minus-2| "" 3790092658 ("" (SKOLEM 1 ("x" "y")) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "trichotomy" ("x" "y")) (("1" (SPLIT -1) (("1" (LEMMA "atan_value_minus_x1" ("x" "x" "py" "y")) (("1" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "y" "x" "x")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "atan_value_minus_x1" ("x" "-x" "py" "-y")) (("1" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "-y" "x" "-x")) (("1" (ASSERT) (("1" (REWRITE "atan_neg_value" -2) (("1" (REWRITE "atan_neg_value" -2) (("1" (LEMMA "atan_neg_value" ("x" "(x - y) / (1 + x * y)")) (("1" (REPLACE -1 -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_value_minus_x2" ("x" "x" "py" "y")) (("1" (LEMMA "div_mult_pos_lt2" ("x" "x" "py" "y" "z" "-1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (LEMMA "atan_value_minus_x2" ("x" "-x" "py" "-y")) (("1" (LEMMA "div_mult_pos_lt2" ("x" "-x" "py" "-y" "z" "-1")) (("1" (REWRITE "atan_neg_value" -2) (("1" (REWRITE "atan_neg_value" -2) (("1" (LEMMA "atan_neg_value" ("x" "(x - y) / (1 + x * y)")) (("1" (REPLACE -1 -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (|atan_value_minus_x1| FORMULA-DECL NIL |atan_integral| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|atan_value_minus_x2| FORMULA-DECL NIL |atan_integral| NIL) (|div_mult_pos_lt2| FORMULA-DECL NIL |real_props| NIL)) SHOSTAK) (|atan_value_minus-1| |nil| 3255980971 ("" (SKOLEM 1 ("x" "y")) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "trichotomy" ("x" "y")) (("1" (SPLIT -1) (("1" (LEMMA "atan_value_minus_x1" ("x" "x" "py" "y")) (("1" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "y" "x" "x")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "atan_value_minus_x1" ("x" "-x" "py" "-y")) (("1" (LEMMA "div_mult_pos_lt1" ("z" "-1" "py" "-y" "x" "-x")) (("1" (ASSERT) (("1" (REWRITE "atan_neg_value" -2) (("1" (REWRITE "atan_neg_value" -2) (("1" (LEMMA "atan_neg_value" ("x" "(x - y) / (1 + x * y)")) (("1" (REPLACE -1 -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "atan_value_minus_x2" ("x" "x" "py" "y")) (("1" (LEMMA "div_mult_pos_lt2" ("x" "x" "py" "y" "z" "-1")) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (LEMMA "atan_value_minus_x2" ("x" "-x" "py" "-y")) (("1" (LEMMA "div_mult_pos_lt2" ("x" "-x" "py" "-y" "z" "-1")) (("1" (REWRITE "atan_neg_value" -2) (("1" (REWRITE "atan_neg_value" -2) (("1" (LEMMA "atan_neg_value" ("x" "(x - y) / (1 + x * y)")) (("1" (REPLACE -1 -3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 1)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|pi_TCC1| 0 (|pi_TCC1-2| "" 3790092658 ("" (LEMMA "atan_value_strict_increasing") (("" (EXPAND "strict_increasing?") (("" (INST - "0" "1") (("" (ASSERT) (("" (REWRITE "atan_value_0") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_value_strict_increasing| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK (|pi| SUBTYPE "number_fields.*(4, atan_integral.atan_value(1))" "posreal")) (|pi_TCC1-1| |nil| 3255875083 ("" (LEMMA "atan_value_strict_increasing") (("" (EXPAND "strict_increasing?") (("" (EXPAND "atan") (("" (INST - "0" "1") (("" (ASSERT) (("" (REWRITE "atan_value_0") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK (|pi| SUBTYPE "number_fields.*(4, atan_integral.atan_value(1))" "posreal"))) (|real_abs_lt_pi2_TCC1| 0 (|real_abs_lt_pi2_TCC1-2| "" 3790092658 ("" (TYPEPRED "pi") (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL)) SHOSTAK (|real_abs_lt_pi2| SUBTYPE "0" "real_abs_lt_pi2")) (|real_abs_lt_pi2_TCC1-1| |nil| 3323022914 ("" (TYPEPRED "pi") (("" (REWRITE "abs_0") (("" (ASSERT) NIL NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL (|real_abs_lt_pi2| SUBTYPE "0" "real_abs_lt_pi2"))) (|atan_TCC1| 0 (|atan_TCC1-1| |nil| 3256838147 ("" (SKOLEM 1 ("x")) (("" (LEMMA "atan_value_strict_increasing") (("" (EXPAND "strict_increasing?") (("" (CASE "FORALL (x:posreal): 0 < atan_value(x) AND atan_value(x) < 2*atan_value(1)") (("1" (LEMMA "trichotomy" ("x" "x")) (("1" (SPLIT -1) (("1" (INST -2 "x") (("1" (FLATTEN -2) (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "pi") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (INST -2 "1") (("2" (REWRITE "atan_value_0") (("2" (FLATTEN -2) (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST-CP -3 "x" "0") (("3" (INST -2 "-x") (("1" (REWRITE "atan_value_0") (("1" (REWRITE "atan_neg_value") (("1" (EXPAND "pi") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "x!1") (("2" (INST-CP - "0" "x!1") (("2" (REWRITE "atan_value_0") (("2" (ASSERT) (("2" (ASSERT) (("2" (LEMMA "trich_lt" ("x" "x!1" "y" "1")) (("2" (SPLIT -1) (("1" (INST - "x!1" "1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "atan_value_minus" ("x" "x!1" "y" "1")) (("3" (ASSERT) (("3" (INST -5 "(x!1-1)/(x!1+1)" "1") (("3" (LEMMA "div_mult_pos_lt1" ("z" "x!1-1" "py" "x!1+1" "x" "1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_value_strict_increasing| FORMULA-DECL NIL |atan_integral| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x| SKOLEM-CONST-DECL "real" |atan_integral| NIL) (|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|trich_lt| FORMULA-DECL NIL |real_props| NIL) (|atan_value_minus| FORMULA-DECL NIL |atan_integral| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|div_mult_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)) SHOSTAK (|atan| SUBTYPE "atan_integral.atan_value(atan_integral.x)" "real_abs_lt_pi2"))) (|pi_value| 0 (|pi_value-1| |nil| 3408904315 ("" (EXPAND "atan") (("" (ASSERT) (("" (EXPAND "pi") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL)) SHOSTAK)) (|atan_strict_increasing| 0 (|atan_strict_increasing-1| |nil| 3257226677 ("" (EXPAND "atan") (("" (LEMMA "atan_value_strict_increasing") (("" (LEMMA "extensionality_postulate" ("f" "atan_value" "g" "LAMBDA (x: real): atan_value(x)")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|atan_value_strict_increasing| FORMULA-DECL NIL |atan_integral| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL)) SHOSTAK)) (|atan_bij| 0 (|atan_bij-2| |nil| 3352182458 ("" (EXPAND "bijective?") (("" (SPLIT 1) (("1" (EXPAND "injective?") (("1" (SKOLEM 1 ("x" "y")) (("1" (FLATTEN) (("1" (LEMMA "atan_strict_increasing") (("1" (EXPAND "strict_increasing?") (("1" (LEMMA "trich_lt" ("x" "x" "y" "y")) (("1" (SPLIT -1) (("1" (INST - "x" "y") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST - "y" "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (LEMMA "derivable_cont_fun[real]" ("f" "atan_value")) (("2" (SPLIT -1) (("1" (EXPAND "atan") (("1" (LEMMA "atan_value_strict_increasing") (("1" (EXPAND "strict_increasing?") (("1" (LEMMA "trichotomy" ("x" "y!1")) (("1" (SPLIT -1) (("1" (LEMMA "trich_lt" ("x" "y!1" "y" "atan_value(1)")) (("1" (SPLIT -1) (("1" (LEMMA "intermediate1[real]" ("g" "atan_value" "a" "0" "b" "1" "x" "y!1")) (("1" (REWRITE "atan_value_0") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST + "c!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (INST + "1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (INST-CP - "0" "1") (("3" (ASSERT) (("3" (REWRITE "atan_value_0") (("3" (EXPAND "pi") (("3" (INST-CP - "0" "1") (("3" (ASSERT) (("3" (LEMMA "intermediate1[real]" ("a" "0" "b" "1" "x" "2*atan_value(1)-y!1" "g" "atan_value")) (("3" (REWRITE "atan_value_0") (("3" (ASSERT) (("3" (SKOLEM -1 ("c")) (("3" (FLATTEN) (("3" (EXPAND "<=" -1) (("3" (SPLIT -1) (("1" (LEMMA "atan_inv_value" ("px" "1/c")) (("1" (INST + "1/c") (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "posreal_div_posreal_is_posreal" ("px" "1" "py" "c")) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 * RL) (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "0") (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "trich_lt" ("x" "y!1" "y" "-atan_value(1)")) (("3" (ASSERT) (("3" (SPLIT -1) (("1" (EXPAND "pi") (("1" (LEMMA "intermediate1[real]" ("a" "-1" "b" "0" "x" "-2*atan_value(1)-y!1" "g" "atan_value")) (("1" (REWRITE "atan_neg_value" -1) (("1" (REWRITE "atan_value_0" -1) (("1" (ASSERT) (("1" (SKOLEM -1 ("c")) (("1" (FLATTEN) (("1" (EXPAND "<=" -2) (("1" (SPLIT -2) (("1" (LEMMA "atan_inv_neg_value" ("nx" "c")) (("1" (REPLACE -4 -1) (("1" (SIMPLIFY -1) (("1" (INST + "1/c") NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1) (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "-1") (("2" (REWRITE "atan_neg_value") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "intermediate1[real]" ("a" "-1" "b" "0" "x" "y!1" "g" "atan_value")) (("3" (REWRITE "atan_value_0") (("3" (REWRITE "atan_neg_value") (("3" (ASSERT) (("3" (SKOLEM -1 ("c")) (("3" (FLATTEN -1) (("3" (INST + "c") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("1" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan_value") (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_strict_increasing| FORMULA-DECL NIL |atan_integral| NIL) (|trich_lt| FORMULA-DECL NIL |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|injective?| CONST-DECL "bool" |functions| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|derivable_cont_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|fundamental| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|intermediate1| FORMULA-DECL NIL |continuous_functions_props| |analysis|) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|atan_inv_value| FORMULA-DECL NIL |atan_integral| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|atan_inv_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|atan_value_strict_increasing| FORMULA-DECL NIL |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|surjective?| CONST-DECL "bool" |functions| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL)) NIL) (|atan_bij-1| |nil| 3257310468 ("" (EXPAND "bijective?") (("" (SPLIT 1) (("1" (EXPAND "injective?") (("1" (SKOLEM 1 ("x" "y")) (("1" (FLATTEN) (("1" (LEMMA "atan_strict_increasing") (("1" (EXPAND "strict_increasing?") (("1" (LEMMA "trich_lt" ("x" "x" "y" "y")) (("1" (SPLIT -1) (("1" (INST - "x" "y") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST - "y" "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "surjective?") (("2" (SKOSIMP*) (("2" (TYPEPRED "y!1") (("2" (LEMMA "derivable_continuous2" ("f" "atan_value")) (("2" (SPLIT -1) (("1" (EXPAND "atan") (("1" (LEMMA "atan_value_strict_increasing") (("1" (EXPAND "strict_increasing?") (("1" (LEMMA "trichotomy" ("x" "y!1")) (("1" (SPLIT -1) (("1" (LEMMA "trich_lt" ("x" "y!1" "y" "atan_value(1)")) (("1" (SPLIT -1) (("1" (LEMMA "intermediate1" ("g" "atan_value" "a" "0" "b" "1" "x" "y!1")) (("1" (REWRITE "atan_value_0") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST + "c!1") NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (INST + "1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "abs") (("3" (INST-CP - "0" "1") (("3" (ASSERT) (("3" (REWRITE "atan_value_0") (("3" (LEMMA "intermediate1" ("a" "0" "b" "1" "x" "2*atan_value(1)-y!1" "g" "atan_value")) (("3" (REWRITE "atan_value_0") (("3" (ASSERT) (("3" (SKOLEM -1 ("c")) (("3" (FLATTEN) (("3" (EXPAND "<=" -1) (("3" (SPLIT -1) (("1" (LEMMA "atan_inv_value" ("px" "1/c")) (("1" (INST + "1/c") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "posreal_div_posreal_is_posreal" ("px" "1" "py" "c")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1 * RL) (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "0") (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "trich_lt" ("x" "y!1" "y" "-atan_value(1)")) (("3" (EXPAND "abs") (("3" (ASSERT) (("3" (SPLIT -1) (("1" (LEMMA "intermediate1" ("a" "-1" "b" "0" "x" "-2*atan_value(1)-y!1" "g" "atan_value")) (("1" (REWRITE "atan_neg_value" -1) (("1" (REWRITE "atan_value_0" -1) (("1" (ASSERT) (("1" (SKOLEM -1 ("c")) (("1" (FLATTEN) (("1" (EXPAND "<=" -2) (("1" (SPLIT -2) (("1" (LEMMA "atan_inv_neg_value" ("nx" "c")) (("1" (REPLACE -4 -1) (("1" (SIMPLIFY -1) (("1" (INST + "1/c") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (REWRITE "atan_value_0") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "-1") (("2" (REWRITE "atan_neg_value") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "intermediate1" ("a" "-1" "b" "0" "x" "y!1" "g" "atan_value")) (("3" (REWRITE "atan_value_0") (("3" (REWRITE "atan_neg_value") (("3" (ASSERT) (("3" (SKOLEM -1 ("c")) (("3" (FLATTEN -1) (("3" (INST + "c") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "one_over_one_plus_t_sq_cont") (("2" (LEMMA "fundamental" ("f" "atan_deriv_fn" "F" "atan_value" "a" "0")) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan_value") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL) SHOSTAK)) (|atan_0| 0 (|atan_0-1| |nil| 3257226801 ("" (EXPAND "atan") (("" (REWRITE "atan_value_0") NIL NIL)) NIL) ((|atan_value_0| FORMULA-DECL NIL |atan_integral| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL)) SHOSTAK)) (|atan_inv| 0 (|atan_inv-1| |nil| 3264783397 ("" (SKOSIMP*) (("" (EXPAND "pi") (("" (EXPAND "atan") (("" (LEMMA "atan_inv_value" ("px" "px!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|atan_inv_value| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_inv_neg| 0 (|atan_inv_neg-1| |nil| 3264783474 ("" (SKOSIMP*) (("" (EXPAND "pi") (("" (EXPAND "atan") (("" (LEMMA "atan_inv_neg_value" ("nx" "nx!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|atan_inv_neg_value| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnreal_div_negreal_is_npreal| APPLICATION-JUDGEMENT "npreal" |real_types| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_def_TCC1| 0 (|atan_def_TCC1-1| |nil| 3257225947 ("" (SKOLEM 1 ("x")) (("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (LEMMA "continuous_Integrable?[real]" ("f" "atan_deriv_fn" "a" "0" "b" "x")) (("1" (EXPAND "continuous?" -2) (("1" (EXPAND "atan_deriv_fn") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (SKOSIMP*) (("2" (INST - "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|continuous?| CONST-DECL "bool" |continuous_functions| |analysis|) (|Closed_interval| TYPE-EQ-DECL NIL |intervals_real| |reals|) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|continuous_Integrable?| FORMULA-DECL NIL |integral| |analysis|)) SHOSTAK (|atan_def| SUBTYPE "(LAMBDA (x: reals.real): number_fields./(1, ((number_fields.+)(1, number_fields.*(x, x)))))" "Integrable_funs[real](0, atan_integral.x)"))) (|atan_def| 0 (|atan_def-1| |nil| 3257226833 ("" (SKOLEM 1 ("x")) (("" (EXPAND "atan") (("" (EXPAND "atan_value") (("" (EXPAND "atan_deriv_fn") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|atan_value| CONST-DECL "real" |atan_integral| NIL)) SHOSTAK)) (|acot_TCC1| 0 (|acot_TCC1-1| |nil| 3257226194 ("" (SKOLEM 1 ("nzx")) (("" (LEMMA "atan_0") (("" (LEMMA "atan_strict_increasing") (("" (EXPAND "strict_increasing?") (("" (LEMMA "trichotomy" ("x" "nzx")) (("" (SPLIT -1) (("1" (INST - "0" "1/nzx") (("1" (LEMMA "quotient_pos_lt" ("n0x" "nzx")) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "quotient_neg_lt" ("n0x" "nzx")) (("3" (INST - "1/nzx" "0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_0| FORMULA-DECL NIL |atan_integral| NIL) (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|quotient_pos_lt| FORMULA-DECL NIL |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|quotient_neg_lt| FORMULA-DECL NIL |real_props| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|atan_strict_increasing| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK (|acot| SUBTYPE "atan_integral.atan(number_fields./(1, atan_integral.nzx))" "nzreal"))) (|atan_neg| 0 (|atan_neg-1| |nil| 3257226889 ("" (LEMMA "atan_neg_value") (("" (EXPAND "atan") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|atan_neg_value| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK)) (|acot_neg| 0 (|acot_neg-1| |nil| 3257226968 ("" (EXPAND "acot") (("" (SKOLEM 1 ("nzx")) (("" (LEMMA "atan_neg" ("x" "1/nzx")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_neg| FORMULA-DECL NIL |atan_integral| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|acot| CONST-DECL "nzreal" |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK)) (|atan_minus_TCC1| 0 (|atan_minus_TCC1-2| "" 3744239041 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum")) (|atan_minus_TCC1-1| |nil| 3257273266 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (HIDE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_minus_TCC2| 0 (|atan_minus_TCC2-2| "" 3744239052 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum")) (|atan_minus_TCC2-1| |nil| 3257273266 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (HIDE -1 -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_minus| SUBTYPE "((number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_minus| 0 (|atan_minus-1| |nil| 3257227268 ("" (SKOLEM 1 ("x" "y")) (("" (LEMMA "atan_value_minus" ("x" "x" "y" "y")) (("" (FLATTEN -1) (("" (EXPAND "pi") (("" (EXPAND "atan") (("" (REPLACE -1) (("" (REPLACE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_value_minus| FORMULA-DECL NIL |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL)) SHOSTAK)) (|atan_plus_TCC1| 0 (|atan_plus_TCC1-1| |nil| 3257228828 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|atan_plus| SUBTYPE "((number_fields.-)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_plus_TCC2| 0 (|atan_plus_TCC2-2| "" 3744239065 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_plus| SUBTYPE "((number_fields.-)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum")) (|atan_plus_TCC2-1| |nil| 3257273266 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (HIDE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_plus| SUBTYPE "((number_fields.-)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_plus_TCC3| 0 (|atan_plus_TCC3-2| "" 3744239078 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_plus| SUBTYPE "((number_fields.-)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum")) (|atan_plus_TCC3-1| |nil| 3257275668 ("" (SKOLEM 1 ("x" "y")) (("" (FLATTEN) (("" (HIDE -1 -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|atan_plus| SUBTYPE "((number_fields.-)(1, number_fields.*(atan_integral.x, atan_integral.y)))" "nznum"))) (|atan_plus| 0 (|atan_plus-1| |nil| 3257227479 ("" (SKOLEM 1 ("x" "y")) (("" (LEMMA "atan_minus" ("x" "x" "y" "-y")) (("" (REWRITE "atan_neg" -1) (("" (FLATTEN) (("" (LEMMA "both_sides_times_neg_lt1" ("y" "x*y" "x" "1" "nz" "-1")) (("" (LEMMA "both_sides_times_neg_lt1" ("x" "x*y" "y" "1" "nz" "-1")) (("" (REPLACE -1) (("" (REPLACE -2) (("" (LEMMA "both_sides_times_neg_lt1" ("x" "y" "y" "0" "nz" "-1")) (("" (LEMMA "both_sides_times_neg_lt1" ("y" "y" "x" "0" "nz" "-1")) (("" (LEMMA "trichotomy" ("x" "y")) (("" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -6 1) (("1" (REPLACE -8 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (REPLACE -6 1) (("3" (REPLACE -7 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_minus| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atan_neg| FORMULA-DECL NIL |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|atan_sub_swap_TCC1| 0 (|atan_sub_swap_TCC1-1| |nil| 3514307078 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|atan_sub_swap| SUBTYPE "2" "{i: integers.int | booleans.OR(atan_integral.x /= 0, reals.>=(i, 0))}"))) (|atan_sub_swap_TCC2| 0 (|atan_sub_swap_TCC2-1| |nil| 3514307078 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|atan_sub_swap| SUBTYPE "2" "{i: integers.int | booleans.OR(atan_integral.y /= 0, reals.>=(i, 0))}"))) (|atan_sub_swap_TCC3| 0 (|atan_sub_swap_TCC3-1| |nil| 3514307078 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|atan_sub_swap| SUBTYPE "(number_fields.*(number_fields.*(2, atan_integral.x), atan_integral.y))" "nznum"))) (|atan_sub_swap| 0 (|atan_sub_swap-1| |nil| 3514307078 ("" (SKEEP) (("" (LEMMA "atan_minus") (("" (INST?) (("" (ASSERT) (("" (CASE-REPLACE "(x / y - y / x) / (1 + x / y * (y / x)) = (x ^ 2 - y ^ 2) / (2 * (x * y))") (("" (HIDE -1 4) (("" (EXPAND "^") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_minus| FORMULA-DECL NIL |atan_integral| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (>= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|deriv_atan_fun| 0 (|deriv_atan_fun-3| "" 3754883335 ("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (LEMMA "extensionality_postulate" ("f" "atan_deriv_fn" "g" "LAMBDA (x: real): 1 / (1 + x * x)")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan" "a" "0")) (("1" (SPLIT -1) (("1" (REPLACE -2 -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan" 1) (("3" (EXPAND "atan_value" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_deriv_fn" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (ASSERT) (("2" (CASE "(1 + x!1 * x!1) > 0") (("1" (ASSERT) (("1" (LEMMA "pos_div_gt") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (EXPAND "sq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "sq_pos" ("a" "x!1")) (("3" (EXPAND "sq") (("3" (ASSERT) (("3" (HIDE -3 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|atan_deriv_fn| CONST-DECL "posreal" |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|fundamental| FORMULA-DECL NIL |fundamental_theorem| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|atan_value| CONST-DECL "real" |atan_integral| NIL) (|pos_div_gt| FORMULA-DECL NIL |real_props| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|x!1| SKOLEM-CONST-DECL "real" |atan_integral| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|one_over_one_plus_t_sq_cont| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK) (|deriv_atan_fun-2| |nil| 3352182759 ("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (LEMMA "extensionality_postulate" ("f" "atan_deriv_fn" "g" "LAMBDA (x: real): 1 / (1 + x * x)")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (LEMMA "fundamental[real]" ("f" "atan_deriv_fn" "F" "atan" "a" "0")) (("1" (SPLIT -1) (("1" (REPLACE -2 -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan" 1) (("3" (EXPAND "atan_value" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_deriv_fn" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (EXPAND "sq") (("2" (ASSERT) (("2" (HIDE -3 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL) NIL) (|deriv_atan_fun-1| |nil| 3257228288 ("" (LEMMA "one_over_one_plus_t_sq_cont") (("" (LEMMA "extensionality_postulate" ("f" "atan_deriv_fn" "g" "LAMBDA (x: real): 1 / (1 + x * x)")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (LEMMA "fundamental" ("f" "atan_deriv_fn" "F" "atan" "a" "0")) (("1" (SPLIT -1) (("1" (REPLACE -2 -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "atan" 1) (("3" (EXPAND "atan_value" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "atan_deriv_fn" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (EXPAND "sq") (("2" (ASSERT) (("2" (HIDE -3 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL) SHOSTAK)) (|continuous_atan| 0 (|continuous_atan-2| |nil| 3352182779 ("" (LEMMA "deriv_atan_fun") (("" (FLATTEN) (("" (LEMMA "derivable_cont_fun[real]" ("f" "atan")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|derivable_cont_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_atan_fun| FORMULA-DECL NIL |atan_integral| NIL)) NIL) (|continuous_atan-1| |nil| 3262324800 ("" (LEMMA "deriv_atan_fun") (("" (FLATTEN) (("" (LEMMA "derivable_continuous2[real]" ("f" "atan")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|atan_1| 0 (|atan_1-2| "" 3790092666 ("" (LEMMA "atan_plus" ("x" "1/5" "y" "1/5")) (("" (ASSERT) (("" (CASE "(2 * (1 / 5) / (1 - 1 / 5 * (1 / 5))) = 5/12") (("1" (LEMMA "atan_plus" ("x" "5/12" "y" "5/12")) (("1" (ASSERT) (("1" (CASE "(2 * (5 / 12) / (1 - 5 / 12 * (5 / 12))) = 120/119") (("1" (REPLACE -1) (("1" (HIDE -1 -3) (("1" (LEMMA "atan_minus" ("x" "120/119" "y" "1/239")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "cross_mult" ("x" "2*(5/12)" "n0x" "(1 - 5 / 12 * (5 / 12))" "y" "120" "n0y" "119")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|atan_minus| FORMULA-DECL NIL |atan_integral| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_plus| FORMULA-DECL NIL |atan_integral| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|atan_1-1| |nil| 3259650470 ("" (LEMMA "atan_plus" ("x" "1/5" "y" "1/5")) (("" (ASSERT) (("" (CASE "(2 * (1 / 5) / (1 - 1 / 5 * (1 / 5))) = 5/12") (("1" (REPLACE -1) (("1" (LEMMA "atan_plus" ("x" "5/12" "y" "5/12")) (("1" (ASSERT) (("1" (CASE "(2 * (5 / 12) / (1 - 5 / 12 * (5 / 12))) = 120/119") (("1" (REPLACE -1) (("1" (HIDE -1 -3) (("1" (REPLACE -2 -1 RL) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 1) (("1" (LEMMA "atan_minus" ("x" "120/119" "y" "1/239")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "cross_mult" ("x" "2*(5/12)" "n0x" "(1 - 5 / 12 * (5 / 12))" "y" "120" "n0y" "119")) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_bnds| 0 (|atan_bnds-3| |nil| 3445345367 ("" (SKOLEM 1 ("x")) (("" (LEMMA "deriv_atan_fun") (("" (FLATTEN) (("" (LEMMA "atan_0") (("" (LEMMA "mean_value[nnreal]" ("a" "0")) (("1" (INST - "x" "_") (("1" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "atan")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "atan")) (("1" (EXPAND "restrict2") (("1" (REPLACE -6 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "extensionality" ("f" "LAMBDA (a: nnreal): 1 / (1 + a * a)" "g" "deriv[nnreal](LAMBDA (u: nnreal): atan(u))")) (("1" (SIMPLIFY -1) (("1" (REPLACE -2 -1) (("1" (HIDE -2 -6 -7) (("1" (LEMMA "identity_derivable_fun[nnreal]") (("1" (LEMMA "deriv_id_fun[nnreal]") (("1" (LEMMA "deriv_const_fun[nnreal]" ("b" "1")) (("1" (EXPAND "I") (("1" (SPLIT 1) (("1" (LEMMA "prod_derivable_fun[nnreal]" ("f1" "LAMBDA (x: nnreal): x" "f2" "LAMBDA (x: nnreal): x")) (("1" (ASSERT) (("1" (LEMMA "deriv_prod_fun[nnreal]" ("ff1" "LAMBDA (x: nnreal): x" "ff2" "LAMBDA (x: nnreal): x")) (("1" (REPLACE -4 -1) (("1" (EXPAND "*") (("1" (EXPAND "+" -1) (("1" (LEMMA "sum_derivable_fun[nnreal]" ("f1" "LAMBDA (x: nnreal): 1" "f2" "LAMBDA (x: nnreal): x*x")) (("1" (LEMMA "const_derivable_fun[nnreal]" ("b" "1")) (("1" (ASSERT) (("1" (LEMMA "deriv_sum_fun[nnreal]" ("ff1" "LAMBDA (x: nnreal): 1" "ff2" "LAMBDA (x: nnreal): x*x")) (("1" (REPLACE -4 -1) (("1" (REPLACE -6 -1) (("1" (EXPAND "+") (("1" (LEMMA "div_derivable_fun[nnreal]" ("f" "LAMBDA (x: nnreal): x" "g" "LAMBDA (x: nnreal): 1 + x*x")) (("1" (ASSERT) (("1" (EXPAND "/" -1) (("1" (LEMMA "deriv_div_fun[nnreal]" ("ff" "LAMBDA (x: nnreal): x" "gg" "LAMBDA (x: nnreal): 1 + x*x")) (("1" (REPLACE -3 -1) (("1" (REPLACE -9 -1) (("1" (EXPAND "/") (("1" (EXPAND "-" -1) (("1" (EXPAND "*" -1) (("1" (LEMMA "diff_derivable_fun[nnreal]" ("f1" "LAMBDA (u: nnreal): atan(u)" "f2" "LAMBDA (x: nnreal): x/(1+x*x)")) (("1" (ASSERT) (("1" (LEMMA "deriv_diff_fun[nnreal]" ("ff1" "LAMBDA (u: nnreal): atan(u)" "ff2" "LAMBDA (x: nnreal): x/(1+x*x)")) (("1" (EXPAND "-") (("1" (REPLACE -3 -1) (("1" (REPLACE -13 -1 RL) (("1" (SIMPLIFY -1) (("1" (INST -15 "LAMBDA (x_1: nnreal): atan(x_1) - x_1 / (1 + x_1 * x_1)") (("1" (ASSERT) (("1" (SKOLEM - "c") (("1" (EXPAND "deriv" -1) (("1" (LEMMA "congruence" ("f" "(LAMBDA (x: nnreal):
                               deriv(LAMBDA (x_1: nnreal): atan(x_1) - x_1 / (1 + x_1 * x_1), x))" "g" "(LAMBDA (x_1: nnreal):
                                1 / (1 + x_1 * x_1) -
                                 (1 - x_1 * x_1) / (1 + 2 * (x_1 * x_1) + x_1 * x_1 * x_1 * x_1))" "x1" "c" "x2" "c")) (("1" (ASSERT) (("1" (REPLACE -1 -16) (("1" (REPLACE -17 -16) (("1" (HIDE-ALL-BUT (-16 1)) (("1" (FLATTEN) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c" "py" "c")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "1+c*c" "py" "1+c*c")) (("1" (LEMMA "minus_div1" ("x" "1" "n0x" "1+c*c" "y" "1-c*c" "n0y" "(1 + c * c) * (1 + c * c)")) (("1" (REPLACE -1 -6) (("1" (LEMMA "div_cancel1" ("x" "2*(c*c)/((1 + c * c) * (1 + c * c))" "n0z" "1+c*c")) (("1" (NAME "CC" "c*c") (("1" (REPLACE -1) (("1" (NAME "CCP1" "1+CC") (("1" (REPLACE -1) (("1" (REWRITE "div_div2" -3) (("1" (CASE "1 * (CCP1 * CCP1) - (1 - CC) * CCP1 = CCP1 * 2*CC") (("1" (REPLACE -1 -10) (("1" (REPLACE -4 -10) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "2*CC" "py" "CCP1*CCP1")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "2*CC/(CCP1*CCP1)")) (("1" (INST - "x") (("1" (REPLACE -12 -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "CCP1" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "derivable?" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "diff_derivable_fun[nnreal]" ("f1" "LAMBDA (x: nnreal): x" "f2" "LAMBDA (u: nnreal): atan(u)")) (("2" (LEMMA "deriv_diff_fun[nnreal]" ("ff1" "LAMBDA (x: nnreal): x" "ff2" "LAMBDA (u: nnreal): atan(u)")) (("1" (EXPAND "-" (-1 -2)) (("1" (REPLACE -4 -1) (("1" (REPLACE -6 -1 RL) (("1" (SIMPLIFY -1) (("1" (ASSERT) (("1" (INST - "LAMBDA (x_1: nnreal): x_1 - atan(x_1)") (("1" (ASSERT) (("1" (SKOLEM -8 ("c")) (("1" (EXPAND "deriv" -1) (("1" (REPLACE -9 -8) (("1" (LEMMA "congruence" ("f" "(LAMBDA (x: nnreal): deriv(LAMBDA (x_1: nnreal): x_1 - atan(x_1), x))" "g" "(LAMBDA (x_1: nnreal): 1 - 1 / (1 + x_1 * x_1))" "x1" "c" "x2" "c")) (("1" (ASSERT) (("1" (REPLACE -1 -9) (("1" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 -10) (("1" (FLATTEN) (("1" (LEMMA "minus_div1" ("x" "1" "n0x" "1" "y" "1" "n0y" "1+c*c")) (("1" (CASE "1+c*c > 0") (("1" (REPLACE -2 -5) (("1" (SIMPLIFY -5) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "c*c" "py" "1+c*c")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c*c/(1+c*c)")) (("1" (INST -1 "x") (("1" (ASSERT) (("1" (REPLACE -7 -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c" "py" "c")) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sq_pos" ("a" "c")) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "derivable?" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST + "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "connected?") (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deriv_atan_fun| FORMULA-DECL NIL |atan_integral| NIL) (|atan_0| FORMULA-DECL NIL |atan_integral| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|restrict2_deriv| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|extensionality| FORMULA-DECL NIL |functions| NIL) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|const_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|deriv| CONST-DECL "real" |derivatives_def| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|) (|congruence| FORMULA-DECL NIL |functions| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|minus_div1| FORMULA-DECL NIL |real_props| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (CCP1 SKOLEM-CONST-DECL "posreal" |atan_integral| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|deriv_diff_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|diff_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_prod_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|prod_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|restrict2| CONST-DECL "[T1 -> real]" |restrict2_deriv| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|deriv_domain?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|restrict2_derivable| FORMULA-DECL NIL |restrict2_deriv| |analysis|) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|)) NIL) (|atan_bnds-2| |nil| 3352182936 ("" (SKOLEM 1 ("x")) (("" (LEMMA "deriv_atan_fun") (("" (FLATTEN) (("" (LEMMA "atan_0") (("" (LEMMA "mean_value[nnreal]" ("a" "0")) (("1" (INST - "x" "_") (("1" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "atan")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "atan")) (("1" (EXPAND "restrict2") (("1" (REPLACE -6 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "extensionality" ("f" "LAMBDA (a: nnreal): 1 / (1 + a * a)" "g" "deriv[nnreal](LAMBDA (u: nnreal): atan(u))")) (("1" (SIMPLIFY -1) (("1" (REPLACE -2 -1) (("1" (HIDE -2 -6 -7) (("1" (LEMMA "identity_derivable_fun[nnreal]") (("1" (LEMMA "deriv_id_fun[nnreal]") (("1" (LEMMA "deriv_const_fun[nnreal]" ("b" "1")) (("1" (EXPAND "I") (("1" (EXPAND "const_fun") (("1" (SPLIT 1) (("1" (LEMMA "prod_derivable_fun[nnreal]" ("f1" "LAMBDA (x: nnreal): x" "f2" "LAMBDA (x: nnreal): x")) (("1" (ASSERT) (("1" (LEMMA "deriv_prod_fun[nnreal]" ("ff1" "LAMBDA (x: nnreal): x" "ff2" "LAMBDA (x: nnreal): x")) (("1" (REPLACE -4 -1) (("1" (EXPAND "*") (("1" (EXPAND "+" -1) (("1" (LEMMA "sum_derivable_fun[nnreal]" ("f1" "LAMBDA (x: nnreal): 1" "f2" "LAMBDA (x: nnreal): x*x")) (("1" (LEMMA "const_derivable_fun[nnreal]" ("b" "1")) (("1" (EXPAND "const_fun") (("1" (ASSERT) (("1" (LEMMA "deriv_sum_fun[nnreal]" ("ff1" "LAMBDA (x: nnreal): 1" "ff2" "LAMBDA (x: nnreal): x*x")) (("1" (REPLACE -4 -1) (("1" (REPLACE -6 -1) (("1" (EXPAND "+") (("1" (LEMMA "div_derivable_fun[nnreal]" ("f" "LAMBDA (x: nnreal): x" "g" "LAMBDA (x: nnreal): 1 + x*x")) (("1" (ASSERT) (("1" (EXPAND "/" -1) (("1" (LEMMA "deriv_div_fun[nnreal]" ("ff" "LAMBDA (x: nnreal): x" "gg" "LAMBDA (x: nnreal): 1 + x*x")) (("1" (REPLACE -3 -1) (("1" (REPLACE -9 -1) (("1" (EXPAND "/") (("1" (EXPAND "-" -1) (("1" (EXPAND "*" -1) (("1" (LEMMA "diff_derivable_fun[nnreal]" ("f1" "LAMBDA (u: nnreal): atan(u)" "f2" "LAMBDA (x: nnreal): x/(1+x*x)")) (("1" (ASSERT) (("1" (LEMMA "deriv_diff_fun[nnreal]" ("ff1" "LAMBDA (u: nnreal): atan(u)" "ff2" "LAMBDA (x: nnreal): x/(1+x*x)")) (("1" (EXPAND "-") (("1" (REPLACE -3 -1) (("1" (REPLACE -13 -1 RL) (("1" (SIMPLIFY -1) (("1" (INST -15 "LAMBDA (x_1: nnreal): atan(x_1) - x_1 / (1 + x_1 * x_1)") (("1" (ASSERT) (("1" (SKOLEM - "c") (("1" (EXPAND "deriv" -1) (("1" (LEMMA "congruence" ("f" "(LAMBDA (x: nnreal):
                    deriv(LAMBDA (x_1: nnreal): atan(x_1) - x_1 / (1 + x_1 * x_1), x))" "g" "(LAMBDA (x_1: nnreal):
                     1 / (1 + x_1 * x_1) -
                      (1 - x_1 * x_1) / (1 + 2 * (x_1 * x_1) + x_1 * x_1 * x_1 * x_1))" "x1" "c" "x2" "c")) (("1" (ASSERT) (("1" (REPLACE -1 -16) (("1" (REPLACE -17 -16) (("1" (HIDE-ALL-BUT (-16 1)) (("1" (FLATTEN) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c" "py" "c")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "1+c*c" "py" "1+c*c")) (("1" (LEMMA "minus_div1" ("x" "1" "n0x" "1+c*c" "y" "1-c*c" "n0y" "(1 + c * c) * (1 + c * c)")) (("1" (REPLACE -1 -6) (("1" (LEMMA "div_cancel1" ("x" "2*(c*c)/((1 + c * c) * (1 + c * c))" "n0z" "1+c*c")) (("1" (NAME "CC" "c*c") (("1" (REPLACE -1) (("1" (NAME "CCP1" "1+CC") (("1" (REPLACE -1) (("1" (REWRITE "div_div2" -3) (("1" (CASE "1 * (CCP1 * CCP1) - (1 - CC) * CCP1 = CCP1 * 2*CC") (("1" (REPLACE -1 -10) (("1" (REPLACE -4 -10) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "2*CC" "py" "CCP1*CCP1")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "2*CC/(CCP1*CCP1)")) (("1" (INST - "x") (("1" (REPLACE -12 -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "CCP1" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "derivable" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "diff_derivable_fun[nnreal]" ("f1" "LAMBDA (x: nnreal): x" "f2" "LAMBDA (u: nnreal): atan(u)")) (("2" (LEMMA "deriv_diff_fun[nnreal]" ("ff1" "LAMBDA (x: nnreal): x" "ff2" "LAMBDA (u: nnreal): atan(u)")) (("1" (EXPAND "-" (-1 -2)) (("1" (REPLACE -4 -1) (("1" (REPLACE -6 -1 RL) (("1" (SIMPLIFY -1) (("1" (ASSERT) (("1" (INST - "LAMBDA (x_1: nnreal): x_1 - atan(x_1)") (("1" (ASSERT) (("1" (SKOLEM -8 ("c")) (("1" (EXPAND "deriv" -1) (("1" (REPLACE -9 -8) (("1" (LEMMA "congruence" ("f" "(LAMBDA (x: nnreal): deriv(LAMBDA (x_1: nnreal): x_1 - atan(x_1), x))" "g" "(LAMBDA (x_1: nnreal): 1 - 1 / (1 + x_1 * x_1))" "x1" "c" "x2" "c")) (("1" (ASSERT) (("1" (REPLACE -1 -9) (("1" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 -10) (("1" (FLATTEN) (("1" (LEMMA "minus_div1" ("x" "1" "n0x" "1" "y" "1" "n0y" "1+c*c")) (("1" (CASE "1+c*c > 0") (("1" (REPLACE -2 -5) (("1" (SIMPLIFY -5) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "c*c" "py" "1+c*c")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c*c/(1+c*c)")) (("1" (INST -1 "x") (("1" (ASSERT) (("1" (REPLACE -7 -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c" "py" "c")) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sq_pos" ("a" "c")) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "derivable" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST + "x!1") NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "x!1+1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|atan_bnds-1| |nil| 3259651388 ("" (SKOLEM 1 ("x")) (("" (LEMMA "deriv_atan_fun") (("" (FLATTEN) (("" (LEMMA "atan_0") (("" (LEMMA "mean_value[nnreal]" ("a" "0")) (("1" (INST - "x" "_") (("1" (LEMMA "restrict2_derivable[nnreal,real]" ("f" "atan")) (("1" (LEMMA "restrict2_deriv[nnreal,real]" ("f" "atan")) (("1" (EXPAND "restrict2") (("1" (REPLACE -6 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "extensionality" ("f" "LAMBDA (a: nnreal): 1 / (1 + a * a)" "g" "deriv[nnreal](LAMBDA (u: nnreal): atan(u))")) (("1" (SIMPLIFY -1) (("1" (REPLACE -2 -1) (("1" (HIDE -2 -6 -7) (("1" (LEMMA "identity_derivable_fun[nnreal]") (("1" (LEMMA "deriv_id_fun[nnreal]") (("1" (LEMMA "deriv_const_fun[nnreal]" ("b" "1")) (("1" (EXPAND "I") (("1" (EXPAND "const_fun") (("1" (SPLIT 1) (("1" (LEMMA "prod_derivable_fun" ("f1" "LAMBDA (x: nnreal): x" "f2" "LAMBDA (x: nnreal): x")) (("1" (ASSERT) (("1" (LEMMA "deriv_prod_fun" ("ff1" "LAMBDA (x: nnreal): x" "ff2" "LAMBDA (x: nnreal): x")) (("1" (REPLACE -4 -1) (("1" (EXPAND "*") (("1" (EXPAND "+" -1) (("1" (LEMMA "sum_derivable_fun" ("f1" "LAMBDA (x: nnreal): 1" "f2" "LAMBDA (x: nnreal): x*x")) (("1" (LEMMA "const_derivable_fun[nnreal]" ("b" "1")) (("1" (EXPAND "const_fun") (("1" (ASSERT) (("1" (LEMMA "deriv_sum_fun" ("ff1" "LAMBDA (x: nnreal): 1" "ff2" "LAMBDA (x: nnreal): x*x")) (("1" (REPLACE -4 -1) (("1" (REPLACE -6 -1) (("1" (EXPAND "+") (("1" (LEMMA "div_derivable_fun" ("f" "LAMBDA (x: nnreal): x" "g" "LAMBDA (x: nnreal): 1 + x*x")) (("1" (ASSERT) (("1" (EXPAND "/" -1) (("1" (LEMMA "deriv_div_fun" ("ff" "LAMBDA (x: nnreal): x" "gg" "LAMBDA (x: nnreal): 1 + x*x")) (("1" (REPLACE -3 -1) (("1" (REPLACE -9 -1) (("1" (EXPAND "/") (("1" (EXPAND "-" -1) (("1" (EXPAND "*" -1) (("1" (LEMMA "diff_derivable_fun" ("f1" "LAMBDA (u: nnreal): atan(u)" "f2" "LAMBDA (x: nnreal): x/(1+x*x)")) (("1" (ASSERT) (("1" (LEMMA "deriv_diff_fun" ("ff1" "LAMBDA (u: nnreal): atan(u)" "ff2" "LAMBDA (x: nnreal): x/(1+x*x)")) (("1" (EXPAND "-") (("1" (REPLACE -3 -1) (("1" (REPLACE -13 -1 RL) (("1" (SIMPLIFY -1) (("1" (INST -15 "LAMBDA (x_1: nnreal): atan(x_1) - x_1 / (1 + x_1 * x_1)") (("1" (ASSERT) (("1" (SKOLEM - "c") (("1" (EXPAND "deriv" -1) (("1" (LEMMA "congruence" ("f" "(LAMBDA (x: nnreal):
         deriv(LAMBDA (x_1: nnreal): atan(x_1) - x_1 / (1 + x_1 * x_1), x))" "g" "(LAMBDA (x_1: nnreal):
          1 / (1 + x_1 * x_1) -
           (1 - x_1 * x_1) / (1 + 2 * (x_1 * x_1) + x_1 * x_1 * x_1 * x_1))" "x1" "c" "x2" "c")) (("1" (ASSERT) (("1" (REPLACE -1 -16) (("1" (REPLACE -17 -16) (("1" (HIDE-ALL-BUT (-16 1)) (("1" (FLATTEN) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c" "py" "c")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "1+c*c" "py" "1+c*c")) (("1" (LEMMA "minus_div1" ("x" "1" "n0x" "1+c*c" "y" "1-c*c" "n0y" "(1 + c * c) * (1 + c * c)")) (("1" (REPLACE -1 -6) (("1" (LEMMA "div_cancel1" ("x" "2*(c*c)/((1 + c * c) * (1 + c * c))" "n0z" "1+c*c")) (("1" (NAME "CC" "c*c") (("1" (REPLACE -1) (("1" (NAME "CCP1" "1+CC") (("1" (REPLACE -1) (("1" (REWRITE "div_div2" -3) (("1" (CASE "1 * (CCP1 * CCP1) - (1 - CC) * CCP1 = CCP1 * 2*CC") (("1" (REPLACE -1 -10) (("1" (REPLACE -4 -10) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "2*CC" "py" "CCP1*CCP1")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "2*CC/(CCP1*CCP1)")) (("1" (INST - "x") (("1" (REPLACE -12 -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "CCP1" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "derivable" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "diff_derivable_fun" ("f1" "LAMBDA (x: nnreal): x" "f2" "LAMBDA (u: nnreal): atan(u)")) (("2" (LEMMA "deriv_diff_fun" ("ff1" "LAMBDA (x: nnreal): x" "ff2" "LAMBDA (u: nnreal): atan(u)")) (("1" (EXPAND "-" (-1 -2)) (("1" (REPLACE -4 -1) (("1" (REPLACE -6 -1 RL) (("1" (SIMPLIFY -1) (("1" (ASSERT) (("1" (INST - "LAMBDA (x_1: nnreal): x_1 - atan(x_1)") (("1" (ASSERT) (("1" (SKOLEM -8 ("c")) (("1" (EXPAND "deriv" -1) (("1" (REPLACE -9 -8) (("1" (LEMMA "congruence" ("f" "(LAMBDA (x: nnreal): deriv(LAMBDA (x_1: nnreal): x_1 - atan(x_1), x))" "g" "(LAMBDA (x_1: nnreal): 1 - 1 / (1 + x_1 * x_1))" "x1" "c" "x2" "c")) (("1" (ASSERT) (("1" (REPLACE -1 -9) (("1" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 -10) (("1" (FLATTEN) (("1" (LEMMA "minus_div1" ("x" "1" "n0x" "1" "y" "1" "n0y" "1+c*c")) (("1" (CASE "1+c*c > 0") (("1" (REPLACE -2 -5) (("1" (SIMPLIFY -5) (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "c*c" "py" "1+c*c")) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c*c/(1+c*c)")) (("1" (INST -1 "x") (("1" (ASSERT) (("1" (REPLACE -7 -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (LEMMA "posreal_times_posreal_is_posreal" ("px" "c" "py" "c")) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sq_pos" ("a" "c")) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "derivable" -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (INST + "x!1") NIL NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST + "x!1+1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST + "x!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|pi_bnds| 0 (|pi_bnds-1| |nil| 3259662678 ("" (REWRITE "pi_value") (("" (REWRITE "atan_1") (("" (LEMMA "atan_bnds" ("px" "1/5")) (("" (LEMMA "atan_bnds" ("px" "1/239")) (("" (FLATTEN) (("" (CASE-REPLACE "1 / 239 / (1 + 1 / 239 * (1 / 239)) = 239/57122") (("1" (CASE-REPLACE "1 / 5 / (1 + 1 / 5 * (1 / 5)) = 5/26") (("1" (HIDE -1 -2) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "16" "x" "5/26" "y" "atan(1/5)")) (("1" (LEMMA "both_sides_times_pos_lt1" ("pz" "16" "y" "1/5" "x" "atan(1/5)")) (("1" (LEMMA "both_sides_times_neg_lt1" ("nz" "-4" "x" "1/239" "y" "atan(1/239)")) (("1" (LEMMA "both_sides_times_neg_lt1" ("nz" "-4" "y" "239/57122" "x" "atan(1/239)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|atan_1| FORMULA-DECL NIL |atan_integral| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|both_sides_times_neg_lt1| FORMULA-DECL NIL |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_bnds| FORMULA-DECL NIL |atan_integral| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|pi_value| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK)) (|atanF_TCC1| 0 (|atanF_TCC1-1| |nil| 3261751504 ("" (SKOSIMP*) (("" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK (|atanF| SUBTYPE "((number_fields.+)(number_fields./(atan_integral.i, 2), atan_integral.n))" "{i: integers.int | booleans.TRUE}"))) (|atanF_TCC2| 0 (|atanF_TCC2-1| |nil| 3261751675 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|atanF| SUBTYPE "atan_integral.i" "{i: naturalnumbers.nat | reals.<=(i, (number_fields.+)(1, number_fields.*(2, atan_integral.n)))}"))) (|atanF_TCC3| 0 (|atanF_TCC3-2| "" 3790092670 ("" (SKOSIMP*) (("" (LEMMA "atanF_TCC1" ("i" "i!1" "n" "n!1")) (("" (ASSERT) (("" (TYPEPRED "i!1") (("" (LEMMA "int_exp" ("x" "-1" "n" "i!1 / 2 + n!1")) (("" (LEMMA "int_times_int_is_int" ("i" "factorial(2 * n!1)" "j" "C(1 + 2 * n!1, i!1)")) (("" (LEMMA "int_times_int_is_int" ("i" "factorial(2 * n!1) *C(1 + 2 * n!1, i!1)" "j" "(-1) ^ (i!1 / 2 + n!1)")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atanF_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (C CONST-DECL "posnat" |binomial| |reals|) (<= CONST-DECL "bool" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int_times_int_is_int| JUDGEMENT-TCC NIL |integers| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_exp| JUDGEMENT-TCC NIL |exponentiation| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|atanF| SUBTYPE "number_fields.*(number_fields.*(exponentiation.^((-1), ((number_fields.+)(number_fields./(atan_integral.i, 2), atan_integral.n))), factorial.factorial(number_fields.*(2, atan_integral.n))), binomial.C((number_fields.+)(number_fields.*(2, atan_integral.n), 1), atan_integral.i))" "int")) (|atanF_TCC3-1| |nil| 3261751897 ("" (SKOSIMP*) (("" (LEMMA "atanF_TCC1" ("i" "i!1" "n" "n!1")) (("" (ASSERT) (("" (TYPEPRED "i!1") (("" (LEMMA "int_exp" ("x" "-1" "n" "i!1 / 2 + n!1")) (("" (LEMMA "int_times_int_is_int" ("i" "factorial(2 * n!1)" "j" "C(1 + 2 * n!1, i!1)")) (("" (LEMMA "int_times_int_is_int" ("i" "factorial(2 * n!1) *C(1 + 2 * n!1, i!1)" "j" "(-1) ^ (i!1 / 2 + n!1)")) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK (|atanF| SUBTYPE "number_fields.*(number_fields.*(exponentiation.^((-1), ((number_fields.+)(number_fields./(atan_integral.i, 2), atan_integral.n))), factorial.factorial(number_fields.*(2, atan_integral.n))), binomial.C((number_fields.+)(number_fields.*(2, atan_integral.n), 1), atan_integral.i))" "int"))) (|atan_taylors_prep1_TCC1| 0 (|atan_taylors_prep1_TCC1-1| |nil| 3260969908 ("" (GRIND) NIL NIL) ((|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK (|atan_taylors_prep1| SUBTYPE "(number_fields.+)(1, number_fields.*(atan_integral.x, atan_integral.x))" "nonneg_real"))) (|atan_taylors_prep1| 0 (|atan_taylors_prep1-1| |nil| 3260969959 ("" (EXPAND "atanS") (("" (SKOLEM 1 ("n" "x")) (("" (LEMMA "sq_le" ("nna" "abs(harmonic_poly_real(1 + 2 * n, 1, x))" "nnb" "(1 + x * x) ^ n * sqrt(1 + x * x)")) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (REWRITE "sq_times") (("1" (LEMMA "sq_sqrt" ("x" "1+x*x")) (("1" (ASSERT) (("1" (EXPAND "sq" 1 2) (("1" (LEMMA "expt_plus" ("n0x" "1+x*x" "i" "1" "j" "n")) (("1" (REWRITE "expt_x1" -1) (("1" (LEMMA "expt_plus" ("n0x" "1+x*x" "i" "n+1" "j" "n")) (("1" (HIDE -1 -2 -3) (("1" (CASE "FORALL (x:real): sq(abs(x)) = sq(x)") (("1" (INST - "harmonic_poly_real(1 + 2 * n, 1, x)") (("1" (HIDE -1) (("1" (LEMMA "harmonic_polynomial_modulus" ("pn" "2*n+1" "x" "1" "y" "x")) (("1" (NAME-REPLACE "U" "sq(harmonic_poly_real(2 * n + 1, 1, x))") (("1" (NAME-REPLACE "V" "harmonic_poly_imag(2 * n + 1, 1, x)") (("1" (LEMMA "sq_pos" ("a" "V")) (("1" (EXPAND "sq") (("1" (ASSERT) (("1" (CASE-REPLACE "(1 + x * x) ^ n * (1 + x * x) ^ n +
        (1 + x * x) ^ n * (1 + x * x) ^ n * x * x = (1 + x * x) ^ (1 + 2 * n)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "1+x*x>0") (("1" (LEMMA "expt_plus" ("n0x" "1+x*x" "i" "1" "j" "2*n")) (("1" (REWRITE "expt_x1" -1) (("1" (LEMMA "expt_times" ("n0x" "1+x*x" "i" "n" "j" "2")) (("1" (EXPAND "^" -1 3) (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (EXPAND "expt") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 2) (("2" (LEMMA "trichotomy" ("x" "x")) (("2" (SPLIT) (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "x" "py" "x")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "negreal_times_negreal_is_posreal" ("nx" "x" "ny" "x")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (LEMMA "trichotomy" ("x" "x!1")) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sq_pos" ("a" "x")) (("2" (HIDE -2 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "expt_pos" ("px" "1+x*x" "i" "n")) (("2" (TYPEPRED "sqrt(1 + x * x)") (("2" (LEMMA "both_sides_times_pos_le1" ("x" "0" "pz" "(1 + x * x) ^ n" "y" "sqrt(1 + x * x)")) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sq_times| FORMULA-DECL NIL |sq| |reals|) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq_abs| FORMULA-DECL NIL |sq| |reals|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|negreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nonpos_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|negreal_times_negreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|expt_times| FORMULA-DECL NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|harmonic_poly_imag| CONST-DECL "real" |harmonic_polynomials| |reals|) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|harmonic_polynomial_modulus| FORMULA-DECL NIL |harmonic_polynomials| |reals|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|harmonic_poly_real| CONST-DECL "real" |harmonic_polynomials| |reals|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|sq_le| FORMULA-DECL NIL |sq| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|atanS| CONST-DECL "real" |atan_integral| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_taylors_prep2| 0 (|atan_taylors_prep2-1| |nil| 3261752596 ("" (SKOLEM 1 ("n")) (("" (LEMMA "extensionality_postulate" ("f" "(-1) ^ n * factorial(2 * n) * atanS(n)" "g" "atanN(n)")) (("" (REPLACE -1 1 RL) (("" (HIDE -1) (("" (SKOLEM 1 ("x")) (("" (EXPAND "atanS") (("" (EXPAND "atanN") (("" (EXPAND "*") (("" (EXPAND "harmonic_poly_real") (("" (EXPAND "polynomial") (("" (EXPAND "sigma" 1 1) (("" (LEMMA "sigma_scal" ("low" "0" "high" "2*n" "a" "factorial(2 * n) * (-1) ^ n" "F" "
             LAMBDA (i: nat):
               IF i > 1 + 2 * n OR odd?(i) THEN 0
               ELSE C(1 + 2 * n, i) * (-1) ^ (i / 2) *
                     (IF i = 0 THEN 1 ^ (1 + 2 * n)
                      ELSIF i = 1 + 2 * n THEN x ^ (1 + 2 * n)
                      ELSE (1 ^ (1 - i + 2 * n)) * x ^ i
                      ENDIF)
               ENDIF")) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (LEMMA "sigma_eq[nat]" ("low" "0" "high" "2*n" "F" "LAMBDA (i_1: nat):
              factorial(2 * n) * (-1) ^ n *
               (LAMBDA (i: nat):
                  IF i > 1 + 2 * n OR odd?(i) THEN 0
                  ELSE C(1 + 2 * n, i) * (-1) ^ (i / 2) *
                        (IF i = 0 THEN 1 ^ (1 + 2 * n)
                         ELSIF i = 1 + 2 * n THEN x ^ (1 + 2 * n)
                         ELSE (1 ^ (1 - i + 2 * n)) * x ^ i
                         ENDIF)
                  ENDIF)
                   (i_1)" "G" "             LAMBDA (i: nat):
               atanF(n)(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)")) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("i")) (("2" (TYPEPRED "i") (("2" (EXPAND "atanF") (("2" (CASE "odd?(i)") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "expt_1i") (("2" (REWRITE "expt_1i") (("2" (LEMMA "expt_plus" ("n0x" "-1" "i" "i/2" "j" "n")) (("1" (REPLACE -1 2) (("1" (CASE "i=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (CASE "even?(i)") (("1" (EXPAND "even?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE 4) (("2" (CASE "even?(i!1)") (("1" (EXPAND "even?") (("1" (SKOSIMP*) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|atanS| CONST-DECL "real" |atan_integral| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (C CONST-DECL "posnat" |binomial| |reals|) (<= CONST-DECL "bool" |reals| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|sigma_scal| FORMULA-DECL NIL |sigma| |reals|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (|atanF| CONST-DECL "int" |atan_integral| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|harmonic_poly_real| CONST-DECL "real" |harmonic_polynomials| |reals|) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|atan_taylors_prep3| 0 (|atan_taylors_prep3-1| |nil| 3261807821 ("" (SKOLEM 1 ("m" "n")) (("" (EXPAND "atanN") (("" (EXPAND "atanD") (("" (LEMMA "derivable_n_times_polynomial" ("b" "atanF(n)" "m" "2*n" "n" "m")) (("" (REPLACE -1) (("" (HIDE -1) (("" (LEMMA "extensionality" ("f" "LAMBDA (x: real): (1 + x * x) ^ (1 + 2 * n)" "g" "LAMBDA (x: real): (LAMBDA (z:real): (1 + z) ^ (1 + 2 * n))(x^2)")) (("" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "power_polynomial" ("pn" "1+2*n")) (("1" (REPLACE -1) (("1" (HIDE -1 -2) (("1" (CASE "(LAMBDA (x: real): polynomial(power_fs(1 + 2 * n), 1 + 2 * n)(x ^ 2)) = polynomial((LAMBDA (i:nat): IF even?(i) THEN power_fs(2*n+1)(i/2) ELSE 0 ENDIF),2+4*n)") (("1" (REPLACE -1 1) (("1" (LEMMA "derivable_n_times_polynomial" ("b" "(LAMBDA (i: nat):
                                   IF even?(i)
                                     THEN power_fs(2 * n + 1)(i / 2)
                                   ELSE 0
                                   ENDIF)" "m" "2 + 4 * n" "n" "m")) (("1" (PROPAX) NIL NIL) ("2" (HIDE -2 2) (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (HIDE -2) (("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "extensionality" ("f" "(LAMBDA (x: real): polynomial(power_fs(1 + 2 * n), 1 + 2 * n)(x ^ 2))" "g" "
       polynomial((LAMBDA (i: nat):
                  IF even?(i) THEN power_fs(2 * n + 1)(i / 2)
                  ELSE 0
                  ENDIF),
               2 + 4 * n)")) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "even_polynomial" ("n" "1+2*n" "x" "x" "a" "(LAMBDA (i: nat):
                  IF even?(i) THEN power_fs(2 * n + 1)(i / 2)
                  ELSE 0
                  ENDIF)")) (("1" (SPLIT -1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (LEMMA "extensionality" ("f" "power_fs(1 + 2 * n)" "g" "LAMBDA (i_1: nat):
                 (LAMBDA (i: nat):
                    IF even?(i) THEN power_fs(2 * n + 1)(i / 2)
                    ELSE 0
                    ENDIF)
                     (2 * i_1)")) (("1" (SPLIT -1) (("1" (REPLACE -1 1 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("j")) (("2" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("2" (REPLACE -1) (("2" (CASE "even?(2*j)") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "even?") (("2" (INST + "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "even_fs?") (("2" (SKOLEM 1 ("i")) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "even?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (ASSERT) (("3" (EXPAND "even?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (EXPAND "^" 1 2) (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (EXPAND "expt") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|derivable_n_times_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|atanF| CONST-DECL "int" |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|power_polynomial| FORMULA-DECL NIL |polynomials| |reals|) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|even_fs?| CONST-DECL "bool" |polynomials| |reals|) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|even_polynomial| FORMULA-DECL NIL |polynomials| |reals|) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|power_fs| CONST-DECL "[nat -> nat]" |polynomials| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|extensionality| FORMULA-DECL NIL |functions| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atanN_derivable| 0 (|atanN_derivable-1| |nil| 3445343314 ("" (SKEEP) (("" (LEMMA "atan_taylors_prep3") (("" (INST?) (("" (INST - "1") (("" (FLATTEN) (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|atanD_derivable| 0 (|atanD_derivable-1| |nil| 3445343367 ("" (SKEEP) (("" (LEMMA "atan_taylors_prep3") (("" (INST?) (("" (INST - "1") (("" (FLATTEN) (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|atan_taylors_prep4_TCC1| 0 (|atan_taylors_prep4_TCC1-1| |nil| 3261752339 ("" (SKOSIMP*) (("" (LEMMA "atan_taylors_prep3" ("n" "n!1" "m" "1")) (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)) SHOSTAK (|atan_taylors_prep4| SUBTYPE "atan_integral.atanN(atan_integral.n)" "deriv_fun[real]"))) (|atan_taylors_prep4_TCC2| 0 (|atan_taylors_prep4_TCC2-1| |nil| 3261752442 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|atan_taylors_prep4| SUBTYPE "(number_fields.-)(number_fields.*(2, atan_integral.n), 1)" "nat"))) (|atan_taylors_prep4| 0 (|atan_taylors_prep4-1| |nil| 3261816998 ("" (SKOLEM 1 ("n")) (("" (EXPAND "atanN") (("" (LEMMA "deriv_polynomial" ("a" "atanF(n)" "n" "2*n")) (("" (EXPAND "const_fun") (("" (CASE "n=0") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|atanF| CONST-DECL "int" |atan_integral| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|deriv_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) SHOSTAK)) (|atan_taylors_prep5_TCC1| 0 (|atan_taylors_prep5_TCC1-1| |nil| 3261752453 ("" (SKOSIMP*) (("" (LEMMA "atan_taylors_prep3" ("n" "n!1" "m" "1")) (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)) SHOSTAK (|atan_taylors_prep5| SUBTYPE "atan_integral.atanD(atan_integral.n)" "deriv_fun[real]"))) (|atan_taylors_prep5| 0 (|atan_taylors_prep5-2| "" 3790092675 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep3" ("m" "1")) (("" (INST-CP - "0") (("" (INST - "n") (("" (FLATTEN) (("" (HIDE -1 -3) (("" (EXPAND "atanD") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) (("" (HIDE -2 -4) (("" (EXPAND "^" -2) (("" (EXPAND "expt" -2) (("" (EXPAND "expt" -2) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "deriv_id_fun[real]") (("" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("" (EXPAND "I") (("" (LEMMA "prod_derivable_fun[real]" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x")) (("" (ASSERT) (("" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x: real): x" "ff2" "LAMBDA (x: real): x")) (("" (REPLACE -5) (("" (EXPAND "*") (("" (EXPAND "+") (("" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA (x: real): 1" "ff2" "LAMBDA (x_1: real): x_1 * x_1")) (("1" (EXPAND "+") (("1" (REPLACE -4) (("1" (REPLACE -2) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_exp_fun[real]" ("f" "LAMBDA (x: real): (1 + x * x)" "n" "1+2*n")) (("1" (ASSERT) (("1" (FLATTEN -1) (("1" (EXPAND "^" -2) (("1" (REPLACE -3 -2) (("1" (EXPAND "*" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|expt| DEF-DECL "real" |exponentiation| NIL) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|const_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|deriv_exp_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_prod_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|prod_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|atan_taylors_prep5-1| |nil| 3261817286 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep3" ("m" "1")) (("" (INST-CP - "0") (("" (INST - "n") (("" (FLATTEN) (("" (HIDE -1 -3) (("" (EXPAND "atanD") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) (("" (HIDE -2 -4) (("" (EXPAND "^" -2) (("" (EXPAND "expt" -2) (("" (EXPAND "expt" -2) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "deriv_id_fun[real]") (("" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("" (EXPAND "I") (("" (EXPAND "const_fun") (("" (LEMMA "prod_derivable_fun[real]" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x")) (("" (ASSERT) (("" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x: real): x" "ff2" "LAMBDA (x: real): x")) (("" (REPLACE -5) (("" (EXPAND "*") (("" (EXPAND "+") (("" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA (x: real): 1" "ff2" "LAMBDA (x_1: real): x_1 * x_1")) (("1" (EXPAND "+") (("1" (REPLACE -4) (("1" (REPLACE -2) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_exp_fun[real]" ("f" "LAMBDA (x: real): (1 + x * x)" "n" "1+2*n")) (("1" (ASSERT) (("1" (FLATTEN -1) (("1" (EXPAND "^" -2) (("1" (REPLACE -3 -2) (("1" (EXPAND "*" -2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_taylors_prep6_TCC1| 0 (|atan_taylors_prep6_TCC1-1| |nil| 3261752480 ("" (SKOSIMP*) (("" (LEMMA "atan_taylors_prep3" ("n" "n!1" "m" "2")) (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)) SHOSTAK (|atan_taylors_prep6| SUBTYPE "derivatives[real].deriv(atan_integral.atanN(atan_integral.n))" "deriv_fun[real]"))) (|atan_taylors_prep6_TCC2| 0 (|atan_taylors_prep6_TCC2-1| |nil| 3261752523 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) SHOSTAK (|atan_taylors_prep6| SUBTYPE "(number_fields.-)(number_fields.*(2, atan_integral.n), 2)" "nat"))) (|atan_taylors_prep6| 0 (|atan_taylors_prep6-1| |nil| 3261818017 ("" (SKOLEM 1 ("n")) (("" (LEMMA "nderiv_polynomial" ("n" "2" "m" "2*n" "b" "atanF(n)")) (("" (EXPAND "atanN") (("" (EXPAND "const_fun") (("" (EXPAND "nderiv" -1) (("" (EXPAND "nderiv" -1) (("" (EXPAND "nderiv" -1) (("" (CASE "n=0") (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REPLACE -1 2) (("2" (HIDE -1) (("2" (LEMMA "extensionality" ("f" "LAMBDA (i: nat):
                atanF(n)(2 + i) * factorial(2) * C(2 + i, 2)" "g" "LAMBDA (i: nat):
                 2 * atanF(n)(2 + i) + 3 * (i * atanF(n)(2 + i)) +
                  i * i * atanF(n)(2 + i)")) (("2" (SPLIT -1) (("1" (REPLACE -1 2 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (SKOLEM 1 ("i")) (("2" (NAME-REPLACE "K1" "atanF(n)(2+i)") (("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (REWRITE "C_n") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REWRITE "C_2") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (EXPAND "factorial") (("2" (LEMMA "div_cancel1" ("x" "2 * K1 + K1 * i * i + 3 * (i * K1)" "n0z" "2")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nderiv_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|atanF| CONST-DECL "int" |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (C CONST-DECL "posnat" |binomial| |reals|) (<= CONST-DECL "bool" |reals| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|extensionality| FORMULA-DECL NIL |functions| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (C_2 FORMULA-DECL NIL |binomial| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|C_n| FORMULA-DECL NIL |binomial| |reals|) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_taylors_prep7_TCC1| 0 (|atan_taylors_prep7_TCC1-1| |nil| 3261752531 ("" (SKOSIMP*) (("" (EXPAND "^") (("" (TYPEPRED "g!1(x1!1)") (("" (LEMMA "expt_nonzero" ("n0x" "g!1(x1!1)" "i" "pn!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|atan_taylors_prep7| SUBTYPE "real_fun_ops[real].^(atan_integral.g, atan_integral.pn)" "[real -> nzreal]"))) (|atan_taylors_prep7_TCC2| 0 (|atan_taylors_prep7_TCC2-1| |nil| 3261922791 ("" (SKOSIMP*) (("" (EXPAND "^" -4) (("" (LEMMA "expt_nonzero" ("n0x" "g!1(x1!1)" "i" "pn!1+1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) SHOSTAK (|atan_taylors_prep7| SUBTYPE "(real_fun_ops[real].^(atan_integral.g, ((number_fields.+)(atan_integral.pn, 1))))" "[real -> nzreal]"))) (|atan_taylors_prep7| 0 (|atan_taylors_prep7-1| |nil| 3261830480 ("" (SKOLEM 1 ("pn" "ff" "gg")) (("" (FLATTEN) (("" (LEMMA "deriv_exp_fun[real]" ("f" "gg" "n" "pn")) (("" (ASSERT) (("" (FLATTEN) (("" (LEMMA "div_derivable_fun[real]" ("f" "ff" "g" "gg^pn")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun[real]" ("ff" "ff" "gg" "gg^pn")) (("1" (REPLACE -1 1) (("1" (REPLACE -4 1) (("1" (NAME-REPLACE "F" "deriv(ff)") (("1" (NAME-REPLACE "G" "deriv(gg)") (("1" (LEMMA "extensionality" ("f" "(F * gg ^ pn - pn * gg ^ (pn - 1) * G * ff) / (gg ^ pn * gg ^ pn)" "g" "(F * gg - pn * ff * G) / (gg ^ (1 + pn))")) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("x")) (("2" (EXPAND "/") (("2" (EXPAND "*") (("2" (EXPAND "-") (("2" (EXPAND "^") (("2" (LEMMA "cross_mult" ("x" "(F(x) * gg(x) ^ pn - G(x) * ff(x) * gg(x) ^ (pn - 1) * pn)" "n0x" "(gg(x) ^ pn * gg(x) ^ pn)" "y" "(F(x) * gg(x) - G(x) * ff(x) * pn)" "n0y" "gg(x) ^ (1 + pn)")) (("2" (REPLACE -1 1) (("2" (HIDE -1) (("2" (TYPEPRED "gg(x)") (("2" (LEMMA "expt_plus" ("n0x" "gg(x)" "i" "1" "j" "pn")) (("2" (REWRITE "expt_x1") (("2" (REPLACE -1) (("2" (ASSERT) (("2" (LEMMA "expt_plus" ("n0x" "gg(x)" "i" "1" "j" "pn-1")) (("2" (REWRITE "expt_x1") (("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("x")) (("2" (EXPAND "^") (("2" (TYPEPRED "gg(x)") (("2" (LEMMA "expt_nonzero" ("n0x" "gg(x)" "i" "1+pn")) (("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "^") (("2" (LEMMA "expt_nonzero" ("n0x" "gg(x)" "i" "1+pn")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|div_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|extensionality| FORMULA-DECL NIL |functions| NIL) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|expt_nonzero| FORMULA-DECL NIL |exponentiation| NIL) (|deriv_exp_fun| FORMULA-DECL NIL |derivatives| |analysis|) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)) SHOSTAK)) (|atan_taylors_prep8_TCC1| 0 (|atan_taylors_prep8_TCC1-1| |nil| 3261922793 ("" (SKOLEM 1 ("n" "x")) (("" (EXPAND "atanD") (("" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1+2*n")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|atanD| CONST-DECL "real" |atan_integral| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK (|atan_taylors_prep8| SUBTYPE "atan_integral.atanD(atan_integral.n)" "[real -> nzreal]"))) (|atan_taylors_prep8_TCC2| 0 (|atan_taylors_prep8_TCC2-1| |nil| 3261922793 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep3" ("n" "n" "m" "1")) (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) (("" (LEMMA "atan_taylors_prep8_TCC1" ("n" "n")) (("" (ASSERT) (("" (LEMMA "div_derivable_fun[real]" ("f" "atanN(n)" "g" "atanD(n)")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|atan_taylors_prep8_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|div_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)) SHOSTAK (|atan_taylors_prep8| SUBTYPE "real_fun_ops[real]./(atan_integral.atanN(atan_integral.n), atan_integral.atanD(atan_integral.n))" "deriv_fun[real]"))) (|atan_taylors_prep8_TCC3| 0 (|atan_taylors_prep8_TCC3-1| |nil| 3261922793 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep8_TCC1" ("n" "n")) (("" (LEMMA "atan_taylors_prep8_TCC2" ("n" "n")) (("" (LEMMA "atan_taylors_prep3" ("n" "n" "m" "2")) (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN -1) (("" (LEMMA "deriv_div_fun[real]" ("ff" "atanN(n)" "gg" "atanD(n)")) (("" (REPLACE -1 1) (("" (LEMMA "prod_derivable_fun[real]" ("f1" "deriv(atanN(n))" "f2" "atanD(n)")) (("" (LEMMA "prod_derivable_fun[real]" ("f1" "deriv(atanD(n))" "f2" "atanN(n)")) (("" (LEMMA "prod_derivable_fun[real]" ("f1" "atanD(n)" "f2" "atanD(n)")) (("" (ASSERT) (("" (LEMMA "diff_derivable_fun[real]" ("f1" "deriv(atanN(n)) * atanD(n)" "f2" "deriv(atanD(n)) * atanN(n)")) (("" (ASSERT) (("" (LEMMA "div_derivable_fun[real]" ("f" "deriv(atanN(n)) * atanD(n) - deriv(atanD(n)) * atanN(n)" "g" "atanD(n) * atanD(n)")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep8_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|div_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|diff_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|prod_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|atan_taylors_prep8_TCC2| SUBTYPE-TCC NIL |atan_integral| NIL)) SHOSTAK (|atan_taylors_prep8| SUBTYPE "derivatives[real].deriv(real_fun_ops[real]./(atan_integral.atanN(atan_integral.n), atan_integral.atanD(atan_integral.n)))" "deriv_fun[real]"))) (|atan_taylors_prep8_TCC4| 0 (|atan_taylors_prep8_TCC4-1| |nil| 3261922793 ("" (SKOLEM 1 ("n" "x")) (("" (LEMMA "atan_taylors_prep8_TCC1" ("n" "n+1" "x1" "x")) (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|atan_taylors_prep8_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK (|atan_taylors_prep8| SUBTYPE "atan_integral.atanD((number_fields.+)(atan_integral.n, 1))" "[real -> nzreal]"))) (|atan_taylors_prep8| 0 (|atan_taylors_prep8-3| "" 3882736787 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep3" ("n" "n" "m" "2")) (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("" (LEMMA "deriv_id_fun[real]") (("" (EXPAND "I") (("" (LEMMA "prod_derivable_fun[real]" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x")) (("" (ASSERT) (("" (EXPAND "*") (("" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x: real): x" "ff2" "LAMBDA (x: real): x")) (("" (EXPAND "*") (("" (EXPAND "+" -1) (("" (REPLACE -3 -1) (("" (SIMPLIFY -1) (("" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA (x: real): 1" "f2" "LAMBDA (x_1: real): x_1 * x_1")) (("" (ASSERT) (("" (EXPAND "+") (("" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA (x: real): 1" "ff2" "LAMBDA (x_1: real): x_1 * x_1")) (("" (REPLACE -6 -1) (("" (REPLACE -3) (("" (EXPAND "+") (("" (LEMMA "atan_taylors_prep7" ("f" "atanN(n)" "g" "LAMBDA (x:real):1+x*x" "pn" "2*n+1")) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "atanD") (("1" (REPLACE -3 -2) (("1" (EXPAND "^" -2) (("1" (REPLACE -2) (("1" (LEMMA "atan_taylors_prep7" ("f" "((deriv(atanN(n)) * (LAMBDA (x: real): 1 + x * x)) - (1 + 2 * n) * atanN(n) * (LAMBDA (x_1: real): 2 * x_1))" "g" "LAMBDA (t: real): (1 + t * t)" "pn" "2 + 2 * n")) (("1" (ASSERT) (("1" (LEMMA "prod_derivable_fun[real]" ("f1" "deriv(atanN(n))" "f2" "LAMBDA (x: real): 1 + x * x")) (("1" (LEMMA "prod_derivable_fun[real]" ("f1" "atanN(n)" "f2" "LAMBDA (x:real):x")) (("1" (ASSERT) (("1" (LEMMA "scal_derivable_fun[real]" ("f" "atanN(n) * (LAMBDA (x: real): x)" "b" "2+4*n")) (("1" (ASSERT) (("1" (LEMMA "diff_derivable_fun[real]" ("f2" "(2 + 4 * n) * atanN(n) * (LAMBDA (x: real): x)" "f1" "deriv(atanN(n)) * (LAMBDA (x: real): 1 + x * x)")) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (FLATTEN -5) (("1" (REPLACE -9) (("1" (SIMPLIFY -6) (("1" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x:real): x*x" "ff2" "deriv(atanN(n))")) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (REPLACE -12 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x:real):x" "ff2" "atanN(n)")) (("1" (REPLACE -15 -1) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (LEMMA "deriv_scal_fun[real]" ("b" "4*n+2" "ff" "LAMBDA (x_1: real): x_1 * atanN(n)(x_1)")) (("1" (REPLACE -2 -1) (("1" (EXPAND "*" -1) (("1" (LEMMA "deriv_diff_fun[real]" ("ff1" "deriv(atanN(n))" "ff2" "LAMBDA (x:real): 2 * (x * atanN(n)(x)) + 4 * (x * atanN(n)(x) * n)")) (("1" (REPLACE -2 -1) (("1" (EXPAND "-" -1) (("1" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA (x_1: real):
                             deriv(atanN(n))(x_1) - 2 * (x_1 * atanN(n)(x_1)) -
                              4 * (x_1 * atanN(n)(x_1) * n)" "ff2" "LAMBDA (x: real):x * x * deriv(atanN(n))(x)")) (("1" (REPLACE -2 -1) (("1" (REPLACE -5 -1) (("1" (EXPAND "+" -1) (("1" (REPLACE -1 -11) (("1" (SIMPLIFY -11) (("1" (EXPAND "^" -11) (("1" (REPLACE -11 1) (("1" (HIDE-ALL-BUT (-22 -23 1)) (("1" (LEMMA "extensionality" ("f" "LAMBDA (x_1: real):
                               deriv(deriv(atanN(n)))(x_1) +
                                deriv(deriv(atanN(n)))(x_1) * (x_1 * x_1)
                                - 2 * atanN(n)(x_1)
                                - 4 * (x_1 * deriv(atanN(n))(x_1))
                                - 4 * (atanN(n)(x_1) * n)
                                - 4 * (x_1 * x_1 * x_1 * deriv(atanN(n))(x_1))
                                - 8 * (x_1 * deriv(atanN(n))(x_1) * n)
                                - 8 * (x_1 * x_1 * x_1 * deriv(atanN(n))(x_1) * n)
                                + 6 * (x_1 * x_1 * atanN(n)(x_1))
                                + x_1 * x_1 * deriv(deriv(atanN(n)))(x_1)
                                + 20 * (x_1 * x_1 * atanN(n)(x_1) * n)
                                + x_1 * x_1 * x_1 * x_1 * deriv(deriv(atanN(n)))(x_1)
                                + 16 * (x_1 * x_1 * atanN(n)(x_1) * n * n)" "g" "atanN(1+n)")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (REWRITE "atan_taylors_prep6") (("2" (REWRITE "atan_taylors_prep4") (("2" (EXPAND "atanN") (("2" (CASE "n=0") (("1" (REPLACE -1) (("1" (EXPAND "const_fun") (("1" (HIDE -2 -3 -1) (("1" (EXPAND "polynomial") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (EXPAND "atanF") (("1" (REWRITE "expt_x0") (("1" (REWRITE "C_0") (("1" (REWRITE "C_0") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x1") (("1" (REWRITE "C_n_1") (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (NAME "FS1" "LAMBDA (i: nat):
                                                              2 * atanF(n)(2 + i) + 3 * (i * atanF(n)(2 + i)) +
                                                               i * i * atanF(n)(2 + i)") (("2" (REPLACE -1) (("2" (NAME "FS2" "LAMBDA (i: nat): atanF(n)(1 + i) + i * atanF(n)(1 + i)") (("2" (REPLACE -1) (("2" (CASE "FORALL (a:sequence[real],n:nat,pn:posnat): polynomial(a,n)(x) * x^pn = polynomial(LAMBDA (i:nat): IF i < pn THEN 0 ELSE a(i-pn) ENDIF,n+pn)(x)") (("1" (INST-CP - "FS1" "2*n-2" "2") (("1" (INST-CP - "FS2" "2*n-1" "3") (("1" (INST-CP - "FS2" "2*n-1" "1") (("1" (INST-CP - "atanF(n)" "2*n" "2") (("1" (INST - "FS1" "2*n-2" "4") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x3") (("1" (REWRITE "expt_x4") (("1" (CASE "FORALL (y:real,a:sequence[real],n:nat): y * polynomial(a,n)(x) = polynomial(const_fun(y)*a,n)(x)") (("1" (EXPAND "const_fun" -1) (("1" (NAME "FS3" "LAMBDA (i: nat): IF i < 2 THEN 0 ELSE FS1(i - 2) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS4" "LAMBDA (i: nat): IF i < 3 THEN 0 ELSE FS2(i - 3) ENDIF") (("1" (REPLACE -1) (("1" (SIMPLIFY -7) (("1" (NAME "FS5" "LAMBDA (i: nat): IF i < 1 THEN 0 ELSE FS2(i - 1) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS6" "LAMBDA (i: nat): IF i < 2 THEN 0 ELSE atanF(n)(i - 2) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS7" "LAMBDA (i: nat): IF i < 4 THEN 0 ELSE FS1(i - 4) ENDIF") (("1" (REPLACE -1) (("1" (SIMPLIFY -7) (("1" (REPLACE -7 2) (("1" (INST-CP - "16*n*n" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "20*n" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (REPLACE -12 2) (("1" (HIDE -7) (("1" (INST-CP - "6" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "8*n" "FS4" "2+2*n") (("1" (REPLACE -11 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "8*n" "FS5" "2*n") (("1" (REPLACE -10 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4" "FS5" "2*n") (("1" (REPLACE -10 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4" "FS4" "2+2*n") (("1" (REPLACE -11 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4*n" "atanF(n)" "2*n") (("1" (REPLACE -7) (("1" (INST - "2" "atanF(n)" "2*n") (("1" (REPLACE -6 2) (("1" (HIDE -6 -7 -8 -9 -10 -11 -12) (("1" (SIMPLIFY 2) (("1" (LEMMA "extend_polynomial" ("a" "FS1" "n" "2*n-2" "m" "4")) (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "FS3" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 2) * atanF(n)" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 4*n) * atanF(n)" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 4) * FS5" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 8*n) * FS5" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND :DEFS NIL :THEORIES "poly_rew") (("1" (CASE-REPLACE "2 * FS3 +
                                                    ((LAMBDA (x: nat): 20 * n) * FS6 +
                                                      ((LAMBDA (x: nat): 6) * FS6 +
                                                        (LAMBDA (x: nat): 16 * (n * n)) * FS6)
                                                      + FS1)
                                                    + FS7
                                                    - (LAMBDA (x: nat): 2) * atanF(n)
                                                    - (LAMBDA (x: nat): 4) * FS4
                                                    - (LAMBDA (x: nat): 4) * FS5
                                                    - (LAMBDA (x: nat): 4 * n) * atanF(n)
                                                    - (LAMBDA (x: nat): 8 * n) * FS4
                                                    - (LAMBDA (x: nat): 8 * n) * FS5 = atanF(1 + n)") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "+" 1) (("1" (EXPAND "-" 1) (("1" (EXPAND "FS7" 1) (("1" (EXPAND "FS6" 1) (("1" (EXPAND "FS5" 1) (("1" (EXPAND "*" 1) (("1" (EXPAND "FS4" 1) (("1" (HIDE-ALL-BUT (1 2)) (("1" (EXPAND "FS3") (("1" (EXPAND "FS2") (("1" (EXPAND "FS1") (("1" (CASE "x!1=0") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REWRITE "C_0") (("1" (REWRITE "C_0") (("1" (REWRITE "C_2") (("1" (CASE "odd?(0)") (("1" (CASE "odd?(2)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT odd?(2)") (("1" (ASSERT) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "n")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "factorial" 3 4) (("1" (EXPAND "factorial" 3 4) (("1" (EXPAND "factorial" 3 2) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "x!1=1") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "x!1=2") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REPLACE -1) (("1" (CASE "odd?(2)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (CASE "odd?(4)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "C_0") (("2" (CASE "n=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EVAL-FORMULA 6) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "expt_plus" ("n0x" "-1" "i" "n")) (("2" (INST-CP - "1") (("2" (REWRITE "expt_x1" -2) (("2" (REPLACE -2) (("2" (INST - "2") (("2" (REWRITE "expt_x2" -1) (("2" (REPLACE -1) (("2" (EXPAND "factorial" 7 7) (("2" (EXPAND "factorial" 7 7) (("2" (EXPAND "factorial" 7 8) (("2" (REWRITE "C_2") (("2" (REWRITE "C_2") (("2" (NAME-REPLACE "K1" "(-1)^n") (("2" (LEMMA "div_cancel1" ("x" "2*(n*n)+n" "n0z" "2")) (("2" (REPLACE -1) (("2" (LEMMA "div_cancel1" ("x" "3+5*n+2*(n*n)" "n0z" "2")) (("2" (REPLACE -1) (("2" (NAME "K2" "C(1+2*n,4)") (("2" (REPLACE -1) (("2" (SIMPLIFY 7) (("2" (NAME-REPLACE "K3" "factorial(2 * n) * K1") (("2" (EXPAND "C" -1) (("2" (CASE-REPLACE "factorial(4)=24") (("1" (HIDE -1) (("1" (CASE-REPLACE "factorial(1+2*n) = (1+2*n)*(2*n)*(2*n-1)*(2*n-2)*factorial(2*n-3)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=3") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REPLACE -1) (("1" (CASE "odd?(5)") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "odd?" 1) (("2" (INST + "2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "x!1>=4") (("1" (HIDE 1 2 3 4) (("1" (EXPAND "atanF") (("1" (CASE "odd?(x!1)") (("1" (ASSERT) (("1" (CASE "odd?(x!1+2) AND odd?(x!1-2)") (("1" (FLATTEN -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "odd?") (("2" (SKOSIMP*) (("2" (SPLIT 1) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST + "j!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "odd?(x!1+2)") (("1" (HIDE 2 3) (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST + "j!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "odd?(x!1-2)") (("1" (HIDE 3 4) (("1" (HIDE -2 1) (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "x!1>2+2*n") (("1" (ASSERT) NIL NIL) ("2" (CASE "x!1= 2+2*n") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "C_n_1") (("1" (REWRITE "C_n_1") (("1" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "2" "j" "n+n")) (("1" (REWRITE "expt_x2" -1) (("1" (REPLACE -1 5) (("1" (EXPAND "factorial" 5 4) (("1" (EXPAND "factorial" 5 5) (("1" (EXPAND "factorial" 5 4) (("1" (EXPAND "factorial" 5 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1= 1+2*n") (("1" (HIDE 6) (("1" (REPLACE -1) (("1" (EXPAND "odd?" 5) (("1" (INST + "n") NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=2*n") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "n+n")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "-1" "j" "n+n")) (("1" (LEMMA "not_even_m1_pow" ("i" "-1")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (NAME-REPLACE "K10" "(-1) ^ (n + n)") (("1" (HIDE -1 -2 -3 -4) (("1" (REWRITE "C_n_1") (("1" (EXPAND "factorial" 7 7) (("1" (EXPAND "factorial" 7 8) (("1" (EXPAND "factorial" 7 10) (("1" (NAME-REPLACE "K11" "factorial(2*n)") (("1" (NAME "K12" "C(1 + 2 * n, 2 * n - 2)") (("1" (REPLACE -1) (("1" (NAME "K13" "C(3 + 2 * n, 2 * n)") (("1" (REPLACE -1) (("1" (EXPAND "C") (("1" (CASE-REPLACE "factorial(3)=6") (("1" (HIDE -1) (("1" (CASE-REPLACE "factorial(3+2*n) = (3+2*n)*(2+2*n)*(1+2*n)*factorial(2*n)") (("1" (HIDE -1) (("1" (CASE-REPLACE "factorial(1+2*n)=(1+2*n)*(2*n)*(2*n-1)*factorial(2*n-2)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=2*n-1") (("1" (HIDE 8 9) (("1" (REPLACE -1 7) (("1" (EXPAND "odd?" 7) (("1" (INST + "n-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 <= 2*n-2") (("1" (ASSERT) (("1" (REWRITE "odd_iff_not_even" 8) (("1" (REWRITE "odd_iff_not_even") (("1" (REWRITE "odd_iff_not_even") (("1" (HIDE 1 2 3 4 5) (("1" (HIDE -2 -3) (("1" (EXPAND "even?" -2) (("1" (SKOSIMP*) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1" "n0z" "2")) (("1" (REPLACE -4 -1 RL) (("1" (REPLACE -2 -1) (("1" (REPLACE -1 1 RL) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "j!1+n")) (("1" (REWRITE "expt_x1" -1) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1+1" "n0z" "2")) (("1" (LEMMA "div_cancel1" ("x" "j!1-1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1+1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1-1" "n0z" "2")) (("1" (SIMPLIFY -1) (("1" (REPLACE -9 -1 RL) (("1" (SIMPLIFY -2) (("1" (REPLACE -9 -2 RL) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -2) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -5 1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "-1" "j" "j!1+n")) (("1" (REPLACE -1) (("1" (NAME-REPLACE "K30" "(-1) ^ (j!1 + n)") (("1" (REWRITE "expt_inverse") (("1" (REWRITE "expt_x1") (("1" (NAME "K31" "factorial(2*n)") (("1" (REPLACE -1) (("1" (EXPAND "factorial" 1) (("1" (EXPAND "factorial" 1) (("1" (REPLACE -1) (("1" (HIDE -3 -4 -5 -6 -7 -8 -9 -11) (("1" (NAME "K32" "C(3 + 2 * n, x!1)") (("1" (REPLACE -1) (("1" (NAME "K33" "C(1 + 2 * n, 2 + x!1)") (("1" (REPLACE -1) (("1" (NAME "K34" "C(1 + 2 * n, x!1)") (("1" (REPLACE -1) (("1" (NAME "K35" "C(1 + 2 * n, x!1-2)") (("1" (LEMMA "both_sides_times1" ("x" "-1 * (K33 * x!1 * x!1) - 2 * K33  -
                                                                                                                                                                                                                      2 * K34
                                                                                                                                                                                                                      - 4 * (K34 * n)
                                                                                                                                                                                                                      - 6 * (K34 * x!1)
                                                                                                                                                                                                                      - 8 * (K34 * x!1 * n)
                                                                                                                                                                                                                      + 8 * (C(1 + 2 * n, x!1 - 2) * x!1 * n)
                                                                                                                                                                                                                      + 9 * (C(1 + 2 * n, x!1 - 2) * x!1)
                                                                                                                                                                                                                      - 20 * C(1 + 2 * n, x!1 - 2)
                                                                                                                                                                                                                      - 36 * (C(1 + 2 * n, x!1 - 2) * n)
                                                                                                                                                                                                                      + 2 * (K34 * x!1 * x!1)
                                                                                                                                                                                                                      - C(1 + 2 * n, x!1 - 2) * x!1 * x!1
                                                                                                                                                                                                                      - 16 * (C(1 + 2 * n, x!1 - 2) * n * n)
                                                                                                                                                                                                                      - 3 * (x!1 * K33)" "y" "-2 * K32 - 4 * (K32 * n * n) - 6 * (K32 * n)" "n0z" "K30*K31")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (LEMMA "C_k_plus_1" ("n" "1+2*n" "k" "x!1-2")) (("1" (LEMMA "C_n_plus_1" ("n" "2+2*n" "k" "x!1")) (("1" (REPLACE -1 -6) (("1" (REPLACE -3) (("1" (LEMMA "C_n_plus_1" ("n" "1+2*n" "k" "x!1")) (("1" (REPLACE -1 -7) (("1" (LEMMA "C_n_plus_1" ("n" "1+2*n" "k" "x!1-1")) (("1" (REPLACE -1 -8) (("1" (HIDE -1 -2 -3) (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1-1")) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1+1")) (("1" (REPLACE -1 -6) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1")) (("1" (REPLACE -1 -7) (("1" (REPLACE -6) (("1" (HIDE -1 -2 -3) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1-1")) (("1" (REPLACE -1) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1-2")) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE -1 -2 -3) (("1" (HIDE -6 -5) (("1" (SIMPLIFY -4) (("1" (LEMMA "div_times" ("x" "1 + 2 * n - (x!1 - 2)" "n0x" "x!1 - 2 + 1" "y" "1 + 2 * n - (x!1 - 1)" "n0y" "x!1 - 1 + 1")) (("1" (SIMPLIFY -1) (("1" (SIMPLIFY -3) (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (SIMPLIFY -3) (("1" (LEMMA "div_times" ("x" "2 * n - x!1" "n0x" "2 + x!1" "y" "1 - x!1 + 2 * n" "n0y" "1 + x!1")) (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (NAME "K40" "((6 - 3 * x!1 + 6 * n + (4 * (n * n) - 2 * (x!1 * n) + 4 * n) +
                                                                                                                                                                                                                     (-2 * (x!1 * n) - 2 * x!1 + x!1 * x!1))
                                                                                                                                                                                                                    / (x!1 * x!1 - x!1))") (("1" (REPLACE -1) (("1" (NAME "K41" "((2 * n - x!1) * (1 - x!1 + 2 * n)) / ((2 + x!1) * (1 + x!1))") (("1" (REPLACE -1) (("1" (NAME "K42" "(3 - x!1 + 2 * n) / (x!1 - 1)") (("1" (REPLACE -1) (("1" (REPLACE -5 * RL) (("1" (REPLACE -6 * RL) (("1" (REPLACE -7 * RL) (("1" (CASE "-2 * (K40 * K35 + K35 + 2 * (K35 * K42)) -
                                                                                                                                                                                                                    4 * ((K40 * K35 + K35 + 2 * (K35 * K42)) * n * n)
                                                                                                                                                                                                                    - 6 * ((K40 * K35 + K35 + 2 * (K35 * K42)) * n) = (-1*K35)*(K40+1+2*K42)*(2+4*n*n+6*n)") (("1" (REPLACE -1 1) (("1" (CASE "-1 * (K41 * (K40 * K35) * x!1 * x!1) - 2 * (K41 * (K40 * K35)) -
                                                                                                                                                                                                                         2 * (K40 * K35)
                                                                                                                                                                                                                         - 4 * (K40 * K35 * n)
                                                                                                                                                                                                                         - 6 * (K40 * K35 * x!1)
                                                                                                                                                                                                                         - 8 * (K40 * K35 * x!1 * n)
                                                                                                                                                                                                                         + 8 * (K35 * x!1 * n)
                                                                                                                                                                                                                         + 9 * (K35 * x!1)
                                                                                                                                                                                                                         - 20 * K35
                                                                                                                                                                                                                         - 36 * (K35 * n)
                                                                                                                                                                                                                         + 2 * (K40 * K35 * x!1 * x!1)
                                                                                                                                                                                                                         - K35 * x!1 * x!1
                                                                                                                                                                                                                         - 16 * (K35 * n * n)
                                                                                                                                                                                                                         - 3 * (x!1 * (K41 * (K40 * K35))) = (-1*K35)*(K41*K40*(x!1+2)*(x!1+1) + K40*(2+4*n+6*x!1+8*x!1*n-2*x!1*x!1) + (20-8*x!1*n-9*x!1+36*n+x!1*x!1+16*n*n))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -2) (("1" (SIMPLIFY -3) (("1" (LEMMA "both_sides_times2" ("n0z" "(-1*K35)" "x" "(K41 * K40 * (x!1 + 2) * (x!1 + 1) +
                                                                                                                                                                                                                                    K40 * (2 + 4 * n + 6 * x!1 + 8 * x!1 * n - 2 * x!1 * x!1)
                                                                                                                                                                                                                                    + (20 - 8 * x!1 * n - 9 * x!1 + 36 * n + x!1 * x!1 + 16 * n * n))" "y" "(K40 + 1 + 2 * K42) * (2 + 4 * n * n + 6 * n)")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "K41 * K40 * (x!1 + 2) * (x!1 + 1) = K40*((2 * n - x!1) * (1 - x!1 + 2 * n))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -3 -5 -6 -7 -8) (("1" (LEMMA "div_cancel3" ("x" "6 - 4 * (x!1 * n) - 5 * x!1 + x!1 * x!1 + 4 * (n * n) + 10 * n" "n0z" "x!1 * x!1 - x!1" "y" "K40")) (("1" (LEMMA "both_sides_times2" ("x" "K40 * ((2 * n - x!1) * (1 - x!1 + 2 * n)) +
                                                                                                                                                                                                                                         K40 * (2 + 4 * n + 6 * x!1 + 8 * x!1 * n - 2 * x!1 * x!1)
                                                                                                                                                                                                                                         + (20 - 8 * x!1 * n - 9 * x!1 + 36 * n + x!1 * x!1 + 16 * n * n)" "y" "(K40 + 1 + 2 * K42) * (2 + 4 * n * n + 6 * n)" "n0z" "x!1*(x!1-1)")) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (NAME-REPLACE "K50" "6 - 4 * (x!1 * n) - 5 * x!1 + x!1 * x!1 + 4 * (n * n) + 10 * n") (("1" (NAME-REPLACE "K51" "2 + 4 * n * n + 6 * n") (("1" (NAME-REPLACE "K52" "(2 * n - x!1) * (1 - x!1 + 2 * n)") (("1" (NAME-REPLACE "K53" "2 + 4 * n + 6 * x!1 + 8 * x!1 * n - 2 * x!1 * x!1") (("1" (NAME-REPLACE "K54" "20 - 8 * x!1 * n - 9 * x!1 + 36 * n + x!1 * x!1 + 16 * n * n") (("1" (CASE "x!1 * (x!1 - 1) * ((K40 + 1 + 2 * K42) * K51) = (K50+x!1*(x!1-1) + 2*(3-x!1+2*n)*x!1)*K51") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "x!1 * (x!1 - 1) * (K40 * K52 + K40 * K53 + K54) = K50*(K52+K53) + x!1*(x!1-1)*K54") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (HIDE -1 -2 -3) (("1" (EXPAND "K52") (("1" (EXPAND "K54") (("1" (EXPAND "K53") (("1" (EXPAND "K51") (("1" (EXPAND "K50") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 -3) (("2" (REPLACE -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 -3) (("2" (REPLACE -3 1) (("2" (ASSERT) (("2" (LEMMA "div_cancel1" ("x" "2 * (3 - x!1 + 2 * n) * x!1" "n0z" "x!1-1")) (("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (LEMMA "div_cancel1" ("x" "K40 * ((2 * n - x!1) * (1 - x!1 + 2 * n))" "n0z" "(2 + x!1) * (1 + x!1)")) (("2" (REPLACE -1 1 RL) (("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (SIMPLIFY 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "K31") (("2" (EXPAND "K30") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (CASE "even?(j!1 + n)") (("1" (REWRITE "even_m1_pow") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "not_even_m1_pow") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 10) (("2" (NAME-REPLACE "NN" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "FS5") (("2" (EXPAND "FS2") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "*") (("2" (EXPAND "FS5") (("2" (EXPAND "FS2") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "atanF") (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 1 RL) (("2" (REPLACE -7 1 RL) (("2" (EXPAND "atanF" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1 2)) (("2" (REPLACE -1 1 RL) (("2" (SKOSIMP*) (("2" (HIDE -1) (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "scal_polynomial" ("y" "y!1" "a" "a!1" "n" "n!1")) (("2" (LEMMA "extensionality_postulate" ("f" "const_fun(y!1) * polynomial(a!1, n!1)" "g" "polynomial(const_fun(y!1) * a!1, n!1)")) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (INST - "x") (("2" (EXPAND "const_fun") (("2" (REPLACE -1 1 RL) (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "mul_x_to_n_polynomial" ("a" "a!1" "n" "n!1" "pn" "pn!1")) (("2" (LEMMA "extensionality_postulate" ("f" "(polynomial(a!1, n!1) * (LAMBDA (x: real): x ^ pn!1))" "g" "       polynomial(LAMBDA (i: nat):
                                                        IF i < pn!1 THEN 0 ELSE a!1(i - pn!1) ENDIF,
                                                      n!1 + pn!1)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (INST - "x") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "*") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "prod_derivable_fun[real]" ("f1" "LAMBDA (x:real):x*x" "f2" "deriv[real](atanN(n))")) (("2" (ASSERT) (("2" (EXPAND "*" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (LEMMA "diff_derivable_fun[real]" ("f1" "deriv[real](atanN(n))" "f2" "LAMBDA (x: real):
                                       2 * (x * atanN(n)(x)) + 4 * (x * atanN(n)(x) * n)")) (("3" (EXPAND "-" -1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (CASE "x*x >= 0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|atan_taylors_prep8-2| |nil| 3352183671 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep3" ("n" "n" "m" "2")) (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("" (LEMMA "deriv_id_fun[real]") (("" (EXPAND "I") (("" (LEMMA "prod_derivable_fun[real]" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x")) (("" (ASSERT) (("" (EXPAND "*") (("" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x: real): x" "ff2" "LAMBDA (x: real): x")) (("" (EXPAND "*") (("" (EXPAND "+" -1) (("" (REPLACE -3 -1) (("" (SIMPLIFY -1) (("" (LEMMA "sum_derivable_fun[real]" ("f1" "LAMBDA (x: real): 1" "f2" "LAMBDA (x_1: real): x_1 * x_1")) (("" (ASSERT) (("" (EXPAND "+") (("" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA (x: real): 1" "ff2" "LAMBDA (x_1: real): x_1 * x_1")) (("" (REPLACE -6 -1) (("" (REPLACE -3) (("" (EXPAND "+") (("" (LEMMA "atan_taylors_prep7" ("f" "atanN(n)" "g" "LAMBDA (x:real):1+x*x" "pn" "2*n+1")) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "atanD") (("1" (REPLACE -3 -2) (("1" (EXPAND "^" -2) (("1" (REPLACE -2) (("1" (LEMMA "atan_taylors_prep7" ("f" "((deriv(atanN(n)) * (LAMBDA (x: real): 1 + x * x)) - (1 + 2 * n) * atanN(n) * (LAMBDA (x_1: real): 2 * x_1))" "g" "LAMBDA (t: real): (1 + t * t)" "pn" "2 + 2 * n")) (("1" (ASSERT) (("1" (LEMMA "prod_derivable_fun[real]" ("f1" "deriv(atanN(n))" "f2" "LAMBDA (x: real): 1 + x * x")) (("1" (LEMMA "prod_derivable_fun[real]" ("f1" "atanN(n)" "f2" "LAMBDA (x:real):x")) (("1" (ASSERT) (("1" (LEMMA "scal_derivable_fun[real]" ("f" "atanN(n) * (LAMBDA (x: real): x)" "b" "2+4*n")) (("1" (ASSERT) (("1" (LEMMA "diff_derivable_fun[real]" ("f2" "(2 + 4 * n) * atanN(n) * (LAMBDA (x: real): x)" "f1" "deriv(atanN(n)) * (LAMBDA (x: real): 1 + x * x)")) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (FLATTEN -5) (("1" (REPLACE -9) (("1" (SIMPLIFY -6) (("1" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x:real): x*x" "ff2" "deriv(atanN(n))")) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (REPLACE -12 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_prod_fun[real]" ("ff1" "LAMBDA (x:real):x" "ff2" "atanN(n)")) (("1" (REPLACE -15 -1) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (LEMMA "deriv_scal_fun[real]" ("b" "4*n+2" "ff" "LAMBDA (x_1: real): x_1 * atanN(n)(x_1)")) (("1" (REPLACE -2 -1) (("1" (EXPAND "*" -1) (("1" (LEMMA "deriv_diff_fun[real]" ("ff1" "deriv(atanN(n))" "ff2" "LAMBDA (x:real): 2 * (x * atanN(n)(x)) + 4 * (x * atanN(n)(x) * n)")) (("1" (REPLACE -2 -1) (("1" (EXPAND "-" -1) (("1" (LEMMA "deriv_sum_fun[real]" ("ff1" "LAMBDA (x_1: real):
                             deriv(atanN(n))(x_1) - 2 * (x_1 * atanN(n)(x_1)) -
                              4 * (x_1 * atanN(n)(x_1) * n)" "ff2" "LAMBDA (x: real):x * x * deriv(atanN(n))(x)")) (("1" (REPLACE -2 -1) (("1" (REPLACE -5 -1) (("1" (EXPAND "+" -1) (("1" (REPLACE -1 -11) (("1" (SIMPLIFY -11) (("1" (EXPAND "^" -11) (("1" (REPLACE -11 1) (("1" (HIDE-ALL-BUT (-22 -23 1)) (("1" (LEMMA "extensionality" ("f" "LAMBDA (x_1: real):
                               deriv(deriv(atanN(n)))(x_1) +
                                deriv(deriv(atanN(n)))(x_1) * (x_1 * x_1)
                                - 2 * atanN(n)(x_1)
                                - 4 * (x_1 * deriv(atanN(n))(x_1))
                                - 4 * (atanN(n)(x_1) * n)
                                - 4 * (x_1 * x_1 * x_1 * deriv(atanN(n))(x_1))
                                - 8 * (x_1 * deriv(atanN(n))(x_1) * n)
                                - 8 * (x_1 * x_1 * x_1 * deriv(atanN(n))(x_1) * n)
                                + 6 * (x_1 * x_1 * atanN(n)(x_1))
                                + x_1 * x_1 * deriv(deriv(atanN(n)))(x_1)
                                + 20 * (x_1 * x_1 * atanN(n)(x_1) * n)
                                + x_1 * x_1 * x_1 * x_1 * deriv(deriv(atanN(n)))(x_1)
                                + 16 * (x_1 * x_1 * atanN(n)(x_1) * n * n)" "g" "atanN(1+n)")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (REWRITE "atan_taylors_prep6") (("2" (REWRITE "atan_taylors_prep4") (("2" (EXPAND "atanN") (("2" (CASE "n=0") (("1" (REPLACE -1) (("1" (EXPAND "const_fun") (("1" (HIDE -2 -3 -1) (("1" (EXPAND "polynomial") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (EXPAND "atanF") (("1" (REWRITE "expt_x0") (("1" (REWRITE "C_0") (("1" (REWRITE "C_0") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x1") (("1" (REWRITE "C_n_1") (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (NAME "FS1" "LAMBDA (i: nat):
                                                              2 * atanF(n)(2 + i) + 3 * (i * atanF(n)(2 + i)) +
                                                               i * i * atanF(n)(2 + i)") (("2" (REPLACE -1) (("2" (NAME "FS2" "LAMBDA (i: nat): atanF(n)(1 + i) + i * atanF(n)(1 + i)") (("2" (REPLACE -1) (("2" (CASE "FORALL (a:sequence[real],n:nat,pn:posnat): polynomial(a,n)(x) * x^pn = polynomial(LAMBDA (i:nat): IF i < pn THEN 0 ELSE a(i-pn) ENDIF,n+pn)(x)") (("1" (INST-CP - "FS1" "2*n-2" "2") (("1" (INST-CP - "FS2" "2*n-1" "3") (("1" (INST-CP - "FS2" "2*n-1" "1") (("1" (INST-CP - "atanF(n)" "2*n" "2") (("1" (INST - "FS1" "2*n-2" "4") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x3") (("1" (REWRITE "expt_x4") (("1" (CASE "FORALL (y:real,a:sequence[real],n:nat): y * polynomial(a,n)(x) = polynomial(const_fun(y)*a,n)(x)") (("1" (EXPAND "const_fun" -1) (("1" (NAME "FS3" "LAMBDA (i: nat): IF i < 2 THEN 0 ELSE FS1(i - 2) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS4" "LAMBDA (i: nat): IF i < 3 THEN 0 ELSE FS2(i - 3) ENDIF") (("1" (REPLACE -1) (("1" (SIMPLIFY -7) (("1" (NAME "FS5" "LAMBDA (i: nat): IF i < 1 THEN 0 ELSE FS2(i - 1) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS6" "LAMBDA (i: nat): IF i < 2 THEN 0 ELSE atanF(n)(i - 2) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS7" "LAMBDA (i: nat): IF i < 4 THEN 0 ELSE FS1(i - 4) ENDIF") (("1" (REPLACE -1) (("1" (SIMPLIFY -7) (("1" (REPLACE -7 2) (("1" (INST-CP - "16*n*n" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "20*n" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (REPLACE -12 2) (("1" (HIDE -7) (("1" (INST-CP - "6" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "8*n" "FS4" "2+2*n") (("1" (REPLACE -11 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "8*n" "FS5" "2*n") (("1" (REPLACE -10 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4" "FS5" "2*n") (("1" (REPLACE -10 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4" "FS4" "2+2*n") (("1" (REPLACE -11 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4*n" "atanF(n)" "2*n") (("1" (REPLACE -7) (("1" (INST - "2" "atanF(n)" "2*n") (("1" (REPLACE -6 2) (("1" (HIDE -6 -7 -8 -9 -10 -11 -12) (("1" (SIMPLIFY 2) (("1" (LEMMA "extend_polynomial" ("a" "FS1" "n" "2*n-2" "m" "4")) (("1" (SPLIT -1) (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "FS3" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 2) * atanF(n)" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 4*n) * atanF(n)" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 4) * FS5" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 8*n) * FS5" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND :DEFS NIL :THEORIES "poly_rew") (("1" (CASE-REPLACE "2 * FS3 +
                                                    ((LAMBDA (x: nat): 20 * n) * FS6 +
                                                      ((LAMBDA (x: nat): 6) * FS6 +
                                                        (LAMBDA (x: nat): 16 * (n * n)) * FS6)
                                                      + FS1)
                                                    + FS7
                                                    - (LAMBDA (x: nat): 2) * atanF(n)
                                                    - (LAMBDA (x: nat): 4) * FS4
                                                    - (LAMBDA (x: nat): 4) * FS5
                                                    - (LAMBDA (x: nat): 4 * n) * atanF(n)
                                                    - (LAMBDA (x: nat): 8 * n) * FS4
                                                    - (LAMBDA (x: nat): 8 * n) * FS5 = atanF(1 + n)") (("1" (HIDE 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "+" 1) (("1" (EXPAND "-" 1) (("1" (EXPAND "FS7" 1) (("1" (EXPAND "FS6" 1) (("1" (EXPAND "FS5" 1) (("1" (EXPAND "*" 1) (("1" (EXPAND "FS4" 1) (("1" (HIDE-ALL-BUT (1 2)) (("1" (EXPAND "FS3") (("1" (EXPAND "FS2") (("1" (EXPAND "FS1") (("1" (CASE "x!1=0") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REWRITE "C_0") (("1" (REWRITE "C_0") (("1" (REWRITE "C_2") (("1" (CASE "odd?(0)") (("1" (CASE "odd?(2)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT odd?(2)") (("1" (ASSERT) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "n")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "factorial" 3 4) (("1" (EXPAND "factorial" 3 4) (("1" (EXPAND "factorial" 3 2) (("1" (GRIND-REALS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "x!1=1") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "x!1=2") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REPLACE -1) (("1" (CASE "odd?(2)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (CASE "odd?(4)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "C_0") (("2" (CASE "n=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EVAL-FORMULA 6) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "expt_plus" ("n0x" "-1" "i" "n")) (("2" (INST-CP - "1") (("2" (REWRITE "expt_x1" -2) (("2" (REPLACE -2) (("2" (INST - "2") (("2" (REWRITE "expt_x2" -1) (("2" (REPLACE -1) (("2" (EXPAND "factorial" 7 7) (("2" (EXPAND "factorial" 7 7) (("2" (EXPAND "factorial" 7 8) (("2" (REWRITE "C_2") (("2" (REWRITE "C_2") (("2" (NAME-REPLACE "K1" "(-1)^n") (("2" (LEMMA "div_cancel1" ("x" "2*(n*n)+n" "n0z" "2")) (("2" (REPLACE -1) (("2" (LEMMA "div_cancel1" ("x" "3+5*n+2*(n*n)" "n0z" "2")) (("2" (REPLACE -1) (("2" (NAME "K2" "C(1+2*n,4)") (("2" (REPLACE -1) (("2" (SIMPLIFY 7) (("2" (NAME-REPLACE "K3" "factorial(2 * n) * K1") (("2" (EXPAND "C" -1) (("2" (CASE-REPLACE "factorial(4)=24") (("1" (HIDE -1) (("1" (CASE-REPLACE "factorial(1+2*n) = (1+2*n)*(2*n)*(2*n-1)*(2*n-2)*factorial(2*n-3)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=3") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REPLACE -1) (("1" (CASE "odd?(5)") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "odd?" 1) (("2" (INST + "2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "x!1>=4") (("1" (HIDE 1 2 3 4) (("1" (EXPAND "atanF") (("1" (CASE "odd?(x!1)") (("1" (ASSERT) (("1" (CASE "odd?(x!1+2) AND odd?(x!1-2)") (("1" (FLATTEN -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "odd?") (("2" (SKOSIMP*) (("2" (SPLIT 1) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST + "j!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "odd?(x!1+2)") (("1" (HIDE 2 3) (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST + "j!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "odd?(x!1-2)") (("1" (HIDE 3 4) (("1" (HIDE -2 1) (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "x!1>2+2*n") (("1" (ASSERT) NIL NIL) ("2" (CASE "x!1= 2+2*n") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "C_n_1") (("1" (REWRITE "C_n_1") (("1" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "2" "j" "n+n")) (("1" (REWRITE "expt_x2" -1) (("1" (REPLACE -1 5) (("1" (EXPAND "factorial" 5 4) (("1" (EXPAND "factorial" 5 5) (("1" (EXPAND "factorial" 5 4) (("1" (EXPAND "factorial" 5 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1= 1+2*n") (("1" (HIDE 6) (("1" (REPLACE -1) (("1" (EXPAND "odd?" 5) (("1" (INST + "n") NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=2*n") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "n+n")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "-1" "j" "n+n")) (("1" (LEMMA "not_even_m1_pow" ("i" "-1")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (NAME-REPLACE "K10" "(-1) ^ (n + n)") (("1" (HIDE -1 -2 -3 -4) (("1" (REWRITE "C_n_1") (("1" (EXPAND "factorial" 7 7) (("1" (EXPAND "factorial" 7 8) (("1" (EXPAND "factorial" 7 10) (("1" (NAME-REPLACE "K11" "factorial(2*n)") (("1" (NAME "K12" "C(1 + 2 * n, 2 * n - 2)") (("1" (REPLACE -1) (("1" (NAME "K13" "C(3 + 2 * n, 2 * n)") (("1" (REPLACE -1) (("1" (EXPAND "C") (("1" (CASE-REPLACE "factorial(3)=6") (("1" (HIDE -1) (("1" (CASE-REPLACE "factorial(3+2*n) = (3+2*n)*(2+2*n)*(1+2*n)*factorial(2*n)") (("1" (HIDE -1) (("1" (CASE-REPLACE "factorial(1+2*n)=(1+2*n)*(2*n)*(2*n-1)*factorial(2*n-2)") (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EVAL-FORMULA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1=2*n-1") (("1" (HIDE 8 9) (("1" (REPLACE -1 7) (("1" (EXPAND "odd?" 7) (("1" (INST + "n-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x!1 <= 2*n-2") (("1" (ASSERT) (("1" (REWRITE "odd_iff_not_even" 8) (("1" (REWRITE "odd_iff_not_even") (("1" (REWRITE "odd_iff_not_even") (("1" (HIDE 1 2 3 4 5) (("1" (HIDE -2 -3) (("1" (EXPAND "even?" -2) (("1" (SKOSIMP*) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1" "n0z" "2")) (("1" (REPLACE -4 -1 RL) (("1" (REPLACE -2 -1) (("1" (REPLACE -1 1 RL) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "j!1+n")) (("1" (REWRITE "expt_x1" -1) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1+1" "n0z" "2")) (("1" (LEMMA "div_cancel1" ("x" "j!1-1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1+1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1-1" "n0z" "2")) (("1" (SIMPLIFY -1) (("1" (REPLACE -9 -1 RL) (("1" (SIMPLIFY -2) (("1" (REPLACE -9 -2 RL) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -2) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -5 1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "-1" "j" "j!1+n")) (("1" (REPLACE -1) (("1" (NAME-REPLACE "K30" "(-1) ^ (j!1 + n)") (("1" (REWRITE "expt_inverse") (("1" (REWRITE "expt_x1") (("1" (NAME "K31" "factorial(2*n)") (("1" (REPLACE -1) (("1" (EXPAND "factorial" 1) (("1" (EXPAND "factorial" 1) (("1" (REPLACE -1) (("1" (CASE "1/-1 = -1") (("1" (REPLACE -1) (("1" (HIDE -1 -4 -5 -6 -7 -8 -9 -10 -12) (("1" (NAME "K32" "C(3 + 2 * n, x!1)") (("1" (REPLACE -1) (("1" (NAME "K33" "C(1 + 2 * n, 2 + x!1)") (("1" (REPLACE -1) (("1" (NAME "K34" "C(1 + 2 * n, x!1)") (("1" (REPLACE -1) (("1" (NAME "K35" "C(1 + 2 * n, x!1-2)") (("1" (LEMMA "both_sides_times1" ("x" "-1 * (K33 * x!1 * x!1) - 2 * K33  -
                                                                                                                                                                                                                      2 * K34
                                                                                                                                                                                                                      - 4 * (K34 * n)
                                                                                                                                                                                                                      - 6 * (K34 * x!1)
                                                                                                                                                                                                                      - 8 * (K34 * x!1 * n)
                                                                                                                                                                                                                      + 8 * (C(1 + 2 * n, x!1 - 2) * x!1 * n)
                                                                                                                                                                                                                      + 9 * (C(1 + 2 * n, x!1 - 2) * x!1)
                                                                                                                                                                                                                      - 20 * C(1 + 2 * n, x!1 - 2)
                                                                                                                                                                                                                      - 36 * (C(1 + 2 * n, x!1 - 2) * n)
                                                                                                                                                                                                                      + 2 * (K34 * x!1 * x!1)
                                                                                                                                                                                                                      - C(1 + 2 * n, x!1 - 2) * x!1 * x!1
                                                                                                                                                                                                                      - 16 * (C(1 + 2 * n, x!1 - 2) * n * n)
                                                                                                                                                                                                                      - 3 * (x!1 * K33)" "y" "-2 * K32 - 4 * (K32 * n * n) - 6 * (K32 * n)" "n0z" "K30*K31")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (LEMMA "C_k_plus_1" ("n" "1+2*n" "k" "x!1-2")) (("1" (LEMMA "C_n_plus_1" ("n" "2+2*n" "k" "x!1")) (("1" (REPLACE -1 -6) (("1" (REPLACE -3) (("1" (LEMMA "C_n_plus_1" ("n" "1+2*n" "k" "x!1")) (("1" (REPLACE -1 -7) (("1" (LEMMA "C_n_plus_1" ("n" "1+2*n" "k" "x!1-1")) (("1" (REPLACE -1 -8) (("1" (HIDE -1 -2 -3) (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1-1")) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1+1")) (("1" (REPLACE -1 -6) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1")) (("1" (REPLACE -1 -7) (("1" (REPLACE -6) (("1" (HIDE -1 -2 -3) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1-1")) (("1" (REPLACE -1) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "x!1-2")) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE -1 -2 -3) (("1" (HIDE -6 -5) (("1" (SIMPLIFY -4) (("1" (LEMMA "div_times" ("x" "1 + 2 * n - (x!1 - 2)" "n0x" "x!1 - 2 + 1" "y" "1 + 2 * n - (x!1 - 1)" "n0y" "x!1 - 1 + 1")) (("1" (SIMPLIFY -1) (("1" (SIMPLIFY -3) (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (SIMPLIFY -3) (("1" (LEMMA "div_times" ("x" "2 * n - x!1" "n0x" "2 + x!1" "y" "1 - x!1 + 2 * n" "n0y" "1 + x!1")) (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (NAME "K40" "((6 - 3 * x!1 + 6 * n + (4 * (n * n) - 2 * (x!1 * n) + 4 * n) +
                                                                                                                                                                                                                     (-2 * (x!1 * n) - 2 * x!1 + x!1 * x!1))
                                                                                                                                                                                                                    / (x!1 * x!1 - x!1))") (("1" (REPLACE -1) (("1" (NAME "K41" "((2 * n - x!1) * (1 - x!1 + 2 * n)) / ((2 + x!1) * (1 + x!1))") (("1" (REPLACE -1) (("1" (NAME "K42" "(3 - x!1 + 2 * n) / (x!1 - 1)") (("1" (REPLACE -1) (("1" (REPLACE -5 * RL) (("1" (REPLACE -6 * RL) (("1" (REPLACE -7 * RL) (("1" (CASE "-2 * (K40 * K35 + K35 + 2 * (K35 * K42)) -
                                                                                                                                                                                                                    4 * ((K40 * K35 + K35 + 2 * (K35 * K42)) * n * n)
                                                                                                                                                                                                                    - 6 * ((K40 * K35 + K35 + 2 * (K35 * K42)) * n) = (-1*K35)*(K40+1+2*K42)*(2+4*n*n+6*n)") (("1" (REPLACE -1 1) (("1" (CASE "-1 * (K41 * (K40 * K35) * x!1 * x!1) - 2 * (K41 * (K40 * K35)) -
                                                                                                                                                                                                                         2 * (K40 * K35)
                                                                                                                                                                                                                         - 4 * (K40 * K35 * n)
                                                                                                                                                                                                                         - 6 * (K40 * K35 * x!1)
                                                                                                                                                                                                                         - 8 * (K40 * K35 * x!1 * n)
                                                                                                                                                                                                                         + 8 * (K35 * x!1 * n)
                                                                                                                                                                                                                         + 9 * (K35 * x!1)
                                                                                                                                                                                                                         - 20 * K35
                                                                                                                                                                                                                         - 36 * (K35 * n)
                                                                                                                                                                                                                         + 2 * (K40 * K35 * x!1 * x!1)
                                                                                                                                                                                                                         - K35 * x!1 * x!1
                                                                                                                                                                                                                         - 16 * (K35 * n * n)
                                                                                                                                                                                                                         - 3 * (x!1 * (K41 * (K40 * K35))) = (-1*K35)*(K41*K40*(x!1+2)*(x!1+1) + K40*(2+4*n+6*x!1+8*x!1*n-2*x!1*x!1) + (20-8*x!1*n-9*x!1+36*n+x!1*x!1+16*n*n))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -2) (("1" (SIMPLIFY -3) (("1" (LEMMA "both_sides_times2" ("n0z" "(-1*K35)" "x" "(K41 * K40 * (x!1 + 2) * (x!1 + 1) +
                                                                                                                                                                                                                                    K40 * (2 + 4 * n + 6 * x!1 + 8 * x!1 * n - 2 * x!1 * x!1)
                                                                                                                                                                                                                                    + (20 - 8 * x!1 * n - 9 * x!1 + 36 * n + x!1 * x!1 + 16 * n * n))" "y" "(K40 + 1 + 2 * K42) * (2 + 4 * n * n + 6 * n)")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "K41 * K40 * (x!1 + 2) * (x!1 + 1) = K40*((2 * n - x!1) * (1 - x!1 + 2 * n))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -3 -5 -6 -7 -8) (("1" (LEMMA "div_cancel3" ("x" "6 - 4 * (x!1 * n) - 5 * x!1 + x!1 * x!1 + 4 * (n * n) + 10 * n" "n0z" "x!1 * x!1 - x!1" "y" "K40")) (("1" (LEMMA "both_sides_times2" ("x" "K40 * ((2 * n - x!1) * (1 - x!1 + 2 * n)) +
                                                                                                                                                                                                                                         K40 * (2 + 4 * n + 6 * x!1 + 8 * x!1 * n - 2 * x!1 * x!1)
                                                                                                                                                                                                                                         + (20 - 8 * x!1 * n - 9 * x!1 + 36 * n + x!1 * x!1 + 16 * n * n)" "y" "(K40 + 1 + 2 * K42) * (2 + 4 * n * n + 6 * n)" "n0z" "x!1*(x!1-1)")) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (NAME-REPLACE "K50" "6 - 4 * (x!1 * n) - 5 * x!1 + x!1 * x!1 + 4 * (n * n) + 10 * n") (("1" (NAME-REPLACE "K51" "2 + 4 * n * n + 6 * n") (("1" (NAME-REPLACE "K52" "(2 * n - x!1) * (1 - x!1 + 2 * n)") (("1" (NAME-REPLACE "K53" "2 + 4 * n + 6 * x!1 + 8 * x!1 * n - 2 * x!1 * x!1") (("1" (NAME-REPLACE "K54" "20 - 8 * x!1 * n - 9 * x!1 + 36 * n + x!1 * x!1 + 16 * n * n") (("1" (CASE "x!1 * (x!1 - 1) * ((K40 + 1 + 2 * K42) * K51) = (K50+x!1*(x!1-1) + 2*(3-x!1+2*n)*x!1)*K51") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "x!1 * (x!1 - 1) * (K40 * K52 + K40 * K53 + K54) = K50*(K52+K53) + x!1*(x!1-1)*K54") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (HIDE -1 -2 -3) (("1" (EXPAND "K52") (("1" (EXPAND "K54") (("1" (EXPAND "K53") (("1" (EXPAND "K51") (("1" (EXPAND "K50") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 -3) (("2" (REPLACE -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 -3) (("2" (REPLACE -3 1) (("2" (ASSERT) (("2" (LEMMA "div_cancel1" ("x" "2 * (3 - x!1 + 2 * n) * x!1" "n0z" "x!1-1")) (("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (LEMMA "div_cancel1" ("x" "K40 * ((2 * n - x!1) * (1 - x!1 + 2 * n))" "n0z" "(2 + x!1) * (1 + x!1)")) (("2" (REPLACE -1 1 RL) (("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (SIMPLIFY 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 10) (("2" (NAME-REPLACE "NN" "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "FS5") (("2" (EXPAND "FS2") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "*") (("2" (EXPAND "FS5") (("2" (EXPAND "FS2") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "atanF") (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 1 RL) (("2" (REPLACE -7 1 RL) (("2" (EXPAND "atanF" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1 2)) (("2" (REPLACE -1 1 RL) (("2" (SKOSIMP*) (("2" (HIDE -1) (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "scal_polynomial" ("y" "y!1" "a" "a!1" "n" "n!1")) (("2" (LEMMA "extensionality_postulate" ("f" "const_fun(y!1) * polynomial(a!1, n!1)" "g" "polynomial(const_fun(y!1) * a!1, n!1)")) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (INST - "x") (("2" (EXPAND "const_fun") (("2" (REPLACE -1 1 RL) (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "mul_x_to_n_polynomial" ("a" "a!1" "n" "n!1" "pn" "pn!1")) (("2" (LEMMA "extensionality_postulate" ("f" "(polynomial(a!1, n!1) * (LAMBDA (x: real): x ^ pn!1))" "g" "       polynomial(LAMBDA (i: nat):
                                                        IF i < pn!1 THEN 0 ELSE a!1(i - pn!1) ENDIF,
                                                      n!1 + pn!1)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (INST - "x") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "*") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "prod_derivable_fun[real]" ("f1" "LAMBDA (x:real):x*x" "f2" "deriv[real](atanN(n))")) (("2" (ASSERT) (("2" (EXPAND "*" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (LEMMA "diff_derivable_fun[real]" ("f1" "deriv[real](atanN(n))" "f2" "LAMBDA (x: real):
                                       2 * (x * atanN(n)(x)) + 4 * (x * atanN(n)(x) * n)")) (("3" (EXPAND "-" -1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (CASE "x*x >= 0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|const_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|deriv_id_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|prod_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sum_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (^ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_diff_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|extensionality| FORMULA-DECL NIL |functions| NIL) (|atan_taylors_prep6| FORMULA-DECL NIL |atan_integral| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|expt_x3| FORMULA-DECL NIL |exponentiation| NIL) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|extend_polynomial| FORMULA-DECL NIL |polynomials| |reals|) (|poly_sum| FORMULA-DECL NIL |poly_rew| |reals|) (|poly_scal| FORMULA-DECL NIL |poly_rew| |reals|) (|poly_diff| FORMULA-DECL NIL |poly_rew| |reals|) (FS7 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (FS5 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (FS4 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (FS3 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (FS1 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (<= CONST-DECL "bool" |reals| NIL) (C CONST-DECL "posnat" |binomial| |reals|) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (K30 SKOLEM-CONST-DECL "rat" |atan_integral| NIL) (|even_m1_pow| FORMULA-DECL NIL |exponentiation| NIL) (|C_n_plus_1| FORMULA-DECL NIL |binomial| |reals|) (|C_k_minus_1| FORMULA-DECL NIL |binomial| |reals|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|even_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (K54 SKOLEM-CONST-DECL "int" |atan_integral| NIL) (K51 SKOLEM-CONST-DECL "even_int" |atan_integral| NIL) (K50 SKOLEM-CONST-DECL "int" |atan_integral| NIL) (K53 SKOLEM-CONST-DECL "even_int" |atan_integral| NIL) (K52 SKOLEM-CONST-DECL "int" |atan_integral| NIL) (|div_cancel3| FORMULA-DECL NIL |real_props| NIL) (|both_sides_times2| FORMULA-DECL NIL |real_props| NIL) (|div_times| FORMULA-DECL NIL |real_props| NIL) (|C_k_plus_1| FORMULA-DECL NIL |binomial| |reals|) (|both_sides_times1| FORMULA-DECL NIL |real_props| NIL) (|nnrrat_div_negrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|times_div1| FORMULA-DECL NIL |real_props| NIL) (|odd_iff_not_even| FORMULA-DECL NIL |naturalnumbers| NIL) (|not_even_m1_pow| FORMULA-DECL NIL |exponentiation| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnrat_plus_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (C_2 FORMULA-DECL NIL |binomial| |reals|) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (FS2 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (FS6 SKOLEM-CONST-DECL "[nat -> int]" |atan_integral| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|scal_polynomial| FORMULA-DECL NIL |polynomials| |reals|) (|expt_x4| FORMULA-DECL NIL |exponentiation| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|mul_x_to_n_polynomial| FORMULA-DECL NIL |polynomials| |reals|) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|C_n_1| FORMULA-DECL NIL |binomial| |reals|) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|negint_times_negint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (C_0 FORMULA-DECL NIL |binomial| |reals|) (|atanF| CONST-DECL "int" |atan_integral| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|atan_taylors_prep4| FORMULA-DECL NIL |atan_integral| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|deriv_scal_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|diff_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|scal_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|atan_taylors_prep7| FORMULA-DECL NIL |atan_integral| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|deriv_sum_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|deriv_prod_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (I CONST-DECL "(bijective?[T, T])" |identity| NIL) (|deriv_const_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|identity_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|)) NIL) (|atan_taylors_prep8-1| |nil| 3261831669 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_taylors_prep3" ("n" "n" "m" "2")) (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (EXPAND "derivable_n_times?") (("" (FLATTEN) (("" (LEMMA "identity_derivable_fun[real]") (("" (LEMMA "const_derivable_fun[real]" ("b" "1")) (("" (LEMMA "deriv_const_fun[real]" ("b" "1")) (("" (LEMMA "deriv_id_fun[real]") (("" (EXPAND "I") (("" (EXPAND "const_fun") (("" (LEMMA "prod_derivable_fun" ("f1" "LAMBDA (x: real): x" "f2" "LAMBDA (x: real): x")) (("" (ASSERT) (("" (EXPAND "*") (("" (LEMMA "deriv_prod_fun" ("ff1" "LAMBDA (x: real): x" "ff2" "LAMBDA (x: real): x")) (("" (EXPAND "*") (("" (EXPAND "+" -1) (("" (REPLACE -3 -1) (("" (SIMPLIFY -1) (("" (LEMMA "sum_derivable_fun" ("f1" "LAMBDA (x: real): 1" "f2" "LAMBDA (x_1: real): x_1 * x_1")) (("" (ASSERT) (("" (EXPAND "+") (("" (LEMMA "deriv_sum_fun" ("ff1" "LAMBDA (x: real): 1" "ff2" "LAMBDA (x_1: real): x_1 * x_1")) (("" (REPLACE -6 -1) (("" (REPLACE -3) (("" (EXPAND "+") (("" (LEMMA "atan_taylors_prep7" ("f" "atanN(n)" "g" "LAMBDA (x:real):1+x*x" "pn" "2*n+1")) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "atanD") (("1" (REPLACE -3 -2) (("1" (EXPAND "^" -2) (("1" (REPLACE -2) (("1" (LEMMA "atan_taylors_prep7" ("f" "((deriv(atanN(n)) * (LAMBDA (x: real): 1 + x * x)) - (1 + 2 * n) * atanN(n) * (LAMBDA (x_1: real): 2 * x_1))" "g" "LAMBDA (t: real): (1 + t * t)" "pn" "2 + 2 * n")) (("1" (ASSERT) (("1" (LEMMA "prod_derivable_fun" ("f1" "deriv(atanN(n))" "f2" "LAMBDA (x: real): 1 + x * x")) (("1" (LEMMA "prod_derivable_fun" ("f1" "atanN(n)" "f2" "LAMBDA (x:real):x")) (("1" (ASSERT) (("1" (LEMMA "scal_derivable_fun" ("f" "atanN(n) * (LAMBDA (x: real): x)" "b" "2+4*n")) (("1" (ASSERT) (("1" (LEMMA "diff_derivable_fun" ("f2" "(2 + 4 * n) * atanN(n) * (LAMBDA (x: real): x)" "f1" "deriv(atanN(n)) * (LAMBDA (x: real): 1 + x * x)")) (("1" (ASSERT) (("1" (EXPAND "*") (("1" (ASSERT) (("1" (EXPAND "-") (("1" (ASSERT) (("1" (FLATTEN -5) (("1" (REPLACE -9) (("1" (SIMPLIFY -6) (("1" (LEMMA "deriv_prod_fun" ("ff1" "LAMBDA (x:real): x*x" "ff2" "deriv(atanN(n))")) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (REPLACE -12 -1) (("1" (SIMPLIFY -1) (("1" (LEMMA "deriv_prod_fun" ("ff1" "LAMBDA (x:real):x" "ff2" "atanN(n)")) (("1" (REPLACE -15 -1) (("1" (EXPAND "*") (("1" (EXPAND "+") (("1" (LEMMA "deriv_scal_fun" ("b" "4*n+2" "ff" "LAMBDA (x_1: real): x_1 * atanN(n)(x_1)")) (("1" (REPLACE -2 -1) (("1" (EXPAND "*" -1) (("1" (LEMMA "deriv_diff_fun" ("ff1" "deriv(atanN(n))" "ff2" "LAMBDA (x:real): 2 * (x * atanN(n)(x)) + 4 * (x * atanN(n)(x) * n)")) (("1" (REPLACE -2 -1) (("1" (EXPAND "-" -1) (("1" (LEMMA "deriv_sum_fun" ("ff1" "LAMBDA (x_1: real):
              deriv(atanN(n))(x_1) - 2 * (x_1 * atanN(n)(x_1)) -
               4 * (x_1 * atanN(n)(x_1) * n)" "ff2" "LAMBDA (x: real):x * x * deriv(atanN(n))(x)")) (("1" (REPLACE -2 -1) (("1" (REPLACE -5 -1) (("1" (EXPAND "+" -1) (("1" (REPLACE -1 -11) (("1" (SIMPLIFY -11) (("1" (EXPAND "^" -11) (("1" (REPLACE -11 1) (("1" (HIDE-ALL-BUT (-22 -23 1)) (("1" (LEMMA "extensionality" ("f" "LAMBDA (x_1: real):
          deriv(deriv(atanN(n)))(x_1) +
           deriv(deriv(atanN(n)))(x_1) * (x_1 * x_1)
           - 2 * atanN(n)(x_1)
           - 4 * (x_1 * deriv(atanN(n))(x_1))
           - 4 * (atanN(n)(x_1) * n)
           - 4 * (x_1 * x_1 * x_1 * deriv(atanN(n))(x_1))
           - 8 * (x_1 * deriv(atanN(n))(x_1) * n)
           - 8 * (x_1 * x_1 * x_1 * deriv(atanN(n))(x_1) * n)
           + 6 * (x_1 * x_1 * atanN(n)(x_1))
           + x_1 * x_1 * deriv(deriv(atanN(n)))(x_1)
           + 20 * (x_1 * x_1 * atanN(n)(x_1) * n)
           + x_1 * x_1 * x_1 * x_1 * deriv(deriv(atanN(n)))(x_1)
           + 16 * (x_1 * x_1 * atanN(n)(x_1) * n * n)" "g" "atanN(1+n)")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (SKOLEM 1 ("x")) (("2" (REWRITE "atan_taylors_prep6") (("2" (REWRITE "atan_taylors_prep4") (("2" (EXPAND "atanN") (("2" (CASE "n=0") (("1" (REPLACE -1) (("1" (EXPAND "const_fun") (("1" (HIDE -2 -3 -1) (("1" (EXPAND "polynomial") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (EXPAND "atanF") (("1" (REWRITE "expt_x0") (("1" (REWRITE "C_0") (("1" (REWRITE "C_0") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x1") (("1" (REWRITE "C_n_1") (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (NAME "FS1" "LAMBDA (i: nat):
                 2 * atanF(n)(2 + i) + 3 * (i * atanF(n)(2 + i)) +
                  i * i * atanF(n)(2 + i)") (("2" (REPLACE -1) (("2" (NAME "FS2" "LAMBDA (i: nat): atanF(n)(1 + i) + i * atanF(n)(1 + i)") (("2" (REPLACE -1) (("2" (CASE "FORALL (a:sequence[real],n:nat,pn:posnat): polynomial(a,n)(x) * x^pn = polynomial(LAMBDA (i:nat): IF i < pn THEN 0 ELSE a(i-pn) ENDIF,n+pn)(x)") (("1" (INST-CP - "FS1" "2*n-2" "2") (("1" (INST-CP - "FS2" "2*n-1" "3") (("1" (INST-CP - "FS2" "2*n-1" "1") (("1" (INST-CP - "atanF(n)" "2*n" "2") (("1" (INST - "FS1" "2*n-2" "4") (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x3") (("1" (REWRITE "expt_x4") (("1" (CASE "FORALL (y:real,a:sequence[real],n:nat): y * polynomial(a,n)(x) = polynomial(const_fun(y)*a,n)(x)") (("1" (EXPAND "const_fun" -1) (("1" (NAME "FS3" "LAMBDA (i: nat): IF i < 2 THEN 0 ELSE FS1(i - 2) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS4" "LAMBDA (i: nat): IF i < 3 THEN 0 ELSE FS2(i - 3) ENDIF") (("1" (REPLACE -1) (("1" (SIMPLIFY -7) (("1" (NAME "FS5" "LAMBDA (i: nat): IF i < 1 THEN 0 ELSE FS2(i - 1) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS6" "LAMBDA (i: nat): IF i < 2 THEN 0 ELSE atanF(n)(i - 2) ENDIF") (("1" (REPLACE -1) (("1" (NAME "FS7" "LAMBDA (i: nat): IF i < 4 THEN 0 ELSE FS1(i - 4) ENDIF") (("1" (REPLACE -1) (("1" (SIMPLIFY -7) (("1" (REPLACE -7 2) (("1" (INST-CP - "16*n*n" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "20*n" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (REPLACE -12 2) (("1" (HIDE -7) (("1" (INST-CP - "6" "FS6" "2*n+2") (("1" (REPLACE -9 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "8*n" "FS4" "2+2*n") (("1" (REPLACE -11 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "8*n" "FS5" "2*n") (("1" (REPLACE -10 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4" "FS5" "2*n") (("1" (REPLACE -10 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4" "FS4" "2+2*n") (("1" (REPLACE -11 -7 RL) (("1" (REPLACE -7 2) (("1" (HIDE -7) (("1" (INST-CP - "4*n" "atanF(n)" "2*n") (("1" (REPLACE -7) (("1" (INST - "2" "atanF(n)" "2*n") (("1" (REPLACE -6 2) (("1" (HIDE -6 -7 -8 -9 -10 -11 -12) (("1" (LEMMA "extend_polynomial" ("a" "FS1" "n" "2*n-2" "m" "4")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "extend_polynomial" ("a" "FS3" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 2) * atanF(n)" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 4*n) * atanF(n)" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 4) * FS5" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (LEMMA "extend_polynomial" ("a" "(LAMBDA (x: nat): 8*n) * FS5" "n" "2*n" "m" "2")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (HIDE -1 -2 -3 -4 -5 -6) (("1" (CASE "FORALL (a,b:sequence[real]): polynomial(a,2*n+2)(x)+polynomial(b,2*n+2)(x) = polynomial(a+b,2*n+2)(x)") (("1" (CASE "FORALL (a,b:sequence[real]): polynomial(a,2*n+2)(x)-polynomial(b,2*n+2)(x) = polynomial(a-b,2*n+2)(x)") (("1" (INST-CP -2 "FS1" "FS3") (("1" (REPLACE -3 2) (("1" (INST-CP -1 "FS1+FS3" "(LAMBDA (x: nat): 2) * atanF(n)") (("1" (REPLACE -2 2) (("1" (HIDE -2 -4) (("1" (INST-CP -1 "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n)" "(LAMBDA (x: nat): 4 * n) * atanF(n)") (("1" (REPLACE -2 2) (("1" (HIDE -2) (("1" (INST-CP -1 "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)" "(LAMBDA (x: nat): 4) * FS4") (("1" (REPLACE -2 2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4" "(LAMBDA (x: nat): 4) * FS5") (("1" (REPLACE -2 2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4-(LAMBDA (x: nat): 4) * FS5" "(LAMBDA (x: nat): 8 * n) * FS5") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4-(LAMBDA (x: nat): 4) * FS5 -(LAMBDA (x: nat): 8 * n) * FS5" "(LAMBDA (x: nat): 8 * n) * FS4") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (HIDE -1) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4
               - (LAMBDA (x: nat): 4) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS4" "(LAMBDA (x: nat): 6) * FS6") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4
               - (LAMBDA (x: nat): 4) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS4+(LAMBDA (x: nat): 6) * FS6" "FS3") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4
               - (LAMBDA (x: nat): 4) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS4+(LAMBDA (x: nat): 6) * FS6 + FS3" "(LAMBDA (x: nat): 20 * n) * FS6") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4
               - (LAMBDA (x: nat): 4) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS4+(LAMBDA (x: nat): 6) * FS6 + FS3+(LAMBDA (x: nat): 20 * n) * FS6" "(LAMBDA (x: nat): 16 * n * n) * FS6") (("1" (REPLACE -2) (("1" (HIDE -2) (("1" (INST-CP - "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4
               - (LAMBDA (x: nat): 4) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS4+(LAMBDA (x: nat): 6) * FS6 + FS3+(LAMBDA (x: nat): 20 * n) * FS6 + (LAMBDA (x: nat): 16 * n * n) * FS6" "FS7") (("1" (REPLACE -2 2) (("1" (HIDE -1 -2) (("1" (LEMMA "extensionality" ("f" "FS1 + FS3 - (LAMBDA (x: nat): 2) * atanF(n) -
               (LAMBDA (x: nat): 4 * n) * atanF(n)
               - (LAMBDA (x: nat): 4) * FS4
               - (LAMBDA (x: nat): 4) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS5
               - (LAMBDA (x: nat): 8 * n) * FS4
               + (LAMBDA (x: nat): 6) * FS6
               + FS3
               + (LAMBDA (x: nat): 20 * n) * FS6
               + (LAMBDA (x: nat): 16 * n * n) * FS6
               + FS7" "g" "atanF(1+n)")) (("1" (SPLIT -1) (("1" (REPLACE -1 2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (SKOLEM 1 ("i")) (("2" (EXPAND "+" 1) (("2" (EXPAND "-" 1) (("2" (EXPAND "FS7" 1) (("2" (EXPAND "FS6" 1) (("2" (EXPAND "FS5" 1) (("2" (EXPAND "*" 1) (("2" (EXPAND "FS4" 1) (("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "FS3") (("2" (EXPAND "FS2") (("2" (EXPAND "FS1") (("2" (CASE "i=0") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REWRITE "C_0") (("1" (REWRITE "C_0") (("1" (REWRITE "C_2") (("1" (CASE "odd?(0)") (("1" (CASE "odd?(2)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "NOT odd?(2)") (("1" (ASSERT) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "n")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (EXPAND "factorial" 3 4) (("1" (EXPAND "factorial" 3 5) (("1" (EXPAND "factorial" 3 4) (("1" (NAME-REPLACE "K1" "factorial(2 * n) * (-1) ^ n") (("1" (LEMMA "div_cancel1" ("x" "2*(n*n)+n" "n0z" "2")) (("1" (REPLACE -1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "i=1") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "i=2") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REPLACE -1) (("1" (CASE "odd?(2)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (CASE "odd?(4)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "C_0") (("2" (CASE "n=1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "expt_x1") (("1" (REWRITE "expt_x2") (("1" (REWRITE "expt_x3") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (REWRITE "C_2") (("1" (REWRITE "C_2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "expt_plus" ("n0x" "-1" "i" "n")) (("2" (INST-CP - "1") (("2" (REWRITE "expt_x1" -2) (("2" (REPLACE -2) (("2" (INST - "2") (("2" (REWRITE "expt_x2" -1) (("2" (REPLACE -1) (("2" (NAME-REPLACE "K1" "(-1)^n") (("2" (SIMPLIFY 7) (("2" (REWRITE "C_2") (("2" (REWRITE "C_2") (("2" (LEMMA "div_cancel1" ("x" "2*(n*n)+n" "n0z" "2")) (("2" (REPLACE -1) (("2" (LEMMA "div_cancel1" ("x" "3+5*n+2*(n*n)" "n0z" "2")) (("2" (REPLACE -1) (("2" (EXPAND "factorial" 7 7) (("2" (EXPAND "factorial" 7 11) (("2" (EXPAND "factorial" 7 8) (("2" (EXPAND "factorial" 7 7) (("2" (EXPAND "factorial" 7 6) (("2" (NAME "K2" "C(1+2*n,4)") (("2" (REPLACE -1) (("2" (SIMPLIFY 7) (("2" (NAME-REPLACE "K3" "factorial(2 * n) * K1") (("2" (EXPAND "C" -1) (("2" (EXPAND "factorial" -1 1) (("2" (EXPAND "factorial" -1 1) (("2" (EXPAND "factorial" -1 2) (("2" (EXPAND "factorial" -1 2) (("2" (EXPAND "factorial" -1 3) (("2" (EXPAND "factorial" -1 2) (("2" (EXPAND "factorial" -1 1) (("2" (EXPAND "factorial" -1 3) (("2" (EXPAND "factorial" -1 1) (("2" (LEMMA "div_cancel1" ("x" "(4*n-4*n*n-16*n*n*n+16*n*n*n*n)/factorial(4)" "n0z" "factorial(2*n-3)")) (("2" (REWRITE "div_div2" -1) (("2" (REPLACE -1 -2) (("2" (HIDE -1 2 3 4 5 6 -3 -4 -5 -6) (("2" (EXPAND "factorial" -1) (("2" (EXPAND "factorial" -1) (("2" (EXPAND "factorial" -1) (("2" (EXPAND "factorial" -1) (("2" (EXPAND "factorial" -1) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=3") (("1" (ASSERT) (("1" (EXPAND "atanF") (("1" (REPLACE -1) (("1" (CASE "odd?(5)") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "odd?" 1) (("2" (INST + "2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "i>=4") (("1" (HIDE 1 2 3 4) (("1" (EXPAND "atanF") (("1" (CASE "odd?(i)") (("1" (ASSERT) (("1" (CASE "odd?(i+2) AND odd?(i-2)") (("1" (FLATTEN -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2 3) (("2" (EXPAND "odd?") (("2" (SKOSIMP*) (("2" (SPLIT 1) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST + "j!1-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "odd?(i+2)") (("1" (HIDE 2 3) (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST + "j!1-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "odd?(i-2)") (("1" (HIDE 3 4) (("1" (HIDE -2 1) (("1" (EXPAND "odd?") (("1" (SKOSIMP*) (("1" (INST + "j!1+1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "i>2+2*n") (("1" (ASSERT) NIL NIL) ("2" (CASE "i= 2+2*n") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (REWRITE "C_n_1") (("1" (REWRITE "C_n_1") (("1" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "2" "j" "n+n")) (("1" (REWRITE "expt_x2" -1) (("1" (REPLACE -1 5) (("1" (EXPAND "factorial" 5 4) (("1" (EXPAND "factorial" 5 8) (("1" (EXPAND "factorial" 5 5) (("1" (EXPAND "factorial" 5 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i= 1+2*n") (("1" (HIDE 6) (("1" (REPLACE -1) (("1" (EXPAND "odd?" 5) (("1" (INST + "n") NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=2*n") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "n+n")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "-1" "j" "n+n")) (("1" (LEMMA "not_even_m1_pow" ("i" "-1")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (NAME-REPLACE "K10" "(-1) ^ (n + n)") (("1" (HIDE -1 -2 -3 -4) (("1" (REWRITE "C_n_1") (("1" (EXPAND "factorial" 7 7) (("1" (EXPAND "factorial" 7 9) (("1" (EXPAND "factorial" 7 8) (("1" (NAME-REPLACE "K11" "factorial(2*n)") (("1" (NAME "K12" "C(1 + 2 * n, 2 * n - 2)") (("1" (REPLACE -1) (("1" (NAME "K13" "C(3 + 2 * n, 2 * n)") (("1" (REPLACE -1) (("1" (EXPAND "C") (("1" (EXPAND "factorial" -1 3) (("1" (EXPAND "factorial" -1 2) (("1" (EXPAND "factorial" -1 2) (("1" (EXPAND "factorial" -1 2) (("1" (EXPAND "factorial" -2 3) (("1" (EXPAND "factorial" -2 2) (("1" (EXPAND "factorial" -2 2) (("1" (EXPAND "factorial" -2 2) (("1" (HIDE -3 1 2 3 4 5 6) (("1" (CASE "FORALL (k:nat): factorial(3+k)/(6*factorial(k)) = ((3+k)*(2+k)*(1+k))/6") (("1" (INST-CP - "2*n") (("1" (REPLACE -2 -3) (("1" (REPLACE -3 1 RL) (("1" (INST - "2*n-2") (("1" (REPLACE -1 -4) (("1" (REPLACE -4 1 RL) (("1" (REPLACE -3) (("1" (REPLACE -4) (("1" (LEMMA "both_sides_times1" ("x" "-2 * (K11 * K10) - 4 * (K11 * K12 * K10 * n * n) -
       16 * (K11 * K10 * n * n * n)
       - 18 * (K11 * K12 * K10 * n)
       - 20 * (K11 * K12 * K10)
       - 20 * (K11 * K10 * n)
       - 40 * (K11 * K10 * n * n)" "y" "-2 * (K11 * K13 * K10) - 4 * (K11 * K13 * K10 * n * n) -
        6 * (K11 * K13 * K10 * n)" "n0z" "6")) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (SIMPLIFY 1) (("1" (REPLACE -3 1 RL) (("1" (REPLACE -4 1 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 3) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 1) (("2" (EXPAND "factorial" 1 2) (("2" (EXPAND "factorial" 1 1) (("2" (LEMMA "div_cancel1" ("x" "(6 + k!1 * k!1 * k!1 + 6 * (k!1 * k!1) + 11 * k!1)/6" "n0z" "factorial(k!1)")) (("2" (REWRITE "div_div2") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (REWRITE "even_or_odd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=2*n-1") (("1" (HIDE 8 9) (("1" (REPLACE -1 7) (("1" (EXPAND "odd?" 7) (("1" (INST + "n-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i <= 2*n-2") (("1" (ASSERT) (("1" (REWRITE "odd_iff_not_even" 8) (("1" (REWRITE "odd_iff_not_even") (("1" (REWRITE "odd_iff_not_even") (("1" (HIDE 1 2 3 4 5) (("1" (HIDE -2 -3) (("1" (EXPAND "even?" -2) (("1" (SKOSIMP*) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1" "n0z" "2")) (("1" (REPLACE -4 -1 RL) (("1" (REPLACE -2 -1) (("1" (REPLACE -1 1 RL) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "1" "j" "j!1+n")) (("1" (REWRITE "expt_x1" -1) (("1" (REPLACE -1) (("1" (LEMMA "div_cancel1" ("x" "j!1+1" "n0z" "2")) (("1" (LEMMA "div_cancel1" ("x" "j!1-1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1+1" "n0z" "2")) (("1" (LEMMA "times_div1" ("x" "2" "y" "j!1-1" "n0z" "2")) (("1" (SIMPLIFY -1) (("1" (REPLACE -9 -1 RL) (("1" (SIMPLIFY -2) (("1" (REPLACE -9 -2 RL) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -2) (("1" (REPLACE -1 1 RL) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -5 1) (("1" (LEMMA "expt_plus" ("n0x" "-1" "i" "-1" "j" "j!1+n")) (("1" (REPLACE -1) (("1" (NAME-REPLACE "K30" "(-1) ^ (j!1 + n)") (("1" (REWRITE "expt_inverse") (("1" (REWRITE "expt_x1") (("1" (NAME "K31" "factorial(2*n)") (("1" (REPLACE -1) (("1" (EXPAND "factorial" 1) (("1" (EXPAND "factorial" 1) (("1" (REPLACE -1) (("1" (CASE "1/-1 = -1") (("1" (REPLACE -1) (("1" (HIDE -1 -4 -5 -6 -7 -8 -9 -10 -12) (("1" (NAME "K32" "C(3 + 2 * n, i)") (("1" (REPLACE -1) (("1" (NAME "K33" "C(1 + 2 * n, 2 + i)") (("1" (REPLACE -1) (("1" (NAME "K34" "C(1 + 2 * n, i)") (("1" (REPLACE -1) (("1" (NAME "K35" "C(1 + 2 * n, i-2)") (("1" (LEMMA "both_sides_times1" ("x" "-1 * (K33 * i * i) - 2 * K33  -
       2 * K34
       - 4 * (K34 * n)
       - 6 * (K34 * i)
       - 8 * (K34 * i * n)
       + 8 * (C(1 + 2 * n, i - 2) * i * n)
       + 9 * (C(1 + 2 * n, i - 2) * i)
       - 20 * C(1 + 2 * n, i - 2)
       - 36 * (C(1 + 2 * n, i - 2) * n)
       + 2 * (K34 * i * i)
       - C(1 + 2 * n, i - 2) * i * i
       - 16 * (C(1 + 2 * n, i - 2) * n * n)
       - 3 * (i * K33)" "y" "-2 * K32 - 4 * (K32 * n * n) - 6 * (K32 * n)" "n0z" "K30*K31")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (LEMMA "C_k_plus_1" ("n" "1+2*n" "k" "i-2")) (("1" (LEMMA "C_n_plus_1" ("n" "2+2*n" "k" "i")) (("1" (REPLACE -1 -6) (("1" (REPLACE -3) (("1" (LEMMA "C_n_plus_1" ("n" "1+2*n" "k" "i")) (("1" (REPLACE -1 -7) (("1" (LEMMA "C_n_plus_1" ("n" "1+2*n" "k" "i-1")) (("1" (REPLACE -1 -8) (("1" (HIDE -1 -2 -3) (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "i-1")) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "i+1")) (("1" (REPLACE -1 -6) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "i")) (("1" (REPLACE -1 -7) (("1" (REPLACE -6) (("1" (HIDE -1 -2 -3) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "i-1")) (("1" (REPLACE -1) (("1" (LEMMA "C_k_minus_1" ("n" "1+2*n" "k" "i-2")) (("1" (REPLACE -1) (("1" (REPLACE -4) (("1" (HIDE -1 -2 -3) (("1" (HIDE -6 -5) (("1" (SIMPLIFY -4) (("1" (LEMMA "div_times" ("x" "1 + 2 * n - (i - 2)" "n0x" "i - 2 + 1" "y" "1 + 2 * n - (i - 1)" "n0y" "i - 1 + 1")) (("1" (SIMPLIFY -1) (("1" (SIMPLIFY -3) (("1" (REPLACE -1 -3) (("1" (HIDE -1) (("1" (SIMPLIFY -3) (("1" (LEMMA "div_times" ("x" "2 * n - i" "n0x" "2 + i" "y" "1 - i + 2 * n" "n0y" "1 + i")) (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (NAME "K40" "((6 - 3 * i + 6 * n + (4 * (n * n) - 2 * (i * n) + 4 * n) +
         (-2 * (i * n) - 2 * i + i * i))
        / (i * i - i))") (("1" (REPLACE -1) (("1" (NAME "K41" "((2 * n - i) * (1 - i + 2 * n)) / ((2 + i) * (1 + i))") (("1" (REPLACE -1) (("1" (NAME "K42" "(3 - i + 2 * n) / (i - 1)") (("1" (REPLACE -1) (("1" (REPLACE -5 * RL) (("1" (REPLACE -6 * RL) (("1" (REPLACE -7 * RL) (("1" (CASE "-2 * (K40 * K35 + K35 + 2 * (K35 * K42)) -
        4 * ((K40 * K35 + K35 + 2 * (K35 * K42)) * n * n)
        - 6 * ((K40 * K35 + K35 + 2 * (K35 * K42)) * n) = (-1*K35)*(K40+1+2*K42)*(2+4*n*n+6*n)") (("1" (REPLACE -1 1) (("1" (CASE "-1 * (K41 * (K40 * K35) * i * i) - 2 * (K41 * (K40 * K35)) -
       2 * (K40 * K35)
       - 4 * (K40 * K35 * n)
       - 6 * (K40 * K35 * i)
       - 8 * (K40 * K35 * i * n)
       + 8 * (K35 * i * n)
       + 9 * (K35 * i)
       - 20 * K35
       - 36 * (K35 * n)
       + 2 * (K40 * K35 * i * i)
       - K35 * i * i
       - 16 * (K35 * n * n)
       - 3 * (i * (K41 * (K40 * K35))) = (-1*K35)*(K41*K40*(i+2)*(i+1) + K40*(2+4*n+6*i+8*i*n-2*i*i) + (20-8*i*n-9*i+36*n+i*i+16*n*n))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -2) (("1" (SIMPLIFY -3) (("1" (LEMMA "both_sides_times2" ("n0z" "(-1*K35)" "x" "(K41 * K40 * (i + 2) * (i + 1) +
         K40 * (2 + 4 * n + 6 * i + 8 * i * n - 2 * i * i)
         + (20 - 8 * i * n - 9 * i + 36 * n + i * i + 16 * n * n))" "y" "(K40 + 1 + 2 * K42) * (2 + 4 * n * n + 6 * n)")) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "K41 * K40 * (i + 2) * (i + 1) = K40*((2 * n - i) * (1 - i + 2 * n))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -3 -5 -6 -7 -8) (("1" (LEMMA "div_cancel3" ("x" "6 - 4 * (i * n) - 5 * i + i * i + 4 * (n * n) + 10 * n" "n0z" "i * i - i" "y" "K40")) (("1" (LEMMA "both_sides_times2" ("x" "K40 * ((2 * n - i) * (1 - i + 2 * n)) +
        K40 * (2 + 4 * n + 6 * i + 8 * i * n - 2 * i * i)
        + (20 - 8 * i * n - 9 * i + 36 * n + i * i + 16 * n * n)" "y" "(K40 + 1 + 2 * K42) * (2 + 4 * n * n + 6 * n)" "n0z" "i*(i-1)")) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (NAME-REPLACE "K50" "6 - 4 * (i * n) - 5 * i + i * i + 4 * (n * n) + 10 * n") (("1" (NAME-REPLACE "K51" "2 + 4 * n * n + 6 * n") (("1" (NAME-REPLACE "K52" "(2 * n - i) * (1 - i + 2 * n)") (("1" (NAME-REPLACE "K53" "2 + 4 * n + 6 * i + 8 * i * n - 2 * i * i") (("1" (NAME-REPLACE "K54" "20 - 8 * i * n - 9 * i + 36 * n + i * i + 16 * n * n") (("1" (CASE "i * (i - 1) * ((K40 + 1 + 2 * K42) * K51) = (K50+i*(i-1) + 2*(3-i+2*n)*i)*K51") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "i * (i - 1) * (K40 * K52 + K40 * K53 + K54) = K50*(K52+K53) + i*(i-1)*K54") (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (HIDE -1 -2 -3) (("1" (EXPAND "K52") (("1" (EXPAND "K54") (("1" (EXPAND "K53") (("1" (EXPAND "K51") (("1" (EXPAND "K50") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 -3) (("2" (REPLACE -3 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 -3) (("2" (REPLACE -3 1) (("2" (LEMMA "div_cancel1" ("x" "2 * (3 - i + 2 * n) * i" "n0z" "i-1")) (("2" (REPLACE -1 1 RL) (("2" (REPLACE -3 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (LEMMA "div_cancel1" ("x" "K40 * ((2 * n - i) * (1 - i + 2 * n))" "n0z" "(2 + i) * (1 + i)")) (("2" (REPLACE -1 1 RL) (("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 3) (("2" (SIMPLIFY 1) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 10) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "polynomial") (("2" (LEMMA "sigma_minus" ("low" "0" "high" "2+2*n" "F" "LAMBDA (i: nat): a!1(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)" "G" "LAMBDA (i: nat): b!1(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)")) (("2" (EXPAND "-") (("2" (REPLACE -1 1) (("2" (SIMPLIFY 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "polynomial") (("2" (LEMMA "sigma_sum" ("low" "0" "high" "2+2*n" "F" "LAMBDA (i: nat): a!1(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)" "G" "LAMBDA (i: nat): b!1(i) * (IF i = 0 THEN 1 ELSE x ^ i ENDIF)")) (("2" (REPLACE -1 1) (("2" (SIMPLIFY 1) (("2" (EXPAND "+") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "FS5") (("2" (EXPAND "FS2") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "*") (("2" (EXPAND "FS5") (("2" (EXPAND "FS2") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "atanF") (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (EXPAND "*") (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -6 1 RL) (("2" (REPLACE -8 1 RL) (("2" (EXPAND "atanF" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-7 1 2)) (("2" (REPLACE -1 1 RL) (("2" (SKOSIMP*) (("2" (HIDE -1) (("2" (EXPAND "atanF") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "scal_polynomial" ("y" "y!1" "a" "a!1" "n" "n!1")) (("2" (LEMMA "extensionality_postulate" ("f" "const_fun(y!1) * polynomial(a!1, n!1)" "g" "polynomial(const_fun(y!1) * a!1, n!1)")) (("2" (REPLACE -1 -2 RL) (("2" (HIDE -1) (("2" (INST - "x") (("2" (EXPAND "const_fun") (("2" (REPLACE -1 1 RL) (("2" (EXPAND "*") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "mul_x_to_n_polynomial" ("a" "a!1" "n" "n!1" "pn" "pn!1")) (("2" (LEMMA "extensionality_postulate" ("f" "(polynomial(a!1, n!1) * (LAMBDA (x: real): x ^ pn!1))" "g" "
       polynomial(LAMBDA (i: nat):
                 IF i < pn!1 THEN 0 ELSE a!1(i - pn!1) ENDIF,
               n!1 + pn!1)")) (("1" (REPLACE -1 -2 RL) (("1" (HIDE -1) (("1" (INST - "x") (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "*") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "prod_derivable_fun" ("f1" "LAMBDA (x:real):x*x" "f2" "deriv[real](atanN(n))")) (("2" (ASSERT) (("2" (EXPAND "*" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (LEMMA "diff_derivable_fun" ("f1" "deriv[real](atanN(n))" "f2" "LAMBDA (x: real):
                  2 * (x * atanN(n)(x)) + 4 * (x * atanN(n)(x) * n)")) (("3" (EXPAND "-" -1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_series_prep4| 0 (|atan_series_prep4-1| |nil| 3258293704 ("" (INDUCT "m") (("1" (SKOLEM 1 ("n")) (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("i")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("n")) (("2" (EXPAND "derivable_n_times?" 1) (("2" (EXPAND "derivable_n_times?" 1) (("2" (LEMMA "atan_taylors_prep8" ("n" "n")) (("2" (REPLACE -1 1) (("2" (INST - "n+1") (("2" (REPLACE -2 1) (("2" (LEMMA "atan_taylors_prep8_TCC2" ("n" "n")) (("2" (REPLACE -1 1) (("2" (LEMMA "atan_taylors_prep8_TCC3" ("n" "n")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "atan_taylors_prep8_TCC1" ("n" "n!1" "x1" "x1!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_taylors_prep8_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|atan_taylors_prep8_TCC3| SUBTYPE-TCC NIL |atan_integral| NIL) (|atan_taylors_prep8_TCC2| SUBTYPE-TCC NIL |atan_integral| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|atan_taylors_prep8| FORMULA-DECL NIL |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|atan_series_prep5_TCC1| 0 (|atan_series_prep5_TCC1-1| |nil| 3258304941 ("" (LEMMA "atan_series_prep4") (("" (PROPAX) NIL NIL)) NIL) ((|atan_series_prep4| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK (|atan_series_prep5| SUBTYPE "real_fun_ops[real]./(atan_integral.atanN(atan_integral.n), atan_integral.atanD(atan_integral.n))" "nderiv_fun[real](number_fields.*(2, atan_integral.m))"))) (|atan_series_prep5_TCC2| 0 (|atan_series_prep5_TCC2-1| |nil| 3258304866 ("" (SKOLEM 1 ("m" "n" "x")) (("" (EXPAND "atanD") (("" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1+2*m+2*n")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)) SHOSTAK (|atan_series_prep5| SUBTYPE "atan_integral.atanD((number_fields.+)(atan_integral.n, atan_integral.m))" "[real -> nzreal]"))) (|atan_series_prep5| 0 (|atan_series_prep5-1| |nil| 3258303869 ("" (INDUCT "m") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOLEM 1 ("j")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("n")) (("2" (EXPAND "nderiv" 1) (("2" (EXPAND "nderiv" 1) (("2" (INST - "1+n") (("2" (ASSERT) (("2" (REWRITE "atan_taylors_prep8") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOLEM 1 ("m" "n")) (("3" (SKOLEM 1 ("x")) (("3" (EXPAND "atanD") (("3" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1+2*m+2*n")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOLEM 1 ("m" "n")) (("4" (LEMMA "atan_series_prep4" ("n" "n" "m" "m")) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOLEM 1 ("n")) (("5" (SKOLEM 1 ("x")) (("5" (EXPAND "atanD") (("5" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1+2*n")) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_series_prep4| FORMULA-DECL NIL |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|atan_taylors_prep8| FORMULA-DECL NIL |atan_integral| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|atan_series_prep6| 0 (|atan_series_prep6-1| |nil| 3258304402 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_series_prep4" ("n" "0" "m" "n")) (("" (LEMMA "atan_series_prep5" ("n" "0" "m" "n")) (("" (EXPAND "atanD" -2) (("" (EXPAND "atanD" -1 1) (("" (EXPAND "atanN" -1 1) (("" (EXPAND "atanN" -2) (("" (EXPAND "polynomial") (("" (EXPAND "sigma") (("" (EXPAND "^") (("" (EXPAND "expt") (("" (EXPAND "expt") (("" (ASSERT) (("" (CASE "odd?(0)") (("1" (HIDE -2 -3 1) (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "/") (("2" (ASSERT) (("2" (EXPAND "atanF") (("2" (REWRITE "expt_x0") (("2" (REWRITE "C_0") (("2" (EXPAND "factorial") (("2" (REPLACE -1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_series_prep4| FORMULA-DECL NIL |atan_integral| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (^ CONST-DECL "real" |exponentiation| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|atanF| CONST-DECL "int" |atan_integral| NIL) (C_0 FORMULA-DECL NIL |binomial| |reals|) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sigma| DEF-DECL "real" |sigma| |reals|) (|atan_series_prep5| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK)) (|atan_nderiv_TCC1| 0 (|atan_nderiv_TCC1-1| |nil| 3260164462 ("" (SKOLEM 1 ("n")) (("" (CASE "n=0") (("1" (EXPAND "derivable_n_times?") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "derivable_n_times?") (("2" (ASSERT) (("2" (LEMMA "deriv_atan_fun") (("2" (FLATTEN) (("2" (REPLACE -2 2) (("2" (ASSERT) (("2" (HIDE -1 -2) (("2" (CASE "n=1") (("1" (REPLACE -1) (("1" (EXPAND "derivable_n_times?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "atan_series_prep6" ("n" "n")) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (LEMMA "derivable_n_times_lem" ("f" "(LAMBDA (x: real): 1 / (1 + x * x))" "m" "n-1" "n" "2*n")) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|derivable_n_times_lem| FORMULA-DECL NIL |nth_derivatives| |analysis|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|atan_series_prep6| FORMULA-DECL NIL |atan_integral| NIL) (|deriv_atan_fun| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK (|atan_nderiv| SUBTYPE "atan_integral.atan" "nderiv_fun[real](atan_integral.n)"))) (|atan_nderiv_TCC2| 0 (|atan_nderiv_TCC2-1| |nil| 3260164836 ("" (SKOLEM 1 ("n")) (("" (FLATTEN) (("" (EXPAND "even?") (("" (SKOSIMP*) (("" (TYPEPRED "n") (("" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("" (REPLACE -3) (("" (REPLACE -1) (("" (ASSERT) (("" (ASSERT :FLUSH? T) (("" (TYPEPRED "n") (("" (LEMMA "pos_times_ge") (("" (INST -1 "2" "j!1") (("" (REPLACE -4) (("" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT :FLUSH? T) (("2" (CASE-REPLACE "j!1 = 0") (("1" (ASSERT :FLUSH? T) NIL NIL) ("2" (ASSERT :FLUSH? T) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|pos_times_ge| FORMULA-DECL NIL |real_props| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|even?| CONST-DECL "bool" |integers| NIL)) SHOSTAK (|atan_nderiv| SUBTYPE "(number_fields.-)(number_fields./(atan_integral.n, 2), 1)" "nat"))) (|atan_nderiv_TCC3| 0 (|atan_nderiv_TCC3-1| |nil| 3260164922 ("" (SKOSIMP*) (("" (EXPAND "even?") (("" (SKOSIMP*) (("" (TYPEPRED "n!1") (("" (CASE "j!1>=1") (("1" (REPLACE -3) (("1" (HIDE -3 1 -2) (("1" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("1" (REPLACE -1) (("1" (LEMMA "atan_taylors_prep3" ("n" "j!1-1" "m" "1")) (("1" (FLATTEN) (("1" (EXPAND "derivable_n_times?") (("1" (FLATTEN -1) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND ">=" -1) (("2" (EXPAND "<=" -1) (("2" (SPLIT -1) (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even?| CONST-DECL "bool" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)) SHOSTAK (|atan_nderiv| SUBTYPE "atan_integral.atanN((number_fields.-)(number_fields./(atan_integral.n, 2), 1))" "deriv_fun[real]"))) (|atan_nderiv_TCC4| 0 (|atan_nderiv_TCC4-1| |nil| 3260165112 ("" (EXPAND "even?") (("" (SKOSIMP*) (("" (EXPAND "atanD") (("" (REPLACE -1) (("" (REPLACE -1 * RL) (("" (LEMMA "expt_pos" ("px" "1+x1!1*x1!1" "i" "n!1")) (("" (EXPAND "*" -3) (("" (LEMMA "expt_plus" ("n0x" "1+x1!1*x1!1" "i" "1" "j" "n!1-1")) (("1" (REWRITE "expt_x1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "sq_pos" ("a" "x1!1")) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_nderiv| SUBTYPE "(real_fun_ops[real].*(atan_integral.atanD((number_fields.-)(number_fields./(atan_integral.n, 2), 1)), (LAMBDA (x: reals.real): ((number_fields.+)(1, number_fields.*(x, x))))))" "[real -> nzreal]"))) (|atan_nderiv_TCC5| 0 (|atan_nderiv_TCC5-2| "" 3790092741 ("" (SKOLEM 1 ("n")) (("" (REWRITE "even_or_odd") (("" (FLATTEN) (("" (EXPAND "odd?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)) SHOSTAK (|atan_nderiv| SUBTYPE "number_fields./(((number_fields.-)(atan_integral.n, 1)), 2)" "nat")) (|atan_nderiv_TCC5-1| |nil| 3260165355 ("" (SKOLEM 1 ("n")) (("" (REWRITE "even_or_odd") (("" (FLATTEN) (("" (EXPAND "odd?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("" (REPLACE -1) (("" (ASSERT) (("" (TYPEPRED "n") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK (|atan_nderiv| SUBTYPE "number_fields./(((number_fields.-)(atan_integral.n, 1)), 2)" "nat"))) (|atan_nderiv_TCC6| 0 (|atan_nderiv_TCC6-1| |nil| 3260165510 ("" (SKOLEM 1 ("n")) (("" (REWRITE "even_or_odd") (("" (FLATTEN) (("" (EXPAND "odd?") (("" (SKOSIMP*) (("" (REPLACE -1) (("" (LEMMA "div_cancel1" ("x" "j!1" "n0z" "2")) (("" (REPLACE -1) (("" (EXPAND "atanD") (("" (LEMMA "expt_pos" ("px" "1+x1!1*x1!1" "i" "1+2*j!1")) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)) SHOSTAK (|atan_nderiv| SUBTYPE "atan_integral.atanD(number_fields./(((number_fields.-)(atan_integral.n, 1)), 2))" "[real -> nzreal]"))) (|atan_nderiv| 0 (|atan_nderiv-2| |nil| 3445345492 ("" (SKOLEM 1 ("n")) (("" (TYPEPRED "n") (("" (EXPAND ">=" -1) (("" (EXPAND "<=" -1) (("" (SPLIT -1) (("1" (CASE "even?(n)") (("1" (ASSERT) (("1" (EXPAND "even?") (("1" (SKOLEM -1 ("j")) (("1" (REPLACE -1) (("1" (LEMMA "atan_series_prep6" ("n" "j-1")) (("1" (FLATTEN) (("1" (EXPAND "nderiv" 1) (("1" (ASSERT) (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (REPLACE -2 1) (("1" (CASE "FORALL (f:[real->real],n:nat): derivable_n_times?(f, n+1) => nderiv(n+1,f) = deriv(nderiv(n,f))") (("1" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("1" (REPLACE -1) (("1" (REPLACE -4 1 RL) (("1" (CASE "n= 2*j => even?(n)") (("1" (CASE "n=1") (("1" (REPLACE -1) (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "n>1") (("1" (INST - "LAMBDA (x: real): 1 / (1 + x * x)" "n-2") (("1" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (REPLACE -8) (("1" (REPLACE -11) (("1" (LEMMA "derivable_n_times_lem" ("f" "LAMBDA (x: real): 1 / (1 + x * x)" "n" "2*j" "m" "2*j-1")) (("1" (ASSERT) (("1" (REPLACE -11 -7) (("1" (REPLACE -7 2) (("1" (LEMMA "atan_taylors_prep4_TCC1" ("n" "j-1")) (("1" (LEMMA "atan_taylors_prep5_TCC1" ("n" "j-1")) (("1" (LEMMA "deriv_div_fun[real]" ("ff" "atanN(j - 1)" "gg" "atanD(j - 1)")) (("1" (REPLACE -1 2) (("1" (LEMMA "extensionality_postulate" ("f" "(deriv(atanN(j - 1)) * atanD(j - 1) -
                                                      deriv(atanD(j - 1)) * atanN(j - 1))
                                                     / (atanD(j - 1) * atanD(j - 1))" "g" "(deriv(atanN(j - 1)) * (LAMBDA (x: real): (1 + x * x)) -
                                                       atanN(j - 1) * (LAMBDA (x: real): 4 * (x * j) - 2 * x))
                                                      / (atanD(j - 1) * (LAMBDA (x: real): (1 + x * x)))")) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1 -2 -11 -7 -9 -13 -12 -15) (("1" (SKOLEM 2 ("z")) (("1" (EXPAND "/" 2) (("1" (EXPAND "-" 2) (("1" (EXPAND "*" 2) (("1" (LEMMA "cross_mult" ("x" "(deriv(atanN(j - 1))(z) * atanD(j - 1)(z) -
                                                        deriv(atanD(j - 1))(z) * atanN(j - 1)(z))" "n0x" "atanD(j - 1)(z) * atanD(j - 1)(z)" "y" "(deriv(atanN(j - 1))(z) + 2 * (atanN(j - 1)(z) * z) -
                                                         4 * (atanN(j - 1)(z) * j * z)
                                                         + deriv(atanN(j - 1))(z) * z * z)" "n0y" "(atanD(j - 1)(z) + atanD(j - 1)(z) * z * z)")) (("1" (REPLACE -1 2) (("1" (HIDE -1) (("1" (NAME-REPLACE "dD" "deriv(atanN(j - 1))") (("1" (NAME-REPLACE "N" "atanN(j - 1)") (("1" (LEMMA "atan_taylors_prep5" ("n" "j-1")) (("1" (REPLACE -1 2) (("1" (SIMPLIFY 2) (("1" (EXPAND "atanD" 2) (("1" (LEMMA "expt_plus" ("n0x" "1+z*z" "i" "1" "j" "2*j-2")) (("1" (HIDE-ALL-BUT (-11 -7 1 2 -1)) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "sq_pos" ("a" "z")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (GRIND) (("2" (HIDE-ALL-BUT (-5 1)) (("2" (GRIND) (("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOLEM 1 ("x")) (("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1")) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "even?") (("2" (INST + "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (SKOLEM 1 ("f")) (("1" (FLATTEN) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("i")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("f")) (("2" (FLATTEN) (("2" (EXPAND "nderiv" 1) (("2" (INST - "deriv(f)") (("2" (EXPAND "derivable_n_times?" -2) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable" ("m" "n!2" "n" "n!2" "f" "f!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem" ("f" "f!1" "n" "1+n!2" "m" "n!2")) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable" ("m" "n!1" "n" "n!1" "f" "f!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem" ("f" "f!1" "n" "1+n!1" "m" "n!1")) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOLEM -1 ("j")) (("2" (REPLACE -1) (("2" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("2" (REPLACE -1) (("2" (LEMMA "deriv_atan_fun") (("2" (FLATTEN) (("2" (EXPAND "nderiv") (("2" (REPLACE -2 1) (("2" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (EXPAND "nderiv") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|derivable_n_times_lem| FORMULA-DECL NIL |nth_derivatives| |analysis|) (|atan_taylors_prep4_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (|atan_taylors_prep5| FORMULA-DECL NIL |atan_integral| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|cross_mult| FORMULA-DECL NIL |real_props| NIL) (|atan_taylors_prep5_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|atan_taylors_prep8_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|n| SKOLEM-CONST-DECL "nat" |atan_integral| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nderiv_derivable| FORMULA-DECL NIL |nth_derivatives| |analysis|) (|deriv_atan_fun| FORMULA-DECL NIL |atan_integral| NIL) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|atan_series_prep6| FORMULA-DECL NIL |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL)) NIL) (|atan_nderiv-1| |nil| 3260170908 ("" (SKOLEM 1 ("n")) (("" (TYPEPRED "n") (("" (EXPAND ">=" -1) (("" (EXPAND "<=" -1) (("" (SPLIT -1) (("1" (CASE "even?(n)") (("1" (ASSERT) (("1" (EXPAND "even?") (("1" (SKOLEM -1 ("j")) (("1" (REPLACE -1) (("1" (LEMMA "atan_series_prep6" ("n" "j-1")) (("1" (FLATTEN) (("1" (EXPAND "nderiv" 1) (("1" (ASSERT) (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (REPLACE -2 1) (("1" (CASE "FORALL (f:[real->real],n:nat): derivable_n_times(f, n+1) => nderiv(n+1,f) = deriv(nderiv(n,f))") (("1" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("1" (REPLACE -1) (("1" (REPLACE -4 1 RL) (("1" (CASE "n= 2*j => even?(n)") (("1" (CASE "n=1") (("1" (REPLACE -1) (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (CASE "n>1") (("1" (INST - "LAMBDA (x: real): 1 / (1 + x * x)" "n-2") (("1" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (REPLACE -8) (("1" (REPLACE -11) (("1" (LEMMA "derivable_n_times_lem" ("f" "LAMBDA (x: real): 1 / (1 + x * x)" "n" "2*j" "m" "2*j-1")) (("1" (ASSERT) (("1" (REPLACE -11 -7) (("1" (REPLACE -7 2) (("1" (LEMMA "atan_taylors_prep4_TCC1" ("n" "j-1")) (("1" (LEMMA "atan_taylors_prep5_TCC1" ("n" "j-1")) (("1" (LEMMA "deriv_div_fun[real]" ("ff" "atanN(j - 1)" "gg" "atanD(j - 1)")) (("1" (REPLACE -1 2) (("1" (LEMMA "extensionality_postulate" ("f" "(deriv(atanN(j - 1)) * atanD(j - 1) -
                               deriv(atanD(j - 1)) * atanN(j - 1))
                              / (atanD(j - 1) * atanD(j - 1))" "g" "(deriv(atanN(j - 1)) * (LAMBDA (x: real): (1 + x * x)) -
                                atanN(j - 1) * (LAMBDA (x: real): 4 * (x * j) - 2 * x))
                               / (atanD(j - 1) * (LAMBDA (x: real): (1 + x * x)))")) (("1" (REPLACE -1 2 RL) (("1" (HIDE -1 -2 -11 -7 -9 -13 -12 -15) (("1" (SKOLEM 2 ("z")) (("1" (EXPAND "/" 2) (("1" (EXPAND "-" 2) (("1" (EXPAND "*" 2) (("1" (LEMMA "cross_mult" ("x" "(deriv(atanN(j - 1))(z) * atanD(j - 1)(z) -
                                 deriv(atanD(j - 1))(z) * atanN(j - 1)(z))" "n0x" "atanD(j - 1)(z) * atanD(j - 1)(z)" "y" "(deriv(atanN(j - 1))(z) + 2 * (atanN(j - 1)(z) * z) -
                                  4 * (atanN(j - 1)(z) * j * z)
                                  + deriv(atanN(j - 1))(z) * z * z)" "n0y" "(atanD(j - 1)(z) + atanD(j - 1)(z) * z * z)")) (("1" (REPLACE -1 2) (("1" (HIDE -1) (("1" (NAME-REPLACE "dD" "deriv(atanN(j - 1))") (("1" (NAME-REPLACE "N" "atanN(j - 1)") (("1" (LEMMA "atan_taylors_prep5" ("n" "j-1")) (("1" (REPLACE -1 2) (("1" (SIMPLIFY 2) (("1" (EXPAND "atanD" 2) (("1" (LEMMA "expt_plus" ("n0x" "1+z*z" "i" "1" "j" "2*j-2")) (("1" (HIDE-ALL-BUT (-11 -7 1 2 -1)) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "sq_pos" ("a" "z")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (GRIND) (("2" (HIDE-ALL-BUT (-5 1)) (("2" (GRIND) (("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKOLEM 1 ("x")) (("3" (HIDE-ALL-BUT 1) (("3" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1")) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (FLATTEN) (("2" (EXPAND "even?") (("2" (INST + "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (SKOLEM 1 ("f")) (("1" (FLATTEN) (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("i")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("f")) (("2" (FLATTEN) (("2" (EXPAND "nderiv" 1) (("2" (INST - "deriv(f)") (("2" (EXPAND "derivable_n_times" -2) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable" ("m" "n!2" "n" "n!2" "f" "f!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem" ("f" "f!1" "n" "1+n!2" "m" "n!2")) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable" ("m" "n!1" "n" "n!1" "f" "f!1")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem" ("f" "f!1" "n" "1+n!1" "m" "n!1")) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "even_or_odd") (("2" (EXPAND "odd?") (("2" (SKOLEM -1 ("j")) (("2" (REPLACE -1) (("2" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("2" (REPLACE -1) (("2" (LEMMA "deriv_atan_fun") (("2" (FLATTEN) (("2" (EXPAND "nderiv") (("2" (REPLACE -2 1) (("2" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (EXPAND "nderiv") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_nderiv_0_TCC1| 0 (|atan_nderiv_0_TCC1-1| |nil| 3258055493 ("" (SKOLEM 1 ("n")) (("" (REWRITE "even_or_odd") (("" (FLATTEN) (("" (EXPAND "odd?") (("" (SKOLEM -1 ("j")) (("" (REPLACE -1) (("" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("" (REPLACE -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)) SHOSTAK (|atan_nderiv_0| SUBTYPE "(number_fields./(((number_fields.-)(atan_integral.n, 1)), 2))" "{i: integers.int | booleans.TRUE}"))) (|atan_nderiv_0_TCC2| 0 (|atan_nderiv_0_TCC2-1| |nil| 3258055983 ("" (SKOSIMP*) (("" (TYPEPRED "n!1") (("" (REWRITE "even_or_odd") (("" (EXPAND "odd?") (("" (SKOSIMP*) (("" (REPLACE -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL)) SHOSTAK (|atan_nderiv_0| SUBTYPE "(number_fields.-)(atan_integral.n, 1)" "nat"))) (|atan_nderiv_0| 0 (|atan_nderiv_0-4| "" 3790092752 ("" (SKOLEM 1 ("n")) (("" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "nderiv") (("1" (REWRITE "atan_0") NIL NIL)) NIL)) NIL) ("2" (CASE "n>0") (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (EXPAND "nderiv" 2) (("1" (REPLACE -2 2) (("1" (ASSERT) (("1" (CASE "even?(n)") (("1" (ASSERT) (("1" (EXPAND "even?" -1) (("1" (SKOLEM -1 ("j")) (("1" (CASE "j=0") (("1" (ASSERT) NIL NIL) ("2" (CASE "j>0") (("1" (REPLACE -2) (("1" (HIDE -2 1 2 -3 -4 -5) (("1" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (LEMMA "atan_series_prep6" ("n" "j-1")) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (NAME-REPLACE "F" "LAMBDA (x: real): 1 / (1 + x * x)") (("1" (CASE "FORALL (f:[real->real],n:nat): derivable_n_times?(f, n+1) IMPLIES
                                                                             nderiv(n+1,f) = deriv(nderiv(n,f))") (("1" (INST - "F" "2*(j-1)") (("1" (LEMMA "derivable_n_times_lem" ("f" "F" "m" "2*j-1" "n" "2*j")) (("1" (ASSERT) (("1" (REPLACE -3 -2) (("1" (REPLACE -2 1) (("1" (HIDE -1 -2 -3 -4) (("1" (EXPAND "/" 1) (("1" (LEMMA "atan_taylors_prep3" ("n" "j-1" "m" "1")) (("1" (EXPAND "derivable_n_times?") (("1" (EXPAND "derivable_n_times?") (("1" (FLATTEN -1) (("1" (LEMMA "atan_taylors_prep4" ("n" "j-1")) (("1" (LEMMA "atan_taylors_prep5" ("n" "j-1")) (("1" (LEMMA "div_derivable_fun[real]" ("f" "atanN(j - 1)" "g" "atanD(j - 1)")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun[real]" ("ff" "atanN(j - 1)" "gg" "atanD(j - 1)")) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -1) (("1" (EXPAND "/" -1 1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "j = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "const_fun" 1) (("1" (EXPAND "/") (("1" (EXPAND "*") (("1" (EXPAND "-" 1) (("1" (EXPAND "atanD") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j>1") (("1" (HIDE -7 1) (("1" (ASSERT) (("1" (EXPAND "/" 1) (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "polynomial_x0" ("a" "LAMBDA (i: nat): atanF(j - 1)(1 + i) + i * atanF(j - 1)(1 + i)" "n" "2 * j - 3")) (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (EXPAND "atanD" 1) (("1" (REWRITE "expt_1i" 1) (("1" (EXPAND "atanF" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("k")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("G")) (("2" (FLATTEN) (("2" (EXPAND "nderiv" 1) (("2" (INST - "deriv(G)") (("2" (EXPAND "derivable_n_times?" -2) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable[real]") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem") (("4" (INST - "f!1" "n!2" "n!2+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable") (("3" (INST?) (("3" (INST - "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -2 -3 2) (("4" (LEMMA "derivable_n_times_lem") (("4" (INST - "f!1" "n!1" "n!1+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "sq_pos" ("a" "x")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "even_or_odd" 1) (("2" (EXPAND "odd?" -1) (("2" (SKOLEM -1 ("j")) (("2" (REPLACE -1) (("2" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (REPLACE -2 2) (("1" (EXPAND "/" 2) (("1" (EXPAND "atanD" 2) (("1" (REWRITE "expt_1i" 2) (("1" (EXPAND "atanN" 2) (("1" (LEMMA "polynomial_x0" ("a" "atanF(j)" "n" "2*j")) (("1" (REPLACE -1 2) (("1" (EXPAND "atanF" 2) (("1" (REWRITE "C_0" 2) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("1" (REPLACE -1 2) (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|atan_0| FORMULA-DECL NIL |atan_integral| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|deriv_atan_fun| FORMULA-DECL NIL |atan_integral| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (C_0 FORMULA-DECL NIL |binomial| |reals|) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|derivable_n_times_lem| FORMULA-DECL NIL |nth_derivatives| |analysis|) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|atan_taylors_prep3| FORMULA-DECL NIL |atan_integral| NIL) (|atan_taylors_prep4| FORMULA-DECL NIL |atan_integral| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|div_derivable_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|nz_deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv_div_fun| FORMULA-DECL NIL |derivatives| |analysis|) (|constant_seq1| APPLICATION-JUDGEMENT "(convergent?)" |convergence_ops| |analysis|) (|derivable_const| APPLICATION-JUDGEMENT "deriv_fun" |derivatives| |analysis|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|const_fun| CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|polynomial_x0| FORMULA-DECL NIL |polynomials| |reals|) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|atanF| CONST-DECL "int" |atan_integral| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_taylors_prep8_TCC1| SUBTYPE-TCC NIL |atan_integral| NIL) (|atan_taylors_prep5| FORMULA-DECL NIL |atan_integral| NIL) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|j| SKOLEM-CONST-DECL "int" |atan_integral| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nderiv_derivable| FORMULA-DECL NIL |nth_derivatives| |analysis|) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|atan_series_prep6| FORMULA-DECL NIL |atan_integral| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (> CONST-DECL "bool" |reals| NIL)) SHOSTAK) (|atan_nderiv_0-3| |nil| 3445345552 ("" (SKOLEM 1 ("n")) (("" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "nderiv") (("1" (REWRITE "atan_0") NIL NIL)) NIL)) NIL) ("2" (CASE "n>0") (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (EXPAND "nderiv" 2) (("1" (REPLACE -2 2) (("1" (ASSERT) (("1" (CASE "even?(n)") (("1" (ASSERT) (("1" (EXPAND "even?" -1) (("1" (SKOLEM -1 ("j")) (("1" (CASE "j=0") (("1" (ASSERT) NIL NIL) ("2" (CASE "j>0") (("1" (REPLACE -2) (("1" (HIDE -2 1 2 -3 -4 -5) (("1" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (LEMMA "atan_series_prep6" ("n" "j-1")) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (NAME-REPLACE "F" "LAMBDA (x: real): 1 / (1 + x * x)") (("1" (CASE "FORALL (f:[real->real],n:nat): derivable_n_times?(f, n+1) IMPLIES
                                                                             nderiv(n+1,f) = deriv(nderiv(n,f))") (("1" (INST - "F" "2*(j-1)") (("1" (LEMMA "derivable_n_times_lem" ("f" "F" "m" "2*j-1" "n" "2*j")) (("1" (ASSERT) (("1" (REPLACE -3 -2) (("1" (REPLACE -2 1) (("1" (HIDE -1 -2 -3 -4) (("1" (EXPAND "/" 1) (("1" (LEMMA "atan_taylors_prep3" ("n" "j-1" "m" "1")) (("1" (EXPAND "derivable_n_times?") (("1" (EXPAND "derivable_n_times?") (("1" (FLATTEN -1) (("1" (LEMMA "atan_taylors_prep4" ("n" "j-1")) (("1" (LEMMA "atan_taylors_prep5" ("n" "j-1")) (("1" (LEMMA "div_derivable_fun[real]" ("f" "atanN(j - 1)" "g" "atanD(j - 1)")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun[real]" ("ff" "atanN(j - 1)" "gg" "atanD(j - 1)")) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -1) (("1" (EXPAND "/" -1 1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "j = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "const_fun" 1) (("1" (EXPAND "/") (("1" (EXPAND "*") (("1" (EXPAND "-" 1) (("1" (EXPAND "atanD") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j>1") (("1" (HIDE -7 1) (("1" (ASSERT) (("1" (EXPAND "/" 1) (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "polynomial_x0" ("a" "LAMBDA (i: nat): atanF(j - 1)(1 + i) + i * atanF(j - 1)(1 + i)" "n" "2 * j - 3")) (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (EXPAND "atanD" 1) (("1" (REWRITE "expt_1i" 1) (("1" (EXPAND "atanF" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("k")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("G")) (("2" (FLATTEN) (("2" (EXPAND "nderiv" 1) (("2" (INST - "deriv(G)") (("2" (EXPAND "derivable_n_times?" -2) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable[real]") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem") (("4" (INST - "f!1" "n!2" "n!2+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable") (("3" (INST?) (("3" (INST - "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -2 -3 2) (("4" (LEMMA "derivable_n_times_lem") (("4" (INST - "f!1" "n!1" "n!1+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "sq_pos" ("a" "x")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "even_or_odd" 1) (("2" (EXPAND "odd?" -1) (("2" (SKOLEM -1 ("j")) (("2" (REPLACE -1) (("2" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (REPLACE -2 2) (("1" (EXPAND "/" 2) (("1" (EXPAND "atanD" 2) (("1" (REWRITE "expt_1i" 2) (("1" (EXPAND "atanN" 2) (("1" (LEMMA "polynomial_x0" ("a" "atanF(j)" "n" "2*j")) (("1" (REPLACE -1 2) (("1" (EXPAND "atanF" 2) (("1" (REWRITE "C_0" 2) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("1" (REPLACE -1 2) (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|atan_nderiv_0-2| |nil| 3352183829 ("" (SKOLEM 1 ("n")) (("" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "nderiv") (("1" (REWRITE "atan_0") NIL NIL)) NIL)) NIL) ("2" (CASE "n>0") (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (EXPAND "nderiv" 2) (("1" (REPLACE -2 2) (("1" (ASSERT) (("1" (CASE "even?(n)") (("1" (ASSERT) (("1" (EXPAND "even?" -1) (("1" (SKOLEM -1 ("j")) (("1" (CASE "j=0") (("1" (ASSERT) NIL NIL) ("2" (CASE "j>0") (("1" (REPLACE -2) (("1" (HIDE -2 1 2 -3 -4 -5) (("1" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (LEMMA "atan_series_prep6" ("n" "j-1")) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (NAME-REPLACE "F" "LAMBDA (x: real): 1 / (1 + x * x)") (("1" (CASE "FORALL (f:[real->real],n:nat): derivable_n_times(f, n+1) IMPLIES
                                                      nderiv(n+1,f) = deriv(nderiv(n,f))") (("1" (INST - "F" "2*(j-1)") (("1" (LEMMA "derivable_n_times_lem" ("f" "F" "m" "2*j-1" "n" "2*j")) (("1" (ASSERT) (("1" (REPLACE -3 -2) (("1" (REPLACE -2 1) (("1" (HIDE -1 -2 -3 -4) (("1" (EXPAND "/" 1) (("1" (LEMMA "atan_taylors_prep3" ("n" "j-1" "m" "1")) (("1" (EXPAND "derivable_n_times") (("1" (EXPAND "derivable_n_times") (("1" (FLATTEN -1) (("1" (LEMMA "atan_taylors_prep4" ("n" "j-1")) (("1" (LEMMA "atan_taylors_prep5" ("n" "j-1")) (("1" (LEMMA "div_derivable_fun[real]" ("f" "atanN(j - 1)" "g" "atanD(j - 1)")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun[real]" ("ff" "atanN(j - 1)" "gg" "atanD(j - 1)")) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -1) (("1" (EXPAND "/" -1 1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "j = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "const_fun" 1) (("1" (EXPAND "/") (("1" (EXPAND "*") (("1" (EXPAND "-" 1) (("1" (EXPAND "atanD") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j>1") (("1" (HIDE -7 1) (("1" (ASSERT) (("1" (EXPAND "/" 1) (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "polynomial_x0" ("a" "LAMBDA (i: nat): atanF(j - 1)(1 + i) + i * atanF(j - 1)(1 + i)" "n" "2 * j - 3")) (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (EXPAND "atanD" 1) (("1" (REWRITE "expt_1i" 1) (("1" (EXPAND "atanF" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("k")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("G")) (("2" (FLATTEN) (("2" (EXPAND "nderiv" 1) (("2" (INST - "deriv(G)") (("2" (EXPAND "derivable_n_times" -2) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable[real]") (("3" (INST?) (("3" (ASSERT) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (LEMMA "derivable_n_times_lem") (("4" (INST - "f!1" "n!2" "n!2+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "nderiv_derivable") (("3" (INST?) (("3" (INST - "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (HIDE -2 -3 2) (("4" (LEMMA "derivable_n_times_lem") (("4" (INST - "f!1" "n!1" "n!1+1") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKOSIMP*) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "sq_pos" ("a" "x")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "even_or_odd" 1) (("2" (EXPAND "odd?" -1) (("2" (SKOLEM -1 ("j")) (("2" (REPLACE -1) (("2" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (REPLACE -2 2) (("1" (EXPAND "/" 2) (("1" (EXPAND "atanD" 2) (("1" (REWRITE "expt_1i" 2) (("1" (EXPAND "atanN" 2) (("1" (LEMMA "polynomial_x0" ("a" "atanF(j)" "n" "2*j")) (("1" (REPLACE -1 2) (("1" (EXPAND "atanF" 2) (("1" (REWRITE "C_0" 2) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("1" (REPLACE -1 2) (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) NIL) (|atan_nderiv_0-1| |nil| 3258056357 ("" (SKOLEM 1 ("n")) (("" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "nderiv") (("1" (REWRITE "atan_0") NIL NIL)) NIL)) NIL) ("2" (CASE "n>0") (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (EXPAND "nderiv" 2) (("1" (REPLACE -2 2) (("1" (ASSERT) (("1" (CASE "even?(n)") (("1" (ASSERT) (("1" (EXPAND "even?" -1) (("1" (SKOLEM -1 ("j")) (("1" (CASE "j=0") (("1" (ASSERT) NIL NIL) ("2" (CASE "j>0") (("1" (REPLACE -2) (("1" (HIDE -2 1 2 -3 -4 -5) (("1" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (HIDE -2) (("1" (LEMMA "atan_series_prep6" ("n" "j-1")) (("1" (FLATTEN -1) (("1" (HIDE -1) (("1" (NAME-REPLACE "F" "LAMBDA (x: real): 1 / (1 + x * x)") (("1" (CASE "FORALL (f:[real->real],n:nat): derivable_n_times(f, n+1) IMPLIES
                               nderiv(n+1,f) = deriv(nderiv(n,f))") (("1" (INST - "F" "2*(j-1)") (("1" (LEMMA "derivable_n_times_lem" ("f" "F" "m" "2*j-1" "n" "2*j")) (("1" (ASSERT) (("1" (REPLACE -3 -2) (("1" (REPLACE -2 1) (("1" (HIDE -1 -2 -3 -4) (("1" (EXPAND "/" 1) (("1" (LEMMA "atan_taylors_prep3" ("n" "j-1" "m" "1")) (("1" (EXPAND "derivable_n_times") (("1" (EXPAND "derivable_n_times") (("1" (FLATTEN -1) (("1" (LEMMA "atan_taylors_prep4" ("n" "j-1")) (("1" (LEMMA "atan_taylors_prep5" ("n" "j-1")) (("1" (LEMMA "div_derivable_fun" ("f" "atanN(j - 1)" "g" "atanD(j - 1)")) (("1" (ASSERT) (("1" (LEMMA "deriv_div_fun" ("ff" "atanN(j - 1)" "gg" "atanD(j - 1)")) (("1" (REPLACE -3 -1) (("1" (REPLACE -4 -1) (("1" (EXPAND "/" -1 1) (("1" (REPLACE -1 1) (("1" (HIDE -1) (("1" (CASE "j = 1") (("1" (REPLACE -1) (("1" (ASSERT) (("1" (EXPAND "const_fun" 1) (("1" (EXPAND "/") (("1" (EXPAND "*") (("1" (EXPAND "-" 1) (("1" (EXPAND "atanD") (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j>1") (("1" (HIDE -7 1) (("1" (ASSERT) (("1" (EXPAND "/" 1) (("1" (EXPAND "-") (("1" (EXPAND "*") (("1" (LEMMA "polynomial_x0" ("a" "LAMBDA (i: nat): atanF(j - 1)(1 + i) + i * atanF(j - 1)(1 + i)" "n" "2 * j - 3")) (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (EXPAND "atanD" 1) (("1" (REWRITE "expt_1i" 1) (("1" (EXPAND "atanF" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_taylors_prep8_TCC1" ("n" "j-1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (EXPAND "nderiv") (("1" (EXPAND "nderiv") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("k")) (("2" (FLATTEN) (("2" (SKOLEM 1 ("G")) (("2" (FLATTEN) (("2" (EXPAND "nderiv" 1) (("2" (INST - "deriv(G)") (("1" (EXPAND "derivable_n_times" -2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "derivable_n_times" -1) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOLEM 1 ("G" "N")) (("3" (FLATTEN) (("3" (LEMMA "nderiv_derivable" ("m" "N" "n" "N" "f" "G")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOLEM 1 ("G" "N")) (("4" (LEMMA "derivable_n_times_lem" ("m" "N" "n" "1+N" "f" "G")) (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKOLEM 1 ("G" "N")) (("3" (FLATTEN) (("3" (LEMMA "nderiv_derivable" ("m" "N" "n" "N" "f" "G")) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("G" "N")) (("4" (FLATTEN) (("4" (LEMMA "derivable_n_times_lem" ("f" "G" "n" "1+N" "m" "N")) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKOLEM 1 ("G" "N")) (("5" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOLEM 1 ("x")) (("2" (LEMMA "sq_pos" ("a" "x")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REWRITE "even_or_odd" 1) (("2" (EXPAND "odd?" -1) (("2" (SKOLEM -1 ("j")) (("2" (REPLACE -1) (("2" (LEMMA "atan_series_prep6" ("n" "j")) (("1" (FLATTEN -1) (("1" (REPLACE -2 2) (("1" (EXPAND "/" 2) (("1" (EXPAND "atanD" 2) (("1" (REWRITE "expt_1i" 2) (("1" (EXPAND "atanN" 2) (("1" (LEMMA "polynomial_x0" ("a" "atanF(j)" "n" "2*j")) (("1" (REPLACE -1 2) (("1" (EXPAND "atanF" 2) (("1" (REWRITE "C_0" 2) (("1" (ASSERT) (("1" (LEMMA "div_cancel1" ("x" "j" "n0z" "2")) (("1" (REPLACE -1 2) (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_n_times_derivable| 0 (|atan_n_times_derivable-1| |nil| 3258436783 ("" (SKOLEM 1 ("n")) (("" (LEMMA "trichotomy" ("x" "n")) (("" (SPLIT -1) (("1" (LEMMA "deriv_atan_fun") (("1" (FLATTEN) (("1" (EXPAND "derivable_n_times?" 1) (("1" (ASSERT) (("1" (REPLACE -2 1) (("1" (LEMMA "trichotomy" ("x" "n-1")) (("1" (SPLIT -1) (("1" (LEMMA "atan_series_prep6" ("n" "n")) (("1" (FLATTEN) (("1" (LEMMA "derivable_n_times_lem" ("f" "LAMBDA (x: real): 1 / (1 + x * x)" "n" "2*n" "m" "n-1")) (("1" (ASSERT) NIL NIL) ("2" (SKOSIMP*) (("2" (HIDE-ALL-BUT -1) (("2" (LEMMA "sq_pos" ("a" "x!1")) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "derivable_n_times?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "derivable_n_times?") (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|deriv_atan_fun| FORMULA-DECL NIL |atan_integral| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|derivable_n_times_lem| FORMULA-DECL NIL |nth_derivatives| |analysis|) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|atan_series_prep6| FORMULA-DECL NIL |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL)) SHOSTAK)) (|atan_series_prep7| 0 (|atan_series_prep7-1| |nil| 3259682899 ("" (SKOLEM 1 ("n" "x")) (("" (LEMMA "atan_taylors_prep2" ("n" "n")) (("" (LEMMA "atan_taylors_prep1" ("n" "n" "x" "x")) (("" (REPLACE -2 1 RL) (("" (EXPAND "*" 1) (("" (REWRITE "abs_mult" 1) (("" (REWRITE "abs_mult" 1) (("" (EXPAND "abs" 1 1) (("" (LEMMA "both_sides_times_pos_le1" ("x" "abs(atanS(n)(x))" "pz" "factorial(2 * n)" "y" "(1 + x * x) ^ (1 + 2 * n)")) (("" (HIDE -3 -1) (("" (LEMMA "sqrt_le" ("nny" "1" "nnz" "1+x*x")) (("" (LEMMA "sq_pos" ("a" "x")) (("" (EXPAND "sq" -1) (("" (REWRITE "sqrt_1" -2) (("" (CASE "x*x = 0") (("1" (REPLACE -1) (("1" (REWRITE "expt_1i") (("1" (REWRITE "expt_1i") (("1" (REWRITE "sqrt_1") (("1" (CASE "abs((-1) ^ n) = 1") (("1" (LEMMA "both_sides_times_pos_le1" ("x" "abs(atanS(n)(x))" "y" "1" "pz" "factorial(2 * n)")) (("1" (REPLACE -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (CASE "FORALL (n:nat): abs((-1) ^ n) = 1") (("1" (INST - "n") NIL NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (REWRITE "expt_x0") (("1" (EXPAND "abs") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus" ("n0x" "-1" "i" "j!1" "j" "1")) (("2" (REPLACE -1 1) (("2" (REWRITE "abs_mult") (("2" (REPLACE -2) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "both_sides_expt_pos_lt" ("px" "1" "py" "1+x*x" "pm" "n")) (("1" (REWRITE "expt_1i") (("1" (ASSERT) (("1" (LEMMA "lt_times_lt_pos1" ("px" "1" "y" "sqrt(1+x*x)" "nnz" "1" "w" "(1 + x * x) ^ n")) (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_lt1" ("x" "1" "y" "sqrt(1 + x * x) * (1 + x * x) ^ n" "pz" "sqrt(1 + x * x) * (1 + x * x) ^ n")) (("1" (ASSERT) (("1" (LEMMA "expt_plus" ("n0x" "1+x*x" "i" "n" "j" "n")) (("1" (LEMMA "sqrt_def" ("nnx" "1+x*x")) (("1" (REPLACE -1 -3) (("1" (LEMMA "expt_plus" ("n0x" "1+x*x" "i" "1" "j" "2*n")) (("1" (REWRITE "expt_x1" -1) (("1" (REPLACE -1 2) (("1" (REPLACE -3 2) (("1" (ASSERT) (("1" (CASE "FORALL (n:nat): abs((-1) ^ n) = 1") (("1" (INST - "n") (("1" (REPLACE -1) (("1" (REPLACE -4 * RL) (("1" (LEMMA "both_sides_times_pos_le1" ("x" "abs(atanS(n)(x))" "y" "(1 + x * x) ^ (2 * n) + (1 + x * x) ^ (2 * n) * x * x" "pz" "factorial(2 * n)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus" ("n0x" "-1" "i" "j!1" "j" "1")) (("2" (REPLACE -1) (("2" (REWRITE "abs_mult") (("2" (REPLACE -2) (("2" (HIDE -1 -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "n=0") (("1" (HIDE 1) (("1" (REPLACE -1) (("1" (REWRITE "expt_x1" 2) (("1" (EXPAND "atanS" 2) (("1" (EXPAND "harmonic_poly_real") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (REWRITE "C_0") (("1" (REWRITE "expt_x1" 2) (("1" (REWRITE "expt_x0" 2) (("1" (CASE "odd?(0)") (("1" (EXPAND "odd?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (3 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|atan_taylors_prep2| FORMULA-DECL NIL |atan_integral| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|atanS| CONST-DECL "real" |atan_integral| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|sq_pos| FORMULA-DECL NIL |sq| |reals|) (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|) (|both_sides_expt_pos_lt| FORMULA-DECL NIL |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sqrt_def| FORMULA-DECL NIL |sqrt| |reals|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL) (|lt_times_lt_pos1| FORMULA-DECL NIL |real_props| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (C_0 FORMULA-DECL NIL |binomial| |reals|) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|nzrat_abs_is_pos| APPLICATION-JUDGEMENT "{r: posrat | r >= q}" |real_defs| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|odd?| CONST-DECL "bool" |integers| NIL) (|harmonic_poly_real| CONST-DECL "real" |harmonic_polynomials| |reals|) (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL) (|expt_1i| FORMULA-DECL NIL |exponentiation| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sqrt_le| FORMULA-DECL NIL |sqrt| |reals|) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_taylors_prep1| FORMULA-DECL NIL |atan_integral| NIL)) SHOSTAK)) (|atan_series_prep8_TCC1| 0 (|atan_series_prep8_TCC1-1| |nil| 3260165940 ("" (SKOLEM 1 ("n")) (("" (LEMMA "atan_n_times_derivable" ("n" "1+2*n")) (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|atan_n_times_derivable| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK (|atan_series_prep8| SUBTYPE "atan_integral.atan" "nderiv_fun[real]((number_fields.+)(1, number_fields.*(2, atan_integral.n)))"))) (|atan_series_prep8| 0 (|atan_series_prep8-1| |nil| 3260175607 ("" (SKOLEM 1 ("n" "x")) (("" (LEMMA "atan_nderiv" ("n" "2*n+1")) (("" (CASE "even?(2*n+1)") (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "div_cancel1" ("x" "n" "n0z" "2")) (("2" (REPLACE -1) (("2" (REPLACE -2 2) (("2" (HIDE -1 -2 1) (("2" (EXPAND "/") (("2" (EXPAND "atanD") (("2" (LEMMA "expt_pos" ("px" "1+x*x" "i" "1+2*n")) (("2" (REWRITE "abs_div") (("2" (EXPAND "abs" 1 2) (("2" (ASSERT) (("2" (LEMMA "div_mult_pos_le1" ("z" "abs(atanN(n)(x))" "py" "(1 + x * x) ^ (1 + 2 * n)" "x" "factorial(2 * n)")) (("2" (LEMMA "atan_series_prep7" ("n" "n" "x" "x")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|atan_nderiv| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|atanD| CONST-DECL "real" |atan_integral| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|atanN| CONST-DECL "[real -> real]" |atan_integral| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|atan_series_prep7| FORMULA-DECL NIL |atan_integral| NIL) (|div_mult_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|expt_pos| FORMULA-DECL NIL |exponentiation| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (/ CONST-DECL "[T -> real]" |real_fun_ops| |reals|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_series_term_TCC1| 0 (|atan_series_term_TCC1-1| |nil| 3258433066 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_series_term| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_integral.n), 1))" "{i: integers.int | booleans.OR(atan_integral.x /= 0, reals.>=(i, 0))}"))) (|atan_series_n_increasing| 0 (|atan_series_n_increasing-1| |nil| 3559407868 ("" (SKEEP) (("" (LABEL "xytp" (-1 -2)) (("" (EXPAND "atan_series_n") (("" (EXPAND "atan_series_term") (("" (EXPAND "atan_series_coef") (("" (NAME "aa" "LAMBDA (k:nat): IF odd?(k) THEN (LET nn: nat = (k-1)/2 IN (-1)^nn/k) ELSE 0 ENDIF") (("1" (CASE "NOT FORALL (mm:nat,xx:real): sigma(0, mm,
                                                         LAMBDA (ii: nat):
                                                           (xx ^ (1 + 2 * ii)) * (((-1) ^ ii) / (1 + 2 * ii))) = polynomial(aa,2*mm+1)(xx)") (("1" (HIDE 2) (("1" (INDUCT "mm") (("1" (HIDE-ALL-BUT 1) (("1" (SKEEP) (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "aa") (("1" (EXPAND "polynomial") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (CASE "not odd?(0)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 1) (("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (INST - "xx") (("2" (EXPAND "sigma" +) (("2" (REPLACE -1) (("2" (HIDE -1) (("2" (EXPAND "polynomial") (("2" (EXPAND "sigma" + 2) (("2" (EXPAND "sigma" + 2) (("2" (EXPAND "aa") (("2" (CASE "not odd?(2+2*j)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT -1) (("2" (EXPAND "odd?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST-CP - "n" "x") (("2" (INST - "n" "y") (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (LEMMA "derivable_polynomial") (("2" (INST - "aa" "2*n+1") (("2" (LEMMA "connected_real") (("2" (LEMMA "mean_value[real]") (("1" (INST - "x" "y" "polynomial(aa,2*n+1)") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (CASE "deriv(polynomial(aa, 1 + 2 * n), c) >= 0") (("1" (MULT-BY -1 "y-x") (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "deriv_polynomial") (("2" (INST?) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY -1) (("2" (EXPAND "deriv" -1) (("2" (INST - "c") (("2" (REPLACE -1) (("2" (HIDE-ALL-BUT (-2 -3 "xytp" 1)) (("2" (NAME "bb" "LAMBDA (i: nat): aa(1 + i) + i * aa(1 + i)") (("2" (REPLACE -1) (("2" (CASE "FORALL (kk:nat): polynomial(bb, 4 * kk+2)(c) >= 0") (("1" (CASE "FORALL (kk:nat): FORALL (tt:nat): tt<=kk IMPLIES polynomial(bb, 2*tt)(c) >= 0") (("1" (INST - "n") (("1" (INST - "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INDUCT "kk") (("1" (SKEEP) (("1" (CASE "tt = 0") (("1" (REPLACES -1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "bb") (("1" (EXPAND "aa") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKOLEM 1 "k") (("2" (HIDE 2) (("2" (FLATTEN) (("2" (SKEEP) (("2" (CASE "NOT tt = k+1") (("1" (INST - "tt") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (HIDE -2) (("2" (ASSERT) (("2" (LEMMA "even_or_odd") (("2" (INST - "k+1") (("2" (GROUND) (("1" (EXPAND "even?" -1) (("1" (SKEEP -1) (("1" (CASE "j>=0") (("1" (ASSERT) (("1" (CASE "j = 0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "k = 2*j-1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST - "2*j-1") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "polynomial") (("1" (ASSERT) (("1" (EXPAND "sigma" +) (("1" (EXPAND "sigma" +) (("1" (ASSERT) (("1" (INVOKE (CASE "%1 + %2>= 0") (! 3 1 2) (! 3 1 3)) (("1" (ASSERT) NIL NIL) ("2" (HIDE 4) (("2" (EXPAND "bb" +) (("2" (EXPAND "aa" +) (("2" (ASSERT) (("2" (CASE "NOT odd?(4*j)") (("1" (ASSERT) (("1" (CASE "FORALL (kn:nat): (-1)^(2*kn) = 1") (("1" (INST - "j") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "^" +) (("1" (LEMMA "nnreal_expt") (("1" (INST?) (("1" (ASSERT) (("1" (MULT-BY -1 "1/(1+4*j)") (("1" (ASSERT) (("1" (MULT-BY -1 "1+4*j") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CROSS-MULT 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kn") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "^") (("2" (EXPAND "expt" +) (("2" (EXPAND "expt" +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "odd?" -1) (("2" (SKEEP -1) (("2" (CASE "NOT j>=0") (("1" (ASSERT) NIL NIL) ("2" (REPLACES -2) (("2" (ASSERT) (("2" (INST -3 "j") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "kk") (("1" (ASSERT) (("1" (EXPAND "polynomial") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (CASE "NOT bb(1) = 0") (("1" (HIDE (-1 2)) (("1" (EXPAND "bb") (("1" (EXPAND "aa") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (HIDE -1) (("2" (EXPAND "bb") (("2" (EXPAND "aa") (("2" (GRIND) (("2" (CASE "c <= 1") (("1" (MULT-INEQ -1 -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "polynomial") (("2" (EXPAND "sigma" +) (("2" (EXPAND "sigma" +) (("2" (ASSERT) (("2" (EXPAND "sigma" +) (("2" (EXPAND "sigma" +) (("2" (INVOKE (CASE "%1 + %2 + %3 + %4>=0") (! 1 1 2) (! 1 1 3) (! 1 1 4) (! 1 1 5)) (("1" (ASSERT) NIL NIL) ("2" (HIDE (-1 2)) (("2" (CASE "NOT (bb(3+4*j) = 0 AND bb(5+4*j) = 0)") (("1" (HIDE (-1 2)) (("1" (EXPAND "bb") (("1" (EXPAND "aa") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (EXPAND "bb") (("2" (EXPAND "aa") (("2" (CASE "FORALL (kr:nat): (-1)^(2*kr) = 1 AND (-1)^(2*kr+1) = -1") (("1" (INST - "j+1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "c^(4+4*j) >= c^(6+4*j)") (("1" (LEMMA "one_times") (("1" (INST-CP - "c^(4+4*j)") (("1" (REPLACES -2 -3 :DIR RL) (("1" (CASE "FORALL (nn:posnat): nn/nn = 1") (("1" (INST-CP - "5+4*j") (("1" (REPLACE -2 -4 :DIR RL) (("1" (INST -3 "c^(6+4*j)") (("1" (REPLACES -3 -4 :DIR RL) (("1" (INST - "7+4*j") (("1" (HIDE -2) (("1" (INVOKE (NAME "aaz" "%1") (! -2 1)) (("1" (REPLACE -1) (("1" (REPLACE -2 -3 :DIR RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "both_sides_expt_lt1_le_aux") (("2" (INST - "c" "3+4*j" "5+4*j") (("2" (EXPAND "^") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "kr") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (EXPAND "^") (("3" (EXPAND "expt" +) (("3" (EXPAND "expt" +) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_series_term| CONST-DECL "[nat -> real]" |atan_integral| NIL) (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|nnreal_exp| APPLICATION-JUDGEMENT "nnreal" |exponentiation| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|derivable_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|) (|connected_real| FORMULA-DECL NIL |deriv_domain| |analysis|) (|deriv_polynomial| FORMULA-DECL NIL |polynomial_deriv| |analysis|) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|int_expt| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_expt| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|bb| SKOLEM-CONST-DECL "[nat -> rat]" |atan_integral| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnreal_expt| JUDGEMENT-TCC NIL |exponentiation| NIL) (|div_mult_pos_ge1| FORMULA-DECL NIL |real_props| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|j| SKOLEM-CONST-DECL "int" |atan_integral| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|even_or_odd| FORMULA-DECL NIL |naturalnumbers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|le_times_le_any1| FORMULA-DECL NIL |extra_real_props| NIL) (|odd_times_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|one_times| FORMULA-DECL NIL |extra_tegies| NIL) (|both_sides_expt_lt1_le_aux| FORMULA-DECL NIL |exponentiation| NIL) (< CONST-DECL "bool" |reals| NIL) (|nprat_div_posrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|derivable?| CONST-DECL "bool" |derivatives| |analysis|) (|deriv_fun| TYPE-EQ-DECL NIL |derivatives| |analysis|) (|deriv| CONST-DECL "[T -> real]" |derivatives| |analysis|) (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|both_sides_times_pos_ge1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|derivable?| CONST-DECL "bool" |derivatives_def| |analysis|) (|deriv| CONST-DECL "real" |derivatives_def| |analysis|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|not_one_element?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|connected?| CONST-DECL "bool" |deriv_domain_def| |analysis|) (|mean_value| FORMULA-DECL NIL |derivative_props| |analysis|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|aa| SKOLEM-CONST-DECL "[nat -> rational]" |atan_integral| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sequence| TYPE-EQ-DECL NIL |sequences| NIL) (|polynomial| CONST-DECL "[real -> real]" |polynomials| |reals|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_series_coef| CONST-DECL "rat" |atan_integral| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|atan_series_n| CONST-DECL "real" |atan_integral| NIL)) SHOSTAK)) (|atan_series_n_a0| 0 (|atan_series_n_a0-1| |nil| 3559577253 ("" (SKEEP) (("" (EXPAND "atan_series_n") (("" (REWRITE "sigma_restrict_eq_0") (("" (HIDE 2) (("" (SKOSIMP*) (("" (EXPAND "atan_series_term") (("" (EXPAND "^") (("" (EXPAND "expt") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_series_n| CONST-DECL "real" |atan_integral| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|atan_series_term| CONST-DECL "[nat -> real]" |atan_integral| NIL) (|sigma_restrict_eq_0| FORMULA-DECL NIL |sigma| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK)) (|atan_series_eqv_TCC1| 0 (|atan_series_eqv_TCC2-1| |nil| 3258434237 ("" (SKOSIMP*) (("" (REWRITE "atan_n_times_derivable") NIL NIL)) NIL) ((|atan_n_times_derivable| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)) SHOSTAK (|atan_series_eqv| SUBTYPE "atan_integral.atan" "nderiv_fun[real](atan_integral.nn)"))) (|atan_series_eqv_TCC2| 0 (|atan_series_eqv_TCC3-1| |nil| 3374498147 ("" (SUBTYPE-TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|atan_series_eqv| SUBTYPE "atan_integral.nn" "{i: integers.int | booleans.OR(atan_integral.x /= 0, reals.>=(i, 0))}"))) (|atan_series_eqv| 0 (|atan_series_eqv-2| "" 3790092764 ("" (SKOLEM 1 ("_" "x")) (("" (INDUCT "n") (("1" (EXPAND "atan_series_n") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (REWRITE "atan_nderiv_0") (("1" (REWRITE "atan_nderiv_0") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (REWRITE "expt_x0") (("1" (CASE "even?(1)") (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("j")) (("2" (FLATTEN) (("2" (EXPAND "atan_series_n") (("2" (EXPAND "sigma" 1) (("2" (EXPAND "sigma" 1 2) (("2" (REWRITE "atan_nderiv_0") (("2" (REWRITE "atan_nderiv_0") (("2" (EXPAND "atan_series_term") (("2" (ASSERT) (("2" (REPLACE -1 1) (("2" (LEMMA "sigma_eq[nat]" ("low" "0" "high" "2+2*j" "F" "LAMBDA (nn: nat):
              IF nn > 2 + 2 * j OR nn = 0 THEN 0
              ELSE nderiv(nn, atan)(0) * x ^ nn / factorial(nn)
              ENDIF" "G" "LAMBDA (nn: nat):
               IF nn > 4 + 2 * j OR nn = 0 THEN 0
               ELSE nderiv(nn, atan)(0) * x ^ nn / factorial(nn)
               ENDIF")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (HIDE -1 -2) (("1" (EXPAND "atan_series_coef") (("1" (LEMMA "div_cancel1" ("x" "1+j" "n0z" "2")) (("1" (REPLACE -1) (("1" (CASE "even?(3+2*j)") (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 1) (("2" (LEMMA "div_cancel1" ("x" "x ^ (3 + 2 * j) * (-1) ^ (1 + j) / (3 + 2 * j)" "n0z" "factorial(2+2*j)")) (("2" (REPLACE -1 1 RL) (("2" (EXPAND "factorial" 1 5) (("2" (ASSERT) (("2" (REWRITE "zero_times1" 1) (("2" (REWRITE "div_div2" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (SKOLEM 1 ("i")) (("2" (TYPEPRED "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP*) (("2" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|atan_series_n| CONST-DECL "real" |atan_integral| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|) (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|) (|sigma| DEF-DECL "real" |sigma| |reals|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|atan_series_term| CONST-DECL "[nat -> real]" |atan_integral| NIL) (|int_exp| APPLICATION-JUDGEMENT "int" |exponentiation| NIL) (|nzreal_exp| APPLICATION-JUDGEMENT "nzreal" |exponentiation| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|expt_x0| FORMULA-DECL NIL |exponentiation| NIL) (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|) (|even?| CONST-DECL "bool" |integers| NIL) (|factorial_0| FORMULA-DECL NIL |factorial| |ints|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|atan_nderiv_0| FORMULA-DECL NIL |atan_integral| NIL) (|atan_series_coef| CONST-DECL "rat" |atan_integral| NIL) (|atan_n_times_derivable| FORMULA-DECL NIL |atan_integral| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|nzint_times_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subrange| TYPE-EQ-DECL NIL |integers| NIL) (|sigma_eq| FORMULA-DECL NIL |sigma| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|rat_exp| APPLICATION-JUDGEMENT "rat" |exponentiation| NIL)) SHOSTAK) (|atan_series_eqv-1| |nil| 3258434264 ("" (SKOLEM 1 ("_" "x")) (("" (INDUCT "n") (("1" (EXPAND "atan_series_n") (("1" (EXPAND "atan_series_term") (("1" (EXPAND "atan_series_coef") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (EXPAND "sigma") (("1" (REWRITE "atan_nderiv_0") (("1" (REWRITE "atan_nderiv_0") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (EXPAND "factorial") (("1" (REWRITE "expt_x0") (("1" (CASE "even?(1)") (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("j")) (("2" (FLATTEN) (("2" (EXPAND "atan_series_n") (("2" (EXPAND "sigma" 1) (("2" (EXPAND "sigma" 1 2) (("2" (REWRITE "atan_nderiv_0") (("2" (REWRITE "atan_nderiv_0") (("2" (EXPAND "atan_series_term") (("2" (ASSERT) (("2" (REPLACE -1 1) (("2" (SIMPLIFY 1) (("2" (LEMMA "sigma_eq[nat]" ("low" "0" "high" "2+2*j" "F" "LAMBDA (nn: nat):
              IF nn > 2 + 2 * j OR nn = 0 THEN 0
              ELSE nderiv(nn, atan)(0) * x ^ nn / factorial(nn)
              ENDIF" "G" "LAMBDA (nn: nat):
               IF nn > 4 + 2 * j OR nn = 0 THEN 0
               ELSE nderiv(nn, atan)(0) * x ^ nn / factorial(nn)
               ENDIF")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (HIDE -1 -2) (("1" (EXPAND "atan_series_coef") (("1" (LEMMA "div_cancel1" ("x" "1+j" "n0z" "2")) (("1" (REPLACE -1) (("1" (CASE "even?(3+2*j)") (("1" (EXPAND "even?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 1) (("2" (LEMMA "div_cancel1" ("x" "x ^ (3 + 2 * j) * (-1) ^ (1 + j) / (3 + 2 * j)" "n0z" "factorial(2+2*j)")) (("2" (REPLACE -1 1 RL) (("2" (EXPAND "factorial" 1 5) (("2" (ASSERT) (("2" (REWRITE "zero_times1" 1) (("2" (REWRITE "div_div2" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2 -1) (("2" (SKOLEM 1 ("i")) (("2" (TYPEPRED "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2) (("2" (SKOSIMP*) (("2" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)) (|atan_taylors_TCC1| 0 (|atan_taylors_TCC1-1| |nil| 3258437857 ("" (SKOLEM 1 ("n" "x" "c")) (("" (LEMMA "atan_n_times_derivable" ("n" "3+2*n")) (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|atan_n_times_derivable| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK (|atan_taylors| SUBTYPE "atan_integral.atan" "nderiv_fun[real]((number_fields.+)(3, number_fields.*(2, atan_integral.n)))"))) (|atan_taylors_TCC2| 0 (|atan_taylors_TCC2-1| |nil| 3260539208 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_taylors| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_integral.n), 3))" "{i: integers.int | booleans.OR(atan_integral.x /= 0, reals.>=(i, 0))}"))) (|atan_taylors| 0 (|atan_taylors-1| |nil| 3258437940 ("" (SKOLEM 1 ("n" "x")) (("" (REWRITE "atan_series_eqv" 1) (("" (LEMMA "Taylors" ("aa" "0" "f" "atan" "bb" "x" "n" "2*n+2")) (("" (REWRITE "atan_0") (("" (LEMMA "atan_n_times_derivable" ("n" "2*n+3")) (("" (ASSERT) (("" (SKOSIMP*) (("" (INST 1 "c!1") (("" (LEMMA "extensionality" ("f" "LAMBDA (nn:nat):
               IF nn > 2 + 2 * n THEN 0
               ELSIF nn = 0 THEN 0
               ELSE nderiv(nn, atan)(0) * x ^ nn / factorial(nn)
               ENDIF" "g" "LAMBDA (nn: nat):
               IF nn > 2 + 2 * n OR nn = 0 THEN 0
               ELSE nderiv(nn, atan)(0) * x ^ nn / factorial(nn)
               ENDIF")) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -2 2 -1) (("2" (SKOLEM 1 ("i")) (("2" (LIFT-IF) (("2" (SIMPLIFY 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP*) (("2" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (LEMMA "atan_n_times_derivable" ("n" "nn!1")) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_series_eqv| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|atan_0| FORMULA-DECL NIL |atan_integral| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|extensionality| FORMULA-DECL NIL |functions| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|atan_n_times_derivable| FORMULA-DECL NIL |atan_integral| NIL) (|Taylors| FORMULA-DECL NIL |taylors| |analysis|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK)) (|atan_series_TCC1| 0 (|atan_series_TCC1-1| |nil| 3260165696 ("" (GRIND) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|atan_series| SUBTYPE "((number_fields.+)(number_fields.*(2, atan_integral.n), 3))" "{i: integers.int | booleans.OR(atan_integral.x /= 0, reals.>=(i, 0))}"))) (|atan_series| 0 (|atan_series-2| "" 3790092767 ("" (SKOLEM 1 ("n" "x")) (("" (LEMMA "atan_taylors" ("x" "x" "n" "n")) (("" (SKOLEM -1 ("c")) (("" (REPLACE -1) (("" (LEMMA "atan_series_prep8" ("n" "n+1" "x" "c")) (("" (SIMPLIFY 1) (("" (REWRITE "abs_div" 1) (("" (REWRITE "abs_mult" 1) (("" (EXPAND "abs" 1 3) (("" (NAME-REPLACE "ATANC" "nderiv(2 * (n + 1) + 1, atan)(c)") (("" (HIDE -2) (("" (LEMMA "trichotomy" ("x" "ATANC")) (("" (EXPAND "abs" -2) (("" (EXPAND "abs" 1 1) (("" (LEMMA "div_cancel1" ("n0z" "factorial(2*n+2)" "x" "abs(x ^ (3 + 2 * n)) / (3 + 2 * n)")) (("" (REWRITE "div_div2" -1) (("" (REPLACE -1 1 RL) (("" (HIDE -1) (("" (EXPAND "factorial" 1 1) (("" (SPLIT -1) (("1" (ASSERT) (("1" (CASE "x=0") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (REWRITE "zero_times1" 1) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): abs(x^n) > 0") (("1" (INST - "3+2*n") (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "abs(x ^ (3 + 2 * n))" "py" "(3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (LEMMA "both_sides_times_pos_le1" ("x" "ATANC" "y" "factorial(2+2*n)" "pz" "abs(x ^ (3 + 2 * n)) /
       (3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus" ("n0x" "x" "i" "1" "j" "j!1")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1 1) (("1" (REWRITE "abs_mult") (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "abs(x)" "py" "abs(x^j!1)")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) (("3" (CASE "x=0") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (REWRITE "zero_times1") (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): abs(x^n) > 0") (("1" (INST - "3+2*n") (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "abs(x^(3+2*n))" "py" "(3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (LEMMA "both_sides_times_pos_le1" ("x" "-ATANC" "y" "factorial(2+2*n)" "pz" "abs(x ^ (3 + 2 * n)) /
       (3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus" ("n0x" "x" "i" "1" "j" "j!1")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (REWRITE "abs_mult") (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "abs(x)" "py" "abs(x^j!1)")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|atan_taylors| FORMULA-DECL NIL |atan_integral| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_div_posreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|trichotomy| FORMULA-DECL NIL |real_axioms| NIL) (|div_div2| FORMULA-DECL NIL |real_props| NIL) (|nnrat_div_posrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|nnrat_times_nnrat_is_nnrat| APPLICATION-JUDGEMENT "nonneg_rat" |rationals| NIL) (|int_abs_is_nonneg| APPLICATION-JUDGEMENT "{j: nonneg_int | j >= i}" |real_defs| NIL) (|zero_times1| FORMULA-DECL NIL |real_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nat_expt| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|nat_exp| APPLICATION-JUDGEMENT "nat" |exponentiation| NIL) (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL) (|posreal_times_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL) (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|posreal_div_posreal_is_posreal| JUDGEMENT-TCC NIL |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|div_cancel1| FORMULA-DECL NIL |real_props| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|nzint_abs_is_pos| APPLICATION-JUDGEMENT "{j: posint | j >= i}" |real_defs| NIL) (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|atan| CONST-DECL "real_abs_lt_pi2" |atan_integral| NIL) (|real_abs_lt_pi2| NONEMPTY-TYPE-EQ-DECL NIL |atan_integral| NIL) (|pi| CONST-DECL "posreal" |atan_integral| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nderiv| DEF-DECL "[T -> real]" |nth_derivatives| |analysis|) (|nderiv_fun| TYPE-EQ-DECL NIL |nth_derivatives| |analysis|) (|derivable_n_times?| DEF-DECL "bool" |nth_derivatives| |analysis|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|factorial| DEF-DECL "posnat" |factorial| |ints|) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|atan_series_prep8| FORMULA-DECL NIL |atan_integral| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|between| TYPE-EQ-DECL NIL |taylors| |analysis|) (|nnint_times_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK) (|atan_series-1| |nil| 3260166047 ("" (SKOLEM 1 ("n" "x")) (("" (LEMMA "atan_taylors" ("x" "x" "n" "n")) (("" (SKOLEM -1 ("c")) (("" (REPLACE -1) (("" (LEMMA "atan_series_prep8" ("n" "n+1" "x" "c")) (("" (SIMPLIFY 1) (("" (REWRITE "abs_div" 1) (("1" (REWRITE "abs_mult" 1) (("1" (EXPAND "abs" 1 3) (("1" (NAME-REPLACE "ATANC" "nderiv(2 * (n + 1) + 1, atan)(c)") (("1" (HIDE -2) (("1" (LEMMA "trichotomy" ("x" "ATANC")) (("1" (EXPAND "abs" -2) (("1" (EXPAND "abs" 1 1) (("1" (LEMMA "div_cancel1" ("n0z" "factorial(2*n+2)" "x" "abs(x ^ (3 + 2 * n)) / (3 + 2 * n)")) (("1" (REWRITE "div_div2" -1) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1) (("1" (EXPAND "factorial" 1 1) (("1" (SPLIT -1) (("1" (ASSERT) (("1" (CASE "x=0") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (ASSERT) (("1" (REWRITE "zero_times1" 1) (("1" (EXPAND "abs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): abs(x^n) > 0") (("1" (INST - "3+2*n") (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "abs(x ^ (3 + 2 * n))" "py" "(3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (LEMMA "both_sides_times_pos_le1" ("x" "ATANC" "y" "factorial(2+2*n)" "pz" "abs(x ^ (3 + 2 * n)) /
       (3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (ASSERT) (("1" (NAME-REPLACE "K1" "(3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))") (("1" (NAME-REPLACE "K2" "abs(x ^ (3 + 2 * n))") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus" ("n0x" "x" "i" "1" "j" "j!1")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1 1) (("1" (REWRITE "abs_mult") (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "abs(x)" "py" "abs(x^j!1)")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) (("3" (CASE "x=0") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "expt") (("1" (REWRITE "zero_times1") (("1" (EXPAND "abs" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (n:nat): abs(x^n) > 0") (("1" (INST - "3+2*n") (("1" (LEMMA "posreal_div_posreal_is_posreal" ("px" "abs(x^(3+2*n))" "py" "(3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (LEMMA "both_sides_times_pos_le1" ("x" "-ATANC" "y" "factorial(2+2*n)" "pz" "abs(x ^ (3 + 2 * n)) /
       (3 * factorial(2 + 2 * n) + 2 * (factorial(2 + 2 * n) * n))")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (INDUCT "n") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (LEMMA "expt_plus" ("n0x" "x" "i" "1" "j" "j!1")) (("1" (REWRITE "expt_x1") (("1" (REPLACE -1) (("1" (REWRITE "abs_mult") (("1" (LEMMA "posreal_times_posreal_is_posreal" ("px" "abs(x)" "py" "abs(x^j!1)")) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (1 3)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_n_times_derivable" ("n" "3+2*n")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "atan_n_times_derivable" ("n" "3+2*n")) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "atan_n_times_derivable" ("n" "3+2*n")) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL) SHOSTAK)))
