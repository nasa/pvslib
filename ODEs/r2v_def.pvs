r2v_def[ d :[ real -> bool ] ] % Welcome
%  d - domain of the functions r2v

		: THEORY

%Created by                     JTS
%	 	           Jan 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This defines r2v - "real to   |%
%| vector" functions. These are  |%
%| functions d -> Rn, where d is |%
%| a subset of R. Defines list   |%
%| functions like car, cdr,      |%
%| nth, null?, cons? can be      |%
%| naturally defined for these   |%
%| functions.                    |%     		     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last updated	           Jan 2020


%-----     %
  BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Assume that the domain is nonempty
%-------------------------------------------------------------------------

  ASSUMING
      non_empty : ASSUMPTION nonempty?(d)
   ENDASSUMING
   
%-------------------------------------------------------------------------
%% Importing matrices and properties of list
%-------------------------------------------------------------------------

 IMPORTING matrices@matrices
 IMPORTING structures@more_list_props[real]
 IMPORTING matrices@vector_arithmetic

%-------------------------------------------------------------------------
%% Define functions (d) -> Rn 
%-------------------------------------------------------------------------

 r2v: TYPE =
   {ff:[ (d) -> list[real]] |
     EXISTS(m:nat): FORALL(x:(d)): length(ff(x))=m}
     
 r2v_n(n:nat): TYPE =
   [(d) -> VectorN(n)]

 r2v_n_r2v: JUDGEMENT
   r2v_n(n:nat) SUBTYPE_OF r2v

%-------------------------------------------------------------------------
%% Define length and nth 
%-------------------------------------------------------------------------

 length(f:r2v): nat =
   length(f(choose((d))))

 length_x: LEMMA
  FORALL(f:r2v,x:(d)):
  length(f) = length(f(x))

 nth(f:r2v, j:{jj:nat| jj<length(f)}): [(d) -> real] = 
    LAMBDA(x:(d)): nth(f(x),j)

%-------------------------------------------------------------------------
%% Define null? and cons? 
%-------------------------------------------------------------------------

 null?(f:r2v): bool =
   FORALL(x:(d)): null?(f(x))
   
 cons?(f:r2v): bool =
   FORALL(x:(d)): cons?(f(x))

 null_cons: LEMMA
   FORALL(f:r2v):
     cons?(f) IFF NOT null?(f)

 length_null: LEMMA
   FORALL(f:r2v):
     length(f)=0 IFF null?(f)

 length_cons: LEMMA
   FORALL(f:r2v):
     length(f)>0 IFF cons?(f)

%-------------------------------------------------------------------------
%% Define car, cdr, and cons
%-------------------------------------------------------------------------

 car(f:{ff:r2v | cons?(ff)})(x:(d)): real =
   car(f(x))
   
 cdr(f:{ff:r2v | cons?(ff)}): r2v =
   LAMBDA(x:(d)): cdr(f(x))

 cons(cons1_var:[(d)->real], cons2_var:r2v): r2v =
   LAMBDA(x:(d)):
     cons[real](cons1_var(x),cons2_var(x))

 length_cdr: LEMMA
   FORALL(f:{ff:r2v | cons?(ff)}):
     length(cdr(f))+1 = length(f)

%-------------------------------------------------------------------------
%% Properties of nth
%-------------------------------------------------------------------------

 nth_car: LEMMA
   FORALL(f:{ff:r2v| cons?(ff)}):
     nth(f,0) = car(f)

 nth_cdr: LEMMA
   FORALL(f:{ff:r2v| cons?(ff)},i:{ii:nat| ii<length(cdr(f))}):
     nth(cdr(f),i) = nth(f,i+1)

 nth_equal: LEMMA
   FORALL(f:r2v,g:{gg:r2v| length(gg)=length(f)}):
     f=g IFF FORALL(i:{ii:nat| ii<length(f)}):
       nth(f,i)=nth(g,i)

%-------------------------------------------------------------------------
%% Define addition
%-------------------------------------------------------------------------

 plusr2v(f,g:r2v): {hh:r2v| length(hh) = max(length(f),length(g))} =
   LAMBDA(x:(d)): f(x)+g(x)
 
 ;+(f,g:r2v):  {hh:r2v| length(hh) = max(length(f),length(g))} =
  plusr2v(f,g)
   
 nth_add: LEMMA
   FORALL(f:r2v,g:{gg:r2v| length(gg)=length(f)},
   i:{ii:nat| ii<length(f)}):
     nth(f+g,i) = LAMBDA(x:(d)): nth(f,i)(x) + nth(g,i)(x)

%-------------------------------------------------------------------------
%% Define subtraction 
%-------------------------------------------------------------------------

 subr2v(f,g:r2v): {hh:r2v| length(hh) = max(length(f),length(g))} =
   LAMBDA(x:(d)): f(x)-g(x)
 
 ;-(f,g:r2v):  {hh:r2v| length(hh) = max(length(f),length(g))} =
  subr2v(f,g)
   
 nth_sub: LEMMA
   FORALL(f:r2v,g:{gg:r2v| length(gg)=length(f)},
   i:{ii:nat| ii<length(f)}):
     nth(f-g,i) = LAMBDA(x:(d)): nth(f,i)(x) - nth(g,i)(x)

  %~~  End ~%
  END r2v_def
