(ODE_psi_contraction
 (IMP_exp_analysis_TCC1 0
  (IMP_exp_analysis_TCC1-1 nil 3789489501
   ("" (lemma "ci_nonempty")
    (("" (inst?)
      (("" (lemma "closed_interval") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (ci_nonempty formula-decl nil interval_def nil))
   nil
   (IMP_exp_analysis assuming
    "exp_analysis[ODE_psi_contraction.d].exp_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(exp_analysis.d)")))
 (IMP_exp_analysis_TCC2 0
  (IMP_exp_analysis_TCC2-1 nil 3789489501
   ("" (lemma "ci_connected")
    (("" (lemma "closed_interval") (("" (inst?) nil nil)) nil)) nil)
   ((closed_interval formula-decl nil ODE_psi_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (ci_connected formula-decl nil interval_def nil))
   nil
   (IMP_exp_analysis assuming
    "exp_analysis[ODE_psi_contraction.d].exp_analysis"
    "connected: ASSUMPTION deriv_domain_def[(exp_analysis.d)].connected?")))
 (IMP_exp_analysis_TCC3 0
  (IMP_exp_analysis_TCC3-1 nil 3789489501
   ("" (lemma "ci_not_one_element")
    (("" (lemma "closed_interval") (("" (inst?) nil nil)) nil)) nil)
   ((closed_interval formula-decl nil ODE_psi_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (ci_not_one_element formula-decl nil interval_def nil))
   nil
   (IMP_exp_analysis assuming
    "exp_analysis[ODE_psi_contraction.d].exp_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(exp_analysis.d)].not_one_element?")))
 (IMP_metric_rho_TCC1 0
  (IMP_metric_rho_TCC1-1 nil 3789489501
   ("" (lemma "closed_interval") (("" (propax) nil nil)) nil)
   ((closed_interval formula-decl nil ODE_psi_contraction nil)) nil
   (IMP_metric_rho assuming
    "metric_rho[ODE_psi_contraction.d].metric_rho"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(metric_rho.d)")))
 (od_fx_diff_Int_TCC1 0
  (od_fx_diff_Int_TCC1-1 nil 3788693573
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (od_fx_diff_Int subtype
    "r2v_continuous_extension[ODE_psi_contraction.d].d_b"
    "(list_adt[real].cons?)")))
 (od_fx_diff_Int_TCC2 0
  (od_fx_diff_Int_TCC2-1 nil 3788693573
   ("" (skeep) (("" (typepred "d_b") (("" (propax) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (od_fx_diff_Int subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b)"
    "(ODE_psi_contraction.d)")))
 (od_fx_diff_Int 0
  (od_fx_diff_Int-1 nil 3788706799
   ("" (skeep)
    (("" (lemma "cont_Int")
      (("" (inst -1 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
        (("" (assert)
          (("" (split -1)
            (("1" (inst -1 "car(d_b)" "xx") nil nil)
             ("2" (hide 2)
              (("2" (lemma "cont_sub[d]")
                (("2"
                  (inst -1 "n" "od_fx[d](n, f, y)" "od_fx[d](n, f, z)")
                  (("1" (assert)
                    (("1" (expand "-" 1 1)
                      (("1" (expand "subr2v" 1 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "cont_od_fx")
                      (("2" (inst -1 "n" "f" "z") nil nil)) nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (lemma "cont_od_fx")
                      (("3" (inst -1 "n" "f" "y") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (od_fx_contD_diff_TCC1 0
  (od_fx_contD_diff_TCC1-1 nil 3788693573
   ("" (skeep) (("" (typepred "x") (("" (grind) nil nil)) nil)) nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (od_fx_contD_diff subtype "ODE_psi_contraction.x"
    "(list_adt[real].cons?)")))
 (od_fx_contD_diff_TCC2 0
  (od_fx_contD_diff_TCC2-1 nil 3788693573
   ("" (lemma "od_fx_diff_Int")
    (("" (skeep) (("" (inst?) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_fx_diff_Int formula-decl nil ODE_psi_contraction nil))
   nil
   (od_fx_contD_diff subtype
    "((r2v_def[ODE_psi_contraction.d].-)(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.y), ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.z)))"
    "{ff: r2v_def[ODE_psi_contraction.d].r2v | r2v_analysis[ODE_psi_contraction.d].Integrable?(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx, ff)}")))
 (od_fx_contD_diff_TCC3 0
  (od_fx_contD_diff_TCC3-1 nil 3788693573
   ("" (skeep)
    ((""
      (typepred "Integral[d]
               (car[real](d_b[d]), xx,
                ((-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))))"
       "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
      (("" (typepred "od_fx[d](n, f, y)" "od_fx(n,f,z)")
        (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (od_fx_contD_diff subtype
    "r2v_analysis[ODE_psi_contraction.d].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx, ((r2v_def[ODE_psi_contraction.d].-)(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.y), ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.z))))"
    "(list_adt[real].cons?)")))
 (od_fx_contD_diff 0
  (od_fx_contD_diff-3 nil 3788707663
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      ((""
        (inst -1 "(LAMBDA (xx: (d)):
                            exp(-K * (xx - car[real](d_b))) *
                             nn(Integral[d]
                                    (car[real](d_b), xx,
                                     (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))))")
        (("1" (hide 2)
          (("1" (lemma "prod_continuous[(d)]")
            (("1" (expand "continuous?" 1 1)
              (("1" (skeep 1)
                (("1"
                  (inst -1 "(LAMBDA (xx: (d)):
                                     exp(-K * (xx - car[real](d_b))))"
                   "(LAMBDA (xx: (d)):
                                      nn(Integral[d]
                                             (car[real](d_b), xx,
                                              (-[d])
                                                  (od_fx[d](n, f, y),
                                                   od_fx[d](n, f, z)))))"
                   "x0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (expand "*" -1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "composition_cont[(d),real]")
                          (("2" (expand "o ")
                            (("2"
                              (inst -1
                               "LAMBDA(xx:(d)): -K * (xx - car[real](d_b))"
                               "_" "_")
                              (("1"
                                (inst -1 "LAMBDA(x:real): exp(x)" "_")
                                (("1"
                                  (inst -1 "x0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "continuous?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "epsilon/K")
                                              (("1"
                                                (skeep 1)
                                                (("1"
                                                  (case
                                                   "-K * x - -K * x0 = -K*(x-x0)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "abs_mult")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "-K"
                                                         "(x-x0)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             1
                                                             1)
                                                            (("1"
                                                              (div-by
                                                               1
                                                               "K")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "exp_continuous")
                                          (("2"
                                            (expand "continuous?" -1)
                                            (("2"
                                              (inst
                                               -1
                                               "-K * ( x0 - car[real](d_b))")
                                              (("2"
                                                (expand "continuous?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "d_b")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "cont_nn_comp")
                          (("3"
                            (inst -1 "n" "LAMBDA(xx:(d)): Integral[d]
                                                            (car[real](d_b), xx,
                                                             (-[d])
                                                                 (od_fx[d](n, f, y), od_fx[d](n, f, z)))"
                             "nn")
                            (("1" (assert)
                              (("1"
                                (expand "continuous?")
                                (("1"
                                  (inst -1 "x0")
                                  (("1"
                                    (expand "continuous?" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "Int_cont")
                                (("2"
                                  (inst
                                   -1
                                   "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))"
                                   "car(d_b)")
                                  (("1"
                                    (typepred "d_b")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "d_b")
                                    (("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "cont_sub[d]")
                                      (("3"
                                        (inst
                                         -1
                                         "n"
                                         "od_fx[d](n, f, y)"
                                         "od_fx[d](n, f, z)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "-" 1 1)
                                            (("1"
                                              (expand "subr2v" 1 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "cont_od_fx")
                                            (("2"
                                              (inst -1 "n" "f" "z")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (lemma "cont_od_fx")
                                            (("3"
                                              (inst -1 "n" "f" "y")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (skeep 1)
                                (("3"
                                  (typepred
                                   "Integral[d]
                                             (car[real](d_b), xx,
                                              (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                                  (("3"
                                    (typepred
                                     "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                                    (("3"
                                      (typepred
                                       "od_fx[d](n, f, y)"
                                       "od_fx[d](n, f, z)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -1)
                                          (("3"
                                            (replace -2)
                                            (("3"
                                              (expand "max" -4)
                                              (("3"
                                                (replace -4)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (assert)
                              (("4"
                                (hide 2)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (lemma "cont_Int")
                                    (("4"
                                      (inst
                                       -1
                                       "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (split -1)
                                          (("1"
                                            (inst -1 "car(d_b)" "xx")
                                            nil
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "cont_sub[d]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "n"
                                                 "od_fx[d](n, f, y)"
                                                 "od_fx[d](n, f, z)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "-" 1 1)
                                                    (("1"
                                                      (expand
                                                       "subr2v"
                                                       1
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "z")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "y")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide 2)
                              (("5"
                                (skeep)
                                (("5"
                                  (typepred "d_b")
                                  (("5" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide 2)
                              (("6"
                                (skeep)
                                (("6"
                                  (typepred "d_b")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2"
                        (typepred "Integral[d]
                                 (car[real](d_b), xx,
                                  (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                        (("2"
                          (typepred
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("2"
                            (typepred "od_fx[d](n, f, y)"
                             "od_fx[d](n, f, z)")
                            (("2" (replace -1)
                              (("2"
                                (replace -2)
                                (("2"
                                  (expand "max" -4)
                                  (("2"
                                    (replace -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (lemma "cont_Int")
                        (("3"
                          (inst -1
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("3" (assert)
                            (("3" (split -1)
                              (("1" (inst -1 "car(d_b)" "xx") nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "cont_sub[d]")
                                    (("2"
                                      (inst
                                       -1
                                       "n"
                                       "od_fx[d](n, f, y)"
                                       "od_fx[d](n, f, z)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-" 1 1)
                                          (("1"
                                            (expand "subr2v" 1 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "cont_od_fx")
                                          (("2"
                                            (inst -1 "n" "f" "z")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (lemma "cont_od_fx")
                                          (("3"
                                            (inst -1 "n" "f" "y")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skeep)
                      (("4" (typepred "d_b") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skeep)
                      (("5" (typepred "d_b") (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (typepred "Integral[d]
                           (car[real](d_b), xx,
                            (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
              (("2"
                (typepred
                 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))"
                 "od_fx[d](n, f, y)" "od_fx[d](n, f, z)")
                (("2" (typepred "od_fx[d](n, f, y)")
                  (("2" (replace -4)
                    (("2" (replace -4)
                      (("2" (expand "max" -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "cont_Int")
              (("3"
                (inst -1
                 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                (("3" (assert)
                  (("3" (split -1)
                    (("1" (inst -1 "car(d_b)" "xx") nil nil)
                     ("2" (hide 2)
                      (("2" (lemma "cont_sub[d]")
                        (("2"
                          (inst -1 "n" "od_fx[d](n, f, y)"
                           "od_fx[d](n, f, z)")
                          (("1" (assert)
                            (("1" (expand "-" 1 1)
                              (("1"
                                (expand "subr2v" 1 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "cont_od_fx")
                              (("2" (inst -1 "n" "f" "z") nil nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (lemma "cont_od_fx")
                              (("3" (inst -1 "n" "f" "y") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep 1)
            (("5" (typepred "d_b") (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (composition_cont formula-decl nil composition_continuous analysis)
    (exp_continuous formula-decl nil ln_exp lnexp_fnd)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (abs_mult formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (Int_cont formula-decl nil r2v_analysis nil)
    (prod_continuous formula-decl nil continuous_functions analysis)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (nn skolem-const-decl "(norm?(n))" ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (norm? const-decl "bool" norms mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil)
  (od_fx_contD_diff-2 nil 3788707561
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      ((""
        (inst -1 "(LAMBDA (xx: (d)):
                          exp(-K * (xx - car[real](d_b))) *
                           nn(Integral[d]
                                  (car[real](d_b), xx,
                                   (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))))")
        (("1" (hide 2)
          (("1" (lemma "prod_continuous[(d)]")
            (("1" (expand "continuous?" 1 1)
              (("1" (skeep 1)
                (("1"
                  (inst -1 "(LAMBDA (xx: (d)):
                                 exp(-K * (xx - car[real](d_b))))"
                   "(LAMBDA (xx: (d)):
                                  nn(Integral[d]
                                         (car[real](d_b), xx,
                                          (-[d])
                                              (od_fx[d](n, f, y),
                                               od_fx[d](n, f, z)))))"
                   "x0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (expand "*" -1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "composition_cont[(d),real]")
                          (("2" (expand "o ")
                            (("2"
                              (inst -1
                               "LAMBDA(xx:(d)): -K * (xx - car[real](d_b))"
                               "_" "_")
                              (("1"
                                (inst -1 "LAMBDA(x:real): exp(x)" "_")
                                (("1"
                                  (inst -1 "x0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "continuous?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "epsilon/K")
                                              (("1"
                                                (skeep 1)
                                                (("1"
                                                  (case
                                                   "-K * x - -K * x0 = -K*(x-x0)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "abs_mult")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "-K"
                                                         "(x-x0)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             1
                                                             1)
                                                            (("1"
                                                              (div-by
                                                               1
                                                               "K")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "exp_continuous")
                                          (("2"
                                            (expand "continuous?" -1)
                                            (("2"
                                              (inst
                                               -1
                                               "-K * ( x0 - car[real](d_b))")
                                              (("2"
                                                (expand "continuous?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "d_b")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "cont_nn_comp")
                          (("3"
                            (inst -1 "n" "LAMBDA(xx:(d)): Integral[d]
                                                    (car[real](d_b), xx,
                                                     (-[d])
                                                         (od_fx[d](n, f, y), od_fx[d](n, f, z)))"
                             "nn")
                            (("1" (assert)
                              (("1"
                                (expand "continuous?")
                                (("1"
                                  (inst -1 "x0")
                                  (("1"
                                    (expand "continuous?" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "Int_cont")
                                (("2"
                                  (inst
                                   -1
                                   "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))"
                                   "car(d_b)")
                                  (("1"
                                    (typepred "d_b")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "d_b")
                                    (("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "cont_sub[d]")
                                      (("3"
                                        (inst
                                         -1
                                         "n"
                                         "od_fx[d](n, f, y)"
                                         "od_fx[d](n, f, z)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "-" 1 1)
                                            (("1"
                                              (expand "subr2v" 1 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "cont_od_fx")
                                            (("2"
                                              (inst -1 "n" "f" "z")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (lemma "cont_od_fx")
                                            (("3"
                                              (inst -1 "n" "f" "y")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (skeep 1)
                                (("3"
                                  (typepred
                                   "Integral[d]
                                   (car[real](d_b), xx,
                                    (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                                  (("3"
                                    (typepred
                                     "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                                    (("3"
                                      (typepred
                                       "od_fx[d](n, f, y)"
                                       "od_fx[d](n, f, z)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -1)
                                          (("3"
                                            (replace -2)
                                            (("3"
                                              (expand "max" -4)
                                              (("3"
                                                (replace -4)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (assert)
                              (("4"
                                (hide 2)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (lemma "cont_Int")
                                    (("4"
                                      (inst
                                       -1
                                       "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (split -1)
                                          (("1"
                                            (inst -1 "car(d_b)" "xx")
                                            nil
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "cont_sub[d]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "n"
                                                 "od_fx[d](n, f, y)"
                                                 "od_fx[d](n, f, z)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "-" 1 1)
                                                    (("1"
                                                      (expand
                                                       "subr2v"
                                                       1
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "z")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "y")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide 2)
                              (("5"
                                (skeep)
                                (("5"
                                  (typepred "d_b")
                                  (("5" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide 2)
                              (("6"
                                (skeep)
                                (("6"
                                  (typepred "d_b")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2"
                        (typepred "Integral[d]
                           (car[real](d_b), xx,
                            (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                        (("2"
                          (typepred
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("2"
                            (typepred "od_fx[d](n, f, y)"
                             "od_fx[d](n, f, z)")
                            (("2" (replace -1)
                              (("2"
                                (replace -2)
                                (("2"
                                  (expand "max" -4)
                                  (("2"
                                    (replace -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (lemma "cont_Int")
                        (("3"
                          (inst -1
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("3" (assert)
                            (("3" (split -1)
                              (("1" (inst -1 "car(d_b)" "xx") nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "cont_sub[d]")
                                    (("2"
                                      (inst
                                       -1
                                       "n"
                                       "od_fx[d](n, f, y)"
                                       "od_fx[d](n, f, z)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-" 1 1)
                                          (("1"
                                            (expand "subr2v" 1 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "cont_od_fx")
                                          (("2"
                                            (inst -1 "n" "f" "z")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (lemma "cont_od_fx")
                                          (("3"
                                            (inst -1 "n" "f" "y")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skeep)
                      (("4" (typepred "d_b") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skeep)
                      (("5" (typepred "d_b") (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (typepred "Integral[d]
                       (car[real](d_b), xx,
                        (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
              (("2"
                (typepred
                 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))"
                 "od_fx[d](n, f, y)" "od_fx[d](n, f, z)")
                (("2" (typepred "od_fx[d](n, f, y)")
                  (("2" (replace -4)
                    (("2" (replace -4)
                      (("2" (expand "max" -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "cont_Int")
              (("3"
                (inst -1
                 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                (("3" (assert)
                  (("3" (split -1)
                    (("1" (inst -1 "car(d_b)" "xx") nil nil)
                     ("2" (hide 2)
                      (("2" (lemma "cont_sub[d]")
                        (("2"
                          (inst -1 "n" "od_fx[d](n, f, y)"
                           "od_fx[d](n, f, z)")
                          (("1" (assert)
                            (("1" (expand "-" 1 1)
                              (("1"
                                (expand "subr2v" 1 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "cont_od_fx")
                              (("2" (inst -1 "n" "f" "z") nil nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (lemma "cont_od_fx")
                              (("3" (inst -1 "n" "f" "y") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep 1)
            (("5" (typepred "d_b") (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (prod_continuous formula-decl nil continuous_functions analysis)
    (Int_cont formula-decl nil r2v_analysis nil)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (exp_continuous formula-decl nil ln_exp lnexp_fnd)
    (composition_cont formula-decl nil composition_continuous
     analysis))
   nil)
  (od_fx_contD_diff-1 nil 3788694122
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      (("" (inst?)
        (("1" (hide 2)
          (("1" (lemma "prod_continuous[(d)]")
            (("1" (expand "continuous?" 1)
              (("1" (skeep 1)
                (("1"
                  (inst -1 "LAMBDA (xx: (d)):
                    exp(xx * -K - car[real](d_b[d]) * -K)"
                   "LAMBDA (xx: (d)):
                     nn(Integral[d]
                            (car[real](d_b[d]), xx,
                             ((-[d])
                                  (od_fx[d](n, f, y),
                                   od_fx[d](n, f, z)))))" "x0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (expand "*" -1) (("1" (propax) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "composition_cont[(d),real]")
                          (("2" (postpone) nil nil)) nil))
                        nil)
                       ("3" (postpone) nil nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil) ("3" (postpone) nil nil)
                   ("4" (postpone) nil nil) ("5" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil) ("3" (postpone) nil nil)
         ("4" (postpone) nil nil) ("5" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rho_psi_int_TCC1 0
  (rho_psi_int_TCC1-1 nil 3788623196
   ("" (skeep) (("" (typepred "d_b") (("" (assert) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int subtype
    "r2v_continuous_extension[ODE_psi_contraction.d].d_b"
    "(list_adt[real].cons?)")))
 (rho_psi_int_TCC2 0
  (rho_psi_int_TCC2-1 nil 3788623196
   ("" (skeep) (("" (typepred "d_b") (("" (propax) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b)"
    "(ODE_psi_contraction.d)")))
 (rho_psi_int_TCC3 0
  (rho_psi_int_TCC3-1 nil 3788623196
   ("" (lemma "cont_od_fx") (("" (skeep 1) (("" (inst?) nil nil)) nil))
    nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil))
   nil
   (rho_psi_int subtype "ODE_psi_contraction.f"
    "{ff: ODE_def[ODE_psi_contraction.d].od_f(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ff, ODE_psi_contraction.y))}")))
 (rho_psi_int_TCC4 0
  (rho_psi_int_TCC4-1 nil 3788623196
   ("" (skeep) (("" (lemma "psi_cont") (("" (inst?) nil nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (psi_cont formula-decl nil ODE_psi_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_f type-eq-decl nil ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int subtype
    "ODE_psi_def[ODE_psi_contraction.d].psi(ODE_psi_contraction.n, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.y0, ODE_psi_contraction.y, ODE_psi_contraction.f)"
    "{ff: r2v_def[ODE_psi_contraction.d].r2v_n(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ff)}")))
 (rho_psi_int_TCC5 0
  (rho_psi_int_TCC5-1 nil 3788623196
   ("" (lemma "cont_od_fx")
    (("" (assert) (("" (skeep 1) (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil))
   nil
   (rho_psi_int subtype "ODE_psi_contraction.f"
    "{ff: ODE_def[ODE_psi_contraction.d].od_f(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ff, ODE_psi_contraction.z))}")))
 (rho_psi_int_TCC6 0
  (rho_psi_int_TCC6-1 nil 3788623196
   ("" (skeep) (("" (lemma "psi_cont") (("" (inst?) nil nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (psi_cont formula-decl nil ODE_psi_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_f type-eq-decl nil ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int subtype
    "ODE_psi_def[ODE_psi_contraction.d].psi(ODE_psi_contraction.n, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.y0, ODE_psi_contraction.z, ODE_psi_contraction.f)"
    "{ff: r2v_def[ODE_psi_contraction.d].r2v_n(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ff)}")))
 (rho_psi_int_TCC7 0
  (rho_psi_int_TCC10-1 nil 3788623196
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      ((""
        (inst -1 "(LAMBDA (xx: (d)):
                        exp(-K * (xx - car[real](d_b))) *
                         nn(Integral[d]
                                (car[real](d_b), xx,
                                 (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))))")
        (("1" (hide 2)
          (("1" (lemma "prod_continuous[(d)]")
            (("1" (expand "continuous?" 1 1)
              (("1" (skeep 1)
                (("1"
                  (inst -1 "(LAMBDA (xx: (d)):
                             exp(-K * (xx - car[real](d_b))))"
                   "(LAMBDA (xx: (d)):
                              nn(Integral[d]
                                     (car[real](d_b), xx,
                                      (-[d])
                                          (od_fx[d](n, f, y),
                                           od_fx[d](n, f, z)))))" "x0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (assert)
                        (("1" (expand "*" -1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "composition_cont[(d),real]")
                          (("2" (expand "o ")
                            (("2"
                              (inst -1
                               "LAMBDA(xx:(d)): -K * (xx - car[real](d_b))"
                               "_" "_")
                              (("1"
                                (inst -1 "LAMBDA(x:real): exp(x)" "_")
                                (("1"
                                  (inst -1 "x0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (expand "continuous?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "epsilon/K")
                                              (("1"
                                                (skeep 1)
                                                (("1"
                                                  (case
                                                   "-K * x - -K * x0 = -K*(x-x0)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "abs_mult")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "-K"
                                                         "(x-x0)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             1
                                                             1)
                                                            (("1"
                                                              (div-by
                                                               1
                                                               "K")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "exp_continuous")
                                          (("2"
                                            (expand "continuous?" -1)
                                            (("2"
                                              (inst
                                               -1
                                               "-K * ( x0 - car[real](d_b))")
                                              (("2"
                                                (expand "continuous?")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "d_b")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "cont_nn_comp")
                          (("3"
                            (inst -1 "n" "LAMBDA(xx:(d)): Integral[d]
                                            (car[real](d_b), xx,
                                             (-[d])
                                                 (od_fx[d](n, f, y), od_fx[d](n, f, z)))"
                             "nn")
                            (("1" (assert)
                              (("1"
                                (expand "continuous?")
                                (("1"
                                  (inst -1 "x0")
                                  (("1"
                                    (expand "continuous?" -1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "Int_cont")
                                (("2"
                                  (inst
                                   -1
                                   "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))"
                                   "car(d_b)")
                                  (("1"
                                    (typepred "d_b")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "d_b")
                                    (("2"
                                      (hide 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (lemma "cont_sub[d]")
                                      (("3"
                                        (inst
                                         -1
                                         "n"
                                         "od_fx[d](n, f, y)"
                                         "od_fx[d](n, f, z)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "-" 1 1)
                                            (("1"
                                              (expand "subr2v" 1 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma "cont_od_fx")
                                            (("2"
                                              (inst -1 "n" "f" "z")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (lemma "cont_od_fx")
                                            (("3"
                                              (inst -1 "n" "f" "y")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (skeep 1)
                                (("3"
                                  (typepred
                                   "Integral[d]
                         (car[real](d_b), xx,
                          (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                                  (("3"
                                    (typepred
                                     "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                                    (("3"
                                      (typepred
                                       "od_fx[d](n, f, y)"
                                       "od_fx[d](n, f, z)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (replace -1)
                                          (("3"
                                            (replace -2)
                                            (("3"
                                              (expand "max" -4)
                                              (("3"
                                                (replace -4)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (assert)
                              (("4"
                                (hide 2)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (lemma "cont_Int")
                                    (("4"
                                      (inst
                                       -1
                                       "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (split -1)
                                          (("1"
                                            (inst -1 "car(d_b)" "xx")
                                            nil
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma "cont_sub[d]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "n"
                                                 "od_fx[d](n, f, y)"
                                                 "od_fx[d](n, f, z)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "-" 1 1)
                                                    (("1"
                                                      (expand
                                                       "subr2v"
                                                       1
                                                       1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "z")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "y")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide 2)
                              (("5"
                                (skeep)
                                (("5"
                                  (typepred "d_b")
                                  (("5" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (hide 2)
                              (("6"
                                (skeep)
                                (("6"
                                  (typepred "d_b")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2"
                        (typepred "Integral[d]
                     (car[real](d_b), xx,
                      (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                        (("2"
                          (typepred
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("2"
                            (typepred "od_fx[d](n, f, y)"
                             "od_fx[d](n, f, z)")
                            (("2" (replace -1)
                              (("2"
                                (replace -2)
                                (("2"
                                  (expand "max" -4)
                                  (("2"
                                    (replace -4)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (lemma "cont_Int")
                        (("3"
                          (inst -1
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("3" (assert)
                            (("3" (split -1)
                              (("1" (inst -1 "car(d_b)" "xx") nil nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "cont_sub[d]")
                                    (("2"
                                      (inst
                                       -1
                                       "n"
                                       "od_fx[d](n, f, y)"
                                       "od_fx[d](n, f, z)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "-" 1 1)
                                          (("1"
                                            (expand "subr2v" 1 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "cont_od_fx")
                                          (("2"
                                            (inst -1 "n" "f" "z")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2)
                                        (("3"
                                          (lemma "cont_od_fx")
                                          (("3"
                                            (inst -1 "n" "f" "y")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skeep)
                      (("4" (typepred "d_b") (("4" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skeep)
                      (("5" (typepred "d_b") (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2"
              (typepred "Integral[d]
                   (car[real](d_b), xx,
                    (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
              (("2"
                (typepred
                 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))"
                 "od_fx[d](n, f, y)" "od_fx[d](n, f, z)")
                (("2" (typepred "od_fx[d](n, f, y)")
                  (("2" (replace -4)
                    (("2" (replace -4)
                      (("2" (expand "max" -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "cont_Int")
              (("3"
                (inst -1
                 "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                (("3" (assert)
                  (("3" (split -1)
                    (("1" (inst -1 "car(d_b)" "xx") nil nil)
                     ("2" (hide 2)
                      (("2" (lemma "cont_sub[d]")
                        (("2"
                          (inst -1 "n" "od_fx[d](n, f, y)"
                           "od_fx[d](n, f, z)")
                          (("1" (assert)
                            (("1" (expand "-" 1 1)
                              (("1"
                                (expand "subr2v" 1 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "cont_od_fx")
                              (("2" (inst -1 "n" "f" "z") nil nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (lemma "cont_od_fx")
                              (("3" (inst -1 "n" "f" "y") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep 1)
            (("5" (typepred "d_b") (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (composition_cont formula-decl nil composition_continuous analysis)
    (exp_continuous formula-decl nil ln_exp lnexp_fnd)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (abs_mult formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (O const-decl "T3" function_props nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (Int_cont formula-decl nil r2v_analysis nil)
    (prod_continuous formula-decl nil continuous_functions analysis)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (nn skolem-const-decl "(norm?(n))" ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (norm? const-decl "bool" norms mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (rho_psi_int subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[ODE_psi_contraction.d].ext_c(LAMBDA (xx: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(xx, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), ODE_psi_contraction.nn(r2v_analysis[ODE_psi_contraction.d].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), xx, (r2v_def[ODE_psi_contraction.d].-)(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.y), ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.z))))))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x)))(ff)}")))
 (rho_psi_int_TCC8 0
  (rho_psi_int_TCC13-1 nil 3788623196
   ("" (skeep)
    (("" (lemma "d_three")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "closed_interval") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d_three formula-decl nil interval_def nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int subtype
    "LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x))"
    "{DD: (closed_bounded_domain[1].closed_domain?) | booleans.AND(closed_bounded_domain[1].bounded_domain?(DD), sets[matrices.VectorN(1)].nonempty?(DD))}")))
 (rho_psi_int 0
  (rho_psi_int-1 nil 3788628301
   ("" (skeep)
    (("" (expand "rho" 1 1)
      (("" (expand "psi" 1 1)
        ((""
          (case "(LAMBDA (x: VectorN(1)):
                          ext_c(pre_rho(n, K, nn)
                                       (LAMBDA (x: (d)) -> VectorN(n):
                                          y0 + Integral(car(d_b), x, od_fx(n, f, y)),
                                        psi(n, car(d_b), y0, z, f)))
                               (car(x))) = (LAMBDA (x: VectorN(1)):
                    ext_c(LAMBDA (xx: (d)):
                            exp(xx * -K - car(d_b) * -K) *
                             nn(Integral(car(d_b), xx,
                                         od_fx(n, f, y) - od_fx(n, f, z))))
                         (car(x)))")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (decompose-equality 1)
              (("1" (typepred "x!1")
                (("1" (case "d(car(x!1))")
                  (("1" (typepred "d_b")
                    (("1" (inst -5 "car(x!1)")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "ext_c")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2 -10)
                                  (("1"
                                    (expand "pre_rho" 1 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (div-by
                                         1
                                         "exp(car(x!1) * -K - car(d_b) * -K)")
                                        (("1"
                                          (expand "psi" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "y0 + Integral(car(d_b), car(x!1), od_fx(n, f, y)) -
                        (y0 + Integral(car(d_b), car(x!1), od_fx(n, f, z))) = Integral(car(d_b), car(x!1), od_fx(n, f, y) - od_fx(n, f, z))")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma
                                                   "quad_cancel_p_m")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "y0"
                                                     " Integral(car(d_b), car(x!1), od_fx(n, f, y))"
                                                     "Integral(car(d_b), car(x!1), od_fx(n, f, z))")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (lemma
                                                           "Int_diff")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(d_b)"
                                                             "car(x!1)"
                                                             "od_fx(n, f, y)"
                                                             "od_fx(n, f, z)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (case
                                                                 "car[real](d_b[d]) = car[real](x!1)")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "Integrable?"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (expand
                                                                         "Integrable?"
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "int_od_fx")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "car(d_b)"
                                                                       "car(x!1)")
                                                                      (("1"
                                                                        (expand
                                                                         "Integrable?"
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "integrable?"
                                                                           -1)
                                                                          (("1"
                                                                            (skeep
                                                                             2)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "i")
                                                                              (("1"
                                                                                (expand
                                                                                 "Integrable?"
                                                                                 2
                                                                                 1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "d_b")
                    (("2" (inst -5 "car(x!1)")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (typepred "d_b")
                            (("2" (inst -5 "car(d_b)")
                              (("2"
                                (assert)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (expand "ext_c" 3 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "ext_c" 3 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "pre_rho" 3 1)
                                            (("1"
                                              (expand "psi" 3)
                                              (("1"
                                                (lemma
                                                 "quad_cancel_p_m")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "y0"
                                                   " Integral(car(d_b), car(d_b), od_fx(n, f, y))"
                                                   "Integral(car(d_b), car(d_b), od_fx(n, f, z))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 3)
                                                      (("1"
                                                        (lemma
                                                         "Int_diff")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "car(d_b)"
                                                           "car(d_b)"
                                                           " od_fx(n, f, y) "
                                                           " od_fx(n, f, z)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "int_od_fx")
                                                            (("2"
                                                              (expand
                                                               "Integrable?"
                                                               1)
                                                              (("2"
                                                                (skeep
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "Integrable?"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -)
                                                    (("2"
                                                      (typepred
                                                       "Integral[d]
                           (car[real](d_b[d]), car[real](d_b[d]), od_fx[d](n, f, z))")
                                                      (("2"
                                                        (typepred
                                                         "od_fx(n,f,z)")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (typepred
                                                     "(Integral[d]
                           (car[real](d_b[d]), car[real](d_b[d]), od_fx[d](n, f, y)))")
                                                    (("3"
                                                      (hide -1)
                                                      (("3"
                                                        (typepred
                                                         "od_fx(n,f,y)")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "ext_c")
                                      (("2"
                                        (expand "pre_rho" 3)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (div-by
                                             3
                                             "exp(car(cdr(d_b)) * -K - car(d_b) * -K) ")
                                            (("2"
                                              (expand "psi" 3)
                                              (("2"
                                                (lemma
                                                 "quad_cancel_p_m")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "y0"
                                                     "Integral(car(d_b), car(cdr(d_b)), od_fx(n, f, y))"
                                                     " Integral(car(d_b), car(cdr(d_b)), od_fx(n, f, z))")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1 3)
                                                        (("2"
                                                          (lemma
                                                           "Int_diff")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "car(d_b)"
                                                             "car(cdr(d_b))"
                                                             "od_fx(n, f, y)"
                                                             " od_fx(n, f, z)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "int_od_fx")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "car(d_b)"
                                                                 "car(cdr(d_b))"
                                                                 "n"
                                                                 "f"
                                                                 "z")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "Integrable?"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "integrable?"
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "Integrable?"
                                                                               1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "d_b")
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   "car(d_b)")
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "d_b")
                                                                    (("2"
                                                                      (lemma
                                                                       "closed_interval")
                                                                      (("2"
                                                                        (expand
                                                                         "closed_interval?"
                                                                         -1)
                                                                        (("2"
                                                                          (skeep
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "closed_interval?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "car(d_b)")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "car(cdr(d_b))")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "d_b")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -5
                                                                                       "a")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -5
                                                                                         "b")
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2"
                  (typepred "Integral[d]
               (car[real](d_b[d]), xx,
                (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                  (("2"
                    (typepred
                     "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                    (("2"
                      (typepred "od_fx[d](n, f, y)"
                       "(od_fx[d](n, f, z))")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (lemma "od_fx_diff_Int")
                  (("3" (inst -1 "n" "f" "y" "z" "xx") nil nil)) nil))
                nil)
               ("4" (skeep 1)
                (("4" (lemma "cont_od_fx")
                  (("4" (inst -1 "n" "f" "z") nil nil)) nil))
                nil)
               ("5" (skeep)
                (("5" (typepred "d_b") (("5" (propax) nil nil)) nil))
                nil)
               ("6" (skeep 1)
                (("6" (typepred "d_b") (("6" (grind) nil nil)) nil))
                nil)
               ("7" (skeep 1)
                (("7"
                  (typepred
                   "y0 + Integral[d](car[real](d_b[d]), x1, od_fx[d](n, f, y))")
                  (("7" (typepred "y0")
                    (("7"
                      (typepred
                       "Integral[d](car[real](d_b[d]), x1, od_fx[d](n, f, y))")
                      (("7" (typepred "od_fx(n,f,y)")
                        (("7" (assert)
                          (("7" (replace -1)
                            (("7" (replace -5)
                              (("7"
                                (replace -3)
                                (("7"
                                  (expand "max")
                                  (("7" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("8" (skeep)
                (("8" (lemma "int_od_fx")
                  (("8" (inst -1 "car(d_b)" "x1" "n" "f" "y")
                    (("1" (expand "Integrable?")
                      (("1" (expand "integrable?" -1)
                        (("1" (skeep)
                          (("1" (inst -1 "i")
                            (("1" (assert)
                              (("1"
                                (expand "Integrable?" 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "d_b")
                                      (("1"
                                        (inst -5 "x1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "d_b")
                      (("2" (inst -5 "x1")
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (expand "Integrable?" 2)
                              (("2"
                                (skeep 2)
                                (("2"
                                  (expand "Integrable?" 2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("9" (skeep)
                (("9" (typepred "d_b") (("9" (propax) nil nil)) nil))
                nil)
               ("10" (skeep)
                (("10" (typepred "d_b") (("10" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3"
                (typepred "Integral[d]
               (car[real](d_b[d]), xx,
                (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                (("3"
                  (typepred
                   "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                  (("3"
                    (typepred "(od_fx[d](n, f, y))"
                     "(od_fx[d](n, f, z))")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide 2)
            (("4" (skeep)
              (("4" (lemma "od_fx_diff_Int") (("4" (inst?) nil nil))
                nil))
              nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep)
              (("5" (lemma "cont_od_fx") (("5" (inst?) nil nil)) nil))
              nil))
            nil)
           ("6" (hide 2)
            (("6" (skeep)
              (("6" (typepred "d_b") (("6" (propax) nil nil)) nil))
              nil))
            nil)
           ("7" (hide 2)
            (("7" (skeep)
              (("7" (typepred "d_b") (("7" (grind) nil nil)) nil))
              nil))
            nil)
           ("8" (hide 2)
            (("8" (skeep 1)
              (("8"
                (typepred
                 "y0 + Integral[d](car[real](d_b[d]), x1, od_fx[d](n, f, y))"
                 "y0"
                 "Integral[d](car[real](d_b[d]), x1, od_fx[d](n, f, y))")
                (("8" (assert)
                  (("8" (replace -4)
                    (("8" (typepred "od_fx(n,f,y)")
                      (("8" (replace -1)
                        (("8" (replace -7)
                          (("8" (expand "max" -3)
                            (("8" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (skeep)
            (("9" (lemma "Int_od_fx") (("9" (inst?) nil nil)) nil))
            nil)
           ("10" (skeep)
            (("10" (typepred "d_b") (("10" (propax) nil nil)) nil))
            nil)
           ("11" (skeep)
            (("11" (typepred "d_b") (("11" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rho const-decl "nnreal" metric_rho nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (y0 skolem-const-decl "VectorN(n)" ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (quad_cancel_p_m formula-decl nil vector_arithmetic mv_analysis)
    (Int_diff formula-decl nil r2v_analysis nil)
    (int_od_fx formula-decl nil norm_ineq nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (x!1 skolem-const-decl "VectorN(1)" ODE_psi_contraction nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (exp_0 formula-decl nil ln_exp lnexp_fnd)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (integrable? const-decl "bool" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (width const-decl "posreal" integral_def analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (od_fx_diff_Int formula-decl nil ODE_psi_contraction nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (x1 skolem-const-decl "(d)" ODE_psi_contraction nil)
    (Int_od_fx formula-decl nil ODE_continuous_def nil)
    (psi const-decl "{pp: r2v_n(n) | length(pp) = n}" ODE_psi_def nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (od_fx_diff_norm_int_TCC1 0
  (od_fx_diff_norm_int_TCC3-1 nil 3788693573
   ("" (skeep)
    ((""
      (typepred "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
       "od_fx[d](n, f, y)(dd)" "od_fx[d](n, f, z)(dd)")
      (("" (assert) nil nil)) nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (od_fx_diff_norm_int subtype
    "(matrices.-)(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.y)(ODE_psi_contraction.dd), ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.z)(ODE_psi_contraction.dd))"
    "(list_adt[real].cons?)")))
 (od_fx_diff_norm_int 0
  (od_fx_diff_norm_int-1 nil 3788707581
   ("" (lemma "cont_nn_comp")
    (("" (skeep 1)
      ((""
        (inst -1 "n"
         "LAMBDA (dd: (d)): od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
         "norm_inf(n)")
        (("1" (lemma "continuous_Integrable?[(d)]")
          (("1"
            (inst -1 "car(d_b)" "xx" "LAMBDA (dd: (d)):
             norm_inf(n)(od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd))")
            (("1" (assert)
              (("1" (hide 2)
                (("1" (skeep)
                  (("1" (expand "continuous?" -1)
                    (("1" (inst -1 "x") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep 1)
                (("2" (typepred "od_fx[d](n, f, z)(dd)")
                  (("2" (typepred "od_fx[d](n, f, y)(dd)")
                    (("2"
                      (typepred
                       "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                      (("2" (replace -4)
                        (("2" (replace -6)
                          (("2" (expand "max" -2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
           ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
           ("4" (lemma "non_empty")
            (("4" (expand "nonempty?")
              (("4" (expand "empty?" 1)
                (("4" (skeep 1)
                  (("4" (inst 1 "x")
                    (("4" (expand "member" -1) (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "cont_sub")
            (("2"
              (inst -1 "n" "LAMBDA (dd: (d)): od_fx[d](n, f, y)(dd)"
               "LAMBDA (dd: (d)): od_fx[d](n, f, z)(dd)")
              (("1" (assert)
                (("1" (lemma "cont_od_fx")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1"
                          (case "od_fx[d](n, f, z) = LAMBDA (dd: (d)): od_fx[d](n, f, z)(dd)")
                          (("1"
                            (case "(LAMBDA (dd: (d)): od_fx[d](n, f, z)(dd)) = od_fx(n,f,z)")
                            (("1" (assert) nil nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil)
                           ("2" (decompose-equality 1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "cont_od_fx")
                (("2" (inst?)
                  (("2"
                    (case "(LAMBDA (dd: (d)): od_fx[d](n, f, y)(dd)) = od_fx(n,f,y)")
                    (("1" (assert) nil nil)
                     ("2" (decompose-equality 1) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3"
              (typepred "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
               "od_fx[d](n,f,y)(dd)" "od_fx(n,f,z)(dd)")
              (("3" (assert)
                (("3" (replace -4)
                  (("3" (replace -6)
                    (("3" (expand "max" -2) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (TRUE const-decl "bool" booleans nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (connected formula-decl nil ODE_psi_def nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (empty? const-decl "bool" sets nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     ODE_psi_contraction nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil))
   shostak))
 (od_fx_contD_Int_diff_TCC1 0
  (od_fx_contD_Int_diff_TCC1-1 nil 3788693573
   ("" (skeep) (("" (typepred "x") (("" (grind) nil nil)) nil)) nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (od_fx_contD_Int_diff subtype "ODE_psi_contraction.x"
    "(list_adt[real].cons?)")))
 (od_fx_contD_Int_diff_TCC2 0
  (od_fx_contD_Int_diff_TCC2-1 nil 3788693573
   ("" (skeep)
    (("" (lemma "od_fx_diff_norm_int")
      (("" (inst?) (("" (typepred "y0") (("" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   ((od_fx_diff_norm_int formula-decl nil ODE_psi_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (od_fx_contD_Int_diff subtype
    "LAMBDA (dd: (ODE_psi_contraction.d)): norms.norm_inf(ODE_psi_contraction.n)((matrices.-)(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.y)(dd), ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.z)(dd)))"
    "integral_def[(ODE_psi_contraction.d)].Integrable_funs(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx)")))
 (od_fx_contD_Int_diff 0
  (od_fx_contD_Int_diff-1 nil 3788708871
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      ((""
        (inst -1 "(LAMBDA (xx: (d)):
                    exp(-K * (xx - car[real](d_b[d]))) *
                     Integral[(d)]
                         (car[real](d_b[d]), xx,
                          LAMBDA (dd: (d)):
                            norm_inf(n)
                                    (od_fx[d](n, f, y)(dd)
                                     -
                                     od_fx[d](n, f, z)(dd))))")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (lemma " prod_continuous[(d)]")
              (("1"
                (inst -1 "((LAMBDA (xx: (d)):
              exp(xx * -K - car[real](d_b[d]) * -K)))"
                 " LAMBDA (xx: (d)): Integral[(d)]
                   (car[real](d_b[d]), xx,
                    LAMBDA (dd: (d)):
                      norm_inf(n)
                              (od_fx[d](n, f, y)(dd) -
                                od_fx[d](n, f, z)(dd)))" "_")
                (("1" (assert)
                  (("1" (expand "continuous?" 1)
                    (("1" (skeep 1)
                      (("1" (inst -1 "x0")
                        (("1" (assert)
                          (("1" (split -1)
                            (("1" (expand "*" -1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "cont_exp_lin")
                                (("2"
                                  (inst
                                   -1
                                   "-K"
                                   "car[real](d_b[d]) * -K")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "continuous?" -1)
                                      (("1"
                                        (inst -1 "x0")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "d_b")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (lemma "Int_cont")
                                (("3"
                                  (inst
                                   -1
                                   " LAMBDA (dd: (d)):
                           (: norm_inf(n)
                                   (od_fx[d](n, f, y)(dd)
                                    -
                                    od_fx[d](n, f, z)(dd)) :)"
                                   "car(d_b)")
                                  (("1"
                                    (expand "continuous?" -1)
                                    (("1"
                                      (inst -1 "0")
                                      (("1"
                                        (lemma "Int_nth")
                                        (("1"
                                          (case
                                           "nth(LAMBDA (x: (d)):
                 Integral(car(d_b), x,
                          LAMBDA (dd: (d)):
                            (: norm_inf(n)
                                       (od_fx[d](n, f, y)(dd)
                                        -
                                        od_fx[d](n, f, z)(dd)) :)),
               0) = LAMBDA(x:(d)): nth(Integral(car(d_b), x,
                          LAMBDA (dd: (d)):
                            (: norm_inf(n)
                                       (od_fx[d](n, f, y)(dd)
                                        -
                                        od_fx[d](n, f, z)(dd)) :)),0)
")
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (case
                                               " (LAMBDA (x: (d)):
             nth(Integral(car(d_b), x,
                          LAMBDA (dd: (d)):
                            (: norm_inf(n)
                                       (od_fx[d](n, f, y)(dd)
                                        -
                                        od_fx[d](n, f, z)(dd)) :)),0)) = (LAMBDA (x: (d)): Integral(car(d_b),x, LAMBDA(dd:(d)):  norm_inf(n)
                                       (od_fx[d](n, f, y)(dd)
                                        -
                                        od_fx[d](n, f, z)(dd))))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide -1 -2)
                                                  (("1"
                                                    (expand
                                                     "continuous?"
                                                     -2)
                                                    (("1"
                                                      (inst -2 "x0")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "car(d_b)"
                                                     "x!1"
                                                     " LAMBDA (dd: (d)):
                     (: norm_inf(n)
                                (od_fx[d](n, f, y)(dd) -
                                  od_fx[d](n, f, z)(dd)) :)"
                                                     "0")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (split 1)
                                                        (("1"
                                                          (inst 1 "1")
                                                          (("1"
                                                            (skeep)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "od_fx_diff_norm_int")
                                                          (("2"
                                                            (expand
                                                             "Integrable?"
                                                             1)
                                                            (("2"
                                                              (skeep 1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (case
                                                                         "NOT i=0")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "nth"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "n"
                                                                                 "f"
                                                                                 "y"
                                                                                 "z"
                                                                                 "_")
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!1")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (hide 2)
                                                      (("4"
                                                        (skeep)
                                                        (("4"
                                                          (typepred
                                                           "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
                                                           "od_fx[d](n, f, y)(dd)"
                                                           "od_fx[d](n, f, z)(dd)")
                                                          (("4"
                                                            (replace
                                                             -4)
                                                            (("4"
                                                              (replace
                                                               -6)
                                                              (("4"
                                                                (expand
                                                                 "max"
                                                                 -2)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep 1)
                                                    (("2"
                                                      (lemma
                                                       "od_fx_diff_norm_int")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred
                                                       "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
                                                       "od_fx[d](n, f, y)(dd)"
                                                       "od_fx[d](n, f, z)(dd)")
                                                      (("3"
                                                        (replace -6)
                                                        (("3"
                                                          (replace -4)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep 1)
                                                    (("4"
                                                      (typepred
                                                       "Integral[d]
                (car[real](d_b[d]), x,
                 LAMBDA (dd: (d)):
                   (: norm_inf(n)
                              (od_fx[d](n, f, y)(dd) -
                                od_fx[d](n, f, z)(dd)) :))")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -2
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -2
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "1")
                                                            (("1"
                                                              (skeep)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "Integrable?"
                                                             1)
                                                            (("2"
                                                              (skeep 1)
                                                              (("2"
                                                                (case
                                                                 "NOT i=0")
                                                                (("1"
                                                                  (typepred
                                                                   "i")
                                                                  (("1"
                                                                    (hide
                                                                     -2
                                                                     -3
                                                                     -4)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("2"
                                                                        (lemma
                                                                         "od_fx_diff_norm_int")
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (skeep 1)
                                                    (("5"
                                                      (split 1)
                                                      (("1"
                                                        (inst 1 "1")
                                                        (("1"
                                                          (skeep)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "od_fx_diff_norm_int")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "z"
                                                               "x")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "Integrable?"
                                                                   1)
                                                                  (("2"
                                                                    (skeep
                                                                     1)
                                                                    (("2"
                                                                      (case
                                                                       "NOT i=0")
                                                                      (("1"
                                                                        (typepred
                                                                         "i")
                                                                        (("1"
                                                                          (hide
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (skeep)
                                                    (("6"
                                                      (typepred "d_b")
                                                      (("6"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (skeep)
                                                    (("7"
                                                      (typepred "d_b")
                                                      (("7"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (lemma
                                                     "od_fx_diff_norm_int")
                                                    (("3"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred
                                                     "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
                                                     "od_fx[d](n, f, y)(dd)"
                                                     "od_fx[d](n, f, z)(dd)")
                                                    (("4"
                                                      (replace -6)
                                                      (("4"
                                                        (replace -4)
                                                        (("4"
                                                          (expand
                                                           "max")
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide 2)
                                                (("5"
                                                  (skeep)
                                                  (("5"
                                                    (split 1)
                                                    (("1"
                                                      (inst 1 "1")
                                                      (("1"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "Integrable?"
                                                       1
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (hide-all-but
                                                           1)
                                                          (("2"
                                                            (case
                                                             "NOT i=0")
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "od_fx_diff_norm_int")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "z"
                                                                         "x")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (decompose-equality 1)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (expand "nth" 1 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (typepred
                                                   "Integral[d]
                (car[real](d_b[d]), x,
                 LAMBDA (dd: (d)):
                   (: norm_inf(n)
                              (od_fx[d](n, f, y)(dd) -
                                od_fx[d](n, f, z)(dd)) :))")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (inst 1 "1")
                                                        (("1"
                                                          (skeep)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "Integrable?"
                                                         1)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -2)
                                                            (("2"
                                                              (case
                                                               "NOT i=0")
                                                              (("1"
                                                                (typepred
                                                                 "i")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (lemma
                                                                   "od_fx_diff_norm_int")
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (inst 1 "1")
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred
                                                     "Integral[d]
               (car[real](d_b[d]), x_1,
                LAMBDA (dd: (d)):
                  (: norm_inf(n)
                             (od_fx[d](n, f, y)(dd) -
                               od_fx[d](n, f, z)(dd)) :))")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (inst 1 "1")
                                                          (("1"
                                                            (skeep)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "Integrable?"
                                                           1)
                                                          (("2"
                                                            (skeep 1)
                                                            (("2"
                                                              (case
                                                               "NOT i=0")
                                                              (("1"
                                                                (typepred
                                                                 "i")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "od_fx_diff_norm_int")
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (skeep 1)
                                                (("4"
                                                  (split)
                                                  (("1"
                                                    (inst 1 "1")
                                                    (("1"
                                                      (skeep)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "Integrable?"
                                                     1)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (case
                                                         "NOT i=0")
                                                        (("1"
                                                          (typepred
                                                           "i")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "od_fx_diff_norm_int")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (skeep 1)
                                                (("5"
                                                  (typepred "d_b")
                                                  (("5"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (skeep 1)
                                                (("6"
                                                  (typepred "d_b")
                                                  (("6"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide 2)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (typepred
                                                 "Integral[d]
                (car[real](d_b[d]), x,
                 LAMBDA (dd: (d)):
                   (: norm_inf(n)
                              (od_fx[d](n, f, y)(dd) -
                                od_fx[d](n, f, z)(dd)) :))")
                                                (("1" (grind) nil nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (inst 1 "1")
                                                      (("1"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "Integrable?")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (case
                                                           "NOT i=0")
                                                          (("1"
                                                            (typepred
                                                             "i")
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "nth"
                                                             1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "od_fx_diff_norm_int")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide 2)
                                            (("4"
                                              (inst 1 "1")
                                              (("4"
                                                (skeep 1)
                                                (("4"
                                                  (typepred
                                                   "Integral[d]
               (car[real](d_b[d]), x_1,
                LAMBDA (dd: (d)):
                  (: norm_inf(n)
                             (od_fx[d](n, f, y)(dd) -
                               od_fx[d](n, f, z)(dd)) :))")
                                                  (("1"
                                                    (replace -2 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (inst 1 "1")
                                                        (("1"
                                                          (skeep)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "Integrable?")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (case
                                                             "NOT i=0")
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "od_fx_diff_norm_int")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("5"
                                            (hide 2)
                                            (("5"
                                              (skeep)
                                              (("5"
                                                (split 1)
                                                (("1"
                                                  (inst 1 "1")
                                                  (("1"
                                                    (skeep)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "Integrable?")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "NOT i=0")
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "od_fx_diff_norm_int")
                                                              (("2"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("6"
                                            (hide 2)
                                            (("6"
                                              (skeep)
                                              (("6"
                                                (typepred "d_b")
                                                (("6"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("7"
                                            (hide 2)
                                            (("7"
                                              (skeep)
                                              (("7"
                                                (typepred "d_b")
                                                (("7" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "length" 1 1)
                                          (("2"
                                            (typepred
                                             "Integral[d]
                  (car[real](d_b[d]), choose(d),
                   LAMBDA (dd: (d)):
                     (: norm_inf(n)
                                (od_fx[d](n, f, y)(dd) -
                                  od_fx[d](n, f, z)(dd)) :))")
                                            (("1" (grind) nil nil)
                                             ("2"
                                              (split 1)
                                              (("1"
                                                (inst 1 "1")
                                                (("1" (skeep) nil nil))
                                                nil)
                                               ("2"
                                                (expand "Integrable?")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (case "NOT i=0")
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "nth"
                                                       1
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "d_b")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (typepred "d_b")
                                    (("3" (grind) nil nil))
                                    nil)
                                   ("4"
                                    (split 1)
                                    (("1"
                                      (inst 1 "1")
                                      (("1" (skeep) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (expand "continuous?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (case "NOT i=0")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand "nth" 1 1)
                                                  (("2"
                                                    (expand "nth" 1 1)
                                                    (("2"
                                                      (lemma
                                                       "cont_nn_comp")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (hide 2)
                                                          (("1"
                                                            (lemma
                                                             "cont_sub")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "LAMBDA (x: (d)): od_fx[d](n, f, y)(x)"
                                                               "(LAMBDA (x: (d)):  od_fx[d](n, f, z)(x))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   2)
                                                                  (("1"
                                                                    (lemma
                                                                     "cont_od_fx")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (case
                                                                         "od_fx[d](n, f, z) = (LAMBDA (x: (d)): od_fx[d](n, f, z)(x))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (decompose-equality
                                                                           1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "cont_od_fx")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (case
                                                                     "od_fx[d](n, f, y) = LAMBDA (x: (d)): od_fx[d](n, f, y)(x)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep 1)
                                                          (("2"
                                                            (typepred
                                                             "(od_fx[d](n, f, y)(x) - od_fx[d](n, f, z)(x))"
                                                             "od_fx[d](n, f, y)(x)"
                                                             " od_fx[d](n, f, z)(x)")
                                                            (("2"
                                                              (replace
                                                               -6)
                                                              (("2"
                                                                (replace
                                                                 -4)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep)
                                    (("5"
                                      (hide 2)
                                      (("5"
                                        (typepred
                                         "(od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd))"
                                         "od_fx[d](n, f, y)(dd)"
                                         " od_fx[d](n, f, z)(dd)")
                                        (("5"
                                          (replace -6)
                                          (("5"
                                            (replace -4)
                                            (("5"
                                              (expand "max" -2)
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "od_fx_diff_norm_int")
                    (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (skeep 1)
                    (("3"
                      (typepred
                       "(od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd))"
                       "od_fx[d](n, f, y)(dd)"
                       " od_fx[d](n, f, z)(dd)")
                      (("3" (replace -6)
                        (("3" (replace -4)
                          (("3" (expand "max" -)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (skeep)
                    (("4" (typepred "d_b") (("4" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (skeep)
                    (("5" (typepred "d_b") (("5" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "od_fx_diff_norm_int") (("2" (inst?) nil nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3"
              (typepred
               "(od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd))"
               "od_fx[d](n, f, y)(dd)" "od_fx[d](n, f, z)(dd)")
              (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep)
            (("5" (typepred "d_b") (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (prod_continuous formula-decl nil continuous_functions analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (od_fx_diff_norm_int formula-decl nil ODE_psi_contraction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (x!1 skolem-const-decl "(d)" ODE_psi_contraction nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (null? const-decl "bool" r2v_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Int_nth formula-decl nil r2v_analysis nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (Int_cont formula-decl nil r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rho_psi_int_ineq_TCC1 0
  (rho_psi_int_ineq_TCC2-1 nil 3788691160
   ("" (skeep) (("" (typepred "d_b") (("" (assert) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int_ineq subtype
    "r2v_continuous_extension[ODE_psi_contraction.d].d_b"
    "(list_adt[real].cons?)")))
 (rho_psi_int_ineq_TCC2 0
  (rho_psi_int_ineq_TCC3-1 nil 3788691160
   ("" (skeep) (("" (typepred "d_b") (("" (propax) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int_ineq subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b)"
    "(ODE_psi_contraction.d)")))
 (rho_psi_int_ineq_TCC3 0
  (rho_psi_int_ineq_TCC3-1 nil 3788691424
   ("" (skeep 1) (("" (lemma "cont_od_fx") (("" (inst?) nil nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int_ineq subtype "ODE_psi_contraction.f"
    "{ff: ODE_def[ODE_psi_contraction.d].od_f(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ff, ODE_psi_contraction.y))}")))
 (rho_psi_int_ineq_TCC4 0
  (rho_psi_int_ineq_TCC4-1 nil 3788691424
   ("" (lemma "psi_cont") (("" (skeep) (("" (inst?) nil nil)) nil))
    nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_f type-eq-decl nil ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (psi_cont formula-decl nil ODE_psi_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil))
   nil
   (rho_psi_int_ineq subtype
    "ODE_psi_def[ODE_psi_contraction.d].psi(ODE_psi_contraction.n, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.y0, ODE_psi_contraction.y, ODE_psi_contraction.f)"
    "{ff: r2v_def[ODE_psi_contraction.d].r2v_n(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ff)}")))
 (rho_psi_int_ineq_TCC5 0
  (rho_psi_int_ineq_TCC5-1 nil 3788691424
   ("" (skeep) (("" (lemma "cont_od_fx") (("" (inst?) nil nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int_ineq subtype "ODE_psi_contraction.f"
    "{ff: ODE_def[ODE_psi_contraction.d].od_f(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ff, ODE_psi_contraction.z))}")))
 (rho_psi_int_ineq_TCC6 0
  (rho_psi_int_ineq_TCC6-1 nil 3788691424
   ("" (skeep) (("" (lemma "psi_cont") (("" (inst?) nil nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (psi_cont formula-decl nil ODE_psi_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_f type-eq-decl nil ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int_ineq subtype
    "ODE_psi_def[ODE_psi_contraction.d].psi(ODE_psi_contraction.n, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.y0, ODE_psi_contraction.z, ODE_psi_contraction.f)"
    "{ff: r2v_def[ODE_psi_contraction.d].r2v_n(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ff)}")))
 (rho_psi_int_ineq_TCC7 0
  (rho_psi_int_ineq_TCC10-1 nil 3788691424
   ("" (lemma "od_fx_contD_Int_diff")
    (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (od_fx_contD_Int_diff formula-decl nil ODE_psi_contraction nil))
   nil
   (rho_psi_int_ineq subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[ODE_psi_contraction.d].ext_c(LAMBDA (xx: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(xx, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), integral_def[(ODE_psi_contraction.d)].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), xx, LAMBDA (dd: (ODE_psi_contraction.d)): norms.norm_inf(ODE_psi_contraction.n)((matrices.-)(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.y)(dd), ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ODE_psi_contraction.f, ODE_psi_contraction.z)(dd))))))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x)))(ff)}")))
 (rho_psi_int_ineq_TCC8 0
  (rho_psi_int_ineq_TCC11-1 nil 3788691424
   ("" (skeep)
    (("" (lemma "d_three")
      (("" (lemma "closed_interval") (("" (inst?) nil nil)) nil)) nil))
    nil)
   ((d_three formula-decl nil interval_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (rho_psi_int_ineq subtype
    "LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x))"
    "{DD: (closed_bounded_domain[1].closed_domain?) | booleans.AND(closed_bounded_domain[1].bounded_domain?(DD), sets[matrices.VectorN(1)].nonempty?(DD))}")))
 (rho_psi_int_ineq 0
  (rho_psi_int_ineq-1 nil 3788711857
   ("" (skeep)
    (("" (lemma "rho_psi_int")
      (("" (inst?)
        (("" (replace -1 1)
          (("" (hide -1)
            (("" (lemma "max_ineq")
              ((""
                (inst -1 "LAMBDA (x: VectorN(1)): d(car(x))" "_" "_")
                (("1"
                  (inst -1 "(LAMBDA (x: VectorN(1)):
            ext_c(LAMBDA (xx: (d)):
                    exp(-K * (xx - car(d_b))) *
                     norm_inf(n)
                             (Integral(car(d_b),
                                       xx,
                                       od_fx(n, f, y) - od_fx(n, f, z))))
                 (car(x)))" "(LAMBDA (x: VectorN(1)):
             ext_c(LAMBDA (xx: (d)):
                     exp(-K * (xx - car(d_b))) *
                      Integral(car(d_b), xx,
                               LAMBDA (dd: (d)):
                                 norm_inf(n)
                                         (od_fx(n, f, y)(dd)
                                          -
                                          od_fx(n, f, z)(dd))))
                  (car(x)))")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (skeep)
                        (("1" (typepred "x_1")
                          (("1" (typepred "d_b")
                            (("1" (inst-cp -5 "car(x_1)")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst -5 "car(d_b)")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "ext_c" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "norm_inf(n)
               (Integral(car(d_b), car(x_1),
                         od_fx(n, f, y) - od_fx(n, f, z))) <= Integral(car(d_b), car(x_1),
                 LAMBDA (dd: (d)):
                   norm_inf(n)(od_fx(n, f, y)(dd) - od_fx(n, f, z)(dd)))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (mult-by
                                                   -1
                                                   "exp(car(x_1) * -K - car(d_b) * -K)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma
                                                       "od_fx_diff_norm_int")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred
                                                         "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                                                        (("3"
                                                          (typepred
                                                           "od_fx[d](n, f, y)(dd)"
                                                           "od_fx[d](n, f, z)(dd)")
                                                          (("3"
                                                            (hide
                                                             -1
                                                             -3
                                                             -5)
                                                            (("3"
                                                              (replace
                                                               -1)
                                                              (("3"
                                                                (replace
                                                                 -2)
                                                                (("3"
                                                                  (expand
                                                                   "max"
                                                                   -3)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (hide -1 -10)
                                                  (("2"
                                                    (lemma "normI")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "car(d_b)"
                                                       "car(x_1)"
                                                       "n"
                                                       " od_fx(n, f, y) - od_fx(n, f, z)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide
                                                           -5
                                                           -6
                                                           -7)
                                                          (("1"
                                                            (typepred
                                                             "d_b")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "car(x_1)")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "-"
                                                                     -7
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "subr2v"
                                                                       -7)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (split 1)
                                                          (("1"
                                                            (skeep 1)
                                                            (("1"
                                                              (typepred
                                                               "((-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))(x1)")
                                                              (("1"
                                                                (expand
                                                                 "-"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "subr2v"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (typepred
                                                                     "od_fx[d](n, f, y)(x1) - od_fx[d](n, f, z)(x1)"
                                                                     "od_fx[d](n, f, y)(x1)"
                                                                     "od_fx[d](n, f, z)(x1)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -2)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "cont_sub")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "n"
                                                                 "od_fx(n,f,y)"
                                                                 "od_fx(n,f,z)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "-"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "subr2v"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "cont_od_fx")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (lemma
                                                                   "cont_od_fx")
                                                                  (("3"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide -)
                                                (("3"
                                                  (hide 2)
                                                  (("3"
                                                    (lemma
                                                     "od_fx_diff_norm_int")
                                                    (("3"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred
                                                     "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
                                                     "od_fx[d](n, f, y)(dd)"
                                                     "od_fx[d](n, f, z)(dd)")
                                                    (("4"
                                                      (replace -6)
                                                      (("4"
                                                        (replace -4)
                                                        (("4"
                                                          (expand
                                                           "max"
                                                           -2)
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "od_fx_contD_Int_diff")
                      (("2" (inst?)
                        (("2" (assert) (("2" (inst -1 "K") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (lemma "od_fx_diff_norm_int")
                        (("3" (inst?) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skeep)
                      (("4"
                        (typepred
                         "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)"
                         "od_fx[d](n, f, y)(dd)"
                         "od_fx[d](n, f, z)(dd)")
                        (("4" (replace -4)
                          (("4" (replace -6)
                            (("4" (expand "max" -2)
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (lemma "od_fx_contD_diff")
                      (("5" (inst?)
                        (("5" (inst -1 "K" "norm_inf(n)")
                          (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide 2)
                    (("6" (skeep 1)
                      (("6"
                        (typepred "Integral[d]
               (car[real](d_b[d]), xx,
                (-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z)))")
                        (("6"
                          (typepred
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("6"
                            (typepred "od_fx[d](n, f, y)"
                             "od_fx[d](n, f, z)")
                            (("6" (replace -1)
                              (("6"
                                (replace -2)
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide 2)
                    (("7" (skeep)
                      (("7" (lemma "cont_int")
                        (("7"
                          (inst -1
                           "(-[d])(od_fx[d](n, f, y), od_fx[d](n, f, z))")
                          (("7" (assert)
                            (("7" (split -1)
                              (("1"
                                (typepred "xx")
                                (("1"
                                  (case "xx=car(d_b)")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (lemma "od_fx_diff_Int")
                                      (("1" (inst?) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "d_b")
                                      (("2"
                                        (inst -5 "xx")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "Integrable?" 2)
                                            (("2"
                                              (skeep 2)
                                              (("2"
                                                (lemma
                                                 "od_fx_diff_Int")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -1 "xx")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "od_fx_diff_Int")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (hide 2)
                    (("8" (skeep)
                      (("8" (typepred "d_b") (("8" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("9" (hide 2)
                    (("9" (skeep)
                      (("9" (typepred "d_b") (("9" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "d_three")
                    (("2" (inst?)
                      (("2" (lemma "closed_interval")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rho_psi_int formula-decl nil ODE_psi_contraction nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_ineq formula-decl nil max_function mv_analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (d_three formula-decl nil interval_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Integrable? const-decl "bool" integral_def analysis)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     ODE_psi_contraction nil)
    (od_fx_diff_norm_int formula-decl nil ODE_psi_contraction nil)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (normI formula-decl nil norm_ineq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (od_fx_contD_Int_diff formula-decl nil ODE_psi_contraction nil)
    (od_fx_contD_diff formula-decl nil ODE_psi_contraction nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (od_fx_diff_Int formula-decl nil ODE_psi_contraction nil)
    (cont_int formula-decl nil r2v_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (closed_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (norm_diff_Int_TCC1 0
  (norm_diff_Int_TCC1-1 nil 3788697154 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "posnat" ODE_psi_contraction nil)
    (y!1 skolem-const-decl "{yy: r2v_n[d](n!1) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (length const-decl "nat" r2v_def nil))
   nil
   (norm_diff_Int subtype
    "r2v_continuous_extension[ODE_psi_contraction.d].d_b"
    "(list_adt[real].cons?)")))
 (norm_diff_Int_TCC2 0
  (norm_diff_Int_TCC2-1 nil 3788697154 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   nil
   (norm_diff_Int subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b)"
    "(ODE_psi_contraction.d)")))
 (norm_diff_Int_TCC3 0
  (norm_diff_Int_TCC1-1 nil 3788696876
   ("" (skeep)
    (("" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
      (("" (assert) nil nil)) nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil))
   nil
   (norm_diff_Int subtype
    "(matrices.-)(ODE_psi_contraction.y(ODE_psi_contraction.dd), ODE_psi_contraction.z(ODE_psi_contraction.dd))"
    "(list_adt[real].cons?)")))
 (norm_diff_Int 0
  (norm_diff_Int-1 nil 3788784278
   ("" (skeep)
    (("" (lemma "cont_sub")
      (("" (lemma "cont_nn_comp")
        (("" (inst?)
          (("1" (inst?)
            (("1" (assert)
              (("1" (inst -2 "y" "z")
                (("1" (assert)
                  (("1" (lemma "continuous_Integrable?[(d)]")
                    (("1" (inst?)
                      (("1" (split -1)
                        (("1" (propax) nil nil)
                         ("2" (skeep 1)
                          (("2" (expand "continuous?" -1)
                            (("2" (inst -1 "x") nil nil)) nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "not_one_element")
                      (("2" (propax) nil nil)) nil)
                     ("3" (lemma "connected") (("3" (propax) nil nil))
                      nil)
                     ("4" (lemma "non_empty")
                      (("4" (expand "nonempty?" -1)
                        (("4" (expand "empty?" 1)
                          (("4" (skeep 1)
                            (("4" (inst 1 "x")
                              (("4"
                                (expand "member" -1)
                                (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst?) nil nil)
           ("3" (skeep 1)
            (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
              (("3" (assert)
                (("3" (replace -4)
                  (("3" (replace -6)
                    (("3" (expand "max" -2) (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_sub formula-decl nil r2v_analysis nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (non_empty formula-decl nil ODE_psi_def nil)
    (empty? const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected formula-decl nil ODE_psi_def nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (cont_nn_comp formula-decl nil r2v_analysis nil))
   shostak))
 (norm_diff_contD_TCC1 0
  (norm_diff_contD_TCC1-1 nil 3788697696 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   nil
   (norm_diff_contD subtype "ODE_psi_contraction.x"
    "(list_adt[real].cons?)")))
 (norm_diff_contD_TCC2 0
  (norm_diff_contD_TCC2-1 nil 3788697696
   ("" (skeep)
    (("" (lemma "norm_diff_Int") (("" (inst?) nil nil)) nil)) nil)
   ((norm_diff_Int formula-decl nil ODE_psi_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (norm_diff_contD subtype
    "LAMBDA (dd: (ODE_psi_contraction.d)): norms.norm_inf(ODE_psi_contraction.n)((matrices.-)(ODE_psi_contraction.y(dd), ODE_psi_contraction.z(dd)))"
    "integral_def[(ODE_psi_contraction.d)].Integrable_funs(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx)")))
 (norm_diff_contD 0
  (norm_diff_contD-1 nil 3788784467
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      (("" (inst?)
        (("1" (hide 2)
          (("1" (lemma "prod_continuous[(d)]")
            (("1" (expand "continuous?" 1)
              (("1" (skeep 1)
                (("1"
                  (inst -1 "LAMBDA (xx: (d)):
                     exp(xx * -K - car[real](d_b[d]) * -K)"
                   "(LAMBDA (xx: (d)): Integral[(d)]
                          (car[real](d_b[d]), xx,
                           LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))))"
                   "x0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (expand "*" -1) (("1" (propax) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "cont_exp_lin")
                          (("2" (inst -1 "-K" "car[real](d_b[d]) * -K")
                            (("1" (assert)
                              (("1"
                                (expand "continuous?" -1)
                                (("1"
                                  (inst -1 "x0")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "d_b")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "Int_cont")
                          (("3" (lemma "fundamental[(d)]")
                            (("3"
                              (inst -1 "(LAMBDA (xx: (d)):
                             Integral[(d)]
                                 (car[real](d_b[d]), xx,
                                  LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))))"
                               "car(d_b)"
                               " LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma
                                       "derivable_continuous[(d)]")
                                      (("1"
                                        (inst
                                         -1
                                         "(LAMBDA (xx: (d)):
                                Integral[(d)]
                                    (car[real](d_b[d]), xx,
                                     LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))))"
                                         "_")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 "x0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "derivable?"
                                                 -1)
                                                (("1"
                                                  (inst -1 "x0")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep 1)
                                          (("2"
                                            (lemma
                                             "continuous_Integrable?[(d)]")
                                            (("1"
                                              (inst
                                               -1
                                               "car(d_b)"
                                               "xx"
                                               " LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep 1)
                                                  (("1"
                                                    (lemma "cont_sub")
                                                    (("1"
                                                      (lemma
                                                       "cont_nn_comp")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "continuous?"
                                                               -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -1
                                                           "n"
                                                           "y"
                                                           "z")
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (skeep 1)
                                                          (("3"
                                                            (typepred
                                                             "y(dd)-z(dd)"
                                                             "y(dd)"
                                                             "z(dd)")
                                                            (("3"
                                                              (replace
                                                               -4)
                                                              (("3"
                                                                (replace
                                                                 -6)
                                                                (("3"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (skeep 1)
                                                  (("2"
                                                    (typepred
                                                     "y(dd)-z(dd)"
                                                     "y(dd)"
                                                     "z(dd)")
                                                    (("2"
                                                      (replace -6)
                                                      (("2"
                                                        (replace -4)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "not_one_element")
                                              (("2" (propax) nil nil))
                                              nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (lemma "connected")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (lemma "non_empty")
                                              (("4"
                                                (expand "nonempty?" -1)
                                                (("4"
                                                  (expand "empty?" 1)
                                                  (("4"
                                                    (skeep 1)
                                                    (("4"
                                                      (expand
                                                       "member"
                                                       -1)
                                                      (("4"
                                                        (inst 1 "x")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep 1)
                                          (("3"
                                            (typepred
                                             "y(dd)-z(dd)"
                                             "y(dd)"
                                             "z(dd)")
                                            (("3" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (typepred "d_b")
                                            (("4" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep)
                                          (("5"
                                            (typepred "d_b")
                                            (("5" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "cont_sub")
                                      (("2"
                                        (lemma "cont_nn_comp")
                                        (("2"
                                          (inst?)
                                          (("1" (inst?) nil nil)
                                           ("2"
                                            (skeep 1)
                                            (("2"
                                              (typepred
                                               "y(dd)-z(dd)"
                                               "y(dd)"
                                               "z(dd)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep 1)
                                (("2"
                                  (typepred
                                   "y(dd)-z(dd)"
                                   "y(dd)"
                                   "z(dd)")
                                  (("2" (grind) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "d_b")
                                (("3" (propax) nil nil))
                                nil)
                               ("4"
                                (typepred "d_b")
                                (("4" (assert) nil nil))
                                nil)
                               ("5"
                                (skeep 1)
                                (("5"
                                  (lemma "continuous_Integrable?[(d)]")
                                  (("1"
                                    (inst
                                     -1
                                     "car(d_b)"
                                     "xx"
                                     " LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep 1)
                                        (("1"
                                          (lemma "cont_sub")
                                          (("1"
                                            (lemma "cont_nn_comp")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "continuous?"
                                                         -1)
                                                        (("1"
                                                          (inst -1 "x")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2" (inst?) nil nil))
                                                nil)
                                               ("3"
                                                (skeep 1)
                                                (("3"
                                                  (typepred
                                                   "y(dd)-z(dd)"
                                                   "y(dd)"
                                                   "z(dd)")
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (typepred
                                         "y(dd)-z(dd)"
                                         "y(dd)"
                                         "z(dd)")
                                        (("2"
                                          (replace -4)
                                          (("2"
                                            (replace -6)
                                            (("2"
                                              (expand "max" -2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "not_one_element")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (lemma "connected")
                                    (("3" (propax) nil nil))
                                    nil)
                                   ("4"
                                    (lemma "non_empty")
                                    (("4"
                                      (expand "nonempty?" -1)
                                      (("4"
                                        (expand "empty?" 1)
                                        (("4"
                                          (skeep 1)
                                          (("4"
                                            (inst 1 "x")
                                            (("4"
                                              (expand "member" -1)
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (skeep 1)
                                (("6"
                                  (typepred
                                   "y(dd)-z(dd)"
                                   "y(dd)"
                                   "z(dd)")
                                  (("6" (grind) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (skeep 1)
                                (("7"
                                  (typepred "d_b")
                                  (("7" (propax) nil nil))
                                  nil))
                                nil)
                               ("8"
                                (skeep)
                                (("8"
                                  (typepred "d_b")
                                  (("8" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (lemma "continuous_Integrable?[(d)]")
                      (("1"
                        (inst -1 "car(d_b)" "xx"
                         " LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
                        (("1" (assert)
                          (("1" (skeep 1)
                            (("1" (lemma "cont_sub")
                              (("1"
                                (lemma "cont_nn_comp")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "continuous?" -1)
                                            (("1"
                                              (inst -1 "x")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2" (inst?) nil nil))
                                    nil)
                                   ("3"
                                    (skeep 1)
                                    (("3"
                                      (typepred
                                       "y(dd)-z(dd)"
                                       "y(dd)"
                                       "z(dd)")
                                      (("3" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2"
                            (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                            (("2" (replace -4)
                              (("2"
                                (replace -6)
                                (("2"
                                  (expand "max" -2)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "not_one_element")
                        (("2" (propax) nil nil)) nil)
                       ("3" (lemma "connected")
                        (("3" (propax) nil nil)) nil)
                       ("4" (lemma "non_empty")
                        (("4" (expand "nonempty?" -1)
                          (("4" (expand "empty?" 1)
                            (("4" (skeep 1)
                              (("4"
                                (inst 1 "x")
                                (("4"
                                  (expand "member" -1)
                                  (("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep 1)
                    (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                      (("3" (grind) nil nil)) nil))
                    nil)
                   ("4" (skeep 1)
                    (("4" (typepred "d_b") (("4" (propax) nil nil))
                      nil))
                    nil)
                   ("5" (skeep)
                    (("5" (typepred "d_b") (("5" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep 1)
          (("2" (lemma "continuous_Integrable?[(d)]")
            (("1"
              (inst -1 "car(d_b)" "xx"
               " LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
              (("1" (assert)
                (("1" (skeep 1)
                  (("1" (lemma "cont_sub")
                    (("1" (lemma "cont_nn_comp")
                      (("1" (inst?)
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "continuous?" -1)
                                  (("1" (inst -1 "x") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) (("2" (inst?) nil nil)) nil)
                         ("3" (skeep 1)
                          (("3"
                            (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                  (("2" (replace -4)
                    (("2" (replace -6)
                      (("2" (expand "max" -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "not_one_element") (("2" (propax) nil nil))
              nil)
             ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
             ("4" (lemma "non_empty")
              (("4" (expand "nonempty?" -1)
                (("4" (expand "empty?" 1)
                  (("4" (skeep 1)
                    (("4" (inst 1 "x")
                      (("4" (expand "member" -1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep 1)
          (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
            (("3" (grind) nil nil)) nil))
          nil)
         ("4" (skeep 1)
          (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil)
         ("5" (skeep)
          (("5" (typepred "d_b") (("5" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (exp_0 formula-decl nil ln_exp lnexp_fnd)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (Int_cont formula-decl nil r2v_analysis nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (nonempty? const-decl "bool" sets nil)
    (connected formula-decl nil ODE_psi_def nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (cont_sub formula-decl nil r2v_analysis nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (null? const-decl "bool" r2v_def nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integrable? const-decl "bool" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (width const-decl "posreal" integral_def analysis)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (fundamental formula-decl nil fundamental_theorem analysis)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (prod_continuous formula-decl nil continuous_functions analysis)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rho_psi_lip_ineq_TCC1 0
  (rho_psi_lip_ineq_TCC3-1 nil 3788695739
   ("" (lemma "norm_diff_contD")
    (("" (skeep 1) (("" (inst?) nil nil)) nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_diff_contD formula-decl nil ODE_psi_contraction nil))
   nil
   (rho_psi_lip_ineq subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[ODE_psi_contraction.d].ext_c(LAMBDA (xx: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(xx, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), integral_def[(ODE_psi_contraction.d)].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), xx, LAMBDA (dd: (ODE_psi_contraction.d)): norms.norm_inf(ODE_psi_contraction.n)((matrices.-)(ODE_psi_contraction.y(dd), ODE_psi_contraction.z(dd))))))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x)))(ff)}")))
 (rho_psi_lip_ineq 0
  (rho_psi_lip_ineq-1 nil 3788793659
   ("" (skeep)
    (("" (lemma "rho_psi_int_ineq")
      (("" (inst?)
        (("" (assert)
          (("" (typepred "Lip_c(n)(f)")
            (("" (lemma "max_ineq")
              ((""
                (inst -1 "LAMBDA (x: VectorN(1)): d(car(x))" "_" "_")
                (("1"
                  (inst -1 "(LAMBDA (x: VectorN(1)):
             ext_c(LAMBDA (xx: (d)):
                     exp(xx * -K - car(d_b) * -K) *
                      Integral(car(d_b), xx,
                               LAMBDA (dd: (d)):
                                 norm_inf(n)
                                         (od_fx(n, f, y)(dd)
                                          -
                                          od_fx(n, f, z)(dd))))
                  (car(x)))" "_")
                  (("1"
                    (inst -1 "Lip_c(n)(f)* (LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(xx * -K - car(d_b) * -K) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)):
                                  norm_inf(n)(y(dd) - z(dd))))
                   (car(x)))")
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (lemma "max_const")
                          (("1"
                            (inst -1
                             "LAMBDA (x: VectorN(1)): d(car(x))"
                             "(LAMBDA (x: VectorN(1)):
               ext_c(LAMBDA (xx: (d)):
                       exp(xx * -K - car(d_b) * -K) *
                        Integral(car(d_b), xx,
                                 LAMBDA (dd: (d)):
                                   norm_inf(n)(y(dd) - z(dd))))
                    (car(x)))" "Lip_c(n)(f)")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "norm_diff_contD")
                                (("2"
                                  (hide -2 -3 -4 -5)
                                  (("2"
                                    (inst -1 "n" "y" "z" "K")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (lemma "norm_diff_Int")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (inst -1 "n" "y" "z" "xx")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide 2)
                              (("4"
                                (skeep 1)
                                (("4"
                                  (typepred
                                   "y(dd)-z(dd)"
                                   "y(dd)"
                                   "z(dd)")
                                  (("4"
                                    (replace -6)
                                    (("4"
                                      (replace -4)
                                      (("4"
                                        (expand "max" -2)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide 2)
                              (("5"
                                (hide -)
                                (("5"
                                  (lemma "d_three")
                                  (("5"
                                    (inst?)
                                    (("5"
                                      (assert)
                                      (("5"
                                        (lemma "closed_interval")
                                        (("5" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep 1)
                            (("2" (lemma "ext_const")
                              (("2"
                                (inst
                                 -1
                                 "LAMBDA (xx: (d)):
                    exp(xx * -K - car(d_b) * -K) *
                     Integral(car(d_b), xx,
                              LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd)))
                 "
                                 "Lip_c(n)(f)")
                                (("1"
                                  (decompose-equality -1)
                                  (("1"
                                    (inst -1 "car(x_1)")
                                    (("1"
                                      (expand "*" 1 4)
                                      (("1"
                                        (expand "*" -1 5)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (lemma "ext_ineq")
                                            (("1"
                                              (inst
                                               -1
                                               "LAMBDA (xx: (d)):
              exp(xx * -K - car(d_b) * -K) *
               Integral(car(d_b), xx,
                        LAMBDA (dd: (d)):
                          norm_inf(n)
                                  (od_fx(n, f, y)(dd) -
                                    od_fx(n, f, z)(dd)))"
                                               "_")
                                              (("1"
                                                (inst
                                                 -1
                                                 "Lip_c(n)(f) *
              LAMBDA (xx: (d)):
                exp(xx * -K - car(d_b) * -K) *
                 Integral(car(d_b), xx,
                          LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (hide -5)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "car(x_1)")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "*"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (div-by
                                                               1
                                                               "exp(x * -K - car(d_b) * -K)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT  Lip_c(n)(f) *
        (exp(x * -K - car(d_b) * -K) *
          Integral(car(d_b), x,
                   LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))))
        / exp(x * -K - car(d_b) * -K) =  Lip_c(n)(f) *
          Integral(car(d_b), x,
                   LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd)))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "od_fx"
                                                                       1)
                                                                      (("2"
                                                                        (hide
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "Integral_scal[(d)]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "Lip_c(n)(f)"
                                                                             "car(d_b)"
                                                                             "x"
                                                                             "LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "Integral_le[(d)]")
                                                                                      (("1"
                                                                                        (case
                                                                                         "car(d_b)<x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -2
                                                                                             "car(d_b)"
                                                                                             "x"
                                                                                             "LAMBDA (dd: (d)): norm_inf(n)(f(dd, y(dd)) - f(dd, z(dd)))"
                                                                                             " Lip_c(n)(f) * LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "od_fx_diff_norm_int")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -8
                                                                                                     -7
                                                                                                     -6
                                                                                                     -5
                                                                                                     -4
                                                                                                     -3
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "n"
                                                                                                       "f"
                                                                                                       "y"
                                                                                                       "z"
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "od_fx"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skeep
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -6
                                                                                                       "x_1!1"
                                                                                                       "y(x_1!1)"
                                                                                                       "z(x_1!1)")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "*"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (skeep
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "y(dd)-z(dd)"
                                                                                                   "y(dd)"
                                                                                                   "z(dd)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide
                                                                                               -)
                                                                                              (("3"
                                                                                                (skeep
                                                                                                 1)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "f(dd,y(dd))-f(dd,z(dd))"
                                                                                                   "f(dd,y(dd))"
                                                                                                   "f(dd,z(dd))")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (case
                                                                                           "NOT car(d_b)=x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "d_b")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "Integral"
                                                                                               +)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (case
                                                                                   "car(d_b)=x")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "Integrable?"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "norm_diff_Int")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "n"
                                                                                           "y"
                                                                                           "z"
                                                                                           "x")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep
                                                                               1)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "y(dd)-z(dd)"
                                                                                   "y(dd)"
                                                                                   "z(dd)")
                                                                                  (("2"
                                                                                    (replace
                                                                                     -4)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "not_one_element")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "connected")
                                                                            (("3"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             -)
                                                                            (("4"
                                                                              (lemma
                                                                               "non_empty")
                                                                              (("4"
                                                                                (expand
                                                                                 "nonempty?"
                                                                                 -1)
                                                                                (("4"
                                                                                  (expand
                                                                                   "empty?"
                                                                                   1)
                                                                                  (("4"
                                                                                    (skeep
                                                                                     1)
                                                                                    (("4"
                                                                                      (inst
                                                                                       1
                                                                                       "x!1")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "member"
                                                                                         -1)
                                                                                        (("4"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     -)
                                                                    (("3"
                                                                      (lemma
                                                                       "norm_diff_Int")
                                                                      (("3"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide
                                                                     -)
                                                                    (("4"
                                                                      (hide
                                                                       2)
                                                                      (("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (typepred
                                                                           "y(dd)-z(dd)"
                                                                           "y(dd)"
                                                                           "z(dd)")
                                                                          (("4"
                                                                            (replace
                                                                             -4)
                                                                            (("4"
                                                                              (replace
                                                                               -6)
                                                                              (("4"
                                                                                (expand
                                                                                 "max"
                                                                                 -2)
                                                                                (("4"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "od_fx_diff_norm_int")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 -)
                                                                (("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (typepred
                                                                       "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                                                                      (("3"
                                                                        (typepred
                                                                         "od_fx[d](n, f, y)(dd)"
                                                                         "(od_fx[d](n, f, z)(dd))")
                                                                        (("3"
                                                                          (replace
                                                                           -2)
                                                                          (("3"
                                                                            (replace
                                                                             -4)
                                                                            (("3"
                                                                              (expand
                                                                               "max"
                                                                               -6)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (lemma
                                                                   "norm_diff_Int")
                                                                  (("4"
                                                                    (inst
                                                                     -1
                                                                     "n"
                                                                     "y"
                                                                     "z"
                                                                     "x")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("5"
                                                                (hide
                                                                 2)
                                                                (("5"
                                                                  (skeep
                                                                   1)
                                                                  (("5"
                                                                    (hide
                                                                     -)
                                                                    (("5"
                                                                      (typepred
                                                                       "y(dd)-z(dd)"
                                                                       "y(dd)"
                                                                       "z(dd)")
                                                                      (("5"
                                                                        (replace
                                                                         -4)
                                                                        (("5"
                                                                          (replace
                                                                           -6)
                                                                          (("5"
                                                                            (expand
                                                                             "max"
                                                                             -2)
                                                                            (("5"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("6"
                                                                (hide
                                                                 2)
                                                                (("6"
                                                                  (lemma
                                                                   "od_fx_diff_norm_int")
                                                                  (("6"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("7"
                                                                (hide
                                                                 2)
                                                                (("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (typepred
                                                                     "od_fx[d](n, f, y)(dd)"
                                                                     "(od_fx[d](n, f, z)(dd))")
                                                                    (("7"
                                                                      (typepred
                                                                       "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                                                                      (("7"
                                                                        (replace
                                                                         -4)
                                                                        (("7"
                                                                          (replace
                                                                           -6)
                                                                          (("7"
                                                                            (expand
                                                                             "max"
                                                                             -2)
                                                                            (("7"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (lemma
                                                       "norm_diff_Int")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred
                                                       "y(dd)-z(dd)"
                                                       "y(dd)"
                                                       "z(dd)")
                                                      (("3"
                                                        (replace -4)
                                                        (("3"
                                                          (replace -6)
                                                          (("3"
                                                            (expand
                                                             "max"
                                                             -2)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skeep 1)
                                                  (("2"
                                                    (lemma
                                                     "od_fx_diff_norm_int")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred
                                                     "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                                                    (("3"
                                                      (typepred
                                                       "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                                                      (("3"
                                                        (replace -2)
                                                        (("3"
                                                          (typepred
                                                           "od_fx[d](n, f, y)(dd)"
                                                           "(od_fx[d](n, f, z)(dd))")
                                                          (("3"
                                                            (replace
                                                             -2)
                                                            (("3"
                                                              (replace
                                                               -4)
                                                              (("3"
                                                                (expand
                                                                 "max"
                                                                 -6)
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "norm_diff_Int")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (typepred "y(dd!1)-z(dd!1)")
                                      (("3"
                                        (typepred "y(dd!1)" "z(dd!1)")
                                        (("3"
                                          (replace -2)
                                          (("3"
                                            (replace -4)
                                            (("3"
                                              (expand "max" -6)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "norm_diff_Int")
                                    (("2"
                                      (skeep 1)
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (typepred
                                         "y(dd)-z(dd)"
                                         "y(dd)"
                                         "z(dd)")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (lemma "norm_diff_contD")
                        (("2" (inst?)
                          (("2" (inst -1 "K")
                            (("2" (assert)
                              (("2"
                                (expand "*" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "cont_const")
                                    (("2"
                                      (inst
                                       -1
                                       "(LAMBDA (x: VectorN(1)): d(car[real](x)))"
                                       "(LAMBDA (x: VectorN(1)):
             ext_c[d]
                 (LAMBDA (xx: (d)):
                    exp(xx * -K - car[real](d_b[d]) * -K) *
                     Integral[(d)]
                         (car[real](d_b[d]), xx,
                          LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))))
                 (car[real](x)))"
                                       "Lip_c[d](n)(f)")
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "*" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2 -3 -4 -5)
                                                (("1"
                                                  (expand "contD?")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -1 "p")
                                                      (("1"
                                                        (expand
                                                         "contp?")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -2 -3 -4)
                                            (("2"
                                              (expand "contD?")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "p")
                                                  (("2"
                                                    (expand "contp?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -)
                                          (("2"
                                            (lemma "norm_diff_Int")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -1 "xx")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide -)
                                        (("3"
                                          (hide 2)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (typepred
                                               "y(dd)-z(dd)"
                                               "y(dd)"
                                               "z(dd)")
                                              (("3"
                                                (replace -4)
                                                (("3"
                                                  (replace -6)
                                                  (("3"
                                                    (expand "max" -2)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (skeep 1)
                        (("3" (lemma "norm_diff_Int")
                          (("3" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (assert)
                      (("4" (hide 2)
                        (("4" (hide -)
                          (("4" (skeep)
                            (("4"
                              (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                              (("4"
                                (replace -4)
                                (("4"
                                  (replace -6)
                                  (("4"
                                    (expand "max" -2)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "od_fx_contD_Int_diff")
                      (("2" (inst?)
                        (("2" (assert) (("2" (inst -1 "K") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (lemma "od_fx_diff_norm_int")
                        (("3" (inst?) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skeep)
                      (("4"
                        (typepred "od_fx[d](n, f, y)(dd)"
                         "(od_fx[d](n, f, z)(dd))")
                        (("4"
                          (typepred
                           "od_fx[d](n, f, y)(dd) - od_fx[d](n, f, z)(dd)")
                          (("4" (replace -4)
                            (("4" (replace -6)
                              (("4"
                                (expand "max" -2)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "d_three")
                    (("2" (inst?)
                      (("2" (lemma "closed_interval")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rho_psi_int_ineq formula-decl nil ODE_psi_contraction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_ineq formula-decl nil max_function mv_analysis)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (cont_const formula-decl nil continuity_multivar mv_analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ext_const formula-decl nil r2v_continuous_extension nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (x skolem-const-decl "(d)" ODE_psi_contraction nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Integral_scal formula-decl nil integral analysis)
    (TRUE const-decl "bool" booleans nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (Integral_le formula-decl nil integral analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (od_fx_diff_norm_int formula-decl nil ODE_psi_contraction nil)
    (< const-decl "bool" reals nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (connected formula-decl nil ODE_psi_def nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (empty? const-decl "bool" sets nil)
    (x!1 skolem-const-decl "real" ODE_psi_contraction nil)
    (member const-decl "bool" sets nil)
    (ext_ineq formula-decl nil r2v_continuous_extension nil)
    (max_const formula-decl nil max_function mv_analysis)
    (d_three formula-decl nil interval_def nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (norm_diff_Int formula-decl nil ODE_psi_contraction nil)
    (norm_diff_contD formula-decl nil ODE_psi_contraction nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (od_fx_contD_Int_diff formula-decl nil ODE_psi_contraction nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (closed_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rho_psi_exp_contD_triv_TCC1 0
  (rho_psi_exp_contD_triv_TCC1-1 nil 3788807031
   ("" (skeep)
    (("" (lemma "norm_diff_Int")
      (("" (inst -1 "n" "y" "z" "xx")
        (("" (assert)
          ((""
            (case " ( LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))) = (LAMBDA (dd: (d)):
             exp(dd * K - car[real](d_b[d]) * K) *
              (exp(dd * -K - car[real](d_b[d]) * -K) *
                norm_inf(n)(y(dd) - z(dd))))")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (hide -1)
                (("2" (decompose-equality 1)
                  (("1"
                    (case "exp(x!1 * K - car[real](d_b[d]) * K) *
        (exp(x!1 * -K - car[real](d_b[d]) * -K)) = 1")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (lemma "exp_neg")
                        (("2"
                          (inst -1 "(x!1 * K - car[real](d_b[d]) * K)")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (hide -1)
                (("3" (skeep)
                  (("3" (typepred "y(dd)-z(dd)")
                    (("3" (typepred "y(dd)" "z(dd)")
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_diff_Int formula-decl nil ODE_psi_contraction nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_neg formula-decl nil ln_exp lnexp_fnd)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil
   (rho_psi_exp_contD_triv subtype
    "LAMBDA (dd: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*(ODE_psi_contraction.K, ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), (number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), norms.norm_inf(ODE_psi_contraction.n)((matrices.-)(ODE_psi_contraction.y(dd), ODE_psi_contraction.z(dd))))))"
    "integral_def[(ODE_psi_contraction.d)].Integrable_funs(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx)")))
 (rho_psi_exp_contD_triv 0
  (rho_psi_exp_contD_triv-1 nil 3788807234
   ("" (skeep)
    (("" (lemma "norm_diff_contD")
      (("" (inst?)
        (("" (inst -1 "n" "y" "z")
          ((""
            (case "(LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))) =  (LAMBDA (dd: (d)):
                           exp(K * (dd - car[real](d_b[d]))) *
                            (exp(-K * (dd - car[real](d_b[d]))) *
                              norm_inf(n)(y(dd) - z(dd))))")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (decompose-equality 1)
                (("1" (case " norm_inf(n)(y(x!1) - z(x!1)) = 0")
                  (("1" (assert) nil nil)
                   ("2" (div-by 2 " norm_inf(n)(y(x!1) - z(x!1))")
                    (("2" (assert)
                      (("2"
                        (case "NOT   exp(K * x!1 - car[real](d_b[d]) * K) *
                                   (exp(-K * x!1 - car[real](d_b[d]) * -K) *
                                     norm_inf(n)(y(x!1) - z(x!1)))
                                   / norm_inf(n)(y(x!1) - z(x!1)) =   exp(K * x!1 - car[real](d_b[d]) * K) *
                                   exp(-K * x!1 - car[real](d_b[d]) * -K)")
                        (("1" (assert) nil nil)
                         ("2" (replace -1 2)
                          (("2" (assert)
                            (("2" (lemma "exp_neg ")
                              (("2"
                                (inst -1 "K*x!1-car[real](d_b[d])*K")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep 1)
                    (("2" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                      (("2" (assert)
                        (("2" (typepred "d_b") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2 -1)
                  (("3" (skeep)
                    (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2 -1)
              (("3" (skeep)
                (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                  (("3" (assert)
                    (("3" (typepred "d_b") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep 1)
                (("4" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_diff_contD formula-decl nil ODE_psi_contraction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (exp_neg formula-decl nil ln_exp lnexp_fnd)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil))
 (rho_psi_int_exp_TCC1 0
  (rho_psi_int_exp_TCC2-1 nil 3788800820
   ("" (skeep)
    (("" (lemma "norm_diff_contD")
      (("" (inst?)
        (("" (inst -1 "n" "y" "z")
          ((""
            (case "(LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))) =  (LAMBDA (dd: (d)):
                    exp(K * (dd - car[real](d_b[d]))) *
                     (exp(-K * (dd - car[real](d_b[d]))) *
                       norm_inf(n)(y(dd) - z(dd))))")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (decompose-equality 1)
                (("1" (case " norm_inf(n)(y(x!1) - z(x!1)) = 0")
                  (("1" (assert) nil nil)
                   ("2" (div-by 2 " norm_inf(n)(y(x!1) - z(x!1))")
                    (("2" (assert)
                      (("2"
                        (case "NOT   exp(K * x!1 - car[real](d_b[d]) * K) *
                      (exp(-K * x!1 - car[real](d_b[d]) * -K) *
                        norm_inf(n)(y(x!1) - z(x!1)))
                      / norm_inf(n)(y(x!1) - z(x!1)) =   exp(K * x!1 - car[real](d_b[d]) * K) *
                      exp(-K * x!1 - car[real](d_b[d]) * -K)")
                        (("1" (assert) nil nil)
                         ("2" (replace -1 2)
                          (("2" (assert)
                            (("2" (lemma "exp_neg ")
                              (("2"
                                (inst -1 "K*x!1-car[real](d_b[d])*K")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep 1)
                    (("2" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                      (("2" (assert)
                        (("2" (typepred "d_b") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2 -1)
                  (("3" (skeep)
                    (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2 -1)
              (("3" (skeep)
                (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                  (("3" (assert)
                    (("3" (typepred "d_b") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep 1)
                (("4" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_diff_contD formula-decl nil ODE_psi_contraction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (exp_neg formula-decl nil ln_exp lnexp_fnd)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (div_simp formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (rho_psi_int_exp subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[ODE_psi_contraction.d].ext_c(LAMBDA (xx: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(xx, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), integral_def[(ODE_psi_contraction.d)].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), xx, LAMBDA (dd: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*(ODE_psi_contraction.K, ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), (number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), norms.norm_inf(ODE_psi_contraction.n)((matrices.-)(ODE_psi_contraction.y(dd), ODE_psi_contraction.z(dd)))))))))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x)))(ff)}")))
 (rho_psi_int_exp 0
  (rho_psi_int_exp-1 nil 3788801397
   ("" (skeep)
    (("" (lemma "rho_psi_lip_ineq")
      (("" (inst?)
        ((""
          (case "(LAMBDA (dd: (d)): norm_inf(n)(y(dd) - z(dd))) =  (LAMBDA (dd: (d)):
                    exp(K * (dd - car[real](d_b[d]))) *
                     (exp(-K * (dd - car[real](d_b[d]))) *
                       norm_inf(n)(y(dd) - z(dd))))")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (decompose-equality 1)
              (("1" (case " norm_inf(n)(y(x!1) - z(x!1)) = 0")
                (("1" (assert) nil nil)
                 ("2" (div-by 2 " norm_inf(n)(y(x!1) - z(x!1))")
                  (("2" (assert)
                    (("2"
                      (case "NOT   exp(K * x!1 - car[real](d_b[d]) * K) *
                      (exp(-K * x!1 - car[real](d_b[d]) * -K) *
                        norm_inf(n)(y(x!1) - z(x!1)))
                      / norm_inf(n)(y(x!1) - z(x!1)) =   exp(K * x!1 - car[real](d_b[d]) * K) *
                      exp(-K * x!1 - car[real](d_b[d]) * -K)")
                      (("1" (assert) nil nil)
                       ("2" (replace -1 2)
                        (("2" (assert)
                          (("2" (lemma "exp_neg ")
                            (("2" (inst -1 "K*x!1-car[real](d_b[d])*K")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep 1)
                  (("2" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2 -1)
            (("3" (skeep)
              (("3" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rho_psi_lip_ineq formula-decl nil ODE_psi_contraction nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (exp_neg formula-decl nil ln_exp lnexp_fnd)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (exp_rho_Integrable 0
  (exp_rho_Integrable-1 nil 3788804121
   ("" (skeep)
    (("" (lemma "continuous_Integrable?[(d)]")
      (("1" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (skeep)
              (("1" (lemma "prod_cont_fun[(d)]")
                (("1"
                  (inst -1 "LAMBDA (dd: (d)):
                        exp(dd * K - car[real](d_b[d]) * K)"
                   "LAMBDA (dd: (d)):

                         (rho[d](n, K, norm_inf(n))(y, z))")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (expand "continuous?" -1)
                        (("1" (inst -1 "x")
                          (("1" (assert)
                            (("1" (expand "*" -1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "cont_exp_lin")
                          (("2" (inst -1 "K" "car[real](d_b[d]) * K")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "const_cont_fun[(d)]")
                          (("3"
                            (inst -1 "rho[d](n, K, norm_inf(n))(y, z)")
                            (("3" (assert)
                              (("3"
                                (expand "const_fun" -1)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil))
        nil)
       ("3" (hide 2)
        (("3" (lemma "connected") (("3" (propax) nil nil)) nil)) nil)
       ("4" (hide 2)
        (("4" (lemma "non_empty")
          (("4" (expand "nonempty?" -1)
            (("4" (expand "empty?" 1)
              (("4" (skeep)
                (("4" (inst 1 "x")
                  (("4" (expand "member" -1) (("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (TRUE const-decl "bool" booleans nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (continuous? const-decl "bool" continuous_functions analysis)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (const_cont_fun formula-decl nil continuous_functions analysis)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (derivable_const application-judgement "deriv_fun" derivatives_lam
     analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (prod_cont_fun formula-decl nil continuous_functions analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (connected formula-decl nil ODE_psi_def nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (empty? const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (exp_rho_contD_rho_TCC1 0
  (exp_rho_contD_rho_TCC1-1 nil 3788803819
   ("" (lemma "exp_rho_Integrable")
    (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (exp_rho_Integrable formula-decl nil ODE_psi_contraction nil))
   nil
   (exp_rho_contD_rho subtype
    "LAMBDA (dd: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*(ODE_psi_contraction.K, ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), (metric_rho[ODE_psi_contraction.d].rho(ODE_psi_contraction.n, ODE_psi_contraction.K, norms.norm_inf(ODE_psi_contraction.n))(ODE_psi_contraction.y, ODE_psi_contraction.z)))"
    "integral_def[(ODE_psi_contraction.d)].Integrable_funs(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx)")))
 (exp_rho_contD_rho 0
  (exp_rho_contD_rho-1 nil 3788804351
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      (("" (inst?)
        (("1" (hide 2)
          (("1" (lemma "prod_cont_fun[(d)]")
            (("1"
              (inst -1 "(LAMBDA (xx: (d)):
             exp(xx * -K - car[real](d_b[d]) * -K) )"
               "(LAMBDA (xx: (d)): Integral[(d)]
                  (car[real](d_b[d]), xx,
                   LAMBDA (dd: (d)):
                     exp(dd * K - car[real](d_b[d]) * K) *
                      (rho[d](n, K, norm_inf(n))(y, z))))")
              (("1" (split -1)
                (("1" (expand "*" -1) (("1" (propax) nil nil)) nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (lemma "cont_exp_lin")
                      (("2" (inst -1 "-K" "car[real](d_b[d]) * -K")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (typepred "d_b")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "fundamental")
                    (("3"
                      (inst -1 "(LAMBDA (xx: (d)):
                     Integral[(d)]
                         (car[real](d_b[d]), xx,
                          LAMBDA (dd: (d)):
                            exp(dd * K - car[real](d_b[d]) * K) *
                             (rho[d](n, K, norm_inf(n))(y, z))))"
                       "car(d_b)" "LAMBDA (dd: (d)):
                            exp(dd * K - car[real](d_b[d]) * K) *
                             (rho[d](n, K, norm_inf(n))(y, z))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (flatten)
                            (("1" (lemma "derivable_cont[(d)]")
                              (("1"
                                (inst
                                 -1
                                 "(LAMBDA (xx: (d)):
                    Integral[(d)]
                        (car[real](d_b[d]), xx,
                         LAMBDA (dd: (d)):
                           exp(dd * K - car[real](d_b[d]) * K) *
                            (rho[d](n, K, norm_inf(n))(y, z))))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "exp_rho_Integrable")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -1 "xx")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (hide -)
                                      (("2"
                                        (typepred "d_b")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "d_b")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (assert)
                                  (("4"
                                    (hide -)
                                    (("4"
                                      (hide 2)
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (typepred "d_b")
                                          (("4" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "not_one_element")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "deriv_domain")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "prod_cont_fun[(d)]")
                              (("2"
                                (inst
                                 -1
                                 "LAMBDA (dd: (d)):
                            exp(dd * K - car[real](d_b[d]) * K)"
                                 "LAMBDA (dd: (d)):
                             (rho[d](n, K, norm_inf(n))(y, z))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (expand "continuous?" -1)
                                      (("1"
                                        (expand "continuous?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -1 "x0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "*" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "cont_exp_lin")
                                        (("2"
                                          (inst
                                           -1
                                           "K"
                                           "car[real](d_b[d]) * K")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "const_cont_fun[(d)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "rho[d](n, K, norm_inf(n))(y, z)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "const_fun"
                                                     -1)
                                                    (("2"
                                                      (typepred "d_b")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "const_cont_fun[(d)]")
                                      (("3"
                                        (inst
                                         -1
                                         "rho[d](n, K, norm_inf(n))(y, z)")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (expand "const_fun" -1)
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (typepred "d_b")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "d_b") (("2" (propax) nil nil))
                        nil)
                       ("3" (typepred "d_b") (("3" (grind) nil nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (lemma "exp_rho_Integrable")
                          (("4" (skeep)
                            (("4" (inst?)
                              (("4"
                                (inst -1 "xx")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (hide 2)
                        (("5" (skeep)
                          (("5" (typepred "d_b")
                            (("5" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("6" (hide 2)
                        (("6" (skeep)
                          (("6" (typepred "d_b")
                            (("6" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("7" (hide 2)
                        (("7" (skeep)
                          (("7" (typepred "d_b")
                            (("7" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "exp_rho_Integrable")
                  (("2" (inst?)
                    (("2" (skeep)
                      (("2" (inst -1 "xx") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep)
                  (("3" (typepred "d_b") (("3" (grind) nil nil)) nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (skeep)
                  (("4" (typepred "d_b") (("4" (propax) nil nil)) nil))
                  nil))
                nil)
               ("5" (hide 2)
                (("5" (skeep)
                  (("5" (typepred "d_b") (("5" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "exp_rho_Integrable")
            (("2" (skeep)
              (("2" (inst?)
                (("2" (inst -1 "xx") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "d_b") (("3" (grind) nil nil)) nil)) nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep)
            (("5" (typepred "d_b") (("5" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable_cont judgement-tcc nil derivatives analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (exp_rho_Integrable formula-decl nil ODE_psi_contraction nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (const_cont_fun formula-decl nil continuous_functions analysis)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (derivable_const application-judgement "deriv_fun" derivatives_lam
     analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function mv_analysis)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (exp_0 formula-decl nil ln_exp lnexp_fnd)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (fundamental formula-decl nil fundamental_theorem analysis)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (prod_cont_fun formula-decl nil continuous_functions analysis)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_psi_contraction nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (exp_rho_contD_TCC1 0
  (exp_rho_contD_TCC1-1 nil 3788806265 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices))
   nil
   (exp_rho_contD subtype "ODE_psi_contraction.x"
    "(list_adt[real].cons?)")))
 (exp_rho_contD_TCC2 0
  (exp_rho_contD_TCC2-1 nil 3788806265 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil))
   nil
   (exp_rho_contD subtype
    "r2v_continuous_extension[ODE_psi_contraction.d].d_b"
    "(list_adt[real].cons?)")))
 (exp_rho_contD_TCC3 0
  (exp_rho_contD_TCC3-1 nil 3788806265 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil))
   nil
   (exp_rho_contD subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b)"
    "(ODE_psi_contraction.d)")))
 (exp_rho_contD_TCC4 0
  (exp_rho_contD_TCC1-1 nil 3788803819
   ("" (skeep)
    (("" (lemma "cont_exp_lin")
      (("" (lemma "continuous_Integrable?[(d)]")
        (("1"
          (inst -1 "car(d_b)" "xx"
           "  LAMBDA (dd: (d)): exp(K * (dd - car[real](d_b[d])))")
          (("1" (assert)
            (("1" (skeep 1)
              (("1" (inst -1 "K" "car(d_b)*K")
                (("1" (expand "continuous?" -1)
                  (("1" (inst -1 "x!1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
         ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
         ("4" (lemma "non_empty")
          (("4" (expand "nonempty?")
            (("4" (expand "empty?" 1)
              (("4" (skeep 1)
                (("4" (inst 1 "x!1")
                  (("4" (expand "member" -1) (("4" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (empty? const-decl "bool" sets nil)
    (x!1 skolem-const-decl "real" ODE_psi_contraction nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected formula-decl nil ODE_psi_def nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (exp_rho_contD subtype
    "LAMBDA (dd: (ODE_psi_contraction.d)): ln_exp.exp(number_fields.*(ODE_psi_contraction.K, ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b)))))"
    "integral_def[(ODE_psi_contraction.d)].Integrable_funs(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), ODE_psi_contraction.xx)")))
 (exp_rho_contD 0
  (exp_rho_contD-1 nil 3788805200
   ("" (skeep)
    (("" (lemma "ext_cont_D")
      (("" (inst?)
        (("1" (hide 2)
          (("1" (lemma "prod_continuous[(d)]")
            (("1" (expand "continuous?" 1)
              (("1" (skeep 1)
                (("1"
                  (inst -1 "LAMBDA (xx: (d)):
                    exp(xx * -K - car[real](d_b[d]) * -K)"
                   "LAMBDA (xx: (d)):
                     Integral[(d)]
                         (car[real](d_b[d]), xx,
                          LAMBDA (dd: (d)):
                            exp(dd * K - car[real](d_b[d]) * K))" "x0")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (expand "*" -1) (("1" (propax) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "cont_exp_lin")
                          (("2" (inst -1 "-K" "car[real](d_b[d]) * -K")
                            (("1" (assert)
                              (("1"
                                (expand "continuous?" -1)
                                (("1"
                                  (inst -1 "x0")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (typepred "d_b")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (lemma "Int_cont")
                          (("3" (lemma "fundamental[(d)]")
                            (("3"
                              (inst -1 "LAMBDA (xx: (d)):
                    Integral[(d)]
                        (car[real](d_b[d]), xx,
                         LAMBDA (dd: (d)):
                           exp(dd * K - car[real](d_b[d]) * K))"
                               "car(d_b)" " LAMBDA (dd: (d)):
                           exp(dd * K - car[real](d_b[d]) * K)")
                              (("1"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (lemma "derivable_continuous[(d)]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "derivable?" -1)
                                          (("1"
                                            (inst -1 "x0")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep 1)
                                        (("2"
                                          (lemma
                                           "continuous_Integrable?[(d)]")
                                          (("1"
                                            (hide -2 -3)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 2 3)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (lemma
                                                       "cont_exp_lin")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "car[real](d_b[d]) * K")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "continuous?"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "not_one_element")
                                            (("2" (propax) nil nil))
                                            nil)
                                           ("3"
                                            (lemma "connected")
                                            (("3" (propax) nil nil))
                                            nil)
                                           ("4"
                                            (lemma "non_empty")
                                            (("4"
                                              (expand "nonempty?" -1)
                                              (("4"
                                                (expand "empty?" 1)
                                                (("4"
                                                  (skeep 1)
                                                  (("4"
                                                    (inst 1 "x")
                                                    (("4"
                                                      (expand
                                                       "member"
                                                       -1)
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep 1)
                                        (("3"
                                          (typepred "d_b")
                                          (("3" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (skeep)
                                        (("4"
                                          (typepred "d_b")
                                          (("4" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (skeep)
                                        (("5"
                                          (typepred "d_b")
                                          (("5" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "cont_exp_lin")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst
                                       -1
                                       " car[real](d_b[d]) * K")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "d_b")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (skeep 1) nil nil))
                                nil)
                               ("2"
                                (typepred "d_b")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (typepred "d_b")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil)
                               ("4"
                                (hide 2)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (lemma
                                     "continuous_Integrable?[(d)]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (lemma "cont_exp_lin")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "K"
                                                   " car[real](d_b[d]) * K")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "continuous?"
                                                       -1)
                                                      (("1"
                                                        (inst -1 "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "not_one_element")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (lemma "connected")
                                      (("3" (propax) nil nil))
                                      nil)
                                     ("4"
                                      (lemma "non_empty")
                                      (("4"
                                        (expand "nonempty?" -1)
                                        (("4"
                                          (expand "empty?" 1)
                                          (("4"
                                            (skeep 1)
                                            (("4"
                                              (inst 1 "x")
                                              (("4"
                                                (expand "member" -1)
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (skeep)
                                (("5"
                                  (typepred "d_b")
                                  (("5" (grind) nil nil))
                                  nil))
                                nil)
                               ("6"
                                (skeep)
                                (("6"
                                  (typepred "d_b")
                                  (("6" (propax) nil nil))
                                  nil))
                                nil)
                               ("7" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (lemma "continuous_Integrable?[(d)]")
                      (("1" (inst?)
                        (("1" (skeep)
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (lemma "cont_exp_lin")
                                    (("1"
                                      (inst
                                       -1
                                       "K"
                                       " car[real](d_b[d]) * K")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "continuous?" -1)
                                          (("1"
                                            (inst -1 "x")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "d_b") (("2" (propax) nil nil))
                          nil)
                         ("3" (grind) nil nil))
                        nil)
                       ("2" (lemma "not_one_element")
                        (("2" (propax) nil nil)) nil)
                       ("3" (lemma "connected")
                        (("3" (propax) nil nil)) nil)
                       ("4" (lemma "non_empty")
                        (("4" (expand "nonempty?" -1)
                          (("4" (expand "empty?" 1)
                            (("4" (skeep 1)
                              (("4"
                                (inst 1 "x")
                                (("4"
                                  (expand "member" -1)
                                  (("4" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (typepred "d_b") (("3" (grind) nil nil))
                      nil))
                    nil)
                   ("4" (skeep)
                    (("4" (typepred "d_b") (("4" (propax) nil nil))
                      nil))
                    nil)
                   ("5" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "continuous_Integrable?[(d)]")
            (("1" (skeep)
              (("1" (inst?)
                (("1" (assert)
                  (("1" (hide 2)
                    (("1" (skeep 1)
                      (("1" (lemma "cont_exp_lin")
                        (("1" (inst -1 "K" "car[real](d_b[d]) * K")
                          (("1" (expand "continuous?" -1)
                            (("1" (inst -1 "x")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "not_one_element") (("2" (propax) nil nil))
              nil)
             ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
             ("4" (lemma "non_empty")
              (("4" (expand "nonempty?" -1)
                (("4" (expand "empty?" 1)
                  (("4" (skeep 1)
                    (("4" (inst 1 "x")
                      (("4" (expand "member" -1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "d_b") (("3" (grind) nil nil)) nil)) nil)
         ("4" (skeep)
          (("4" (typepred "d_b") (("4" (propax) nil nil)) nil)) nil)
         ("5" (grind) nil nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (exp_0 formula-decl nil ln_exp lnexp_fnd)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (Int_cont formula-decl nil r2v_analysis nil)
    (derivable? const-decl "bool" derivatives analysis)
    (continuous_Integrable? formula-decl nil integral analysis)
    (TRUE const-decl "bool" booleans nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (connected formula-decl nil ODE_psi_def nil)
    (nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (empty? const-decl "bool" sets nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (derivable_continuous formula-decl nil derivatives_def analysis)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (null? const-decl "bool" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fundamental formula-decl nil fundamental_theorem analysis)
    (width const-decl "posreal" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (prod_continuous formula-decl nil continuous_functions analysis)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rho_psi_int_rho_TCC1 0
  (rho_psi_int_rho_TCC2-1 nil 3788801762
   ("" (lemma "exp_rho_contD_rho")
    (("" (skeep) (("" (inst?) nil nil)) nil)) nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (exp_rho_contD_rho formula-decl nil ODE_psi_contraction nil))
   nil
   (rho_psi_int_rho subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[ODE_psi_contraction.d].ext_c(LAMBDA (xx: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(xx, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), integral_def[(ODE_psi_contraction.d)].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), xx, LAMBDA (dd: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*(ODE_psi_contraction.K, ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), (metric_rho[ODE_psi_contraction.d].rho(ODE_psi_contraction.n, ODE_psi_contraction.K, norms.norm_inf(ODE_psi_contraction.n))(ODE_psi_contraction.y, ODE_psi_contraction.z))))))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x)))(ff)}")))
 (rho_psi_int_rho 0
  (rho_psi_int_rho-1 nil 3788806387
   ("" (skeep)
    (("" (lemma "rho_psi_int_exp")
      (("" (inst?)
        (("" (lemma "max_ineq")
          ((""
            (inst -1 "LAMBDA (x: VectorN(1)): d(car(x))"
             " (LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(-K * (xx - car(d_b))) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)):
                                  exp(K * (dd - car(d_b))) *
                                   (exp(-K * (dd - car(d_b)))
                                    *
                                    norm_inf(n)(y(dd) - z(dd)))))
                   (car(x)))" "(LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(-K * (xx - car(d_b))) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)):
                                  exp(K * (dd - car(d_b))) *
                                   (rho(n, K, norm_inf(n))(y, z))))
                   (car(x)))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (assert)
                  (("1" (mult-by -1 "Lip_c(n)(f)")
                    (("1" (assert) nil nil)
                     ("2" (hide 2)
                      (("2" (lemma "exp_rho_contD_rho")
                        (("2" (hide -2 -3)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (lemma "exp_rho_Integrable")
                        (("3" (hide -2 -3)
                          (("3" (skeep 1)
                            (("3" (inst?)
                              (("3"
                                (assert)
                                (("3" (inst -1 "xx") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 2)
                      (("4" (lemma "d_three")
                        (("4" (hide -2 -3)
                          (("4" (inst?)
                            (("4" (assert)
                              (("4"
                                (lemma "closed_interval")
                                (("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide 2)
                      (("5" (hide -)
                        (("5" (lemma "rho_psi_exp_contD_triv")
                          (("5" (inst?)
                            (("5" (assert)
                              (("5"
                                (inst -1 "n" "y0" "f" "y" "z")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (hide 2)
                      (("6" (skeep)
                        (("6" (lemma "rho_psi_exp_contD_triv_TCC1")
                          (("6" (inst?)
                            (("6"
                              (inst -1 "n" "y0" "f" "y" "z" "x" "xx")
                              (("6" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (hide 2)
                      (("7" (skeep)
                        (("7" (typepred "y(dd)-z(dd)")
                          (("7" (typepred "y(dd)" "z(dd)")
                            (("7" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (skeep)
                    (("2" (typepred "x_1")
                      (("2" (typepred "d_b")
                        (("2" (inst -5 "car(x_1)")
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "ext_c" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lift-if 1)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (div-by
                                             2
                                             "exp(car(x_1) * -K - car(d_b) * -K)")
                                            (("1"
                                              (hide -5)
                                              (("1"
                                                (lemma
                                                 " Integral_le[(d)]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "car(d_b)"
                                                   "car(x_1)"
                                                   "LAMBDA (dd: (d)):
                 exp(dd * K - car(d_b) * K) *
                  (exp(dd * -K - car(d_b) * -K) *
                    norm_inf(n)(y(dd) - z(dd)))"
                                                   "LAMBDA (dd: (d)):
                  exp(dd * K - car(d_b) * K) *
                   (rho(n, K, norm_inf(n))(y, z))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (reveal +)
                                                          (("1"
                                                            (expand
                                                             "Integral"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "rho_psi_exp_contD_triv_TCC1")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "y0"
                                                               "f"
                                                               "y"
                                                               "z"
                                                               "(: 1  :)"
                                                               "car(x_1)")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "exp_rho_Integrable")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "y"
                                                               "z"
                                                               "K"
                                                               "car(x_1)")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skeep 1)
                                                          (("4"
                                                            (hide -10)
                                                            (("4"
                                                              (div-by
                                                               1
                                                               "exp(x * K - car(d_b) * K)")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (expand
                                                                   "rho"
                                                                   1
                                                                   1)
                                                                  (("4"
                                                                    (typepred
                                                                     " max(LAMBDA (x: VectorN(1)): d(car(x)))
          (LAMBDA (x: VectorN(1)):
             ext_c(pre_rho(n, K, norm_inf(n))(y, z))(car(x)))")
                                                                    (("1"
                                                                      (expand
                                                                       "is_glob_max?"
                                                                       -1)
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "pre_rho"
                                                                           -2)
                                                                          (("1"
                                                                            (typepred
                                                                             "x")
                                                                            (("1"
                                                                              (inst
                                                                               -5
                                                                               "(: x :)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ext_c"
                                                                                   -5
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "pre_rho"
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "d_three")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (lemma
                                                                           "closed_interval")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (lemma
                                                                         "ext_cont_D")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (lemma
                                                                                 "pre_rho_cont")
                                                                                (("3"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep 1)
                                                    (("2"
                                                      (typepred
                                                       "y(dd)-z(dd)"
                                                       "y(dd)"
                                                       "z(dd)")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "not_one_element")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma "connected")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide -)
                                                  (("4"
                                                    (lemma "non_empty")
                                                    (("4"
                                                      (expand
                                                       "nonempty?"
                                                       -1)
                                                      (("4"
                                                        (expand
                                                         "empty?"
                                                         1)
                                                        (("4"
                                                          (skeep 1)
                                                          (("4"
                                                            (inst
                                                             1
                                                             "x")
                                                            (("4"
                                                              (expand
                                                               "member"
                                                               -1)
                                                              (("4"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -)
                                              (("2"
                                                (lemma
                                                 "exp_rho_Integrable")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "n"
                                                   "y"
                                                   "z"
                                                   "K"
                                                   "car(x_1)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (lemma
                                               "rho_psi_exp_contD_triv")
                                              (("3"
                                                (hide -)
                                                (("3"
                                                  (hide 3)
                                                  (("3"
                                                    (lemma
                                                     "rho_psi_exp_contD_triv_TCC1")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "n"
                                                         "y0"
                                                         "f"
                                                         "y"
                                                         "z"
                                                         "(: 1:)"
                                                         "car(x_1)")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide 3)
                                              (("4"
                                                (hide -)
                                                (("4"
                                                  (skeep 1)
                                                  (("4"
                                                    (typepred
                                                     "y(dd)-z(dd)")
                                                    (("4"
                                                      (typepred
                                                       "y(dd)"
                                                       "z(dd)")
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("5"
                                              (hide 2 3)
                                              (("5"
                                                (lemma
                                                 "exp_rho_Integrable")
                                                (("5"
                                                  (inst?)
                                                  (("5"
                                                    (hide
                                                     -12
                                                     -10
                                                     -9
                                                     -5
                                                     -4
                                                     -3)
                                                    (("5"
                                                      (inst
                                                       -1
                                                       "car(x_1)")
                                                      (("5"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (hide 2 3)
                                              (("6"
                                                (hide -)
                                                (("6"
                                                  (lemma
                                                   "rho_psi_exp_contD_triv_TCC1")
                                                  (("6"
                                                    (inst
                                                     -1
                                                     "n"
                                                     "y0"
                                                     "f"
                                                     "y"
                                                     "z"
                                                     "K"
                                                     "(:1:)"
                                                     "car(x_1)")
                                                    (("6"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("7"
                                              (hide -)
                                              (("7"
                                                (hide 2 3)
                                                (("7"
                                                  (skeep)
                                                  (("7"
                                                    (typepred
                                                     "y(dd)-z(dd)"
                                                     "y(dd)"
                                                     "z(dd)")
                                                    (("7"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "exp_rho_contD_rho")
                (("2" (hide -2)
                  (("2" (assert)
                    (("2" (inst -1 "n" "y" "z" "K")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (hide -1)
                (("3" (lemma "exp_rho_Integrable")
                  (("3" (skeep)
                    (("3" (inst -1 "n" "y" "z" "K" "xx")
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (hide -1)
                (("4" (lemma "rho_psi_exp_contD_triv")
                  (("4" (inst?)
                    (("4" (inst -1 "n" "y0" "f" "y" "z")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide 2)
              (("5" (hide -1)
                (("5" (lemma "rho_psi_exp_contD_triv_TCC1")
                  (("5" (skeep)
                    (("5"
                      (inst -1 "n" "y0" "f" "y" "z" "K" "(:1:)" "xx")
                      (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("6" (hide 2)
              (("6" (skeep)
                (("6" (typepred "y(dd)-z(dd)" "y(dd)" "z(dd)")
                  (("6" (assert) nil nil)) nil))
                nil))
              nil)
             ("7" (hide 2)
              (("7" (lemma "d_three")
                (("7" (inst?)
                  (("7" (lemma "closed_interval")
                    (("7" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rho_psi_int_exp formula-decl nil ODE_psi_contraction nil)
    (max_ineq formula-decl nil max_function mv_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (exp_0 formula-decl nil ln_exp lnexp_fnd)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (empty? const-decl "bool" sets nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (connected formula-decl nil ODE_psi_def nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (continuous? const-decl "bool" continuous_functions analysis)
    (pre_rho_cont formula-decl nil metric_rho nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (Integral_le formula-decl nil integral analysis)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     ODE_psi_contraction nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (rho_psi_exp_contD_triv_TCC1 subtype-tcc nil ODE_psi_contraction
     nil)
    (rho_psi_exp_contD_triv formula-decl nil ODE_psi_contraction nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d_three formula-decl nil interval_def nil)
    (exp_rho_Integrable formula-decl nil ODE_psi_contraction nil)
    (exp_rho_contD_rho formula-decl nil ODE_psi_contraction nil)
    (max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function mv_analysis)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema
     mv_analysis)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (rho const-decl "nnreal" metric_rho nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integral const-decl "real" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (closed_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rho_psi_rho_pull_TCC1 0
  (rho_psi_rho_pull_TCC2-1 nil 3788802623
   ("" (lemma "exp_rho_contD")
    (("" (skeep) (("" (inst?) (("" (inst -1 "n") nil nil)) nil)) nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (exp_rho_contD formula-decl nil ODE_psi_contraction nil))
   nil
   (rho_psi_rho_pull subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[ODE_psi_contraction.d].ext_c(LAMBDA (xx: (ODE_psi_contraction.d)): number_fields.*(ln_exp.exp(number_fields.*((number_fields.-)(ODE_psi_contraction.K), ((number_fields.-)(xx, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))), integral_def[(ODE_psi_contraction.d)].Integral(list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b), xx, LAMBDA (dd: (ODE_psi_contraction.d)): ln_exp.exp(number_fields.*(ODE_psi_contraction.K, ((number_fields.-)(dd, list_adt[real].car(r2v_continuous_extension[ODE_psi_contraction.d].d_b))))))))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): ODE_psi_contraction.d(list_adt[real].car(x)))(ff)}")))
 (rho_psi_rho_pull 0
  (rho_psi_rho_pull-1 nil 3788861561
   ("" (skeep)
    (("" (lemma "rho_psi_int_rho")
      (("" (inst?)
        (("" (lemma "Integral_const")
          ((""
            (case "Lip_c(n)(f) *
        max(LAMBDA (x: VectorN(1)): d(car(x)))
           (LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(-K * (xx - car(d_b))) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)):
                                  exp(K * (dd - car(d_b))) *
                                   (rho(n, K, norm_inf(n))(y, z))))
                   (car(x))) =  (Lip_c(n)(f) * rho(n, K, norm_inf(n))(y, z)) *
        max(LAMBDA (x: VectorN(1)): d(car(x)))
           (LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(-K * (xx - car(d_b))) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)): exp(K * (dd - car(d_b)))))
                   (car(x)))")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (assert)
                (("2" (case "Lip_c(n)(f)=0")
                  (("1" (assert) nil nil)
                   ("2" (div-by 2 "Lip_c(n)(f)")
                    (("1" (assert)
                      (("1"
                        (case "NOT  Lip_c(n)(f) *
         max(LAMBDA (x: VectorN(1)): d(car(x)))
            (LAMBDA (x: VectorN(1)):
               ext_c(LAMBDA (xx: (d)):
                       exp(xx * -K - car(d_b) * -K) *
                        Integral(car(d_b), xx,
                                 LAMBDA (dd: (d)):
                                   exp(dd * K - car(d_b) * K)))
                    (car(x)))
         * rho(n, K, norm_inf(n))(y, z)
         / Lip_c(n)(f) =  
         max(LAMBDA (x: VectorN(1)): d(car(x)))
            (LAMBDA (x: VectorN(1)):
               ext_c(LAMBDA (xx: (d)):
                       exp(xx * -K - car(d_b) * -K) *
                        Integral(car(d_b), xx,
                                 LAMBDA (dd: (d)):
                                   exp(dd * K - car(d_b) * K)))
                    (car(x)))
         * rho(n, K, norm_inf(n))(y, z)")
                        (("1" (assert) nil nil)
                         ("2" (replace -1)
                          (("2" (hide -1)
                            (("2"
                              (case "(LAMBDA (x: VectorN(1)):
             ext_c(LAMBDA (xx: (d)):
                     exp(xx * -K - car(d_b) * -K) *
                      Integral(car(d_b), xx,
                               LAMBDA (dd: (d)):
                                 exp(dd * K - car(d_b) * K) *
                                  (rho(n, K, norm_inf(n))(y, z))))
                  (car(x))) = (LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(xx * -K - car(d_b) * -K) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)):
                                  exp(dd * K - car(d_b) * K)))
                   (car(x))
         * rho(n, K, norm_inf(n))(y, z))")
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (lemma "max_const")
                                  (("1"
                                    (hide -2 -3 -4)
                                    (("1"
                                      (inst
                                       -1
                                       "LAMBDA (x: VectorN(1)): d(car(x))"
                                       "(LAMBDA (x: VectorN(1)):
              ext_c(LAMBDA (xx: (d)):
                      exp(xx * -K - car(d_b) * -K) *
                       Integral(car(d_b), xx,
                                LAMBDA (dd: (d)):
                                  exp(dd * K - car(d_b) * K)))
                   (car(x)))"
                                       "rho(n, K, norm_inf(n))(y, z)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "*" -1 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 3)
                                        (("2"
                                          (lemma "exp_rho_contD")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide 2 3)
                                        (("3"
                                          (skeep 1)
                                          (("3"
                                            (lemma
                                             "deriv_Int_lin_TCC1")
                                            (("3"
                                              (inst
                                               -1
                                               "K"
                                               " car[real](d_b[d]) * K"
                                               "car(d_b)"
                                               "xx")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "xx")
                                                (("2"
                                                  (typepred "d_b")
                                                  (("2"
                                                    (inst -5 "xx")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (hide 2)
                                        (("4"
                                          (hide 2)
                                          (("4"
                                            (lemma "d_three")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (lemma
                                                   "closed_interval")
                                                  (("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (typepred "x!1")
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (lemma "ext_const")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (xx: (d)):
               exp(xx * -K - car(d_b) * -K) *
                Integral(car(d_b), xx,
                         LAMBDA (dd: (d)): exp(dd * K - car(d_b) * K))"
                                           "rho(n, K, norm_inf(n))(y, z)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "*" -1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (reveal -)
                                                  (("1"
                                                    (hide -7 -6)
                                                    (("1"
                                                      (hide -5)
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (hide -2)
                                                            (("1"
                                                              (case
                                                               "(LAMBDA (xx: (d)):
              exp(xx * -K - car(d_b) * -K) *
               Integral(car(d_b), xx,
                        LAMBDA (dd: (d)):
                          exp(dd * K - car(d_b) * K) *
                           (rho(n, K, norm_inf(n))(y, z)))) = (LAMBDA (xx: (d)):
              exp(xx * -K - car(d_b) * -K) * (rho(n, K, norm_inf(n))(y, z)) *
               Integral(car(d_b), xx,
                        LAMBDA (dd: (d)):
                          exp(dd * K - car(d_b) * K)
                          ))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -3
                                                                     1)
                                                                    (("1"
                                                                      (case
                                                                       "rho(n, K, norm_inf(n))(y, z) =0")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "*"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (div-by
                                                                         2
                                                                         "rho(n, K, norm_inf(n))(y, z)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "((rho(n, K, norm_inf(n))(y, z) *
         ext_c(LAMBDA (xx: (d)):
                 exp(xx * -K - car(d_b) * -K) *
                  Integral(car(d_b), xx,
                           LAMBDA (dd: (d)): exp(dd * K - car(d_b) * K))))
           (car(x!1))
        / rho(n, K, norm_inf(n))(y, z)) =  ext_c(LAMBDA (xx: (d)):
                 exp(xx * -K - car(d_b) * -K) *
                  Integral(car(d_b), xx,
                           LAMBDA (dd: (d)): exp(dd * K - car(d_b) * K)))
           (car(x!1))")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               3)
                                                                              (("2"
                                                                                (expand
                                                                                 "*"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep
                                                                           1)
                                                                          (("2"
                                                                            (lemma
                                                                             "deriv_Int_lin_TCC1")
                                                                            (("2"
                                                                              (hide
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "K"
                                                                                 "car[real](d_b[d]) * K"
                                                                                 "car(d_b)"
                                                                                 "xx")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "xx")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "d_b")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -5
                                                                                       "xx")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("1"
                                                                    (div-by
                                                                     1
                                                                     "exp(x!2 * -K - car(d_b) * -K)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         " exp(x!2 * -K - car(d_b) * -K) * (rho(n, K, norm_inf(n))(y, z)) *
         Integral(car(d_b), x!2,
                  LAMBDA (dd: (d)): exp(dd * K - car(d_b) * K))
         / exp(x!2 * -K - car(d_b) * -K) = (rho(n, K, norm_inf(n))(y, z)) *
         Integral(car(d_b), x!2,
                  LAMBDA (dd: (d)): exp(dd * K - car(d_b) * K))")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "Integral_scal[(d)]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "rho(n, K, norm_inf(n))(y, z)"
                                                                               "car(d_b)"
                                                                               "x!2"
                                                                               "LAMBDA (dd: (d)):
                  exp(dd * K - car(d_b) * K)")
                                                                              (("1"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "*"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         1
                                                                                         rl)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "*"
                                                                                           1
                                                                                           4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "deriv_Int_lin_TCC1")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "K"
                                                                                       "car(d_b)*K"
                                                                                       "car(d_b)"
                                                                                       "x!2")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x!2")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "d_b")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -5
                                                                                               "x!2")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (lemma
                                                                                 "not_one_element")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "connected")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide
                                                                               -)
                                                                              (("4"
                                                                                (lemma
                                                                                 "non_empty")
                                                                                (("4"
                                                                                  (expand
                                                                                   "nonempty?"
                                                                                   -1)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "empty?"
                                                                                     1)
                                                                                    (("4"
                                                                                      (skeep
                                                                                       1)
                                                                                      (("4"
                                                                                        (inst
                                                                                         1
                                                                                         "x")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "member"
                                                                                           -1)
                                                                                          (("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (lemma
                                                                             "deriv_Int_lin_TCC1")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "K"
                                                                               "car(d_b)*K"
                                                                               "car(d_b)"
                                                                               "x!2")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "d_b")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "d_b")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -5
                                                                                       "x!2")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "exp_rho_Integrable")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x!2")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (lemma
                                                                         "deriv_Int_lin_TCC1")
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "K"
                                                                           "car(d_b)*K"
                                                                           "car(d_b)"
                                                                           "x!2")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "d_b")
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "x!2")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide
                                                                       2)
                                                                      (("4"
                                                                        (lemma
                                                                         "exp_rho_Integrable")
                                                                        (("4"
                                                                          (inst?)
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (inst
                                                                               -1
                                                                               "x!2")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "deriv_Int_lin_TCC1")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "K"
                                                                         "car(d_b)*K"
                                                                         "car(d_b)"
                                                                         "xx")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "d_b")
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "xx")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep
                                                                     1)
                                                                    (("3"
                                                                      (lemma
                                                                       "exp_rho_Integrable")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (lemma
                                                                   "deriv_Int_lin_TCC1")
                                                                  (("3"
                                                                    (skeep
                                                                     1)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "K"
                                                                       "car(d_b)*K"
                                                                       "car(d_b)"
                                                                       "xx")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "xx")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (skeep
                                                                   1)
                                                                  (("4"
                                                                    (lemma
                                                                     "exp_rho_Integrable")
                                                                    (("4"
                                                                      (inst?)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "xx")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (skeep 1)
                                                (("2"
                                                  (lemma
                                                   "deriv_Int_lin_TCC1")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "K"
                                                     "car(d_b)*K"
                                                     "car(d_b)"
                                                     "xx")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "d_b")
                                                      (("2"
                                                        (inst -5 "xx")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (lemma "deriv_Int_lin_TCC1")
                                      (("2"
                                        (inst
                                         -1
                                         "K"
                                         "car(d_b)*K"
                                         "car(d_b)"
                                         "xx")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "d_b")
                                          (("2"
                                            (inst -5 "xx")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (lemma "exp_rho_Integrable")
                                      (("3"
                                        (inst?)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (inst -1 "xx")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3 2)
                      (("2" (lemma "exp_rho_contD")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (hide 2 3)
                      (("3" (skeep)
                        (("3" (lemma "deriv_Int_lin_TCC1")
                          (("3"
                            (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                            (("1" (assert) nil nil)
                             ("2" (typepred "d_b")
                              (("2"
                                (inst -5 "xx")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 2 3)
                      (("4" (lemma "d_three")
                        (("4" (inst?)
                          (("4" (assert)
                            (("4" (lemma "closed_interval")
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide 2 3)
                      (("5" (lemma "exp_rho_contD_rho")
                        (("5" (inst?) (("5" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("6" (hide 2 3)
                      (("6" (lemma "exp_rho_Integrable")
                        (("6" (skeep 1)
                          (("6" (inst?)
                            (("6" (inst -1 "xx")
                              (("6" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (lemma "exp_rho_contD")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep)
                (("4" (lemma "deriv_Int_lin_TCC1")
                  (("4" (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                    (("1" (assert) nil nil)
                     ("2" (hide -)
                      (("2" (typepred "d_b")
                        (("2" (inst -5 "xx") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (hide 2)
              (("5" (lemma "closed_interval")
                (("5" (lemma "d_three") (("5" (inst?) nil nil)) nil))
                nil))
              nil)
             ("6" (lemma "exp_rho_contD_rho")
              (("6" (inst?) (("6" (assert) nil nil)) nil)) nil)
             ("7" (hide 2)
              (("7" (skeep)
                (("7" (lemma "exp_rho_Integrable")
                  (("7" (inst?)
                    (("7" (assert) (("7" (inst -1 "xx") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rho_psi_int_rho formula-decl nil ODE_psi_contraction nil)
    (Integral_const formula-decl nil r2v_analysis nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (exp_rho_contD_rho formula-decl nil ODE_psi_contraction nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (max_const formula-decl nil max_function mv_analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (exp_rho_contD formula-decl nil ODE_psi_contraction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (deriv_Int_lin_TCC1 subtype-tcc nil exp_analysis nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (d_three formula-decl nil interval_def nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (exp_rho_Integrable formula-decl nil ODE_psi_contraction nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" ODE_psi_contraction nil)
    (empty? const-decl "bool" sets nil)
    (non_empty formula-decl nil ODE_psi_def nil)
    (connected formula-decl nil ODE_psi_def nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (Integral_scal formula-decl nil integral analysis)
    (x!2 skolem-const-decl "(d)" ODE_psi_contraction nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (ext_const formula-decl nil r2v_continuous_extension nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (z skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (closed_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema
     mv_analysis)
    (max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integral const-decl "real" integral_def analysis)
    (rho const-decl "nnreal" metric_rho nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (rho_psi_rho_exp_int 0
  (rho_psi_rho_exp_int-1 nil 3788866654
   ("" (lemma "rho_psi_rho_pull")
    (("" (skeep)
      (("" (inst?)
        ((""
          (case "max(LAMBDA (x: VectorN(1)): d(car(x)))
                  (LAMBDA (x: VectorN(1)):
                     ext_c(LAMBDA (xx: (d)):
                             exp(-K * (xx - car(d_b))) *
                              Integral(car(d_b), xx,
                                       LAMBDA (dd: (d)): exp(K * (dd - car(d_b)))))
                          (car(x))) <= 1/K")
          (("1" (assert)
            (("1" (mult-by -1 " Lip_c(n)(f)")
              (("1" (mult-by -1 " rho(n, K, norm_inf(n))(y, z)")
                (("1" (assert) nil nil)
                 ("2" (lemma "d_three")
                  (("2" (lemma "closed_interval")
                    (("2" (inst?) nil nil)) nil))
                  nil)
                 ("3" (lemma "exp_rho_contD")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
                 ("4" (lemma "deriv_Int_lin_TCC1")
                  (("4" (skeep 1)
                    (("4" (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                      (("1" (assert) nil nil)
                       ("2" (typepred "d_b")
                        (("2" (inst -5 "xx") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "d_three")
                (("2" (lemma "closed_interval") (("2" (inst?) nil nil))
                  nil))
                nil)
               ("3" (lemma "exp_rho_contD")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)
               ("4" (skeep 1)
                (("4" (hide -)
                  (("4" (lemma "deriv_Int_lin_TCC1")
                    (("4" (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                      (("1" (assert) nil nil)
                       ("2" (typepred "d_b")
                        (("2" (inst -5 "xx") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (case "FORALL(x:VectorN(1)): 
                     ext_c(LAMBDA (xx: (d)):
                             exp(-K * (xx - car(d_b))) *
                              Integral(car(d_b), xx,
                                       LAMBDA (dd: (d)): exp(K * (dd - car(d_b)))))
                          (car(x)) <= 1/K")
            (("1" (lemma "max_ineq")
              (("1" (hide -3 2)
                (("1"
                  (inst -1 "(LAMBDA (x: VectorN(1)): d(car(x)))"
                   "LAMBDA(x:VectorN(1)):  ext_c(LAMBDA (xx: (d)):
                exp(-K * (xx - car(d_b))) *
                 Integral(car(d_b), xx,
                          LAMBDA (dd: (d)): exp(K * (dd - car(d_b)))))
             (car(x))" "LAMBDA(x:VectorN(1)): 1/K")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1"
                        (typepred
                         "max((LAMBDA (x: VectorN(1)): d(car(x))))
          (LAMBDA (x: VectorN(1)): 1 / K)")
                        (("1" (skeep -2)
                          (("1" (replace -2 -3 rl)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (hide -)
                          (("2" (expand "contD?" 1)
                            (("2" (skeep)
                              (("2"
                                (expand "contp?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 1 "1")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "abs" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep) (("2" (inst -1 "x_1") nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "contD?" 1)
                      (("2" (skeep)
                        (("2" (expand "contp?" 1)
                          (("2" (skeep)
                            (("2" (skeep)
                              (("2"
                                (inst 1 "1")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "abs" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1)
                    (("3" (hide 2)
                      (("3" (lemma "exp_rho_contD")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma "deriv_Int_lin_TCC1")
                      (("4" (skeep 1)
                        (("4"
                          (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                          (("1" (assert) nil nil)
                           ("2" (typepred "d_b")
                            (("2" (assert)
                              (("2"
                                (inst -5 "xx")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skeep)
                      (("5" (typepred "d_b") (("5" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide 2)
                    (("6" (skeep)
                      (("6" (typepred "d_b") (("6" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide 2)
                    (("7" (skeep)
                      (("7" (typepred "d_b") (("7" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("8" (lemma "d_three")
                    (("8" (lemma "closed_interval")
                      (("8" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 3)
              (("2" (hide 2)
                (("2" (skeep 1)
                  (("2" (lemma "ext_ineq")
                    (("2"
                      (inst -1 "LAMBDA (xx: (d)):
              exp(-K * (xx - car(d_b))) *
               Integral(car(d_b), xx,
                        LAMBDA (dd: (d)): exp(K * (dd - car(d_b))))"
                       "LAMBDA(xx:(d)): 1/K")
                      (("1" (split -1)
                        (("1" (inst -1 "car(x)")
                          (("1" (assert)
                            (("1" (hide -2) (("1" (grind) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (lemma "deriv_Int_lin")
                                (("2"
                                  (inst
                                   -1
                                   "K"
                                   "car(d_b)*K"
                                   "car(d_b)"
                                   "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "exp_neg")
                                            (("1"
                                              (inst
                                               -1
                                               "-K * x!1 - car(d_b) * -K")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -)
                                    (("2"
                                      (typepred "x!1")
                                      (("2"
                                        (typepred "d_b")
                                        (("2"
                                          (inst -5 "x!1")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2" (hide 2)
                          (("2" (skeep)
                            (("2" (lemma "deriv_Int_lin_TCC1")
                              (("2"
                                (inst
                                 -1
                                 "K"
                                 "car(d_b)*K"
                                 "car(d_b)"
                                 "xx")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (typepred "d_b")
                                    (("2"
                                      (inst -5 "xx")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2 3)
              (("3" (skeep)
                (("3" (lemma "deriv_Int_lin_TCC1")
                  (("3" (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                    (("1" (assert) nil nil)
                     ("2" (typepred "xx")
                      (("2" (typepred "d_b")
                        (("2" (inst -5 "xx") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (lemma "d_three")
              (("3" (lemma "closed_interval") (("3" (inst?) nil nil))
                nil))
              nil))
            nil)
           ("4" (assert)
            (("4" (hide 2)
              (("4" (lemma "exp_rho_contD")
                (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("5" (hide -)
            (("5" (skeep)
              (("5" (hide 2)
                (("5" (lemma "deriv_Int_lin_TCC1")
                  (("5" (inst -1 "K" "car(d_b)*K" "car(d_b)" "xx")
                    (("1" (assert) nil nil)
                     ("2" (typepred "xx")
                      (("2" (typepred "d_b")
                        (("2" (inst -5 "xx") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp_fnd)
    (ln const-decl "real" ln_exp lnexp_fnd)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function mv_analysis)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema
     mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def mv_analysis)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (closed_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (<= const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (K skolem-const-decl "posreal" ODE_psi_contraction nil)
    (deriv_Int_lin_TCC1 subtype-tcc nil exp_analysis nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exp_rho_contD formula-decl nil ODE_psi_contraction nil)
    (d_three formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval formula-decl nil ODE_psi_contraction nil)
    (rho const-decl "nnreal" metric_rho nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (x!1 skolem-const-decl "(d)" ODE_psi_contraction nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (exp_neg formula-decl nil ln_exp lnexp_fnd)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (deriv_Int_lin formula-decl nil exp_analysis nil)
    (exp_0 formula-decl nil ln_exp lnexp_fnd)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (ext_ineq formula-decl nil r2v_continuous_extension nil)
    (max_ineq formula-decl nil max_function mv_analysis)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (xx skolem-const-decl "(d)" ODE_psi_contraction nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rho_psi_rho_pull formula-decl nil ODE_psi_contraction nil))
   shostak))
 (psi_contraction 0
  (psi_contraction-1 nil 3789484216
   ("" (skeep)
    (("" (lemma "rho_psi_rho_exp_int") (("" (inst?) nil nil)) nil))
    nil)
   ((rho_psi_rho_exp_int formula-decl nil ODE_psi_contraction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   shostak))
 (psi_fixed_imp_sol_TCC1 0
  (psi_fixed_imp_sol_TCC2-1 nil 3788093177
   ("" (skeep) (("" (lemma "cont_od_fx") (("" (inst?) nil nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (psi_fixed_imp_sol subtype "ODE_psi_contraction.f"
    "{ff: ODE_def[ODE_psi_contraction.d].od_f(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ff, ODE_psi_contraction.y))}")))
 (psi_fixed_imp_sol_TCC2 0
  (psi_fixed_imp_sol_TCC2-1 nil 3789486905
   ("" (skeep)
    (("" (skeep 1)
      (("" (lemma "cont_od_fx")
        (("" (inst?)
          (("" (skeep)
            (("" (lemma "der_cont")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (y skolem-const-decl "{yy: r2v_n(n) | derivable?(yy)}"
     ODE_psi_contraction nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (der_cont formula-decl nil r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   nil
   (psi_fixed_imp_sol subtype "ODE_psi_contraction.f"
    "{ff: ODE_def[ODE_psi_contraction.d].od_f(ODE_psi_contraction.n) | r2v_analysis[ODE_psi_contraction.d].continuous?(ODE_def[ODE_psi_contraction.d].od_fx(ODE_psi_contraction.n, ff, ODE_psi_contraction.y))}")))
 (psi_fixed_imp_sol 0
  (psi_fixed_imp_sol-1 nil 3788093681
   ("" (skeep)
    (("" (skeep -1)
      (("" (inst 1 "y")
        (("1" (expand "ivt_s_unique?" 1)
          (("1" (split 1)
            (("1" (expand "ivt_s?" 1)
              (("1" (split 1)
                (("1" (expand "od_sol?" 1)
                  (("1" (lemma "psi_deriv")
                    (("1" (inst -1 "n" "a" "y0" "y" "f")
                      (("1" (decompose-equality 1) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (lemma "psi_init")
                  (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (skeep 1)
              (("2" (expand "ivt_s?" -1)
                (("2" (flatten)
                  (("2" (expand "od_sol?" -1)
                    (("2" (inst -4 "y2")
                      (("1" (assert)
                        (("1" (lemma "psi_init")
                          (("1" (lemma "psi_deriv")
                            (("1" (inst-cp -1 "n" "a" "y0" "y2" "f")
                              (("1"
                                (inst -1 "n" "a" "y0" "y" "f")
                                (("1"
                                  (inst-cp -3 "n" "a" "y0" "y2" "f")
                                  (("1"
                                    (inst -3 "n" "a" "y0" "y" "f")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "y")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (replace -7 -1)
                                            (("1"
                                              (lemma
                                               "derivs_funs_equal[(d)]")
                                              (("1"
                                                (decompose-equality 2)
                                                (("1"
                                                  (lemma
                                                   "list_extensionality")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "psi(n, a, y0, y2, f)(x!1)"
                                                     "y2(x!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep 1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "x!1"
                                                           "nth(psi(n, a, y0, y2, f),n_1)"
                                                           "nth(y2,n_1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "a")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x!1")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (decompose-equality
                                                                           -4)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("2"
                                                                              (lemma
                                                                               "deriv_nth")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "(psi(n, a, y0, y2, f))"
                                                                                 "n_1")
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   -8)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "x")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       -3)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deriv_nth")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "y2"
                                                                                           "n_1")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "list_extensionality")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "deriv(psi(n, a, y0, y2, f))(x)"
                                                                                               "deriv(y2)(x)")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "n_1")
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (decompose-equality
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "x")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (decompose-equality
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             -4)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "deriv"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "deriv"
                                                                                                                                 1
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "nth"
                                                                                                                                         1
                                                                                                                                         2)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             -4
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "deriv"
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "not_one_element")
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "psi_derivable")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "n"
                                                                                                                     "a"
                                                                                                                     "y0"
                                                                                                                     "y2"
                                                                                                                     "f")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "derivable?"
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "n_1")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "nth"
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (lemma
                                                                                                               "deriv_domain")
                                                                                                              (("3"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (typepred
                                                                                                                   "n_1")
                                                                                                                  (("3"
                                                                                                                    (typepred
                                                                                                                     "deriv[d]((psi[d](n, a, y0, y2, f)))")
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       "psi(n, a, y0, y2, f)(x!1)")
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         -4)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (typepred
                                                                                                                             "deriv[d]((psi[d](n, a, y0, y2, f)))(x1!1)")
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (skeep
                                                                                                                                 -4)
                                                                                                                                (("3"
                                                                                                                                  (inst-cp
                                                                                                                                   -4
                                                                                                                                   "choose[real]((d))")
                                                                                                                                  (("3"
                                                                                                                                    (inst
                                                                                                                                     -4
                                                                                                                                     "x1!1")
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "a")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "x")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (inst
                                                                       1
                                                                       "a")
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (lemma
                                                                           "list_extensionality")
                                                                          (("3"
                                                                            (inst
                                                                             -1
                                                                             "psi(n, a, y0, y2, f)(a)"
                                                                             "y2(a)")
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (split
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "n_1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y2")
                                                            (("2"
                                                              (expand
                                                               "derivable?"
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "n_1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "n_1")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (typepred
                                                                 "psi(n, a, y0, y2, f)(x!1)")
                                                                (("3"
                                                                  (hide
                                                                   -1)
                                                                  (("3"
                                                                    (typepred
                                                                     "y2")
                                                                    (("3"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       1)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (lemma
                                                             "psi_derivable")
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "a"
                                                               "y0"
                                                               "y2"
                                                               "f")
                                                              (("4"
                                                                (expand
                                                                 "derivable?"
                                                                 -1)
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "n_1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "y2")
                        (("2" (lemma "der_cont")
                          (("2" (inst -1 "y2") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (propax) nil nil))
            nil))
          nil)
         ("2" (typepred "y")
          (("2" (lemma "psi_derivable")
            (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ivt_s_unique? const-decl "bool" ODE_def nil)
    (y2 skolem-const-decl "{yy: r2v_n[d](n) | derivable?(yy)}"
     ODE_psi_contraction nil)
    (derivs_funs_equal formula-decl nil derivative_props analysis)
    (list_extensionality formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (derivable? const-decl "bool" derivatives analysis)
    (< const-decl "bool" reals nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (y0 skolem-const-decl "VectorN(n)" ODE_psi_contraction nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}"
     ODE_psi_contraction nil)
    (x!1 skolem-const-decl "(d)" ODE_psi_contraction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n_1 skolem-const-decl "below(length(psi(n, a, y0, y2, f)(x!1)))"
     ODE_psi_contraction nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (psi_derivable formula-decl nil ODE_psi_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (x skolem-const-decl "(d)" ODE_psi_contraction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (psi const-decl "{pp: r2v_n(n) | length(pp) = n}" ODE_psi_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (der_cont formula-decl nil r2v_analysis nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (psi_init formula-decl nil ODE_psi_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (<= const-decl "bool" reals nil)
    (a skolem-const-decl "{aa: (d) | FORALL (dd: (d)): aa <= dd}"
     ODE_psi_contraction nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (psi_deriv formula-decl nil ODE_psi_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_contraction nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" ODE_psi_contraction nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_psi_contraction nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis))
   shostak)))

