(|sigma_bijection_nat|
 (|series_bijection_TCC1| 0
  (|series_bijection_TCC1-1| |nil| 3323008883
   ("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL)
   ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK (|series_bijection| SUBTYPE "0" "below[1 + n]")))
 (|series_bijection| 0
  (|series_bijection-3| "" 3882938092
   ("" (SKOSIMP*)
    (("" (EXPAND "series")
      (("" (LEMMA "sigma_bijection[below[n!1+1]]" ("low" "0" "high" "n!1"))
        (("1" (EXPAND "o")
          (("1" (EXPAND "extend")
            (("1"
              (INST - "LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(x) ELSE a!1(0) ENDIF")
              (("1" (EXPAND "restrict")
                (("1" (INST - "phi!1")
                  (("1" (EXPAND "restrict")
                    (("1"
                      (CASE
                          "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (s_1: subrange_T[below[n!1 + 1]](0, n!1)): a!1(s_1)) = sigma(0, m, a!1)")
                      (("1" (INST - "n!1")
                        (("1" (ASSERT)
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2 1)
                              (("1" (HIDE -1 -2)
                                (("1"
                                  (CASE
                                      "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (x_1: subrange_T[below[n!1 + 1]](0, n!1)):
             IF phi!1(x_1) < 1 + n!1 THEN a!1(phi!1(x_1))
             ELSE a!1(0)
             ENDIF)
       =
       sigma(0, m,
             LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(phi!1(x)) ELSE a!1(0) ENDIF)")
                                  (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "m")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (ASSERT)
                                            (("1" (TYPEPRED "phi!1(0)")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "sigma")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "sigma" 1)
                                            (("2" (TYPEPRED "phi!1(1 + j!1)")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2) (("3" (GRIND) NIL NIL))
                                        NIL)
                                       ("4" (HIDE 2) (("4" (GRIND) NIL NIL))
                                        NIL)
                                       ("5" (HIDE 2) (("5" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (HIDE-ALL-BUT 1)
                                    (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 2)
                        (("2" (INDUCT "m")
                          (("1" (ASSERT)
                            (("1" (EXPAND "sigma")
                              (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (ASSERT)
                              (("2" (EXPAND "sigma" 1) (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
                           ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)
                       ("4" (HIDE -1 2) (("4" (GRIND) NIL NIL)) NIL)
                       ("5" (HIDE -1 2) (("5" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (TYPEPRED "phi!1")
                      (("2" (EXPAND "bijective?")
                        (("2" (FLATTEN)
                          (("2" (SPLIT)
                            (("1" (HIDE -2)
                              (("1" (EXPAND "injective?")
                                (("1" (SKOSIMP) (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1)
                              (("2" (EXPAND "restrict")
                                (("2" (EXPAND "surjective?")
                                  (("2" (TYPEPRED "phi!1")
                                    (("2" (EXPAND "bijective?")
                                      (("2" (FLATTEN)
                                        (("2" (SKEEP :PREDS? T)
                                          (("2" (INST? -)
                                            (("2" (SKEEP :PREDS? T)
                                              (("2" (INST?) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|series| CONST-DECL "sequence[real]" |series| |series|)
    (O CONST-DECL "T3" |function_props| NIL)
    (|restrict| CONST-DECL "R" |restrict| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|restrict_of_inj_is_inj| APPLICATION-JUDGEMENT "(injective?[S, R])"
     |restrict| NIL)
    (|phi!1| SKOLEM-CONST-DECL "(bijective?[below[1 + n!1], below[1 + n!1]])"
     |sigma_bijection_nat| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|subrange_T| TYPE-EQ-DECL NIL |sigma_bijection| NIL)
    (|n!1| SKOLEM-CONST-DECL "nat" |sigma_bijection_nat| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (|integer| NONEMPTY-TYPE-FROM-DECL NIL |integers| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|sigma_bijection| FORMULA-DECL NIL |sigma_bijection| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   SHOSTAK)
  (|series_bijection-2| "" 3758855579
   ("" (SKOSIMP*)
    (("" (EXPAND "series")
      (("" (LEMMA "sigma_bijection[below[n!1+1]]" ("low" "0" "high" "n!1"))
        (("1" (EXPAND "o")
          (("1" (EXPAND "extend")
            (("1"
              (INST - "LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(x) ELSE a!1(0) ENDIF")
              (("1" (EXPAND "restrict")
                (("1" (INST - "phi!1")
                  (("1" (EXPAND "restrict")
                    (("1"
                      (CASE
                          "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (s_1: subrange_T[below[n!1 + 1]](0, n!1)): a!1(s_1)) = sigma(0, m, a!1)")
                      (("1" (INST - "n!1")
                        (("1" (ASSERT)
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2 1)
                              (("1" (HIDE -1 -2)
                                (("1"
                                  (CASE
                                      "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (x_1: subrange_T[below[n!1 + 1]](0, n!1)):
             IF phi!1(x_1) < 1 + n!1 THEN a!1(phi!1(x_1))
             ELSE a!1(0)
             ENDIF)
       =
       sigma(0, m,
             LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(phi!1(x)) ELSE a!1(0) ENDIF)")
                                  (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "m")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (ASSERT)
                                            (("1" (TYPEPRED "phi!1(0)")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "sigma")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "sigma" 1)
                                            (("2" (TYPEPRED "phi!1(1 + j!1)")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2) (("3" (GRIND) NIL NIL))
                                        NIL)
                                       ("4" (HIDE 2) (("4" (GRIND) NIL NIL))
                                        NIL)
                                       ("5" (HIDE 2) (("5" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (HIDE-ALL-BUT 1)
                                    (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 2)
                        (("2" (INDUCT "m")
                          (("1" (ASSERT)
                            (("1" (EXPAND "sigma")
                              (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (ASSERT)
                              (("2" (EXPAND "sigma" 1) (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
                           ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)
                       ("4" (HIDE -1 2) (("4" (GRIND) NIL NIL)) NIL)
                       ("5" (HIDE -1 2) (("5" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (TYPEPRED "phi!1")
                      (("2" (EXPAND "bijective?")
                        (("2" (FLATTEN)
                          (("2" (SPLIT)
                            (("1" (HIDE -2)
                              (("1" (EXPAND "injective?")
                                (("1" (SKOSIMP) (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1)
                              (("2" (EXPAND "restrict")
                                (("2" (EXPAND "surjective?")
                                  (("2" (TYPEPRED "phi!1")
                                    (("2" (EXPAND "bijective?")
                                      (("2" (FLATTEN)
                                        (("2" (SKEEP :PREDS? T)
                                          (("2" (INST? -)
                                            (("2" (SKEEP :PREDS? T)
                                              (("2" (INST?) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|subrange_T| TYPE-EQ-DECL NIL |sigma_bijection| NIL)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma_0_neg| FORMULA-DECL NIL |sigma_nat| |reals|)
    (|sigma_bijection| FORMULA-DECL NIL |sigma_bijection| NIL))
   SHOSTAK)
  (|series_bijection-1| |nil| 3323009119
   ("" (SKOSIMP*)
    (("" (EXPAND "series")
      (("" (LEMMA "sigma_bijection[below[n!1+1]]" ("low" "0" "high" "n!1"))
        (("1" (EXPAND "o")
          (("1" (EXPAND "extend")
            (("1"
              (INST - "LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(x) ELSE a!1(0) ENDIF")
              (("1" (EXPAND "restrict")
                (("1" (INST - "phi!1")
                  (("1" (EXPAND "restrict")
                    (("1"
                      (CASE
                          "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (s_1: subrange_T[below[n!1 + 1]](0, n!1)): a!1(s_1)) = sigma(0, m, a!1)")
                      (("1" (INST - "n!1")
                        (("1" (ASSERT)
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2 1)
                              (("1" (HIDE -1 -2)
                                (("1"
                                  (CASE
                                      "forall (m:nat): m <= n!1 => sigma[subrange_T[below[n!1 + 1]](0, n!1)]
          (0, m,
           LAMBDA (x_1: subrange_T[below[n!1 + 1]](0, n!1)):
             IF phi!1(x_1) < 1 + n!1 THEN a!1(phi!1(x_1))
             ELSE a!1(0)
             ENDIF)
       =
       sigma(0, m,
             LAMBDA (x: nat):
               IF x < 1 + n!1 THEN a!1(phi!1(x)) ELSE a!1(0) ENDIF)")
                                  (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL))
                                    NIL)
                                   ("2" (HIDE 2)
                                    (("2" (INDUCT "m")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "sigma")
                                          (("1" (ASSERT)
                                            (("1" (TYPEPRED "phi!1(0)")
                                              (("1" (ASSERT)
                                                (("1" (EXPAND "sigma")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (SKOSIMP*)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "sigma" 1)
                                            (("2" (TYPEPRED "phi!1(1 + j!1)")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("3" (HIDE 2) (("3" (GRIND) NIL NIL))
                                        NIL)
                                       ("4" (HIDE 2) (("4" (GRIND) NIL NIL))
                                        NIL)
                                       ("5" (HIDE 2) (("5" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("3" (HIDE-ALL-BUT 1)
                                    (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 2)
                        (("2" (INDUCT "m")
                          (("1" (ASSERT)
                            (("1" (EXPAND "sigma")
                              (("1" (EXPAND "sigma") (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP*)
                            (("2" (ASSERT)
                              (("2" (EXPAND "sigma" 1) (("2" (PROPAX) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (HIDE 2)
                            (("3" (SKOSIMP*) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL)
                           ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)
                           ("5" (HIDE 2) (("5" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE -1 2) (("3" (GRIND) NIL NIL)) NIL)
                       ("4" (HIDE -1 2) (("4" (GRIND) NIL NIL)) NIL)
                       ("5" (HIDE -1 2) (("5" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (TYPEPRED "phi!1")
                      (("2" (EXPAND "bijective?")
                        (("2" (FLATTEN)
                          (("2" (SPLIT)
                            (("1" (HIDE -2)
                              (("1" (EXPAND "injective?")
                                (("1" (SKOSIMP) (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1)
                              (("2" (EXPAND "restrict")
                                (("2" (EXPAND "surjective?")
                                  (("2" (TYPEPRED "phi!1")
                                    (("2" (EXPAND "bijective?")
                                      (("2" (FLATTEN)
                                        (("2" (HIDE-ALL-BUT (-1 1))
                                          (("2" (EXPAND "injective?")
                                            (("2" (SKOSIMP*)
                                              (("2" (INST - "x1!1" "x2!1")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (EXPAND "restrict")
                              (("3" (EXPAND "surjective?")
                                (("3" (SKOSIMP)
                                  (("3" (INST - "y!1")
                                    (("3" (SKOSIMP)
                                      (("3" (INST + "x!1") NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)))

