(|essential_bound_complete_scaf|
 (|mu_TCC1| 0
  (|mu_TCC1-1| |nil| 3502969751
   ("" (TYPEPRED "S")
    (("" (EXPAND "sigma_algebra?")
      (("" (FLATTEN)
        (("" (EXPAND "subset_algebra_empty?")
          (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|))
   NIL
   (|mu| ASSUMING
    "measure_integration@generalized_measure_def[essential_bound_complete_scaf.T, essential_bound_complete_scaf.S].generalized_measure_def"
    "S_empty: ASSUMPTION generalized_measure_def.S(sets[generalized_measure_def.T].emptyset)")))
 (|essential_bound_complete_scaf| 0
  (|essential_bound_complete_scaf-1| |nil| 3502969847
   (""
    (CASE "FORALL (F: sequence[essentially_bounded]):
               (FORALL n: essential_bound(F(n+1) - F(n)) < 2^(-n))
                IMPLIES
                (EXISTS f:
                   FORALL r:
                     EXISTS n: FORALL i: i >= n => essential_bound(f - F(i)) < r)")
    (("1" (SKOSIMP)
      (("1"
        (NAME "NEXT"
              "lambda (n,m:nat): (n+1,choose({k:nat | k > m & FORALL i, j:
                     i >= k AND j >= k => essential_bound(F!1(j) - F!1(i)) < 2^(-n)}))")
        (("1" (NAME "SEQ" "lambda n: (iterate(NEXT,n+1)(0,0))`2")
          (("1"
            (CASE
                "forall n,i: i >= SEQ(n) => essential_bound(F!1(i) - F!1(SEQ(n))) < 2 ^ (-n)")
            (("1" (CASE "subseq?(F!1 o SEQ, F!1)")
              (("1" (INST -5 "F!1 o SEQ")
                (("1" (SPLIT -5)
                  (("1" (SKOSIMP)
                    (("1" (INST + "f!1")
                      (("1" (SKOSIMP)
                        (("1" (INST - "r!1/2")
                          (("1" (SKOSIMP)
                            (("1" (CASE "exists n: 2^(-n) < r!1/2")
                              (("1" (SKOSIMP)
                                (("1" (INST + "SEQ(n!1+n!2)")
                                  (("1" (SKOSIMP)
                                    (("1" (INST - "n!1+n!2")
                                      (("1" (ASSERT)
                                        (("1" (INST - "n!1+n!2" "i!1")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "o" -2)
                                              (("1"
                                                (LEMMA "essential_bound_diff"
                                                 ("f0"
                                                  "f!1 - F!1(SEQ(n!1 + n!2))"
                                                  "f1"
                                                  "F!1(i!1) - F!1(SEQ(n!1 + n!2))"))
                                                (("1" (ASSERT)
                                                  (("1"
                                                    (CASE
                                                        "2 ^ (-(n!1 + n!2))<=2 ^ (-n!2)")
                                                    (("1" (ASSERT)
                                                      (("1"
                                                        (NAME "LHS1"
                                                              "essential_bound(f!1 - F!1(SEQ(n!1 + n!2)) -
                                              (F!1(i!1) - F!1(SEQ(n!1 + n!2))))")
                                                        (("1"
                                                          (NAME-REPLACE "LHS2"
                                                           "essential_bound(f!1 - F!1(i!1))")
                                                          (("1"
                                                            (CASE-REPLACE
                                                             "LHS1=LHS2")
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2"
                                                              (HIDE-ALL-BUT 1)
                                                              (("2"
                                                                (EXPAND "LHS2")
                                                                (("2"
                                                                  (EXPAND
                                                                   "LHS1")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "-")
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (NAME-REPLACE
                                                                         "F1"
                                                                         "F!1(i!1)")
                                                                        (("2"
                                                                          (NAME-REPLACE
                                                                           "F2"
                                                                           "F!1(SEQ(n!1 + n!2))")
                                                                          (("2"
                                                                            (EXPAND
                                                                             "essential_bound")
                                                                            (("2"
                                                                              (EXPAND
                                                                               "ae_le?")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "abs")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "pointwise_ae?")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "ae?")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "fullset")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "ae_in?")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "member")
                                                                                          (("2"
                                                                                            (EXPAND
                                                                                             "-")
                                                                                            (("2"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (LEMMA
                                                       "both_sides_real_expt_gt1_ge"
                                                       ("gt1x" "2" "a" "-n!2"
                                                        "b" "-(n!1 + n!2)"))
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT 1)
                                (("2" (LEMMA "small_expt" ("px" "1/2"))
                                  (("2" (ASSERT)
                                    (("2" (INST - "r!1/2")
                                      (("2" (SKOSIMP)
                                        (("2" (INST + "n!2")
                                          (("2" (REWRITE "real_expt_neg")
                                            (("2" (REWRITE "real_expt_int_rew")
                                              (("2" (EXPAND "^")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE 2)
                    (("2" (SKOSIMP)
                      (("2" (INST -2 "n!1" "SEQ(n!1+1)")
                        (("2" (EXPAND "o ")
                          (("2" (ASSERT)
                            (("2" (HIDE 1 -1 -2 -3)
                              (("2" (EXPAND "SEQ")
                                (("2" (EXPAND "iterate" 1 1)
                                  (("2"
                                    (NAME-REPLACE "NN"
                                     "iterate(NEXT, 1 + n!1)(0, 0)")
                                    (("2" (EXPAND "NEXT")
                                      (("2"
                                        (CASE "nonempty?({k: nat |
                                   k > NN`2 &
                                    (FORALL i, j:
                                       i >= k AND j >= k =>
                                        essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))})")
                                        (("1"
                                          (LEMMA "choose_member"
                                           ("a" "{k: nat |
                                 k > NN`2 &
                                  (FORALL i, j:
                                     i >= k AND j >= k =>
                                      essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))}"))
                                          (("1" (SPLIT)
                                            (("1"
                                              (NAME-REPLACE "CC"
                                               "choose({k: nat |
                                  k > NN`2 &
                                   (FORALL i, j:
                                      i >= k AND j >= k =>
                                       essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))})")
                                              (("1" (EXPAND "member")
                                                (("1" (FLATTEN)
                                                  (("1" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (EXPAND "nonempty?")
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (HIDE 2)
                                          (("2" (EXPAND "nonempty?")
                                            (("2" (EXPAND "empty?")
                                              (("2" (EXPAND "member")
                                                (("2" (INST -2 "2 ^ (-NN`1)")
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST - "n!2+NN`2+1")
                                                      (("1" (ASSERT)
                                                        (("1" (SKOSIMP)
                                                          (("1"
                                                            (INST - "i!1"
                                                             "j!1")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2"
                                                    (REWRITE "real_expt_pos")
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (EXPAND "subseq?")
                  (("2" (INST + "SEQ")
                    (("1" (EXPAND "o ") (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (EXPAND "strict_increasing?")
                      (("2" (CASE "forall (i,n:nat): SEQ(i) < SEQ(1+i+n)")
                        (("1" (SKOSIMP)
                          (("1" (INST - "x!1" "y!1-x!1-1")
                            (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (INDUCT "n")
                            (("1" (SKOSIMP)
                              (("1" (EXPAND "SEQ")
                                (("1" (EXPAND "iterate" 1 2)
                                  (("1"
                                    (NAME-REPLACE "NN"
                                     "iterate(NEXT, 1 + i!1)(0, 0)")
                                    (("1" (EXPAND "NEXT")
                                      (("1" (HIDE -2 -1)
                                        (("1"
                                          (CASE "nonempty?({k: nat |
                                        k > NN`2 &
                                         (FORALL i, j:
                                            i >= k AND j >= k =>
                                             essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))})")
                                          (("1"
                                            (LEMMA "choose_member"
                                             ("a" "{k: nat |
                                      k > NN`2 &
                                       (FORALL i, j:
                                          i >= k AND j >= k =>
                                           essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))}"))
                                            (("1" (SPLIT)
                                              (("1"
                                                (NAME-REPLACE "RHS"
                                                 "choose({k: nat |
                                       k > NN`2 &
                                        (FORALL i, j:
                                           i >= k AND j >= k =>
                                            essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))})")
                                                (("1" (EXPAND "member")
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "nonempty?")
                                                (("2" (PROPAX) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2" (EXPAND "nonempty?")
                                              (("2" (EXPAND "empty?")
                                                (("2" (EXPAND "member")
                                                  (("2" (INST -3 "2 ^ (-NN`1)")
                                                    (("1" (SKOSIMP)
                                                      (("1"
                                                        (INST - "n!1+NN`2+1")
                                                        (("1" (ASSERT)
                                                          (("1" (SKOSIMP)
                                                            (("1"
                                                              (INST - "i!2"
                                                               "j!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (REWRITE "real_expt_pos")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP)
                              (("2" (SKOSIMP)
                                (("2" (INST - "i!1")
                                  (("2" (NAME-REPLACE "LHS" "SEQ(i!1)")
                                    (("2" (HIDE -2 -3 -4)
                                      (("2" (EXPAND "SEQ")
                                        (("2" (EXPAND "iterate" 1)
                                          (("2"
                                            (NAME-REPLACE "NN"
                                             "iterate(NEXT, 2 + i!1 + j!1)(0, 0)")
                                            (("2" (EXPAND "NEXT")
                                              (("2"
                                                (CASE "nonempty?({k: nat |
                                        k > NN`2 &
                                         (FORALL i, j:
                                            i >= k AND j >= k =>
                                             essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))})")
                                                (("1"
                                                  (LEMMA "choose_member"
                                                   ("a" "{k: nat |
                                      k > NN`2 &
                                       (FORALL i, j:
                                          i >= k AND j >= k =>
                                           essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))}"))
                                                  (("1" (SPLIT)
                                                    (("1"
                                                      (NAME-REPLACE "ZZ"
                                                       "choose({k: nat |
                                       k > NN`2 &
                                        (FORALL i, j:
                                           i >= k AND j >= k =>
                                            essential_bound(F!1(j) - F!1(i)) < 2 ^ (-NN`1))})")
                                                      (("1" (EXPAND "member")
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (EXPAND "nonempty?")
                                                      (("2" (PROPAX) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE 2)
                                                  (("2" (EXPAND "nonempty?")
                                                    (("2" (EXPAND "empty?")
                                                      (("2" (EXPAND "member")
                                                        (("2"
                                                          (INST -4
                                                           "2 ^ (-NN`1)")
                                                          (("1" (SKOSIMP)
                                                            (("1"
                                                              (INST -
                                                               "n!1+NN`2+1")
                                                              (("1" (ASSERT)
                                                                (("1" (SKOSIMP)
                                                                  (("1"
                                                                    (INST -
                                                                     "i!2"
                                                                     "j!2")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT)
                                                            (("2"
                                                              (REWRITE
                                                               "real_expt_pos")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (INDUCT "n")
                (("1" (SKOSIMP)
                  (("1" (EXPAND "SEQ")
                    (("1" (EXPAND "iterate")
                      (("1" (EXPAND "iterate")
                        (("1" (HIDE -2)
                          (("1" (NAME "ZZ" "NEXT(0, 0)`2")
                            (("1" (REPLACE -1)
                              (("1" (EXPAND "NEXT" -1)
                                (("1"
                                  (CASE "nonempty?({k: nat |
                                 k > 0 &
                                  (FORALL i, j:
                                     i >= k AND j >= k =>
                                      essential_bound(F!1(j) - F!1(i)) < 2 ^ (-0))})")
                                  (("1"
                                    (LEMMA "choose_member"
                                     ("a" "{k: nat |
                               k > 0 &
                                (FORALL i, j:
                                   i >= k AND j >= k =>
                                    essential_bound(F!1(j) - F!1(i)) < 2 ^ (-0))}"))
                                    (("1" (REPLACE -3)
                                      (("1" (SPLIT -1)
                                        (("1" (EXPAND "member")
                                          (("1" (FLATTEN)
                                            (("1" (INST - "ZZ" "i!1")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "nonempty?")
                                          (("2" (PROPAX) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE -1 -2 2)
                                    (("2" (EXPAND "nonempty?")
                                      (("2" (EXPAND "empty?")
                                        (("2" (EXPAND "member")
                                          (("2" (INST -4 "2^(-0)")
                                            (("1" (SKOSIMP)
                                              (("1" (INST - "n!1+1")
                                                (("1" (ASSERT)
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST -5 "i!2" "j!1")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2"
                                              (LEMMA "real_expt_pos"
                                               ("px" "2" "a" "-0"))
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP)
                  (("2" (SKOSIMP)
                    (("2" (HIDE -3 -4)
                      (("2" (EXPAND "SEQ")
                        (("2" (EXPAND "iterate" 1)
                          (("2" (EXPAND "iterate" -2)
                            (("2"
                              (NAME-REPLACE "NN"
                               "iterate(NEXT, 1 + j!1)(0, 0)")
                              (("2" (EXPAND "NEXT")
                                (("2"
                                  (CASE "nonempty?({k: nat |
                                                      k > NN`2
                                                      &
                                                      (FORALL
                                                       i, j:
                                                       i >= k AND j >= k
                                                       =>
                                                       essential_bound(F!1(j) - F!1(i))
                                                       <
                                                       2 ^ (-NN`1))})")
                                  (("1"
                                    (LEMMA "choose_member"
                                     ("a" "{k: nat |
                                                    k > NN`2
                                                    &
                                                    (FORALL
                                                     i, j:
                                                     i >= k AND j >= k
                                                     =>
                                                     essential_bound(F!1(j) - F!1(i))
                                                     <
                                                     2 ^ (-NN`1))}"))
                                    (("1" (SPLIT -1)
                                      (("1" (EXPAND "member")
                                        (("1"
                                          (NAME-REPLACE "CC" "choose({k: nat |
                                                     k > NN`2
                                                     &
                                                     (FORALL
                                                      i, j:
                                                      i >= k AND j >= k
                                                      =>
                                                      essential_bound(F!1(j) - F!1(i))
                                                      <
                                                      2 ^ (-NN`1))})")
                                          (("1" (FLATTEN)
                                            (("1" (INST - "CC" "i!1")
                                              (("1" (CASE-REPLACE "NN`1=1+j!1")
                                                (("1" (ASSERT) NIL NIL)
                                                 ("2" (EXPAND "NN" 1)
                                                  (("2"
                                                    (CASE
                                                        "forall n: iterate(NEXT,n)(0, 0)`1 = n")
                                                    (("1" (INST - "1+j!1") NIL
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (INDUCT "n")
                                                        (("1"
                                                          (EXPAND "iterate")
                                                          (("1" (PROPAX) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (SKOSIMP)
                                                          (("2"
                                                            (EXPAND "iterate"
                                                                    1)
                                                            (("2"
                                                              (EXPAND "NEXT" 1
                                                                      1)
                                                              (("2" (PROPAX)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("3" (SKOSIMP)
                                                          (("3" (EXPAND "NEXT")
                                                            (("3" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "nonempty?")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL)
                                   ("2" (HIDE 2 -1 -2)
                                    (("2" (EXPAND "nonempty?")
                                      (("2" (EXPAND "empty?")
                                        (("2" (EXPAND "member")
                                          (("2" (INST -3 "2^(-NN`1)")
                                            (("1" (SKOSIMP)
                                              (("1" (INST - "n!1+NN`2+1")
                                                (("1" (ASSERT)
                                                  (("1" (SKOSIMP)
                                                    (("1" (INST - "i!2" "j!2")
                                                      (("1" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (REWRITE "real_expt_pos") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (SKOSIMP) (("2" (EXPAND "NEXT") (("2" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP)
          (("2" (EXPAND "nonempty?")
            (("2" (EXPAND "empty?")
              (("2" (EXPAND "member")
                (("2" (HIDE 1 -2)
                  (("2" (INST -2 "2 ^ (-n!1)")
                    (("1" (SKOSIMP)
                      (("1" (INST - "n!2+m!1+1")
                        (("1" (ASSERT)
                          (("1" (SKOSIMP)
                            (("1" (INST - "i!1" "j!1") (("1" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LEMMA "real_expt_pos" ("px" "2" "a" "-n!1"))
                      (("2" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL)
     ("2" (HIDE 2)
      (("2"
        (CASE "FORALL (F: sequence[essentially_bounded]):
                 EXISTS (N:null_set): FORALL (x:T,n): NOT N(x) => abs(F(n+1)(x)-F(n)(x)) <= essential_bound(F(n + 1) - F(n))")
        (("1" (SKOSIMP)
          (("1" (INST - "F!1")
            (("1" (SKOSIMP)
              (("1"
                (CASE "FORALL (x: T, n, m: nat):
                   NOT N!1(x) =>
                    abs(F!1(n + m)(x) - F!1(n)(x)) <= sigma[nat](n,n+m-1,geometric(1/2))")
                (("1"
                  (CASE
                      "forall (n,m:nat): sigma[nat](n, n + m - 1, geometric(1 / 2)) < 2^(1-n)")
                  (("1"
                    (CASE
                        "exists (g:[T->complex]): pointwise_convergence?(lambda n: lambda (x:T): phi(complement(N!1))(x) * F!1(n)(x),g)")
                    (("1" (SKOSIMP)
                      (("1"
                        (LEMMA "pointwise_complex_measurable"
                         ("f" "g!1" "u" "LAMBDA n:
                                            LAMBDA (x: T):
                                              phi(complement(N!1))(x) * F!1(n)(x)"))
                        (("1" (REPLACE -2)
                          (("1"
                            (CASE
                                "FORALL (x: T, n): NOT N!1(x) => abs(g!1(x) - F!1(n)(x)) < 2 ^ (2 - n)")
                            (("1" (CASE "essentially_bounded?(g!1)")
                              (("1" (INST + "g!1")
                                (("1" (SKOSIMP)
                                  (("1" (HIDE-ALL-BUT (-2 1))
                                    (("1"
                                      (LEMMA "exp_of_exists"
                                       ("py" "r!1" "b" "2"))
                                      (("1" (SKOSIMP)
                                        (("1"
                                          (LEMMA "both_sides_real_expt_gt1_lt"
                                           ("gt1x" "2" "a" "i!1-1" "b" "i!1"))
                                          (("1" (ASSERT)
                                            (("1"
                                              (REWRITE "real_expt_int_rew" *
                                               :DIR RL)
                                              (("1"
                                                (REWRITE "real_expt_int_rew" *
                                                 :DIR RL)
                                                (("1" (CASE "3-i!1>=0")
                                                  (("1" (INST + "3-i!1")
                                                    (("1" (SKOSIMP)
                                                      (("1"
                                                        (LEMMA
                                                         "both_sides_real_expt_gt1_le"
                                                         ("gt1x" "2" "a"
                                                          "2-i!2" "b" "i!1-1"))
                                                        (("1" (ASSERT)
                                                          (("1"
                                                            (LEMMA
                                                             "essential_bound_def1"
                                                             ("f"
                                                              "g!1 - F!1(i!2)"
                                                              "K" "2^(2-i!2)"))
                                                            (("1" (SPLIT -1)
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (HIDE 2)
                                                                (("2"
                                                                  (EXPAND
                                                                   "ae_le?")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "pointwise_ae?")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "ae?")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "fullset")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "ae_in?")
                                                                          (("2"
                                                                            (INST
                                                                             +
                                                                             "N!1")
                                                                            (("2"
                                                                              (SKOSIMP)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("2"
                                                                                  (INST
                                                                                   -
                                                                                   "x!1"
                                                                                   "i!2")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "abs"
                                                                                       2)
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "-"
                                                                                           2)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT)
                                                    (("2" (CASE "3-i!1<0")
                                                      (("1" (HIDE 1)
                                                        (("1"
                                                          (LEMMA
                                                           "both_sides_real_expt_gt1_lt"
                                                           ("gt1x" "2" "a" "3"
                                                            "b" "i!1"))
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (REWRITE
                                                               "real_expt_int_rew"
                                                               -1)
                                                              (("1"
                                                                (REWRITE
                                                                 "expt_x3")
                                                                (("1"
                                                                  (INST + "0")
                                                                  (("1"
                                                                    (SKOSIMP)
                                                                    (("1"
                                                                      (INST -
                                                                       "_"
                                                                       "i!2")
                                                                      (("1"
                                                                        (CASE
                                                                            "2 ^ (2 - i!2)< 8")
                                                                        (("1"
                                                                          (LEMMA
                                                                           "essential_bound_def1"
                                                                           ("f"
                                                                            "g!1 - F!1(i!2)"
                                                                            "K"
                                                                            "8"))
                                                                          (("1"
                                                                            (SPLIT
                                                                             -1)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               2)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "ae_le?")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "pointwise_ae?")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "ae?")
                                                                                    (("2"
                                                                                      (EXPAND
                                                                                       "fullset")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "ae_in?")
                                                                                        (("2"
                                                                                          (EXPAND
                                                                                           "member")
                                                                                          (("2"
                                                                                            (INST
                                                                                             +
                                                                                             "N!1")
                                                                                            (("2"
                                                                                              (SKOSIMP)
                                                                                              (("2"
                                                                                                (INST
                                                                                                 -
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (EXPAND
                                                                                                     "abs"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "-"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (HIDE-ALL-BUT
                                                                           1)
                                                                          (("2"
                                                                            (LEMMA
                                                                             "both_sides_real_expt_gt1_lt"
                                                                             ("gt1x"
                                                                              "2"
                                                                              "a"
                                                                              "2-i!2"
                                                                              "b"
                                                                              "3"))
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "real_expt_int_rew"
                                                                                 ("x"
                                                                                  "2"
                                                                                  "i"
                                                                                  "3"))
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "expt_x3")
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE-ALL-BUT (-1 1 -2))
                                (("2" (TYPEPRED "F!1(0)")
                                  (("2" (EXPAND "essentially_bounded?")
                                    (("2" (REPLACE -3)
                                      (("2" (FLATTEN)
                                        (("2" (HIDE -1 -4)
                                          (("2" (EXPAND "ae_bounded?")
                                            (("2" (SKOSIMP)
                                              (("2" (INST + "K!1+4")
                                                (("2" (EXPAND "ae_le?")
                                                  (("2"
                                                    (EXPAND "pointwise_ae?")
                                                    (("2" (EXPAND "ae?")
                                                      (("2" (EXPAND "fullset")
                                                        (("2" (EXPAND "ae_in?")
                                                          (("2" (SKOSIMP)
                                                            (("2"
                                                              (TYPEPRED "E!1")
                                                              (("2"
                                                                (EXPAND
                                                                 "member")
                                                                (("2"
                                                                  (INST +
                                                                   "union(N!1,E!1)")
                                                                  (("2"
                                                                    (SKOSIMP)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "union")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "member")
                                                                        (("2"
                                                                          (FLATTEN)
                                                                          (("2"
                                                                            (HIDE
                                                                             -1)
                                                                            (("2"
                                                                              (INST
                                                                               -
                                                                               "x!1")
                                                                              (("2"
                                                                                (INST
                                                                                 -
                                                                                 "x!1"
                                                                                 "0")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  (("2"
                                                                                    (REWRITE
                                                                                     "real_expt_int_rew")
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "expt_x2")
                                                                                      (("2"
                                                                                        (LEMMA
                                                                                         "polar.abs_triangle"
                                                                                         ("z1"
                                                                                          "g!1(x!1)-F!1(0)(x!1)"
                                                                                          "z2"
                                                                                          "F!1(0)(x!1)"))
                                                                                        (("2"
                                                                                          (CASE-REPLACE
                                                                                           "abs(g!1(x!1) - F!1(0)(x!1) + F!1(0)(x!1))=abs(g!1)(x!1)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "abs"
                                                                                               3)
                                                                                              (("1"
                                                                                                (EXPAND
                                                                                                 "abs"
                                                                                                 -1
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "abs"
                                                                                                   -2
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (ASSERT)
                                                                                                    (("1"
                                                                                                      (NAME-REPLACE
                                                                                                       "LHS"
                                                                                                       "abs(g!1(x!1))")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "abs"
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (ASSERT)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE-ALL-BUT
                                                                                             1)
                                                                                            (("2"
                                                                                              (EXPAND
                                                                                               "abs")
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "abs")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "sq_abs")
                                                                                                  (("2"
                                                                                                    (ASSERT)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE -1 2)
                              (("2" (SKOSIMP)
                                (("2" (EXPAND "pointwise_convergence?")
                                  (("2" (INST - "x!1")
                                    (("2" (EXPAND "complement")
                                      (("2" (EXPAND "phi")
                                        (("2" (EXPAND "member")
                                          (("2" (INST -3 "x!1" "_" "_")
                                            (("2" (INST -4 "x!1" "_")
                                              (("2" (REPLACE 1)
                                                (("2" (HIDE 1)
                                                  (("2"
                                                    (REWRITE
                                                     "metric_convergence_def"
                                                     -1)
                                                    (("2"
                                                      (EXPAND
                                                       "metric_converges_to")
                                                      (("2" (EXPAND "ball")
                                                        (("2" (EXPAND "member")
                                                          (("2"
                                                            (INST - "2^(-n!1)")
                                                            (("1" (SKOSIMP)
                                                              (("1"
                                                                (INST -
                                                                 "n!1+n!2+1")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (INST -
                                                                     "n!1"
                                                                     "1+n!2")
                                                                    (("1"
                                                                      (INST -
                                                                       "n!1"
                                                                       "1+n!2")
                                                                      (("1"
                                                                        (HIDE
                                                                         -4 -5)
                                                                        (("1"
                                                                          (LEMMA
                                                                           "polar.abs_triangle"
                                                                           ("z1"
                                                                            "g!1(x!1) - F!1(1 + n!1 + n!2)(x!1)"
                                                                            "z2"
                                                                            "F!1(1 + n!2 + n!1)(x!1) - F!1(n!1)(x!1)"))
                                                                          (("1"
                                                                            (CASE-REPLACE
                                                                             "abs(g!1(x!1) - F!1(1 + n!1 + n!2)(x!1) +
                             (F!1(1 + n!2 + n!1)(x!1) - F!1(n!1)(x!1)))=abs(g!1(x!1) - F!1(n!1)(x!1))")
                                                                            (("1"
                                                                              (HIDE
                                                                               -1)
                                                                              (("1"
                                                                                (CASE
                                                                                    "2 ^ (-n!1)+2 ^ (1 - n!1) <=2 ^ (2 - n!1)")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (HIDE-ALL-BUT
                                                                                   1)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "real_expt_plus"
                                                                                     ("x"
                                                                                      "2"
                                                                                      "a"
                                                                                      "1"
                                                                                      "b"
                                                                                      "-n!1"))
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "real_expt_plus"
                                                                                       ("x"
                                                                                        "2"
                                                                                        "a"
                                                                                        "2"
                                                                                        "b"
                                                                                        "-n!1"))
                                                                                      (("2"
                                                                                        (REPLACE
                                                                                         -1)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           -2)
                                                                                          (("2"
                                                                                            (HIDE
                                                                                             -1
                                                                                             -2)
                                                                                            (("2"
                                                                                              (LEMMA
                                                                                               "both_sides_times_pos_le1"
                                                                                               ("pz"
                                                                                                "2^(-n!1)"
                                                                                                "x"
                                                                                                "1+2^1"
                                                                                                "y"
                                                                                                "2^2"))
                                                                                              (("1"
                                                                                                (ASSERT)
                                                                                                (("1"
                                                                                                  (HIDE
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "real_expt_int_rew")
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "real_expt_int_rew")
                                                                                                      (("1"
                                                                                                        (GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (REWRITE
                                                                                                 "real_expt_int_rew")
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE-ALL-BUT
                                                                               1)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "abs")
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "sq_abs")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REWRITE
                                                               "real_expt_pos")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (SKOSIMP)
                            (("2" (TYPEPRED "F!1(n!1)")
                              (("2" (TYPEPRED "N!1")
                                (("2"
                                  (LEMMA "measurable_complement[T,S]"
                                   ("a" "N!1"))
                                  (("2"
                                    (LEMMA "phi_is_simple"
                                     ("X" "complement[T](N!1)"))
                                    (("1" (ASSERT)
                                      (("1"
                                        (LEMMA "prod_measurable"
                                         ("g1" "phi(complement[T](N!1))" "g2"
                                          "Re(F!1(n!1))"))
                                        (("1" (EXPAND "*" -1)
                                          (("1" (EXPAND "Re" 1)
                                            (("1" (EXPAND "Im" 1)
                                              (("1"
                                                (LEMMA "prod_measurable"
                                                 ("g1"
                                                  "phi(complement[T](N!1))"
                                                  "g2" "Im(F!1(n!1))"))
                                                (("1" (EXPAND "*" -1)
                                                  (("1" (ASSERT) NIL NIL)) NIL)
                                                 ("2"
                                                  (EXPAND
                                                   "essentially_bounded?")
                                                  (("2" (FLATTEN)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "essentially_bounded?")
                                          (("2" (FLATTEN)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (ASSERT)
                                      (("2" (EXPAND "measurable_set?")
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2 -3 -4)
                      (("2"
                        (CASE "FORALL (x: T):
                         NOT N!1(x) IMPLIES
                          metric_convergent?
                              (LAMBDA (n:nat): F!1(n)(x))")
                        (("1"
                          (INST +
                           "lambda (x:T): if N!1(x) then complex_(0,0) else limit(LAMBDA (n: nat): F!1(n)(x)) endif")
                          (("1" (EXPAND "pointwise_convergence?")
                            (("1" (SKOSIMP)
                              (("1" (INST - "x!1")
                                (("1" (EXPAND "complement")
                                  (("1" (EXPAND "phi")
                                    (("1" (EXPAND "member")
                                      (("1" (CASE-REPLACE "N!1(x!1)")
                                        (("1"
                                          (REWRITE "metric_convergence_def")
                                          (("1" (EXPAND "metric_converges_to")
                                            (("1" (SKOSIMP)
                                              (("1" (INST + "0")
                                                (("1" (SKOSIMP)
                                                  (("1" (EXPAND "ball")
                                                    (("1" (EXPAND "member")
                                                      (("1" (EXPAND "abs")
                                                        (("1" (EXPAND "sq_abs")
                                                          (("1" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (ASSERT)
                                          (("2"
                                            (LEMMA "limit_lemma"
                                             ("v"
                                              "LAMBDA (n_1: nat): F!1(n_1)(x!1)"))
                                            (("1" (PROPAX) NIL NIL)
                                             ("2" (EXPAND "metric_convergent?")
                                              (("2" (EXPAND "convergent?")
                                                (("2" (SKOSIMP)
                                                  (("2" (INST + "x!2")
                                                    (("2"
                                                      (REWRITE
                                                       "metric_convergence_def")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKOSIMP)
                            (("2" (INST - "x!1")
                              (("2" (ASSERT)
                                (("2" (EXPAND "convergent?")
                                  (("2" (EXPAND "metric_convergent?")
                                    (("2" (SKOSIMP)
                                      (("2" (INST + "x!2")
                                        (("2"
                                          (REWRITE "metric_convergence_def")
                                          NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 2)
                          (("2" (SKOSIMP)
                            (("2" (INST - "x!1" "_" "_")
                              (("2" (ASSERT)
                                (("2" (HIDE 1)
                                  (("2" (LEMMA "complex_is_complete")
                                    (("2" (EXPAND "fullset")
                                      (("2" (EXPAND "complete_metric_space?")
                                        (("2" (EXPAND "metric_complete?")
                                          (("2" (FLATTEN)
                                            (("2"
                                              (INST -
                                               "LAMBDA (n: nat): F!1(n)(x!1)")
                                              (("2" (SPLIT)
                                                (("1"
                                                  (EXPAND "metric_convergent?")
                                                  (("1" (SKEEP -1)
                                                    (("1" (INST?) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE -1 2)
                                                  (("2" (EXPAND "cauchy?")
                                                    (("2" (SKOSIMP)
                                                      (("2" (EXPAND "ball")
                                                        (("2" (EXPAND "member")
                                                          (("2"
                                                            (LEMMA
                                                             "exp_of_exists"
                                                             ("b" "2" "py"
                                                              "r!1"))
                                                            (("2" (SKOSIMP)
                                                              (("2"
                                                                (CASE "i!1>=0")
                                                                (("1"
                                                                  (INST + "2")
                                                                  (("1"
                                                                    (SKOSIMP)
                                                                    (("1"
                                                                      (LEMMA
                                                                       "trich_lt"
                                                                       ("x"
                                                                        "i!2"
                                                                        "y"
                                                                        "j!1"))
                                                                      (("1"
                                                                        (SPLIT)
                                                                        (("1"
                                                                          (INST
                                                                           -
                                                                           "i!2"
                                                                           "j!1-i!2")
                                                                          (("1"
                                                                            (INST
                                                                             -
                                                                             "i!2"
                                                                             "j!1-i!2")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "both_sides_real_expt_gt1_lt"
                                                                                 ("gt1x"
                                                                                  "2"
                                                                                  "a"
                                                                                  "1-i!2"
                                                                                  "b"
                                                                                  "i!1"))
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "real_expt_int_rew")
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "real_expt_int_rew")
                                                                                      (("1"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (REPLACE
                                                                           -1)
                                                                          (("2"
                                                                            (ASSERT)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "abs")
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "sq_abs")
                                                                                (("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("3"
                                                                          (INST
                                                                           -
                                                                           "j!1"
                                                                           "i!2-j!1")
                                                                          (("1"
                                                                            (INST
                                                                             -
                                                                             "j!1"
                                                                             "i!2-j!1")
                                                                            (("1"
                                                                              (LEMMA
                                                                               "both_sides_real_expt_gt1_lt"
                                                                               ("gt1x"
                                                                                "2"
                                                                                "a"
                                                                                "1-j!1"
                                                                                "b"
                                                                                "i!1"))
                                                                              (("1"
                                                                                (ASSERT)
                                                                                (("1"
                                                                                  (REWRITE
                                                                                   "real_expt_int_rew")
                                                                                  (("1"
                                                                                    (REWRITE
                                                                                     "real_expt_int_rew")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "abs")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "sq_abs")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "sq_neg_minus"
                                                                                               ("a"
                                                                                                "Im(F!1(j!1)(x!1))"
                                                                                                "b"
                                                                                                "Im(F!1(i!2)(x!1))"))
                                                                                              (("1"
                                                                                                (LEMMA
                                                                                                 "sq_neg_minus"
                                                                                                 ("a"
                                                                                                  "Re(F!1(j!1)(x!1))"
                                                                                                  "b"
                                                                                                  "Re(F!1(i!2)(x!1))"))
                                                                                                (("1"
                                                                                                  (ASSERT)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (ASSERT)
                                                                  (("2"
                                                                    (CASE
                                                                        "i!1<0")
                                                                    (("1"
                                                                      (HIDE 1)
                                                                      (("1"
                                                                        (INST +
                                                                         "2-i!1")
                                                                        (("1"
                                                                          (SKOSIMP)
                                                                          (("1"
                                                                            (LEMMA
                                                                             "trich_lt"
                                                                             ("x"
                                                                              "i!2"
                                                                              "y"
                                                                              "j!1"))
                                                                            (("1"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (INST
                                                                                 -
                                                                                 "i!2"
                                                                                 "j!1-i!2")
                                                                                (("1"
                                                                                  (INST
                                                                                   -
                                                                                   "i!2"
                                                                                   "j!1-i!2")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "both_sides_real_expt_gt1_lt"
                                                                                     ("gt1x"
                                                                                      "2"
                                                                                      "a"
                                                                                      "1-i!2"
                                                                                      "b"
                                                                                      "i!1"))
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "real_expt_int_rew")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "real_expt_int_rew")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (REPLACE
                                                                                 -1)
                                                                                (("2"
                                                                                  (EXPAND
                                                                                   "abs")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "sq_abs")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("3"
                                                                                (INST
                                                                                 -
                                                                                 "j!1"
                                                                                 "i!2-j!1")
                                                                                (("1"
                                                                                  (INST
                                                                                   -
                                                                                   "j!1"
                                                                                   "i!2-j!1")
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "both_sides_real_expt_gt1_lt"
                                                                                     ("gt1x"
                                                                                      "2"
                                                                                      "a"
                                                                                      "1-j!1"
                                                                                      "b"
                                                                                      "i!1"))
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "real_expt_int_rew")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "real_expt_int_rew")
                                                                                          (("1"
                                                                                            (CASE-REPLACE
                                                                                             "abs(F!1(i!2)(x!1) - F!1(j!1)(x!1))=abs(F!1(j!1)(x!1) - F!1(i!2)(x!1))")
                                                                                            (("1"
                                                                                              (ASSERT)
                                                                                              NIL
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (HIDE-ALL-BUT
                                                                                               1)
                                                                                              (("2"
                                                                                                (EXPAND
                                                                                                 "abs")
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "sq_abs")
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "sq_neg_minus"
                                                                                                     ("a"
                                                                                                      "Im(F!1(i!2)(x!1))"
                                                                                                      "b"
                                                                                                      "Im(F!1(j!1)(x!1))"))
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "sq_neg_minus"
                                                                                                       ("a"
                                                                                                        "Re(F!1(i!2)(x!1))"
                                                                                                        "b"
                                                                                                        "Re(F!1(j!1)(x!1))"))
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL)
                                                                     ("2"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (SKOSIMP*)
                      (("2" (CASE-REPLACE "m!1=0")
                        (("1" (EXPAND "sigma")
                          (("1" (LEMMA "real_expt_pos" ("px" "2" "a" "1-n!1"))
                            (("1" (ASSERT) NIL NIL)) NIL))
                          NIL)
                         ("2" (CASE "m!1>=1")
                          (("1" (HIDE 1)
                            (("1"
                              (LEMMA "sigma_geometric"
                               ("x" "1/2" "n" "n!1+m!1-1"))
                              (("1" (CASE-REPLACE "n!1=0")
                                (("1" (ASSERT)
                                  (("1" (REWRITE "real_expt_int_rew" 1)
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL)
                                 ("2" (CASE "n!1>=1")
                                  (("1" (HIDE 1)
                                    (("1"
                                      (LEMMA "sigma_geometric"
                                       ("x" "1/2" "n" "n!1-1"))
                                      (("1"
                                        (LEMMA "sigma_split"
                                         ("low" "0" "high" "n!1+m!1-1" "F"
                                          "geometric(1 / 2)" "z" "n!1-1"))
                                        (("1" (ASSERT)
                                          (("1"
                                            (NAME-REPLACE "LHS"
                                             "sigma(n!1, m!1 - 1 + n!1, geometric(1 / 2))")
                                            (("1"
                                              (NAME-REPLACE "DRL1"
                                               "sigma(0, m!1 - 1 + n!1, geometric(1 / 2))")
                                              (("1"
                                                (NAME-REPLACE "DRL2"
                                                 "sigma(0, n!1 - 1, geometric(1 / 2))")
                                                (("1"
                                                  (REWRITE "real_expt_int_rew")
                                                  (("1" (ASSERT)
                                                    (("1"
                                                      (CASE
                                                          "DRL1-DRL2 = 2*(exponentiation.^(1/2,n!1)-exponentiation.^(1/2,m!1+n!1))")
                                                      (("1"
                                                        (REWRITE "expt_plus"
                                                         -1)
                                                        (("1"
                                                          (LEMMA "expt_plus"
                                                           ("n0x" "2" "i" "1"
                                                            "j" "-n!1"))
                                                          (("1"
                                                            (REWRITE "expt_x1")
                                                            (("1" (REPLACE -1)
                                                              (("1"
                                                                (LEMMA
                                                                 "both_sides_times_pos_lt1"
                                                                 ("pz"
                                                                  " 2 * exponentiation.^(1 / 2, n!1)"
                                                                  "x"
                                                                  "1-exponentiation.^(1 / 2, m!1)"
                                                                  "y" "1"))
                                                                (("1"
                                                                  (REWRITE
                                                                   "expt_inverse"
                                                                   1)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "inv_expt"
                                                                     1 :DIR RL)
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (HIDE 2)
                  (("2" (SKOLEM + ("x!1" "n!1" "_"))
                    (("2" (INST - "x!1" "_")
                      (("2" (CASE-REPLACE "N!1(x!1)")
                        (("2" (ASSERT)
                          (("2" (HIDE 1)
                            (("2" (INDUCT "m")
                              (("1" (EXPAND "sigma")
                                (("1" (EXPAND "abs")
                                  (("1" (EXPAND "sq_abs")
                                    (("1" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (ASSERT)
                                  (("2" (EXPAND "sigma" 1)
                                    (("2" (INST - "j!1+n!1")
                                      (("2" (INST - "j!1+n!1")
                                        (("2" (EXPAND "geometric" 1 1)
                                          (("2" (REWRITE "real_expt_neg" -3)
                                            (("2"
                                              (REWRITE "real_expt_int_rew" -3)
                                              (("2"
                                                (LEMMA "polar.abs_triangle"
                                                 ("z1"
                                                  "F!1(1 + (j!1 + n!1))(x!1) - F!1(j!1 + n!1)(x!1)"
                                                  "z2"
                                                  "F!1(j!1 + n!1)(x!1) - F!1(n!1)(x!1)"))
                                                (("2"
                                                  (CASE-REPLACE
                                                   "abs(F!1(1 + j!1 + n!1)(x!1) - F!1(n!1)(x!1))=abs(F!1(1 + (j!1 + n!1))(x!1) - F!1(j!1 + n!1)(x!1) +
                     (F!1(j!1 + n!1)(x!1) - F!1(n!1)(x!1)))")
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (HIDE-ALL-BUT 1)
                                                    (("2" (EXPAND "abs")
                                                      (("2" (EXPAND "sq_abs")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (SKOSIMP)
            (("2"
              (NAME "EE"
                    "lambda n: choose[(S)]({E:(S) | null_set?(E) & forall (x:T): not E(x) => abs(F!1(n+1)(x)-F!1(n)(x)) <=  essential_bound(F!1(n+1)-F!1(n))})")
              (("1" (INST + "IUnion(EE)")
                (("1" (HIDE -1)
                  (("1" (SKOSIMP)
                    (("1"
                      (CASE
                          "forall n: not EE(n)(x!1) => abs(F!1(n + 1)(x!1) - F!1(n)(x!1)) <= essential_bound(F!1(n + 1) - F!1(n))")
                      (("1" (EXPAND "IUnion")
                        (("1" (INST + "n!1")
                          (("1" (INST - "n!1") (("1" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 3)
                        (("2" (SKOSIMP)
                          (("2" (EXPAND "EE")
                            (("2"
                              (CASE "nonempty?[(S)]({E: (S) |
                             null_set?(E) &
                              (FORALL (x: T):
                                 NOT E(x) =>
                                  abs(F!1(1 + n!2)(x) - F!1(n!2)(x)) <=
                                   essential_bound(F!1(1 + n!2) - F!1(n!2)))})")
                              (("1"
                                (LEMMA "choose_member[(S)]"
                                 ("a" "{E: (S) |
                           null_set?(E) &
                            (FORALL (x: T):
                               NOT E(x) =>
                                abs(F!1(1 + n!2)(x) - F!1(n!2)(x)) <=
                                 essential_bound(F!1(1 + n!2) - F!1(n!2)))}"))
                                (("1"
                                  (NAME-REPLACE "CC" "choose[(S)]
                      ({E: (S) |
                          null_set?(E) &
                           (FORALL (x: T):
                              NOT E(x) =>
                               abs(F!1(1 + n!2)(x) - F!1(n!2)(x)) <=
                                essential_bound(F!1(1 + n!2) - F!1(n!2)))})")
                                  (("1" (SPLIT -1)
                                    (("1" (EXPAND "member")
                                      (("1" (INST - "x!1")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (EXPAND "nonempty?")
                                      (("2" (PROPAX) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (HIDE 2)
                                (("2" (EXPAND "nonempty?")
                                  (("2" (EXPAND "empty?")
                                    (("2" (EXPAND "member")
                                      (("2"
                                        (LEMMA "essential_bound_def2"
                                         ("f" "F!1(n!2 + 1) - F!1(n!2)"))
                                        (("2" (EXPAND "ae_le?")
                                          (("2" (EXPAND "pointwise_ae?")
                                            (("2" (EXPAND "ae?")
                                              (("2" (EXPAND "fullset")
                                                (("2" (EXPAND "ae_in?")
                                                  (("2" (SKOSIMP)
                                                    (("2" (TYPEPRED "E!1")
                                                      (("2"
                                                        (EXPAND
                                                         "negligible_set?")
                                                        (("2" (SKOSIMP)
                                                          (("2" (INST -4 "X!1")
                                                            (("1" (ASSERT)
                                                              (("1" (SKOSIMP)
                                                                (("1"
                                                                  (INST -
                                                                   "x!2")
                                                                  (("1"
                                                                    (ASSERT)
                                                                    (("1"
                                                                      (EXPAND
                                                                       "subset?")
                                                                      (("1"
                                                                        (INST -
                                                                         "x!2")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "abs"
                                                                             -2)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "-"
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (PROPAX)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (EXPAND
                                                               "null_set?")
                                                              (("2" (FLATTEN)
                                                                (("2"
                                                                  (EXPAND
                                                                   "measurable_set?")
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (SKOSIMP)
                  (("2" (EXPAND "nonempty?")
                    (("2" (EXPAND "empty?")
                      (("2" (EXPAND "member")
                        (("2"
                          (LEMMA "diff_essentially_bounded"
                           ("f0" "F!1(1+n!1)" "f1" "F!1(n!1)"))
                          (("2"
                            (LEMMA "essential_bound_def2"
                             ("f" "((-[T])(F!1(1 + n!1), F!1(n!1)))"))
                            (("2"
                              (NAME-REPLACE "EB"
                               " essential_bound(((-[T])(F!1(1 + n!1), F!1(n!1))))")
                              (("2" (HIDE -2)
                                (("2" (EXPAND "ae_le?")
                                  (("2" (EXPAND "pointwise_ae?")
                                    (("2" (EXPAND "ae?")
                                      (("2" (EXPAND "fullset")
                                        (("2" (EXPAND "ae_in?")
                                          (("2" (EXPAND "member")
                                            (("2" (SKOSIMP)
                                              (("2" (TYPEPRED "E!1")
                                                (("2"
                                                  (EXPAND "negligible_set?")
                                                  (("2" (SKOSIMP)
                                                    (("2" (INST -4 "X!1")
                                                      (("1" (ASSERT)
                                                        (("1" (SKOSIMP)
                                                          (("1"
                                                            (EXPAND "subset?")
                                                            (("1"
                                                              (INST -2 "x!1")
                                                              (("1"
                                                                (EXPAND
                                                                 "member")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (INST -
                                                                     "x!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "abs"
                                                                         -2)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "-"
                                                                           -2)
                                                                          (("1"
                                                                            (PROPAX)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (EXPAND "null_set?")
                                                        (("2" (FLATTEN)
                                                          (("2"
                                                            (EXPAND
                                                             "measurable_set?")
                                                            (("2" (PROPAX) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (X!1 SKOLEM-CONST-DECL "set[T]" |essential_bound_complete_scaf| NIL)
    (|essential_bound_def2| FORMULA-DECL NIL |essentially_bounded| NIL)
    (EE SKOLEM-CONST-DECL "[n: nat ->
   ({E: (S) |
       null_set?(E) &
        FORALL (x: T):
          NOT E(x) =>
           abs(F!1(n + 1)(x) - F!1(n)(x)) <=
            essential_bound(F!1(n + 1) - F!1(n))})]"
     |essential_bound_complete_scaf| NIL)
    (|IUnion| CONST-DECL "set[T]" |indexed_sets| NIL)
    (|sigma_algebra_IUnion_rew| APPLICATION-JUDGEMENT "(S)"
     |essential_bound_complete_scaf| NIL)
    (|null_IUnion| APPLICATION-JUDGEMENT "null_set[T, S, mu]"
     |essential_bound_complete_scaf| NIL)
    (|diff_essentially_bounded| JUDGEMENT-TCC NIL |essentially_bounded| NIL)
    (X!1 SKOLEM-CONST-DECL "set[T]" |essential_bound_complete_scaf| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|metric_complete?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|j!1| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|i!2| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|trich_lt| FORMULA-DECL NIL |real_props| NIL)
    (|sq_neg_minus| FORMULA-DECL NIL |sq| |reals|)
    (|complex_sub_zero| FORMULA-DECL NIL |complex_types| |complex|)
    (|i!2| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|j!1| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|cauchy?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|metric_convergent?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|complete_metric_space?| CONST-DECL "bool" |metric_space_def|
     |metric_space|)
    (|complex_is_complete| JUDGEMENT-TCC NIL |complex_topology| NIL)
    (|metric_space_is_hausdorff| NAME-JUDGEMENT "hausdorff[complex]"
     |complex_topology| NIL)
    (F!1 SKOLEM-CONST-DECL "sequence[essentially_bounded[T, S, mu]]"
     |essential_bound_complete_scaf| NIL)
    (|convergent?| CONST-DECL "bool" |topological_convergence| |topology|)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (N!1 SKOLEM-CONST-DECL "null_set[T, S, mu]" |essential_bound_complete_scaf|
     NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|convergent| TYPE-EQ-DECL NIL |topological_convergence| |topology|)
    (|limit| CONST-DECL "T" |topological_convergence| |topology|)
    (|limit_lemma| FORMULA-DECL NIL |topological_convergence| |topology|)
    (|complex_0_mult| FORMULA-DECL NIL |complex_types| |complex|)
    (|complex_minus_0| FORMULA-DECL NIL |complex_types| |complex|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|metric_convergent?| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|measurable_set| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|measurable_set?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|measurable_complement| JUDGEMENT-TCC NIL |measure_space_def|
     |measure_integration|)
    (|isf_phi| APPLICATION-JUDGEMENT "isf[T, S, mu]"
     |essential_bound_complete_scaf| NIL)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|Im_fun_rew| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Re_fun_rew| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Re_mul2| FORMULA-DECL NIL |complex_types| |complex|)
    (|Im_mul2| FORMULA-DECL NIL |complex_types| |complex|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|prod_measurable| JUDGEMENT-TCC NIL |measure_space| |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|phi_is_simple| JUDGEMENT-TCC NIL |measure_space| |measure_integration|)
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|plus_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|expt_x1| FORMULA-DECL NIL |exponentiation| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|real_expt_plus| FORMULA-DECL NIL |real_expt| |power|)
    (|n!1| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|complex_1_mult| FORMULA-DECL NIL |complex_types| |complex|)
    (|metric_convergence_def| FORMULA-DECL NIL |metric_space| |metric_space|)
    (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|exp_of_exists| FORMULA-DECL NIL |exponentiation| NIL)
    (|both_sides_real_expt_gt1_lt| FORMULA-DECL NIL |real_expt| |power|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|essential_bound_def1| FORMULA-DECL NIL |essentially_bounded| NIL)
    (|both_sides_real_expt_gt1_le| FORMULA-DECL NIL |real_expt| |power|)
    (|i!1| SKOLEM-CONST-DECL "int" |essential_bound_complete_scaf| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|int_times_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|times_u16_i16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|times_u16_u16| APPLICATION-JUDGEMENT "uint32" |integertypes| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|times_u8_u8| APPLICATION-JUDGEMENT "uint16" |integertypes| NIL)
    (|expt_x3| FORMULA-DECL NIL |exponentiation| NIL)
    (|g!1| SKOLEM-CONST-DECL "[T -> complex]" |essential_bound_complete_scaf|
     NIL)
    (|negligible_union| APPLICATION-JUDGEMENT "negligible[T, S, mu]"
     |essential_bound_complete_scaf| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|expt_x2| FORMULA-DECL NIL |exponentiation| NIL)
    (+ CONST-DECL "complex" |complex_types| |complex|)
    (|abs_complex_measurable| APPLICATION-JUDGEMENT "measurable_function"
     |essential_bound_complete_scaf| NIL)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| |complex|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_sub1| FORMULA-DECL NIL |complex_types| |complex|)
    (|Im_add1| FORMULA-DECL NIL |complex_types| |complex|)
    (|Re_sub1| FORMULA-DECL NIL |complex_types| |complex|)
    (|Re_add1| FORMULA-DECL NIL |complex_types| |complex|)
    (|abs_triangle| FORMULA-DECL NIL |polar| |complex|)
    (|nnreal_plus_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|Re| CONST-DECL "[T -> real]" |complex_fun_ops| |complex|)
    (|Im| CONST-DECL "[T -> real]" |complex_fun_ops| |complex|)
    (|pointwise_complex_measurable| FORMULA-DECL NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (|pointwise_convergence?| CONST-DECL "bool" |complex_measurable| NIL)
    (* CONST-DECL "complex" |complex_types| |complex|)
    (|complex_| CONST-DECL "complex" |complex_types| |complex|)
    (|phi| CONST-DECL "nat" |measure_space| |measure_integration|)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|subset_algebra_complement| APPLICATION-JUDGEMENT "(S)" |measure_def|
     |measure_integration|)
    (|sigma_geometric| FORMULA-DECL NIL |series| |series|)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|expt_inverse| FORMULA-DECL NIL |exponentiation| NIL)
    (|inv_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|both_sides_times_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nzreal| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|expt_plus| FORMULA-DECL NIL |exponentiation| NIL)
    (|sigma_split| FORMULA-DECL NIL |sigma| |reals|)
    (|odd_minus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_i16_u16| APPLICATION-JUDGEMENT "int32" |integertypes| NIL)
    (|minus_i32_u32| APPLICATION-JUDGEMENT "int64" |integertypes| NIL)
    (|minus_u8_u8| APPLICATION-JUDGEMENT "int16" |integertypes| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|T_low| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|T_high| TYPE-EQ-DECL NIL |sigma| |reals|)
    (|sigma| DEF-DECL "real" |sigma| |reals|)
    (|geometric| CONST-DECL "sequence[real]" |series| |series|)
    (|null_set?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|null_set| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (|n!1| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|iterate| DEF-DECL "T" |function_iterate| NIL)
    (NN SKOLEM-CONST-DECL "[nat, nat]" |essential_bound_complete_scaf| NIL)
    (F!1 SKOLEM-CONST-DECL "sequence[essentially_bounded[T, S, mu]]"
     |essential_bound_complete_scaf| NIL)
    (O CONST-DECL "T3" |function_props| NIL)
    (|subseq?| CONST-DECL "bool" |subseq| |topology|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|both_sides_real_expt_gt1_ge| FORMULA-DECL NIL |real_expt| |power|)
    (LHS1 SKOLEM-CONST-DECL "nnreal" |essential_bound_complete_scaf| NIL)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|Im_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (|Re_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (- CONST-DECL "complex" |complex_types| |complex|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|measurable_fullset| NAME-JUDGEMENT "measurable_set[T, S]"
     |essential_bound_complete_scaf| NIL)
    (|subset_algebra_fullset| NAME-JUDGEMENT "(S)"
     |essential_bound_complete_scaf| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (LHS2 SKOLEM-CONST-DECL "nnreal" |essential_bound_complete_scaf| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|essential_bound_diff| FORMULA-DECL NIL |essentially_bounded| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|small_expt| FORMULA-DECL NIL |exponentiation| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|real_expt_int_rew| FORMULA-DECL NIL |real_expt| |power|)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|real_expt_neg| FORMULA-DECL NIL |real_expt| |power|)
    (NEXT SKOLEM-CONST-DECL "[d: [nat, nat] ->
   [numfield,
    ({k: nat |
        k > d`2 &
         FORALL (i: nat), (j: nat):
           i >= k AND j >= k =>
            essential_bound(F!1(j) - F!1(i)) <
             (power@real_expt.^(2, (-d`1)))})]]"
     |essential_bound_complete_scaf| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (NN SKOLEM-CONST-DECL "[nat, nat]" |essential_bound_complete_scaf| NIL)
    (|real_expt_pos| FORMULA-DECL NIL |real_expt| |power|)
    (|choose_member| FORMULA-DECL NIL |sets_lemmas| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (SEQ SKOLEM-CONST-DECL "[nat -> nat]" |essential_bound_complete_scaf| NIL)
    (NN SKOLEM-CONST-DECL "[nat, nat]" |essential_bound_complete_scaf| NIL)
    (NN SKOLEM-CONST-DECL "[nat, nat]" |essential_bound_complete_scaf| NIL)
    (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|x!1| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|y!1| SKOLEM-CONST-DECL "nat" |essential_bound_complete_scaf| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|strict_increasing?| CONST-DECL "bool" |real_fun_preds| |reals|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "nnreal" |real_expt| |power|)
    (> CONST-DECL "bool" |reals| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|essential_bound| CONST-DECL "nnreal" |essentially_bounded| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|essentially_bounded| NONEMPTY-TYPE-EQ-DECL NIL |essentially_bounded| NIL)
    (|essentially_bounded?| CONST-DECL "bool" |essentially_bounded| NIL)
    (|mu| FORMAL-CONST-DECL "measure_type[T, S]"
     |essential_bound_complete_scaf| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra[T]" |essential_bound_complete_scaf|
     NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (T FORMAL-TYPE-DECL NIL |essential_bound_complete_scaf| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|diff_essentially_bounded| APPLICATION-JUDGEMENT
     "essentially_bounded[T, S, mu]" |essential_bound_complete_scaf| NIL)
    (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   SHOSTAK)))

