(|essentially_bounded|
 (|mu_TCC1| 0
  (|mu_TCC1-1| |nil| 3477287079
   ("" (TYPEPRED "S")
    (("" (EXPAND "sigma_algebra?")
      (("" (FLATTEN)
        (("" (EXPAND "subset_algebra_empty?") (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |countable_props|
     |sets_aux|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |countable_setofsets|
     |sets_aux|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|))
   NIL
   (|mu| ASSUMING
    "measure_integration@generalized_measure_def[essentially_bounded.T, essentially_bounded.S].generalized_measure_def"
    "S_empty: ASSUMPTION generalized_measure_def.S(sets[generalized_measure_def.T].emptyset)"
    (16 51 16 68))))
 (|essentially_bounded_TCC1| 0
  (|essentially_bounded_TCC1-1| |nil| 3477287079
   ("" (EXPAND "essentially_bounded?")
    (("" (REWRITE "const_measurable")
      (("" (EXPAND "ae_bounded?")
        (("" (INST + "0")
          (("" (EXPAND "abs")
            (("" (EXPAND "abs")
              (("" (EXPAND "sq_abs")
                (("" (ASSERT)
                  (("" (EXPAND "ae_le?")
                    (("" (EXPAND "pointwise_ae?")
                      (("" (EXPAND "ae?")
                        (("" (EXPAND "ae_in?")
                          (("" (INST + "emptyset[T]")
                            (("" (SKOSIMP) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|const_measurable| FORMULA-DECL NIL |complex_measurable| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|complex_| CONST-DECL "complex" |complex_types| |complex|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|)
    (|Re_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|Im_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |countable_props|
     |sets_aux|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set[T]" |countable_setofsets|
     |sets_aux|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL))
   NIL
   (|essentially_bounded| SUBTYPE "(LAMBDA x: complex_types.complex_(0, 0))"
    "essentially_bounded" (30 49 30 72))))
 (|essential_bound_TCC1| 0
  (|essential_bound_TCC1-1| |nil| 3477287079
   ("" (SKOSIMP)
    (("" (SPLIT)
      (("1" (TYPEPRED "f!1")
        (("1" (EXPAND "essentially_bounded?")
          (("1" (FLATTEN)
            (("1" (EXPAND "ae_bounded?")
              (("1" (SKOSIMP)
                (("1" (EXPAND "extend")
                  (("1" (EXPAND "nonempty?")
                    (("1" (EXPAND "empty?")
                      (("1" (EXPAND "member")
                        (("1" (INST - "K!1") (("1" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "extend")
        (("2" (EXPAND "below_bounded")
          (("2" (INST + "0")
            (("2" (EXPAND "lower_bound") (("2" (PROPAX) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|))
   NIL
   (|essential_bound| SUBTYPE
    "extend[real, nnreal, bool, booleans.FALSE].extend({K | measure_theory[essentially_bounded.T, essentially_bounded.S, essentially_bounded.mu].ae_le?(complex_fun_ops[essentially_bounded.T].abs(essentially_bounded.f), LAMBDA x: essentially_bounded.K)})"
    "inf_set[real]" (34 35 34 67))))
 (|essential_bound_TCC2| 0
  (|essential_bound_TCC2-1| |nil| 3477287079
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_TCC1" ("f" "f!1"))
      (("" (FLATTEN)
        ((""
          (TYPEPRED "inf[real]
          (extend[real, nnreal, bool, FALSE]
               ({K | ae_le?[T, S, mu](abs[T](f!1), LAMBDA x: K)}))")
          ((""
            (NAME-REPLACE "INF" "inf[real]
          (extend[real, nnreal, bool, FALSE]
               ({K | ae_le?[T, S, mu](abs[T](f!1), LAMBDA x: K)}))")
            (("" (HIDE -2 -3)
              (("" (EXPAND "greatest_lower_bound")
                (("" (FLATTEN)
                  (("" (EXPAND "lower_bound")
                    (("" (INST -2 "0")
                      (("" (SPLIT -2)
                        (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)
                         ("3" (SKOSIMP)
                          (("3" (TYPEPRED "z!1")
                            (("3" (CASE "z!1<0")
                              (("1" (HIDE 1)
                                (("1" (EXPAND "extend")
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL)
                               ("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|))
   NIL
   (|essential_bound| SUBTYPE
    "bounded_reals[real].inf(extend[real, nnreal, bool, booleans.FALSE].extend({K | measure_theory[essentially_bounded.T, essentially_bounded.S, essentially_bounded.mu].ae_le?(complex_fun_ops[essentially_bounded.T].abs(essentially_bounded.f), LAMBDA x: essentially_bounded.K)}))"
    "nnreal" (34 31 34 68))))
 (|essential_bound_def1| 0
  (|essential_bound_def1-1| |nil| 3477311458
   ("" (SKOSIMP)
    (("" (EXPAND "essential_bound")
      (("" (LEMMA "essential_bound_TCC1" ("f" "f!1"))
        ((""
          (TYPEPRED "inf(extend[real, nnreal, bool, FALSE]
              ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
          ((""
            (NAME-REPLACE "INF" "inf(extend[real, nnreal, bool, FALSE]
              ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
            (("" (EXPAND "greatest_lower_bound")
              (("" (FLATTEN)
                (("" (EXPAND "lower_bound")
                  (("" (INST - "K!1")
                    (("" (HIDE -1 -2 -3 2)
                      (("" (EXPAND "extend") (("" (PROPAX) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|))
   SHOSTAK))
 (|essential_bound_def2| 0
  (|essential_bound_def2-2| "" 3789905812
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_TCC1" ("f" "f!1"))
      (("" (EXPAND "essential_bound")
        ((""
          (TYPEPRED "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
          (("1"
            (NAME-REPLACE "INF" "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
            (("1" (FLATTEN)
              (("1"
                (NAME "X" "{a:real | a >= 0 & ae_le?(abs(f!1), LAMBDA x: a)}")
                (("1" (CASE "nonempty?[real](X)")
                  (("1" (CASE "below_bounded[real](X)")
                    (("1" (HIDE -5 -6)
                      (("1" (NAME "M" "lambda (n:posnat): inf(X)+1/n")
                        (("1" (CASE "forall (n:posnat): X(M(n))")
                          (("1" (CASE-REPLACE "inf(X)=INF")
                            (("1" (HIDE -1)
                              (("1" (EXPAND "greatest_lower_bound")
                                (("1" (FLATTEN)
                                  (("1"
                                    (CASE
                                        "convergence?(lambda (n:nat): M(n+1),INF)")
                                    (("1" (EXPAND "lower_bound")
                                      (("1"
                                        (NAME "E"
                                              "lambda (n:nat): choose({N:null_set[T,S,mu] | FORALL x: (not N(x)) => abs(f!1(x)) <= M(1+n)})")
                                        (("1" (CASE "null_set?(IUnion(E))")
                                          (("1"
                                            (CASE
                                                "forall x: (not IUnion(E)(x)) => abs(f!1(x)) <= INF")
                                            (("1" (EXPAND "ae_le?")
                                              (("1" (EXPAND "pointwise_ae?")
                                                (("1" (EXPAND "ae?")
                                                  (("1" (EXPAND "fullset")
                                                    (("1" (EXPAND "ae_in?")
                                                      (("1"
                                                        (INST + "IUnion(E)")
                                                        (("1" (SKOSIMP)
                                                          (("1"
                                                            (EXPAND "member")
                                                            (("1"
                                                              (EXPAND "abs" 2)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (SKOSIMP)
                                                (("2" (HIDE -1)
                                                  (("2" (EXPAND "IUnion" 1)
                                                    (("2"
                                                      (INST -9 "abs(f!1(x!1))")
                                                      (("2" (ASSERT)
                                                        (("2" (SPLIT -9)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (REPLACE -1 2 RL)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (SKOSIMP)
                                                            (("2"
                                                              (CASE
                                                                  "z!1<abs(f!1(x!1))")
                                                              (("1" (HIDE 1)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "z!1")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "extend"
                                                                     -1)
                                                                    (("1"
                                                                      (PROP)
                                                                      (("1"
                                                                        (INST
                                                                         -11
                                                                         "z!1")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "<="
                                                                           -11)
                                                                          (("1"
                                                                            (SPLIT
                                                                             -11)
                                                                            (("1"
                                                                              (NAME
                                                                               "EPS"
                                                                               "z!1-INF")
                                                                              (("1"
                                                                                (CASE
                                                                                    "EPS>0")
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "archimedean"
                                                                                   ("px"
                                                                                    "EPS"))
                                                                                  (("1"
                                                                                    (SKOSIMP)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -10
                                                                                       "n!1+1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "X"
                                                                                         -10)
                                                                                        (("1"
                                                                                          (FLATTEN)
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "INF < M(1 + n!1) & M(1 + n!1) < z!1")
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "E"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "choose_member"
                                                                                                     ("a"
                                                                                                      "{N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)}"))
                                                                                                    (("1"
                                                                                                      (NAME-REPLACE
                                                                                                       "EE"
                                                                                                       "choose({N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)})")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (SPLIT
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (EXPAND
                                                                                                             "empty?")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (HIDE-ALL-BUT
                                                                                                                 (-1
                                                                                                                  -14))
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "ae_le?")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "pointwise_ae?")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "ae?")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "fullset")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "ae_in?")
                                                                                                                          (("2"
                                                                                                                            (SKOSIMP)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "E!1")
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "negligible_set?")
                                                                                                                                (("2"
                                                                                                                                  (SKOSIMP)
                                                                                                                                  (("2"
                                                                                                                                    (INST
                                                                                                                                     -
                                                                                                                                     "X!1")
                                                                                                                                    (("2"
                                                                                                                                      (SKOSIMP)
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "abs"
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (EXPAND
                                                                                                                                               "subset?")
                                                                                                                                              (("2"
                                                                                                                                                (INST
                                                                                                                                                 -
                                                                                                                                                 "x!2")
                                                                                                                                                (("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (HIDE-ALL-BUT
                                                                                                         (1
                                                                                                          -14))
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "nonempty?")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "ae_le?")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "empty?")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "pointwise_ae?")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "ae?")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "fullset")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "ae_in?")
                                                                                                                      (("2"
                                                                                                                        (SKOSIMP)
                                                                                                                        (("2"
                                                                                                                          (TYPEPRED
                                                                                                                           "E!1")
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "negligible_set?")
                                                                                                                            (("2"
                                                                                                                              (SKOSIMP)
                                                                                                                              (("2"
                                                                                                                                (INST
                                                                                                                                 -3
                                                                                                                                 "X!1")
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "subset?")
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "member")
                                                                                                                                    (("2"
                                                                                                                                      (SKOSIMP)
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "abs"
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (REPLACE
                                                                                               -12
                                                                                               *
                                                                                               RL)
                                                                                              (("2"
                                                                                                (HIDE-ALL-BUT
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3
                                                                                                  -4
                                                                                                  -5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "posreal_div_posreal_is_posreal"
                                                                                                     ("px"
                                                                                                      "1"
                                                                                                      "py"
                                                                                                      "1+n!1"))
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (REPLACE
                                                                                                         -4
                                                                                                         -2
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (LEMMA
                                                                                                           "both_sides_div_pos_lt2"
                                                                                                           ("pz"
                                                                                                            "1"
                                                                                                            "py"
                                                                                                            "n!1"
                                                                                                            "px"
                                                                                                            "1+n!1"))
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (REVEAL
                                                                               2)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REWRITE "null_IUnion") NIL
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP)
                                          (("2" (INST -2 "1+n!1")
                                            (("2" (EXPAND "X" -2)
                                              (("2" (FLATTEN)
                                                (("2" (HIDE-ALL-BUT (-2 -3 1))
                                                  (("2" (EXPAND "nonempty?")
                                                    (("2" (EXPAND "empty?")
                                                      (("2" (EXPAND "ae_le?")
                                                        (("2"
                                                          (EXPAND
                                                           "pointwise_ae?")
                                                          (("2" (EXPAND "ae?")
                                                            (("2"
                                                              (EXPAND
                                                               "fullset")
                                                              (("2"
                                                                (EXPAND
                                                                 "ae_in?")
                                                                (("2"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("2"
                                                                    (SKOSIMP)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "E!1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "negligible_set?")
                                                                        (("2"
                                                                          (SKOSIMP)
                                                                          (("2"
                                                                            (INST
                                                                             -3
                                                                             "X!1")
                                                                            (("2"
                                                                              (SKOSIMP)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (INST
                                                                                   -2
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "member")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -4
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "abs"
                                                                                         -4)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           2)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "metric_convergence_def")
                                      (("2" (REPLACE -2 1 RL)
                                        (("2" (HIDE-ALL-BUT 1)
                                          (("2" (EXPAND "metric_converges_to")
                                            (("2" (EXPAND "ball")
                                              (("2" (EXPAND "member")
                                                (("2" (SKOSIMP)
                                                  (("2"
                                                    (LEMMA "archimedean"
                                                     ("px" "r!1"))
                                                    (("2" (SKOSIMP)
                                                      (("2" (INST + "n!1-1")
                                                        (("2" (SKOSIMP)
                                                          (("2"
                                                            (REWRITE
                                                             "real_props.abs_mult")
                                                            (("2"
                                                              (LEMMA
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px" "1" "py"
                                                                "1+i!1"))
                                                              (("2"
                                                                (EXPAND "abs")
                                                                (("2"
                                                                  (REWRITE
                                                                   "one_times")
                                                                  (("2"
                                                                    (REWRITE
                                                                     "div_mult_pos_lt1"
                                                                     -)
                                                                    (("2"
                                                                      (REWRITE
                                                                       "div_mult_pos_lt1"
                                                                       +)
                                                                      (("2"
                                                                        (LEMMA
                                                                         "both_sides_times_pos_le1"
                                                                         ("pz"
                                                                          "r!1"
                                                                          "x"
                                                                          "n!1"
                                                                          "y"
                                                                          "1+i!1"))
                                                                        (("2"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (1 -6 -3 -4))
                              (("2" (TYPEPRED "inf(X)")
                                (("2" (EXPAND "extend")
                                  (("2" (EXPAND "greatest_lower_bound")
                                    (("2" (EXPAND "lower_bound")
                                      (("2" (FLATTEN)
                                        (("2" (INST -2 "INF")
                                          (("2" (REPLACE 1)
                                            (("2" (SPLIT -2)
                                              (("1" (INST -6 "inf(X)")
                                                (("1" (SPLIT -6)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (ASSERT) NIL NIL)
                                                   ("3" (SKOSIMP)
                                                    (("3" (TYPEPRED "z!1")
                                                      (("3" (ASSERT)
                                                        (("3"
                                                          (CASE "z!1<inf(X)")
                                                          (("1" (HIDE 1)
                                                            (("1"
                                                              (INST -5 "z!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (EXPAND "X" 1)
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP)
                                                (("2" (CASE "z!1<INF")
                                                  (("1" (TYPEPRED "z!1")
                                                    (("1" (EXPAND "X" -1)
                                                      (("1" (FLATTEN)
                                                        (("1" (HIDE 1)
                                                          (("1" (HIDE -8)
                                                            (("1"
                                                              (INST -7 "z!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (1 -1 -2 -3))
                            (("2" (TYPEPRED "inf(X)")
                              (("2" (EXPAND "greatest_lower_bound")
                                (("2" (FLATTEN)
                                  (("2" (EXPAND "lower_bound")
                                    (("2" (SKOSIMP)
                                      (("2"
                                        (LEMMA "posreal_div_posreal_is_posreal"
                                         ("px" "1" "py" "n!1"))
                                        (("2" (INST -3 "inf(X) + 1 / n!1")
                                          (("1" (ASSERT)
                                            (("1" (SKOSIMP)
                                              (("1" (CASE "z!1<M(n!1)")
                                                (("1" (TYPEPRED "z!1")
                                                  (("1" (HIDE 1)
                                                    (("1" (EXPAND "X")
                                                      (("1" (ASSERT)
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (HIDE-ALL-BUT
                                                               (-2 -3 1))
                                                              (("1"
                                                                (EXPAND
                                                                 "ae_le?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "pointwise_ae?")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "ae?")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "fullset")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "ae_in?")
                                                                        (("1"
                                                                          (SKOSIMP)
                                                                          (("1"
                                                                            (INST
                                                                             +
                                                                             "E!1")
                                                                            (("1"
                                                                              (SKOSIMP)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("1"
                                                                                  (INST
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (EXPAND "M")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-1 -5 1))
                      (("2" (EXPAND "below_bounded")
                        (("2" (SKOSIMP)
                          (("2" (EXPAND "X")
                            (("2" (INST + "n!1")
                              (("2" (EXPAND "extend")
                                (("2" (EXPAND "lower_bound")
                                  (("2" (SKOSIMP)
                                    (("2" (TYPEPRED "z!1")
                                      (("2" (INST - "z!1") NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (1 -3))
                    (("2" (EXPAND "extend")
                      (("2" (EXPAND "nonempty?")
                        (("2" (EXPAND "empty?")
                          (("2" (EXPAND "member")
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (ASSERT)
                                  (("2" (PROP)
                                    (("2" (EXPAND "X") (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|metric_convergence_def| FORMULA-DECL NIL |metric_space| |metric_space|)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|null_IUnion| JUDGEMENT-TCC NIL |measure_theory| |measure_integration|)
    (|null_set?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|null_set| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|convergence?| CONST-DECL "bool" |topological_convergence| |topology|)
    (|metric_space_is_hausdorff| NAME-JUDGEMENT "hausdorff[real]"
     |convergence_aux| |metric_space|)
    (|metric_induced_topology_is_second_countable| NAME-JUDGEMENT
     "second_countable" |real_topology| |metric_space|))
   SHOSTAK)
  (|essential_bound_def2-1| |nil| 3477312383
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_TCC1" ("f" "f!1"))
      (("" (EXPAND "essential_bound")
        ((""
          (TYPEPRED "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
          (("1"
            (NAME-REPLACE "INF" "inf(extend[real, nnreal, bool, FALSE]
                       ({K | ae_le?(abs(f!1), LAMBDA x: K)}))")
            (("1" (FLATTEN)
              (("1"
                (NAME "X" "{a:real | a >= 0 & ae_le?(abs(f!1), LAMBDA x: a)}")
                (("1" (CASE "nonempty?[real](X)")
                  (("1" (CASE "below_bounded[real](X)")
                    (("1" (HIDE -5 -6)
                      (("1" (NAME "M" "lambda (n:posnat): inf(X)+1/n")
                        (("1" (CASE "forall (n:posnat): X(M(n))")
                          (("1" (CASE-REPLACE "inf(X)=INF")
                            (("1" (HIDE -1)
                              (("1" (EXPAND "greatest_lower_bound")
                                (("1" (FLATTEN)
                                  (("1"
                                    (CASE
                                        "convergence?(lambda (n:nat): M(n+1),INF)")
                                    (("1" (EXPAND "lower_bound")
                                      (("1"
                                        (NAME "E"
                                              "lambda (n:nat): choose({N:null_set[T,S,mu] | FORALL x: (not N(x)) => abs(f!1(x)) <= M(1+n)})")
                                        (("1" (CASE "null_set?(IUnion(E))")
                                          (("1"
                                            (CASE
                                                "forall x: (not IUnion(E)(x)) => abs(f!1(x)) <= INF")
                                            (("1" (EXPAND "ae_le?")
                                              (("1" (EXPAND "pointwise_ae?")
                                                (("1" (EXPAND "ae?")
                                                  (("1" (EXPAND "fullset")
                                                    (("1" (EXPAND "ae_in?")
                                                      (("1"
                                                        (INST + "IUnion(E)")
                                                        (("1" (SKOSIMP)
                                                          (("1"
                                                            (EXPAND "member")
                                                            (("1"
                                                              (EXPAND "abs" 2)
                                                              (("1"
                                                                (INST - "x!1")
                                                                (("1" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE 2)
                                              (("2" (SKOSIMP)
                                                (("2" (HIDE -1)
                                                  (("2" (EXPAND "IUnion" 1)
                                                    (("2"
                                                      (INST -9 "abs(f!1(x!1))")
                                                      (("2" (ASSERT)
                                                        (("2" (SPLIT -9)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (REPLACE -1 2 RL)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (SKOSIMP)
                                                            (("2"
                                                              (CASE
                                                                  "z!1<abs(f!1(x!1))")
                                                              (("1" (HIDE 1)
                                                                (("1"
                                                                  (TYPEPRED
                                                                   "z!1")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "extend"
                                                                     -1)
                                                                    (("1"
                                                                      (PROP)
                                                                      (("1"
                                                                        (INST
                                                                         -11
                                                                         "z!1")
                                                                        (("1"
                                                                          (EXPAND
                                                                           "<="
                                                                           -11)
                                                                          (("1"
                                                                            (SPLIT
                                                                             -11)
                                                                            (("1"
                                                                              (NAME
                                                                               "EPS"
                                                                               "z!1-INF")
                                                                              (("1"
                                                                                (CASE
                                                                                    "EPS>0")
                                                                                (("1"
                                                                                  (LEMMA
                                                                                   "archimedean"
                                                                                   ("px"
                                                                                    "EPS"))
                                                                                  (("1"
                                                                                    (SKOSIMP)
                                                                                    (("1"
                                                                                      (INST
                                                                                       -10
                                                                                       "n!1+1")
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "X"
                                                                                         -10)
                                                                                        (("1"
                                                                                          (FLATTEN)
                                                                                          (("1"
                                                                                            (CASE
                                                                                                "INF < M(1 + n!1) & M(1 + n!1) < z!1")
                                                                                            (("1"
                                                                                              (FLATTEN)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 +
                                                                                                 "n!1")
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "E"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (LEMMA
                                                                                                     "choose_member"
                                                                                                     ("a"
                                                                                                      "{N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)}"))
                                                                                                    (("1"
                                                                                                      (NAME-REPLACE
                                                                                                       "EE"
                                                                                                       "choose({N: null_set[T, S, mu] |
                FORALL x: (NOT N(x)) => abs(f!1(x)) <= M(1 + n!1)})")
                                                                                                      (("1"
                                                                                                        (EXPAND
                                                                                                         "member")
                                                                                                        (("1"
                                                                                                          (SPLIT
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (INST
                                                                                                             -
                                                                                                             "x!1")
                                                                                                            (("1"
                                                                                                              (ASSERT)
                                                                                                              NIL
                                                                                                              NIL))
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (EXPAND
                                                                                                             "empty?")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "member")
                                                                                                              (("2"
                                                                                                                (HIDE-ALL-BUT
                                                                                                                 (-1
                                                                                                                  -14))
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "ae_le?")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "pointwise_ae?")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "ae?")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "fullset")
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "ae_in?")
                                                                                                                          (("2"
                                                                                                                            (SKOSIMP)
                                                                                                                            (("2"
                                                                                                                              (TYPEPRED
                                                                                                                               "E!1")
                                                                                                                              (("2"
                                                                                                                                (EXPAND
                                                                                                                                 "negligible_set?")
                                                                                                                                (("2"
                                                                                                                                  (SKOSIMP)
                                                                                                                                  (("2"
                                                                                                                                    (INST
                                                                                                                                     -
                                                                                                                                     "X!1")
                                                                                                                                    (("2"
                                                                                                                                      (SKOSIMP)
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (EXPAND
                                                                                                                                           "abs"
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (ASSERT)
                                                                                                                                            (("2"
                                                                                                                                              (EXPAND
                                                                                                                                               "subset?")
                                                                                                                                              (("2"
                                                                                                                                                (INST
                                                                                                                                                 -
                                                                                                                                                 "x!2")
                                                                                                                                                (("2"
                                                                                                                                                  (ASSERT)
                                                                                                                                                  NIL
                                                                                                                                                  NIL))
                                                                                                                                                NIL))
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (HIDE-ALL-BUT
                                                                                                         (1
                                                                                                          -14))
                                                                                                        (("2"
                                                                                                          (EXPAND
                                                                                                           "nonempty?")
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "ae_le?")
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "empty?")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "pointwise_ae?")
                                                                                                                (("2"
                                                                                                                  (EXPAND
                                                                                                                   "ae?")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "fullset")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "ae_in?")
                                                                                                                      (("2"
                                                                                                                        (SKOSIMP)
                                                                                                                        (("2"
                                                                                                                          (TYPEPRED
                                                                                                                           "E!1")
                                                                                                                          (("2"
                                                                                                                            (EXPAND
                                                                                                                             "negligible_set?")
                                                                                                                            (("2"
                                                                                                                              (SKOSIMP)
                                                                                                                              (("2"
                                                                                                                                (INST
                                                                                                                                 -3
                                                                                                                                 "X!1")
                                                                                                                                (("2"
                                                                                                                                  (EXPAND
                                                                                                                                   "subset?")
                                                                                                                                  (("2"
                                                                                                                                    (EXPAND
                                                                                                                                     "member")
                                                                                                                                    (("2"
                                                                                                                                      (SKOSIMP)
                                                                                                                                      (("2"
                                                                                                                                        (INST
                                                                                                                                         -
                                                                                                                                         "x!2")
                                                                                                                                        (("2"
                                                                                                                                          (INST
                                                                                                                                           -
                                                                                                                                           "x!2")
                                                                                                                                          (("2"
                                                                                                                                            (EXPAND
                                                                                                                                             "abs"
                                                                                                                                             -3)
                                                                                                                                            (("2"
                                                                                                                                              (ASSERT)
                                                                                                                                              NIL
                                                                                                                                              NIL))
                                                                                                                                            NIL))
                                                                                                                                          NIL))
                                                                                                                                        NIL))
                                                                                                                                      NIL))
                                                                                                                                    NIL))
                                                                                                                                  NIL))
                                                                                                                                NIL))
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (REPLACE
                                                                                               -12
                                                                                               *
                                                                                               RL)
                                                                                              (("2"
                                                                                                (HIDE-ALL-BUT
                                                                                                 (-1
                                                                                                  -2
                                                                                                  -3
                                                                                                  -4
                                                                                                  -5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "posreal_div_posreal_is_posreal"
                                                                                                     ("px"
                                                                                                      "1"
                                                                                                      "py"
                                                                                                      "1+n!1"))
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      (("2"
                                                                                                        (REPLACE
                                                                                                         -4
                                                                                                         -2
                                                                                                         RL)
                                                                                                        (("2"
                                                                                                          (LEMMA
                                                                                                           "both_sides_div_pos_lt2"
                                                                                                           ("pz"
                                                                                                            "1"
                                                                                                            "py"
                                                                                                            "n!1"
                                                                                                            "px"
                                                                                                            "1+n!1"))
                                                                                                          (("2"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (ASSERT)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (REVEAL
                                                                               2)
                                                                              (("2"
                                                                                (ASSERT)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REWRITE "null_IUnion") NIL
                                            NIL))
                                          NIL)
                                         ("2" (SKOSIMP)
                                          (("2" (INST -2 "1+n!1")
                                            (("2" (EXPAND "X" -2)
                                              (("2" (FLATTEN)
                                                (("2" (HIDE-ALL-BUT (-2 -3 1))
                                                  (("2" (EXPAND "nonempty?")
                                                    (("2" (EXPAND "empty?")
                                                      (("2" (EXPAND "ae_le?")
                                                        (("2"
                                                          (EXPAND
                                                           "pointwise_ae?")
                                                          (("2" (EXPAND "ae?")
                                                            (("2"
                                                              (EXPAND
                                                               "fullset")
                                                              (("2"
                                                                (EXPAND
                                                                 "ae_in?")
                                                                (("2"
                                                                  (EXPAND
                                                                   "member")
                                                                  (("2"
                                                                    (SKOSIMP)
                                                                    (("2"
                                                                      (TYPEPRED
                                                                       "E!1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "negligible_set?")
                                                                        (("2"
                                                                          (SKOSIMP)
                                                                          (("2"
                                                                            (INST
                                                                             -3
                                                                             "X!1")
                                                                            (("2"
                                                                              (SKOSIMP)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "subset?"
                                                                                 -2)
                                                                                (("2"
                                                                                  (INST
                                                                                   -2
                                                                                   "x!1")
                                                                                  (("2"
                                                                                    (EXPAND
                                                                                     "member")
                                                                                    (("2"
                                                                                      (INST
                                                                                       -4
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (EXPAND
                                                                                         "abs"
                                                                                         -4)
                                                                                        (("2"
                                                                                          (REPLACE
                                                                                           2)
                                                                                          (("2"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (REWRITE "metric_convergence_def")
                                      (("2" (REPLACE -2 1 RL)
                                        (("2" (HIDE-ALL-BUT 1)
                                          (("2" (EXPAND "metric_converges_to")
                                            (("2" (EXPAND "ball")
                                              (("2" (EXPAND "member")
                                                (("2" (SKOSIMP)
                                                  (("2"
                                                    (LEMMA "archimedean"
                                                     ("px" "r!1"))
                                                    (("2" (SKOSIMP)
                                                      (("2" (INST + "n!1-1")
                                                        (("2" (SKOSIMP)
                                                          (("2"
                                                            (REWRITE
                                                             "real_props.abs_mult")
                                                            (("2"
                                                              (LEMMA
                                                               "posreal_div_posreal_is_posreal"
                                                               ("px" "1" "py"
                                                                "1+i!1"))
                                                              (("2"
                                                                (EXPAND "abs")
                                                                (("2"
                                                                  (REWRITE
                                                                   "neg_neg")
                                                                  (("2"
                                                                    (REWRITE
                                                                     "one_times")
                                                                    (("2"
                                                                      (REWRITE
                                                                       "div_mult_pos_lt1"
                                                                       -)
                                                                      (("2"
                                                                        (REWRITE
                                                                         "div_mult_pos_lt1"
                                                                         +)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "both_sides_times_pos_le1"
                                                                           ("pz"
                                                                            "r!1"
                                                                            "x"
                                                                            "n!1"
                                                                            "y"
                                                                            "1+i!1"))
                                                                          (("2"
                                                                            (ASSERT)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (1 -6 -3 -4))
                              (("2" (TYPEPRED "inf(X)")
                                (("2" (EXPAND "extend")
                                  (("2" (EXPAND "greatest_lower_bound")
                                    (("2" (EXPAND "lower_bound")
                                      (("2" (FLATTEN)
                                        (("2" (INST -2 "INF")
                                          (("2" (REPLACE 1)
                                            (("2" (SPLIT -2)
                                              (("1" (INST -6 "inf(X)")
                                                (("1" (SPLIT -6)
                                                  (("1" (ASSERT) NIL NIL)
                                                   ("2" (ASSERT) NIL NIL)
                                                   ("3" (SKOSIMP)
                                                    (("3" (TYPEPRED "z!1")
                                                      (("3" (ASSERT)
                                                        (("3"
                                                          (CASE "z!1<inf(X)")
                                                          (("1" (HIDE 1)
                                                            (("1"
                                                              (INST -5 "z!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2"
                                                                (EXPAND "X" 1)
                                                                (("2" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (SKOSIMP)
                                                (("2" (CASE "z!1<INF")
                                                  (("1" (TYPEPRED "z!1")
                                                    (("1" (EXPAND "X" -1)
                                                      (("1" (FLATTEN)
                                                        (("1" (HIDE 1)
                                                          (("1" (HIDE -8)
                                                            (("1"
                                                              (INST -7 "z!1")
                                                              (("1" (ASSERT)
                                                                NIL NIL)
                                                               ("2" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT (1 -1 -2 -3))
                            (("2" (TYPEPRED "inf(X)")
                              (("2" (EXPAND "greatest_lower_bound")
                                (("2" (FLATTEN)
                                  (("2" (EXPAND "lower_bound")
                                    (("2" (SKOSIMP)
                                      (("2"
                                        (LEMMA "posreal_div_posreal_is_posreal"
                                         ("px" "1" "py" "n!1"))
                                        (("2" (INST -3 "inf(X) + 1 / n!1")
                                          (("1" (ASSERT)
                                            (("1" (SKOSIMP)
                                              (("1" (CASE "z!1<M(n!1)")
                                                (("1" (TYPEPRED "z!1")
                                                  (("1" (HIDE 1)
                                                    (("1" (EXPAND "X")
                                                      (("1" (ASSERT)
                                                        (("1" (FLATTEN)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (HIDE-ALL-BUT
                                                               (-2 -3 1))
                                                              (("1"
                                                                (EXPAND
                                                                 "ae_le?")
                                                                (("1"
                                                                  (EXPAND
                                                                   "pointwise_ae?")
                                                                  (("1"
                                                                    (EXPAND
                                                                     "ae?")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "fullset")
                                                                      (("1"
                                                                        (EXPAND
                                                                         "ae_in?")
                                                                        (("1"
                                                                          (SKOSIMP)
                                                                          (("1"
                                                                            (INST
                                                                             +
                                                                             "E!1")
                                                                            (("1"
                                                                              (SKOSIMP)
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "member")
                                                                                (("1"
                                                                                  (INST
                                                                                   -
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (EXPAND
                                                                                     "abs")
                                                                                    (("1"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (ASSERT)
                                                  (("2" (EXPAND "M")
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT (-1 -5 1))
                      (("2" (EXPAND "below_bounded")
                        (("2" (SKOSIMP)
                          (("2" (EXPAND "X")
                            (("2" (INST + "n!1")
                              (("2" (EXPAND "extend")
                                (("2" (EXPAND "lower_bound")
                                  (("2" (SKOSIMP)
                                    (("2" (TYPEPRED "z!1")
                                      (("2" (INST - "z!1") NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (HIDE-ALL-BUT (1 -3))
                    (("2" (EXPAND "extend")
                      (("2" (EXPAND "nonempty?")
                        (("2" (EXPAND "empty?")
                          (("2" (EXPAND "member")
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (ASSERT)
                                  (("2" (PROP)
                                    (("2" (EXPAND "X") (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (PROPAX) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|inf| CONST-DECL "{x | greatest_lower_bound(<=)(x, Sl)}" |bounded_reals|
     |reals|)
    (|below_bounded| CONST-DECL "bool" |bounded_reals| |reals|)
    (|nonempty?| CONST-DECL "bool" |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|inf_set| TYPE-EQ-DECL NIL |bounded_reals| |reals|)
    (|greatest_lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|metric_convergence_def| FORMULA-DECL NIL |metric_space| |metric_space|)
    (|ball| CONST-DECL "set[T]" |metric_space_def| |metric_space|)
    (|metric_converges_to| CONST-DECL "bool" |metric_space_def| |metric_space|)
    (|lower_bound| CONST-DECL "bool" |bound_defs| |reals|)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|null_IUnion| JUDGEMENT-TCC NIL |measure_theory| |measure_integration|)
    (|choose| CONST-DECL "(p)" |sets| NIL)
    (|null_set| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|null_set?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|convergence?| CONST-DECL "bool" |topological_convergence| |topology|)
    (|metric_induced_topology| CONST-DECL "setofsets[T]" |metric_space_def|
     |metric_space|)
    (|sequence| TYPE-EQ-DECL NIL |sequences| NIL)
    (|metric_induced_topology_is_second_countable| NAME-JUDGEMENT
     "second_countable" |real_topology| |metric_space|))
   SHOSTAK))
 (|scal_essentially_bounded| 0
  (|scal_essentially_bounded-2| "" 3789905812
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "essentially_bounded?")
        (("" (FLATTEN)
          (("" (HIDE -1)
            (("" (EXPAND "ae_bounded?")
              (("" (SKOSIMP)
                (("" (INST + "abs(c!1)*K!1")
                  (("" (EXPAND "ae_le?")
                    (("" (EXPAND "pointwise_ae?")
                      (("" (EXPAND "ae?")
                        (("" (EXPAND "fullset")
                          (("" (EXPAND "ae_in?")
                            (("" (SKOSIMP)
                              (("" (INST + "E!1")
                                (("" (SKOSIMP)
                                  (("" (INST - "x!1")
                                    (("" (ASSERT)
                                      (("" (HIDE 1)
                                        (("" (EXPAND "abs" -1)
                                          (("" (EXPAND "abs" 1 1)
                                            (("" (EXPAND "*")
                                              (("" (REWRITE "abs_mult")
                                                (("" (TYPEPRED "abs(c!1)")
                                                  (("" (EXPAND ">=")
                                                    (("" (EXPAND "<=" -1)
                                                      (("" (SPLIT)
                                                        (("1"
                                                          (LEMMA
                                                           "both_sides_times_pos_le1"
                                                           ("pz" "abs(c!1)" "x"
                                                            "abs(f!1(x!1))" "y"
                                                            "K!1"))
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL)
                                                         ("2" (REPLACE -1 * RL)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|abs_mult| FORMULA-DECL NIL |polar| |complex|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|))
   SHOSTAK
   (|scal_essentially_bounded| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.c, essentially_bounded.f)"
    "essentially_bounded" (40 38 40 39)))
  (|scal_essentially_bounded-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "essentially_bounded?")
        (("" (FLATTEN)
          (("" (REWRITE "scal_complex_measurable")
            (("" (HIDE -1)
              (("" (EXPAND "ae_bounded?")
                (("" (SKOSIMP)
                  (("" (INST + "abs(c!1)*K!1")
                    (("" (EXPAND "ae_le?")
                      (("" (EXPAND "pointwise_ae?")
                        (("" (EXPAND "ae?")
                          (("" (EXPAND "fullset")
                            (("" (EXPAND "ae_in?")
                              (("" (SKOSIMP)
                                (("" (INST + "E!1")
                                  (("" (SKOSIMP)
                                    (("" (INST - "x!1")
                                      (("" (ASSERT)
                                        (("" (HIDE 1)
                                          (("" (EXPAND "abs" -1)
                                            (("" (EXPAND "abs" 1 1)
                                              (("" (EXPAND "*")
                                                (("" (REWRITE "abs_mult")
                                                  (("" (TYPEPRED "abs(c!1)")
                                                    (("" (EXPAND ">=")
                                                      (("" (EXPAND "<=" -1)
                                                        (("" (SPLIT)
                                                          (("1"
                                                            (LEMMA
                                                             "both_sides_times_pos_le1"
                                                             ("pz" "abs(c!1)"
                                                              "x"
                                                              "abs(f!1(x!1))"
                                                              "y" "K!1"))
                                                            (("1" (ASSERT) NIL
                                                              NIL)
                                                             ("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL)
                                                           ("2"
                                                            (REPLACE -1 * RL)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|))
   NIL
   (|scal_essentially_bounded| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.c, essentially_bounded.f)"
    "essentially_bounded" (40 38 40 39))))
 (|add_essentially_bounded| 0
  (|add_essentially_bounded-2| "" 3789905813
   ("" (SKOSIMP)
    (("" (TYPEPRED "f0!1")
      (("" (TYPEPRED "f1!1")
        (("" (EXPAND "essentially_bounded?")
          (("" (FLATTEN)
            (("" (HIDE -1 -3)
              (("" (EXPAND "ae_bounded?")
                (("" (SKOSIMP*)
                  (("" (INST + "K!1+K!2")
                    (("" (EXPAND "ae_le?")
                      (("" (EXPAND "pointwise_ae?")
                        (("" (EXPAND "ae?")
                          (("" (EXPAND "fullset")
                            (("" (EXPAND "ae_in?")
                              (("" (SKOSIMP*)
                                (("" (INST + "union(E!1,E!2)")
                                  (("" (SKOSIMP)
                                    (("" (INST - "x!1")
                                      (("" (INST - "x!1")
                                        (("" (EXPAND "union")
                                          (("" (EXPAND "member")
                                            (("" (FLATTEN)
                                              (("" (ASSERT)
                                                (("" (HIDE 1 2)
                                                  (("" (EXPAND "abs")
                                                    (("" (EXPAND "+")
                                                      ((""
                                                        (LEMMA "abs_triangle"
                                                         ("z1" "f0!1(x!1)" "z2"
                                                          "f1!1(x!1)"))
                                                        (("" (ASSERT) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|union| CONST-DECL "set" |sets| NIL)
    (+ CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|abs_triangle| FORMULA-DECL NIL |polar| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL))
   SHOSTAK
   (|add_essentially_bounded| SUBTYPE
    "(complex_fun_ops[essentially_bounded.T].+)(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded" (41 38 41 39)))
  (|add_essentially_bounded-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (TYPEPRED "f0!1")
      (("" (TYPEPRED "f1!1")
        (("" (EXPAND "essentially_bounded?")
          (("" (FLATTEN)
            (("" (REWRITE "sum_complex_measurable")
              (("" (HIDE -1 -3)
                (("" (EXPAND "ae_bounded?")
                  (("" (SKOSIMP*)
                    (("" (INST + "K!1+K!2")
                      (("" (EXPAND "ae_le?")
                        (("" (EXPAND "pointwise_ae?")
                          (("" (EXPAND "ae?")
                            (("" (EXPAND "fullset")
                              (("" (EXPAND "ae_in?")
                                (("" (SKOSIMP*)
                                  (("" (INST + "union(E!1,E!2)")
                                    (("" (SKOSIMP)
                                      (("" (INST - "x!1")
                                        (("" (INST - "x!1")
                                          (("" (EXPAND "union")
                                            (("" (EXPAND "member")
                                              (("" (FLATTEN)
                                                (("" (ASSERT)
                                                  (("" (HIDE 1 2)
                                                    (("" (EXPAND "abs")
                                                      (("" (EXPAND "+")
                                                        ((""
                                                          (LEMMA "abs_triangle"
                                                           ("z1" "f0!1(x!1)"
                                                            "z2" "f1!1(x!1)"))
                                                          (("" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|union| CONST-DECL "set" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL))
   NIL
   (|add_essentially_bounded| SUBTYPE
    "(complex_fun_ops[essentially_bounded.T].+)(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded" (41 38 41 39))))
 (|opp_essentially_bounded| 0
  (|opp_essentially_bounded-2| "" 3789905813
   ("" (SKOSIMP)
    (("" (LEMMA "scal_essentially_bounded" ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (CASE-REPLACE "*[T](complex_(-1, 0), f!1)=-f!1")
        (("1" (HIDE-ALL-BUT 1)
          (("1"
            (LEMMA "scal_essentially_bounded" ("c" "complex_(-1,0)" "f" "f!1"))
            (("1" (EXPAND "*")
              (("1" (EXPAND "-")
                (("1" (EXPAND "essentially_bounded?")
                  (("1" (FLATTEN)
                    (("1" (EXPAND "-")
                      (("1" (EXPAND "*")
                        (("1" (ASSERT)
                          (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE -1 2)
          (("2" (EXPAND "-")
            (("2" (EXPAND "=")
              (("2" (EXPAND "*")
                (("2" (EXPAND "-")
                  (("2" (EXPAND "Re")
                    (("2" (EXPAND "Im")
                      (("2" (SPLIT)
                        (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)
                         ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| |complex|)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (- CONST-DECL "complex" |complex_types| |complex|)
    (|c_fun_eq1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|Im_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (|Re_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (* CONST-DECL "complex" |complex_types| |complex|)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|))
   SHOSTAK
   (|opp_essentially_bounded| SUBTYPE
    "(complex_fun_ops[essentially_bounded.T].-)(essentially_bounded.f)"
    "essentially_bounded" (42 38 42 39)))
  (|opp_essentially_bounded-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (LEMMA "scal_essentially_bounded" ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (CASE-REPLACE "*[T](complex_(-1, 0), f!1)=-f!1")
        (("1" (HIDE-ALL-BUT 1)
          (("1"
            (LEMMA "scal_essentially_bounded" ("c" "complex_(-1,0)" "f" "f!1"))
            (("1" (EXPAND "*")
              (("1" (EXPAND "-")
                (("1" (EXPAND "essentially_bounded?")
                  (("1" (FLATTEN)
                    (("1" (EXPAND "-")
                      (("1" (EXPAND "Re")
                        (("1" (EXPAND "Im")
                          (("1" (EXPAND "*")
                            (("1" (ASSERT)
                              (("1" (FLATTEN)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "Re")
                                    (("1" (EXPAND "Im")
                                      (("1" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE -1 2)
          (("2" (EXPAND "-")
            (("2" (EXPAND "=")
              (("2" (EXPAND "*")
                (("2" (EXPAND "-")
                  (("2" (EXPAND "Re")
                    (("2" (EXPAND "Re")
                      (("2" (EXPAND "Im")
                        (("2" (EXPAND "Im")
                          (("2" (SPLIT)
                            (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                              (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                              (("2" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL))
   NIL
   (|opp_essentially_bounded| SUBTYPE
    "(complex_fun_ops[essentially_bounded.T].-)(essentially_bounded.f)"
    "essentially_bounded" (42 38 42 39))))
 (|diff_essentially_bounded| 0
  (|diff_essentially_bounded-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (TYPEPRED "f0!1")
      (("" (TYPEPRED "f1!1")
        (("" (LEMMA "opp_essentially_bounded" ("f" "f1!1"))
          (("" (LEMMA "add_essentially_bounded" ("f0" "f0!1" "f1" "-f1!1"))
            (("" (HIDE -2 -3 -4)
              (("" (EXPAND "+")
                (("" (EXPAND "-")
                  (("" (EXPAND "essentially_bounded?")
                    (("" (FLATTEN)
                      (("" (EXPAND "complex_measurable?")
                        (("" (FLATTEN)
                          (("" (ASSERT)
                            (("" (EXPAND "+ ")
                              (("" (EXPAND "-") (("" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|complex_plus_neg| FORMULA-DECL NIL |complex_types| |complex|)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (+ CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|))
   NIL
   (|diff_essentially_bounded| SUBTYPE
    "(complex_fun_ops[essentially_bounded.T].-)(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded" (43 38 43 39))))
 (|prod_essentially_bounded| 0
  (|prod_essentially_bounded-2| "" 3789905814
   ("" (SKOSIMP)
    (("" (TYPEPRED "f0!1")
      (("" (TYPEPRED "f1!1")
        (("" (EXPAND "essentially_bounded?")
          (("" (FLATTEN)
            (("" (HIDE -1 -3)
              (("" (EXPAND "ae_bounded?")
                (("" (SKOSIMP*)
                  (("" (INST + "K!1*K!2")
                    (("" (ASSERT)
                      (("" (EXPAND "ae_le?")
                        (("" (EXPAND "pointwise_ae?")
                          (("" (EXPAND "ae?")
                            (("" (EXPAND "fullset")
                              (("" (EXPAND "ae_in?")
                                (("" (SKOSIMP*)
                                  (("" (INST + "union(E!1,E!2)")
                                    (("" (SKOSIMP)
                                      (("" (INST - "x!1")
                                        (("" (INST - "x!1")
                                          (("" (EXPAND "member")
                                            (("" (EXPAND "union")
                                              (("" (EXPAND "member")
                                                (("" (FLATTEN)
                                                  (("" (ASSERT)
                                                    (("" (EXPAND "abs")
                                                      (("" (EXPAND "*")
                                                        (("" (HIDE 1 2)
                                                          ((""
                                                            (LEMMA
                                                             "le_times_le_pos"
                                                             ("nnx"
                                                              "abs(f0!1(x!1))"
                                                              "nnz"
                                                              "abs(f1!1(x!1))"
                                                              "w" "K!1" "y"
                                                              "K!2"))
                                                            (("" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|complex_abs_mul| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|union| CONST-DECL "set" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL))
   SHOSTAK
   (|prod_essentially_bounded| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded" (44 38 44 39)))
  (|prod_essentially_bounded-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (TYPEPRED "f0!1")
      (("" (TYPEPRED "f1!1")
        (("" (EXPAND "essentially_bounded?")
          (("" (REWRITE "prod_complex_measurable")
            (("1" (FLATTEN)
              (("1" (HIDE -1 -3)
                (("1" (EXPAND "ae_bounded?")
                  (("1" (SKOSIMP*)
                    (("1" (INST + "K!1*K!2")
                      (("1" (ASSERT)
                        (("1" (EXPAND "ae_le?")
                          (("1" (EXPAND "pointwise_ae?")
                            (("1" (EXPAND "ae?")
                              (("1" (EXPAND "fullset")
                                (("1" (EXPAND "ae_in?")
                                  (("1" (SKOSIMP*)
                                    (("1" (INST + "union(E!1,E!2)")
                                      (("1" (SKOSIMP)
                                        (("1" (INST - "x!1")
                                          (("1" (INST - "x!1")
                                            (("1" (EXPAND "member")
                                              (("1" (EXPAND "union")
                                                (("1" (EXPAND "member")
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT)
                                                      (("1" (EXPAND "abs")
                                                        (("1" (EXPAND "*")
                                                          (("1" (HIDE 1 2)
                                                            (("1"
                                                              (LEMMA
                                                               "le_times_le_pos"
                                                               ("nnx"
                                                                "abs(f0!1(x!1))"
                                                                "nnz"
                                                                "abs(f1!1(x!1))"
                                                                "w" "K!1" "y"
                                                                "K!2"))
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)
             ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|union| CONST-DECL "set" |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL))
   NIL
   (|prod_essentially_bounded| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f0, essentially_bounded.f1)"
    "essentially_bounded" (44 38 44 39))))
 (|essential_bound_scal| 0
  (|essential_bound_scal-1| |nil| 3477805086
   ("" (SKOSIMP)
    ((""
      (LEMMA "essential_bound_def1"
       ("f" "c!1*f!1" "K" "abs(c!1) * essential_bound(f!1)"))
      (("" (SPLIT -1)
        (("1" (TYPEPRED "abs(c!1)")
          (("1" (EXPAND ">=")
            (("1" (EXPAND "<=" -1)
              (("1" (SPLIT)
                (("1"
                  (LEMMA "essential_bound_def1"
                   ("f" "f!1" "K" "essential_bound(c!1*f!1)/abs(c!1)"))
                  (("1" (SPLIT)
                    (("1" (REWRITE "div_mult_pos_le2" -1)
                      (("1" (ASSERT) NIL NIL)) NIL)
                     ("2" (HIDE -2 2)
                      (("2" (LEMMA "essential_bound_def2" ("f" "c!1*f!1"))
                        (("2" (EXPAND "ae_le?")
                          (("2" (EXPAND "pointwise_ae?")
                            (("2" (EXPAND "ae?")
                              (("2" (EXPAND "fullset")
                                (("2" (EXPAND "ae_in?")
                                  (("2" (SKOSIMP)
                                    (("2" (INST + "E!1")
                                      (("2" (SKOSIMP)
                                        (("2" (INST - "x!1")
                                          (("2" (EXPAND "member")
                                            (("2" (ASSERT)
                                              (("2" (EXPAND "abs" -1)
                                                (("2" (EXPAND "abs" 2 1)
                                                  (("2" (HIDE 1)
                                                    (("2" (EXPAND "*" -1 1)
                                                      (("2"
                                                        (REWRITE "abs_mult" -1)
                                                        (("2"
                                                          (REWRITE
                                                           "div_mult_pos_le2")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (ASSERT) (("2" (REWRITE "div_mult_pos_ge1") NIL NIL))
                    NIL)
                   ("3" (ASSERT) NIL NIL))
                  NIL)
                 ("2" (REPLACE -1 * RL) (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE 2)
          (("2" (LEMMA "essential_bound_def2" ("f" "f!1"))
            (("2" (EXPAND "ae_le?")
              (("2" (EXPAND "pointwise_ae?")
                (("2" (EXPAND "ae?")
                  (("2" (EXPAND "fullset")
                    (("2" (EXPAND "ae_in?")
                      (("2" (SKOSIMP)
                        (("2" (INST + "E!1")
                          (("2" (SKOSIMP)
                            (("2" (INST - "x!1")
                              (("2" (EXPAND "member")
                                (("2" (ASSERT)
                                  (("2" (HIDE 1)
                                    (("2" (EXPAND "abs" -1)
                                      (("2" (EXPAND "abs" 1 1)
                                        (("2" (EXPAND "*" 1 1)
                                          (("2" (REWRITE "abs_mult")
                                            (("2" (TYPEPRED "abs(c!1)")
                                              (("2" (EXPAND ">=")
                                                (("2" (EXPAND "<=" -1)
                                                  (("2" (SPLIT)
                                                    (("1"
                                                      (LEMMA
                                                       "both_sides_times_pos_le1"
                                                       ("pz" "abs(c!1)" "x"
                                                        "abs(f!1(x!1))" "y"
                                                        "essential_bound(f!1)"))
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT) NIL NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|abs_mult| FORMULA-DECL NIL |polar| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|))
   SHOSTAK))
 (|essential_bound_add| 0
  (|essential_bound_add-1| |nil| 3477806906
   ("" (SKOSIMP)
    ((""
      (LEMMA "essential_bound_def1"
       ("f" "f0!1+f1!1" "K" "essential_bound(f0!1) + essential_bound(f1!1)"))
      (("" (ASSERT)
        (("" (HIDE 2)
          (("" (LEMMA "essential_bound_def2" ("f" "f0!1"))
            (("" (LEMMA "essential_bound_def2" ("f" "f1!1"))
              (("" (EXPAND "ae_le?")
                (("" (EXPAND "pointwise_ae?")
                  (("" (EXPAND "ae?")
                    (("" (EXPAND "fullset")
                      (("" (EXPAND "ae_in?")
                        (("" (SKOSIMP*)
                          (("" (INST + "union(E!1,E!2)")
                            (("" (SKOSIMP)
                              (("" (INST - "x!1")
                                (("" (INST - "x!1")
                                  (("" (EXPAND "union")
                                    (("" (ASSERT)
                                      (("" (FLATTEN)
                                        (("" (ASSERT)
                                          (("" (EXPAND "abs")
                                            (("" (HIDE 1 2)
                                              (("" (EXPAND "+")
                                                ((""
                                                  (LEMMA "abs_triangle"
                                                   ("z1" "f0!1(x!1)" "z2"
                                                    "f1!1(x!1)"))
                                                  (("" (ASSERT) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (+ CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|abs_triangle| FORMULA-DECL NIL |polar| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|union| CONST-DECL "set" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|))
   SHOSTAK))
 (|essential_bound_opp| 0
  (|essential_bound_opp-2| "" 3789905815
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_scal" ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (EXPAND "abs")
        (("" (EXPAND "sq_abs")
          (("" (EXPAND "-")
            (("" (EXPAND "*")
              (("" (EXPAND "-") (("" (EXPAND "*") (("" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex_| CONST-DECL "complex" |complex_types| |complex|)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|sq_abs| CONST-DECL "nnreal" |complex_types| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (* CONST-DECL "complex" |complex_types| |complex|)
    (|sqrt_sq_neg| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|)
    (|Im_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (|Re_rew| FORMULA-DECL NIL |complex_types| |complex|)
    (- CONST-DECL "complex" |complex_types| |complex|)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|))
   SHOSTAK)
  (|essential_bound_opp-1| |nil| 3477806078
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_scal" ("c" "complex_(-1,0)" "f" "f!1"))
      (("" (EXPAND "abs")
        (("" (EXPAND "sq_abs")
          (("" (EXPAND "Im")
            (("" (EXPAND "Re")
              (("" (REWRITE "sq_0")
                (("" (REWRITE "sq_neg")
                  (("" (REWRITE "sqrt_1")
                    (("" (REWRITE "one_times")
                      (("" (EXPAND "-")
                        (("" (EXPAND "*")
                          (("" (EXPAND "-")
                            (("" (EXPAND "Re")
                              (("" (EXPAND "*")
                                (("" (EXPAND "Re")
                                  (("" (EXPAND "Im") (("" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|sqrt_sq_neg| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_0| FORMULA-DECL NIL |sq| |reals|))
   SHOSTAK))
 (|essential_bound_diff| 0
  (|essential_bound_diff-2| "" 3789905815
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_add" ("f0" "f0!1" "f1" "-f1!1"))
      (("" (REWRITE "essential_bound_opp")
        ((""
          (NAME-REPLACE "RHS" "essential_bound(f0!1) + essential_bound(f1!1)")
          (("" (EXPAND "essential_bound")
            (("" (EXPAND "-")
              (("" (EXPAND "+ ")
                (("" (EXPAND "abs")
                  (("" (ASSERT)
                    (("" (EXPAND "abs")
                      (("" (EXPAND "sq_abs") (("" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|complex_plus_neg| FORMULA-DECL NIL |complex_types| |complex|)
    (+ CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|))
   SHOSTAK)
  (|essential_bound_diff-1| |nil| 3477806152
   ("" (SKOSIMP)
    (("" (LEMMA "essential_bound_add" ("f0" "f0!1" "f1" "-f1!1"))
      (("" (REWRITE "essential_bound_opp")
        ((""
          (NAME-REPLACE "RHS" "essential_bound(f0!1) + essential_bound(f1!1)")
          (("" (EXPAND "essential_bound")
            (("" (EXPAND "-")
              (("" (EXPAND "+ ")
                (("" (EXPAND "abs")
                  (("" (ASSERT)
                    (("" (EXPAND "abs")
                      (("" (EXPAND "sq_abs")
                        (("" (EXPAND "Re")
                          (("" (EXPAND "Im")
                            (("" (ASSERT)
                              (("" (EXPAND "sq")
                                (("" (EXPAND "+ ")
                                  (("" (EXPAND "-")
                                    (("" (EXPAND "Im")
                                      (("" (EXPAND "Re")
                                        (("" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|essential_bound_eq_0| 0
  (|essential_bound_eq_0-2| "" 3789905815
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "essentially_bounded?")
        (("" (FLATTEN)
          (("" (EXPAND "cal_N?")
            (("" (REPLACE -1)
              (("" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (LEMMA "essential_bound_def2" ("f" "f!1"))
                    (("1" (REPLACE -2)
                      (("1" (HIDE-ALL-BUT (-1 1))
                        (("1" (EXPAND "ae_le?")
                          (("1" (EXPAND "ae_0?")
                            (("1" (EXPAND "pointwise_ae?")
                              (("1" (EXPAND "ae?")
                                (("1" (EXPAND "fullset")
                                  (("1" (EXPAND "ae_in?")
                                    (("1" (SKOSIMP)
                                      (("1" (INST + "E!1")
                                        (("1" (SKOSIMP)
                                          (("1" (INST - "x!1")
                                            (("1" (EXPAND "member")
                                              (("1" (REPLACE 1)
                                                (("1" (EXPAND "abs" -1)
                                                  (("1" (EXPAND "<=" -1)
                                                    (("1" (SPLIT)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2"
                                                        (REWRITE "abs_is_0")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (LEMMA "essential_bound_def1" ("f" "f!1" "K" "0"))
                    (("2" (SPLIT)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE-ALL-BUT (-1 1))
                        (("2" (EXPAND "ae_0?")
                          (("2" (EXPAND "ae_le?")
                            (("2" (EXPAND "pointwise_ae?")
                              (("2" (EXPAND "ae?")
                                (("2" (EXPAND "fullset")
                                  (("2" (EXPAND "ae_in?")
                                    (("2" (SKOSIMP)
                                      (("2" (INST + "E!1")
                                        (("2" (SKOSIMP)
                                          (("2" (INST - "x!1")
                                            (("2" (EXPAND "member")
                                              (("2" (REPLACE 1)
                                                (("2" (EXPAND "abs")
                                                  (("2" (EXPAND "<=")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (REWRITE "abs_is_0")
                                                        NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|pointwise_ae?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|abs_is_0| FORMULA-DECL NIL |polar| |complex|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_0?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|cal_N?| CONST-DECL "bool" |complex_measure_theory| NIL))
   SHOSTAK)
  (|essential_bound_eq_0-1| |nil| 3477806280
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "essentially_bounded?")
        (("" (FLATTEN)
          (("" (EXPAND "cal_N?")
            (("" (REPLACE -1)
              (("" (SPLIT)
                (("1" (FLATTEN)
                  (("1" (LEMMA "essential_bound_def2" ("f" "f!1"))
                    (("1" (REPLACE -2)
                      (("1" (HIDE-ALL-BUT (-1 1))
                        (("1" (EXPAND "ae_le?")
                          (("1" (EXPAND "ae_0?")
                            (("1" (EXPAND "pointwise_ae?")
                              (("1" (EXPAND "ae?")
                                (("1" (EXPAND "fullset")
                                  (("1" (EXPAND "ae_in?")
                                    (("1" (SKOSIMP)
                                      (("1" (INST + "E!1")
                                        (("1" (SKOSIMP)
                                          (("1" (INST - "x!1")
                                            (("1" (EXPAND "member")
                                              (("1" (REPLACE 1)
                                                (("1" (EXPAND "abs" -1)
                                                  (("1" (EXPAND "<=" -1)
                                                    (("1" (SPLIT)
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2"
                                                        (REWRITE "abs_is_0")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (FLATTEN)
                  (("2" (LEMMA "essential_bound_def1" ("f" "f!1" "K" "0"))
                    (("2" (SPLIT)
                      (("1" (ASSERT) NIL NIL)
                       ("2" (HIDE-ALL-BUT (-1 1))
                        (("2" (EXPAND "ae_0?")
                          (("2" (EXPAND "ae_le?")
                            (("2" (EXPAND "pointwise_ae?")
                              (("2" (EXPAND "ae?")
                                (("2" (EXPAND "fullset")
                                  (("2" (EXPAND "ae_in?")
                                    (("2" (SKOSIMP)
                                      (("2" (INST + "E!1")
                                        (("2" (SKOSIMP)
                                          (("2" (INST - "x!1")
                                            (("2" (EXPAND "member")
                                              (("2" (REPLACE 1)
                                                (("2" (EXPAND "abs")
                                                  (("2" (EXPAND "<=")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (REWRITE "abs_is_0")
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|pointwise_ae?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_0?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|cal_N?| CONST-DECL "bool" |complex_measure_theory| NIL))
   SHOSTAK))
 (|essential_bound_prod| 0
  (|essential_bound_prod-2| "" 3789905816
   ("" (SKOSIMP)
    ((""
      (LEMMA "essential_bound_def1"
       ("f" "f0!1*f1!1" "K" "essential_bound(f0!1) * essential_bound(f1!1)"))
      (("" (SPLIT -1)
        (("1" (PROPAX) NIL NIL)
         ("2" (HIDE 2)
          (("2" (LEMMA "essential_bound_def2" ("f" "f0!1"))
            (("2" (LEMMA "essential_bound_def2" ("f" "f1!1"))
              (("2" (EXPAND "ae_le?")
                (("2" (EXPAND "pointwise_ae?")
                  (("2" (EXPAND "ae?")
                    (("2" (EXPAND "fullset")
                      (("2" (EXPAND "ae_in?")
                        (("2" (SKOSIMP*)
                          (("2" (INST + "union(E!1,E!2)")
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (INST - "x!1")
                                  (("2" (EXPAND "union")
                                    (("2" (EXPAND "member")
                                      (("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "abs")
                                            (("2" (EXPAND "*")
                                              (("2"
                                                (LEMMA "le_times_le_pos"
                                                 ("nnx" "abs(f0!1(x!1))" "y"
                                                  "essential_bound(f0!1)" "nnz"
                                                  "abs(f1!1(x!1))" "w"
                                                  "essential_bound(f1!1)"))
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|complex_abs_mul| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|union| CONST-DECL "set" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|))
   SHOSTAK)
  (|essential_bound_prod-1| |nil| 3477806660
   ("" (SKOSIMP)
    ((""
      (LEMMA "essential_bound_def1"
       ("f" "f0!1*f1!1" "K" "essential_bound(f0!1) * essential_bound(f1!1)"))
      (("" (SPLIT -1)
        (("1" (PROPAX) NIL NIL)
         ("2" (HIDE 2)
          (("2" (LEMMA "essential_bound_def2" ("f" "f0!1"))
            (("2" (LEMMA "essential_bound_def2" ("f" "f1!1"))
              (("2" (EXPAND "ae_le?")
                (("2" (EXPAND "pointwise_ae?")
                  (("2" (EXPAND "ae?")
                    (("2" (EXPAND "fullset")
                      (("2" (EXPAND "ae_in?")
                        (("2" (SKOSIMP*)
                          (("2" (INST + "union(E!1,E!2)")
                            (("2" (SKOSIMP)
                              (("2" (INST - "x!1")
                                (("2" (INST - "x!1")
                                  (("2" (EXPAND "union")
                                    (("2" (EXPAND "member")
                                      (("2" (FLATTEN)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "abs")
                                            (("2" (EXPAND "*")
                                              (("2" (REWRITE "abs_mult")
                                                (("2"
                                                  (LEMMA "le_times_le_pos"
                                                   ("nnx" "abs(f0!1(x!1))" "y"
                                                    "essential_bound(f0!1)"
                                                    "nnz" "abs(f1!1(x!1))" "w"
                                                    "essential_bound(f1!1)"))
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|union| CONST-DECL "set" |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|))
   SHOSTAK))
 (|holder_judge_infty_1| 0
  (|holder_judge_infty_1-2| "" 3789905816
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (TYPEPRED "g!1")
        (("" (EXPAND "p_integrable?")
          (("" (EXPAND "essentially_bounded?")
            (("" (FLATTEN)
              (("" (LEMMA "prod_complex_measurable" ("g1" "f!1" "g2" "g!1"))
                (("" (LEMMA "abs_complex_measurable" ("g" "f!1*g!1"))
                  (("" (CASE "forall h: abs(h)^1 = abs(h)")
                    (("1" (INST-CP - "f!1*g!1")
                      (("1" (INST - "g!1")
                        (("1" (REPLACE -1)
                          (("1" (REPLACE -2)
                            (("1" (HIDE -1 -2)
                              (("1"
                                (LEMMA "abs_complex_measurable" ("g" "f!1"))
                                (("1" (EXPAND "ae_bounded?")
                                  (("1" (SKOSIMP)
                                    (("1"
                                      (LEMMA "integral_prod"
                                       ("h" "abs(f!1)" "nnc" "K!1" "f"
                                        "abs(g!1)"))
                                      (("1"
                                        (CASE-REPLACE
                                         "(abs(g!1) * abs(f!1))=abs(f!1 * g!1)")
                                        (("1" (SPLIT -2)
                                          (("1" (FLATTEN) NIL NIL)
                                           ("2" (HIDE-ALL-BUT (-8 1))
                                            (("2"
                                              (CASE-REPLACE
                                               "abs(abs(f!1))=abs(f!1)")
                                              (("2" (HIDE-ALL-BUT 1)
                                                (("2"
                                                  (APPLY-EXTENSIONALITY :HIDE?
                                                   T)
                                                  (("2" (EXPAND "abs")
                                                    (("2"
                                                      (TYPEPRED
                                                       "abs(f!1(x!1))")
                                                      (("2" (EXPAND "abs" 1 1)
                                                        (("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                          (("2" (EXPAND "*" 1)
                                            (("2" (EXPAND "abs" 1)
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (PROPAX) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE-ALL-BUT 1)
                      (("2" (SKOSIMP)
                        (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                          (("2" (EXPAND "^")
                            (("2" (EXPAND "abs")
                              (("2" (REWRITE "real_expt_x1") NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|abs_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integral_prod| FORMULA-DECL NIL |integral| |measure_integration|)
    (|complex_abs_mul| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Re_fun_mul1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Im_fun_mul1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (|prod_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL))
   SHOSTAK
   (|holder_judge_infty_1| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f, essentially_bounded.g)"
    "p_integrable[T, S, mu, 1]" (62 34 62 35)))
  (|holder_judge_infty_1-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (TYPEPRED "g!1")
        (("" (EXPAND "p_integrable?")
          (("" (EXPAND "essentially_bounded?")
            (("" (FLATTEN)
              (("" (LEMMA "prod_complex_measurable" ("g1" "f!1" "g2" "g!1"))
                (("1" (REPLACE -1)
                  (("1" (LEMMA "abs_complex_measurable" ("g" "f!1*g!1"))
                    (("1" (CASE "forall h: abs(h)^1 = abs(h)")
                      (("1" (INST-CP - "f!1*g!1")
                        (("1" (INST - "g!1")
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -2)
                              (("1" (HIDE -1 -2)
                                (("1"
                                  (LEMMA "abs_complex_measurable" ("g" "f!1"))
                                  (("1" (EXPAND "ae_bounded?")
                                    (("1" (SKOSIMP)
                                      (("1"
                                        (LEMMA "integral_prod"
                                         ("h" "abs(f!1)" "nnc" "K!1" "f"
                                          "abs(g!1)"))
                                        (("1"
                                          (CASE-REPLACE
                                           "(abs(g!1) * abs(f!1))=abs(f!1 * g!1)")
                                          (("1" (SPLIT -2)
                                            (("1" (FLATTEN) NIL NIL)
                                             ("2" (HIDE-ALL-BUT (-8 1))
                                              (("2"
                                                (CASE-REPLACE
                                                 "abs(abs(f!1))=abs(f!1)")
                                                (("2" (HIDE-ALL-BUT 1)
                                                  (("2"
                                                    (APPLY-EXTENSIONALITY
                                                     :HIDE? T)
                                                    (("2" (EXPAND "abs")
                                                      (("2"
                                                        (TYPEPRED
                                                         "abs(f!1(x!1))")
                                                        (("2"
                                                          (EXPAND "abs" 1 1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                            (("2" (EXPAND "*" 1)
                                              (("2" (EXPAND "abs" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (PROPAX) NIL NIL)
                                         ("3" (PROPAX) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (SKOSIMP)
                          (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                            (("2" (EXPAND "^")
                              (("2" (EXPAND "abs")
                                (("2" (REWRITE "real_expt_x1") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|abs_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|integral_prod| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|)
    (|prod_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL))
   NIL
   (|holder_judge_infty_1| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.f, essentially_bounded.g)"
    "p_integrable[T, S, mu, 1]" (62 34 62 35))))
 (|holder_judge_infty_2| 0
  (|holder_judge_infty_2-2| "" 3789905817
   ("" (SKOSIMP)
    (("" (LEMMA "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (CASE-REPLACE "(*[T](f!1, g!1))=(*[T](g!1, f!1))")
        (("" (HIDE-ALL-BUT 1)
          (("" (EXPAND "*")
            (("" (DECOMPOSE-EQUALITY) (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|mu| FORMAL-CONST-DECL "measure_type[T, S]" |essentially_bounded| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (S FORMAL-CONST-DECL "sigma_algebra[T]" |essentially_bounded| NIL)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|essentially_bounded| NONEMPTY-TYPE-EQ-DECL NIL |essentially_bounded| NIL)
    (|essentially_bounded?| CONST-DECL "bool" |essentially_bounded| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (T FORMAL-TYPE-DECL NIL |essentially_bounded| NIL)
    (|holder_judge_infty_1| JUDGEMENT-TCC NIL |essentially_bounded| NIL)
    (* CONST-DECL "complex" |complex_types| |complex|)
    (|complex_| CONST-DECL "complex" |complex_types| |complex|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|holder_judge_infty_1| APPLICATION-JUDGEMENT "p_integrable"
     |essentially_bounded| NIL)
    (|prod_complex_measurable| APPLICATION-JUDGEMENT "complex_measurable[T, S]"
     |essentially_bounded| NIL)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK
   (|holder_judge_infty_2| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.g, essentially_bounded.f)"
    "p_integrable[T, S, mu, 1]" (63 34 63 35)))
  (|holder_judge_infty_2-1| |nil| 3477802082
   ("" (SKOSIMP)
    (("" (LEMMA "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (CASE-REPLACE "(*[T](f!1, g!1))=(*[T](g!1, f!1))")
        (("1" (EXPAND "*")
          (("1" (ASSERT)
            (("1" (HIDE-ALL-BUT 1)
              (("1" (TYPEPRED "f!1")
                (("1" (TYPEPRED "g!1")
                  (("1" (EXPAND "p_integrable?")
                    (("1" (EXPAND "essentially_bounded?")
                      (("1" (FLATTEN)
                        (("1" (SPLIT)
                          (("1"
                            (LEMMA "prod_complex_measurable"
                             ("g1" "g!1" "g2" "f!1"))
                            (("1" (ASSERT)
                              (("1" (FLATTEN)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "Re")
                                    (("1" (EXPAND "*")
                                      (("1" (EXPAND "-")
                                        (("1" (EXPAND "Re")
                                          (("1" (EXPAND "Im")
                                            (("1" (EXPAND "Im")
                                              (("1" (ASSERT)
                                                (("1"
                                                  (EXPAND "+
")
                                                  (("1" (PROPAX) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "complex_measurable?")
                              (("2" (PROPAX) NIL NIL)) NIL)
                             ("3" (EXPAND "complex_measurable?")
                              (("3" (PROPAX) NIL NIL)) NIL))
                            NIL)
                           ("2" (CASE "forall (f:[T->nnreal]): f^1 = f")
                            (("1" (INST-CP - "abs(g!1)")
                              (("1" (REPLACE -2)
                                (("1" (INST - "abs(g!1*f!1)")
                                  (("1" (EXPAND "*" -1 1)
                                    (("1" (REPLACE -1)
                                      (("1" (HIDE -1 -2)
                                        (("1"
                                          (LEMMA "integral_prod"
                                           ("h" "abs(f!1)" "f" "abs(g!1)"))
                                          (("1" (EXPAND "ae_bounded?")
                                            (("1" (SKOSIMP)
                                              (("1" (INST - "K!1")
                                                (("1" (SPLIT -1)
                                                  (("1" (FLATTEN)
                                                    (("1" (ASSERT) NIL NIL))
                                                    NIL)
                                                   ("2" (HIDE -1 -2 -3 2)
                                                    (("2" (EXPAND "ae_le?")
                                                      (("2"
                                                        (EXPAND
                                                         "pointwise_ae?")
                                                        (("2" (EXPAND "ae?")
                                                          (("2"
                                                            (EXPAND "fullset")
                                                            (("2"
                                                              (EXPAND "ae_in?")
                                                              (("2" (SKOSIMP)
                                                                (("2"
                                                                  (INST +
                                                                   "E!1")
                                                                  (("2"
                                                                    (SKOSIMP)
                                                                    (("2"
                                                                      (INST -
                                                                       "x!1")
                                                                      (("2"
                                                                        (EXPAND
                                                                         "member")
                                                                        (("2"
                                                                          (ASSERT)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "abs")
                                                                            (("2"
                                                                              (REWRITE
                                                                               "abs_abs")
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2 -1 -2)
                                            (("2"
                                              (LEMMA "abs_complex_measurable"
                                               ("g" "f!1"))
                                              (("1" (PROPAX) NIL NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL)
                                           ("3" (PROPAX) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT 1)
                              (("2" (SKOSIMP)
                                (("2" (APPLY-EXTENSIONALITY :HIDE? T)
                                  (("2" (EXPAND "^")
                                    (("2" (REWRITE "real_expt_x1") NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (EXPAND "*")
            (("2" (ASSERT)
              (("2" (SPLIT)
                (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)
                 ("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|prod_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|integral_prod| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_bounded?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|))
   NIL
   (|holder_judge_infty_2| SUBTYPE
    "complex_fun_ops[essentially_bounded.T].*(essentially_bounded.g, essentially_bounded.f)"
    "p_integrable[T, S, mu, 1]" (63 34 63 35))))
 (|holder_infty_1| 0
  (|holder_infty_1-2| "" 3789905821
   ("" (SKOSIMP)
    (("" (LEMMA "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (TYPEPRED "f!1")
        (("" (TYPEPRED "g!1")
          (("" (EXPAND "norm")
            (("" (CASE "forall h: abs(h)^1 = abs(h) & forall x: abs(h)(x)>=0")
              (("1" (INST-CP - "f!1*g!1")
                (("1" (INST - "g!1")
                  (("1" (FLATTEN)
                    (("1" (EXPAND "essentially_bounded?")
                      (("1" (EXPAND "p_integrable?")
                        (("1" (FLATTEN)
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -3)
                              (("1" (HIDE -1 -3)
                                (("1"
                                  (LEMMA "integral_nonneg" ("f" "abs(g!1)"))
                                  (("1"
                                    (LEMMA "integral_nonneg"
                                     ("f" "abs(f!1*g!1)"))
                                    (("1" (REPLACE -3)
                                      (("1" (REPLACE -4)
                                        (("1" (HIDE -3 -4)
                                          (("1"
                                            (LEMMA "abs_complex_measurable"
                                             ("g" "f!1"))
                                            (("1"
                                              (LEMMA "integral_prod"
                                               ("h" "abs(f!1)" "nnc"
                                                "essential_bound(f!1)" "f"
                                                "abs(g!1)"))
                                              (("1"
                                                (CASE
                                                    "forall h: abs(abs(h)) = abs(h)")
                                                (("1" (INST-CP - "f!1")
                                                  (("1" (INST-CP - "g!1")
                                                    (("1" (REPLACE -2)
                                                      (("1" (REPLACE -3)
                                                        (("1"
                                                          (REWRITE
                                                           "essential_bound_def2")
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (CASE-REPLACE
                                                               "abs(g!1) * abs(f!1)=abs(f!1*g!1)")
                                                              (("1"
                                                                (INST -
                                                                 "f!1*g!1")
                                                                (("1" (ASSERT)
                                                                  (("1"
                                                                    (REWRITE
                                                                     "real_expt_x1")
                                                                    (("1"
                                                                      (REWRITE
                                                                       "real_expt_x1")
                                                                      (("1"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2"
                                                                (HIDE-ALL-BUT
                                                                 1)
                                                                (("2"
                                                                  (APPLY-EXTENSIONALITY
                                                                   :HIDE? T)
                                                                  (("2"
                                                                    (EXPAND
                                                                     "*")
                                                                    (("2"
                                                                      (EXPAND
                                                                       "abs")
                                                                      (("2"
                                                                        (ASSERT)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT 1)
                                                  (("2" (SKOSIMP)
                                                    (("2"
                                                      (APPLY-EXTENSIONALITY
                                                       :HIDE? T)
                                                      (("2" (EXPAND "abs")
                                                        (("2"
                                                          (TYPEPRED
                                                           "abs(h!1(x!1))")
                                                          (("2"
                                                            (EXPAND "abs" 1 1)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKOSIMP)
                  (("2" (SPLIT)
                    (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                      (("1" (EXPAND "^")
                        (("1" (EXPAND "abs")
                          (("1" (REWRITE "real_expt_x1") NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP)
                      (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integral_nonneg| FORMULA-DECL NIL |integral| |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|integral_prod| FORMULA-DECL NIL |integral| |measure_integration|)
    (|abs| CONST-DECL "nnreal" |polar| |complex|)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|Im_fun_mul1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Re_fun_mul1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|complex_abs_mul| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|integral| CONST-DECL "real" |integral| |measure_integration|)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|abs_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|norm| CONST-DECL "nnreal" |p_integrable_def| NIL))
   SHOSTAK)
  (|holder_infty_1-1| |nil| 3477804007
   ("" (SKOSIMP)
    (("" (LEMMA "holder_judge_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (TYPEPRED "f!1")
        (("" (TYPEPRED "g!1")
          (("" (EXPAND "norm")
            (("" (CASE "forall h: abs(h)^1 = abs(h) & forall x: abs(h)(x)>=0")
              (("1" (INST-CP - "f!1*g!1")
                (("1" (INST - "g!1")
                  (("1" (FLATTEN)
                    (("1" (EXPAND "essentially_bounded?")
                      (("1" (EXPAND "p_integrable?")
                        (("1" (FLATTEN)
                          (("1" (REPLACE -1)
                            (("1" (REPLACE -3)
                              (("1" (HIDE -1 -3)
                                (("1"
                                  (LEMMA "integral_nonneg" ("f" "abs(g!1)"))
                                  (("1"
                                    (LEMMA "integral_nonneg"
                                     ("f" "abs(f!1*g!1)"))
                                    (("1" (REPLACE -3)
                                      (("1" (REPLACE -4)
                                        (("1" (HIDE -3 -4)
                                          (("1" (REWRITE "real_expt_x1" 1)
                                            (("1" (REWRITE "real_expt_x1" 1)
                                              (("1"
                                                (LEMMA "abs_complex_measurable"
                                                 ("g" "f!1"))
                                                (("1"
                                                  (LEMMA "integral_prod"
                                                   ("h" "abs(f!1)" "nnc"
                                                    "essential_bound(f!1)" "f"
                                                    "abs(g!1)"))
                                                  (("1"
                                                    (CASE
                                                        "forall h: abs(abs(h)) = abs(h)")
                                                    (("1" (INST-CP - "f!1")
                                                      (("1" (INST-CP - "g!1")
                                                        (("1" (REPLACE -2)
                                                          (("1" (REPLACE -3)
                                                            (("1"
                                                              (REWRITE
                                                               "essential_bound_def2")
                                                              (("1" (FLATTEN)
                                                                (("1"
                                                                  (CASE-REPLACE
                                                                   "abs(g!1) * abs(f!1)=abs(f!1*g!1)")
                                                                  (("1"
                                                                    (INST -
                                                                     "f!1*g!1")
                                                                    (("1"
                                                                      (ASSERT)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (HIDE-ALL-BUT
                                                                     1)
                                                                    (("2"
                                                                      (APPLY-EXTENSIONALITY
                                                                       :HIDE?
                                                                       T)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "*")
                                                                        (("2"
                                                                          (EXPAND
                                                                           "abs")
                                                                          (("2"
                                                                            (REWRITE
                                                                             "abs_mult")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (HIDE-ALL-BUT 1)
                                                      (("2" (SKOSIMP)
                                                        (("2"
                                                          (APPLY-EXTENSIONALITY
                                                           :HIDE? T)
                                                          (("2" (EXPAND "abs")
                                                            (("2"
                                                              (TYPEPRED
                                                               "abs(h!1(x!1))")
                                                              (("2"
                                                                (EXPAND "abs" 1
                                                                        1)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (PROPAX) NIL NIL))
                                                  NIL)
                                                 ("2" (ASSERT) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (SKOSIMP)
                  (("2" (SPLIT)
                    (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                      (("1" (EXPAND "^")
                        (("1" (EXPAND "abs")
                          (("1" (REWRITE "real_expt_x1") NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (SKOSIMP)
                      (("2" (EXPAND "abs") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (^ CONST-DECL "[T -> nnreal]" |real_fun_power| |power|)
    (|integral_nonneg| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integral_prod| FORMULA-DECL NIL |integral| |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|abs_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|real_expt_x1| FORMULA-DECL NIL |real_expt| |power|)
    (|norm| CONST-DECL "nnreal" |p_integrable_def| NIL))
   SHOSTAK))
 (|holder_infty_2| 0
  (|holder_infty_2-2| "" 3789905821
   ("" (SKOSIMP)
    (("" (LEMMA "holder_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (CASE-REPLACE "norm(g!1 * f!1)=norm(f!1 * g!1)")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (EXPAND "norm")
            (("2" (ASSERT)
              (("2" (CASE-REPLACE "abs(g!1) * abs(f!1)=abs(f!1) * abs(g!1)")
                (("2" (EXPAND "abs")
                  (("2" (EXPAND "*") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|complex_abs_mul| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |complex_fun_ops| |complex|)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (|norm| CONST-DECL "nnreal" |p_integrable_def| NIL))
   SHOSTAK)
  (|holder_infty_2-1| |nil| 3477803870
   ("" (SKOSIMP)
    (("" (LEMMA "holder_infty_1" ("f" "f!1" "g" "g!1"))
      (("" (CASE-REPLACE "norm(g!1 * f!1)=norm(f!1 * g!1)")
        (("1" (ASSERT) NIL NIL)
         ("2" (HIDE-ALL-BUT 1)
          (("2" (EXPAND "norm")
            (("2" (ASSERT)
              (("2" (CASE-REPLACE "abs(g!1) * abs(f!1)=abs(f!1) * abs(g!1)")
                (("1" (EXPAND "abs")
                  (("1" (EXPAND "*") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                 ("2" (HIDE 2)
                  (("2" (ASSERT)
                    (("2" (EXPAND "*")
                      (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|p_integrable| NONEMPTY-TYPE-EQ-DECL NIL |p_integrable_def| NIL)
    (|p_integrable?| CONST-DECL "bool" |p_integrable_def| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|norm| CONST-DECL "nnreal" |p_integrable_def| NIL))
   SHOSTAK)))

