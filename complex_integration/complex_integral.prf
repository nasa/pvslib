(|complex_integral|
 (|mu_TCC1| 0
  (|mu_TCC1-1| |nil| 3476682253
   ("" (TYPEPRED "S")
    (("" (EXPAND "sigma_algebra?")
      (("" (FLATTEN)
        (("" (EXPAND "subset_algebra_empty?") (("" (ASSERT) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|subset_algebra_empty?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|))
   NIL
   (|mu| ASSUMING
    "measure_integration@generalized_measure_def[complex_integral.T, complex_integral.S].generalized_measure_def"
    "S_empty: ASSUMPTION generalized_measure_def.S(sets[generalized_measure_def.T].emptyset)"
    (16 48 16 65))))
 (|integrable_TCC1| 0
  (|integrable_TCC1-1| |nil| 3476682253
   ("" (EXPAND "integrable?")
    (("" (EXPAND "Re")
      (("" (EXPAND "Im")
        (("" (ASSERT) (("" (REWRITE "integrable_zero") NIL NIL)) NIL)) NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|integrable_zero| FORMULA-DECL NIL |integral| |measure_integration|))
   NIL
   (|integrable| SUBTYPE "(LAMBDA x: complex_types.complex_(0, 0))"
    "integrable" (30 48 30 71))))
 (|integral_TCC1| 0
  (|integral_TCC1-1| |nil| 3476767415
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "integrable?" -) (("" (FLATTEN) NIL NIL)) NIL)) NIL))
    NIL)
   NIL NIL
   (|integral| SUBTYPE
    "complex_fun_ops[complex_integral.T].Re(complex_integral.f)"
    "integrable[T, S, mu]" (32 53 32 58))))
 (|integral_TCC2| 0
  (|integral_TCC2-1| |nil| 3476767415
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "integrable?" -) (("" (FLATTEN) NIL NIL)) NIL)) NIL))
    NIL)
   NIL NIL
   (|integral| SUBTYPE
    "complex_fun_ops[complex_integral.T].Im(complex_integral.f)"
    "integrable[T, S, mu]" (32 69 32 74))))
 (|integrable_def| 0
  (|integrable_def-1| |nil| 3477202127
   ("" (SKOSIMP) (("" (EXPAND "integrable?" 1 1) (("" (PROPAX) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|Re_integral| 0
  (|Re_integral-1| |nil| 3477202145
   ("" (SKOSIMP)
    (("" (ASSERT) (("" (EXPAND "integral" 1 1) (("" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   NIL SHOSTAK))
 (|Im_integral| 0
  (|Im_integral-1| |nil| 3477202176
   ("" (SKOSIMP) (("" (EXPAND "integral" 1 1) (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL SHOSTAK))
 (|integrable_is_measurable| 0
  (|integrable_is_measurable-1| |nil| 3477465321
   ("" (SKOLEM + "f!1")
    (("" (TYPEPRED "f!1")
      (("" (ASSERT)
        (("" (FLATTEN)
          (("" (LEMMA "integrable_is_measurable")
            (("" (INST-CP - "Re(f!1)")
              (("" (INST - "Im(f!1)") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable_is_measurable| JUDGEMENT-TCC NIL |integral|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL))
   NIL
   (|integrable_is_measurable| SUBTYPE "complex_integral.x"
    "complex_measurable[T, S]" (47 38 47 48))))
 (|cal_N_is_measurable| 0
  (|cal_N_is_measurable-1| |nil| 3477465321
   ("" (SKOLEM + "f!1")
    (("" (TYPEPRED "f!1")
      (("" (REWRITE "cal_N_def")
        (("" (FLATTEN)
          (("" (ASSERT)
            (("" (SPLIT)
              (("1" (LEMMA "measurable_ae_0" ("h" "Re(f!1)"))
                (("1" (ASSERT) NIL NIL)) NIL)
               ("2" (LEMMA "measurable_ae_0" ("h" "Im(f!1)"))
                (("2" (ASSERT) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cal_N| NONEMPTY-TYPE-EQ-DECL NIL |complex_measure_theory| NIL)
    (|cal_N?| CONST-DECL "bool" |complex_measure_theory| NIL)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|measurable_ae_0| FORMULA-DECL NIL |integral| |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|cal_N_def| FORMULA-DECL NIL |complex_measure_theory| NIL))
   NIL
   (|cal_N_is_measurable| SUBTYPE "complex_integral.x" "integrable"
    (48 38 48 43))))
 (|integrable_add| 0
  (|integrable_add-2| "" 3789905745
   ("" (SKOSIMP)
    (("" (TYPEPRED "f1!1")
      (("" (TYPEPRED "f2!1")
        (("" (EXPAND "integrable?")
          (("" (FLATTEN)
            ((""
              (CASE-REPLACE "Re((+[T])(f1!1, f2!1)) = +[T](Re(f1!1),Re(f2!1))")
              (("1"
                (CASE-REPLACE
                 "Im((+[T])(f1!1, f2!1)) = +[T](Im(f1!1),Im(f2!1))")
                (("1" (ASSERT)
                  (("1" (REWRITE "integrable_add")
                    (("1" (REWRITE "integrable_add") NIL NIL)) NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable_add| JUDGEMENT-TCC NIL |integral| |measure_integration|))
   SHOSTAK
   (|integrable_add| SUBTYPE
    "(complex_fun_ops[complex_integral.T].+)(complex_integral.f1, complex_integral.f2)"
    "integrable" (50 29 50 30)))
  (|integrable_add-1| |nil| 3476682466
   ("" (SKOSIMP)
    (("" (TYPEPRED "f1!1")
      (("" (TYPEPRED "f2!1")
        (("" (EXPAND "integrable?")
          (("" (FLATTEN)
            ((""
              (CASE-REPLACE "Re((+[T])(f1!1, f2!1)) = +[T](Re(f1!1),Re(f2!1))")
              (("1"
                (CASE-REPLACE
                 "Im((+[T])(f1!1, f2!1)) = +[T](Im(f1!1),Im(f2!1))")
                (("1" (ASSERT)
                  (("1" (REWRITE "integrable_add")
                    (("1" (REWRITE "integrable_add") NIL NIL)) NIL))
                  NIL)
                 ("2" (HIDE-ALL-BUT 1)
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T) (("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE-ALL-BUT 1)
                (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable_add| JUDGEMENT-TCC NIL |integral| |measure_integration|))
   NIL
   (|integrable_add| SUBTYPE
    "(complex_fun_ops[complex_integral.T].+)(complex_integral.f1, complex_integral.f2)"
    "integrable" (50 29 50 30))))
 (|integrable_scal| 0
  (|integrable_scal-1| |nil| 3476682466
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (EXPAND "integrable?")
        (("" (FLATTEN)
          (("" (ASSERT)
            (("" (LEMMA "integrable_scal" ("c" "Re(c!1)" "f" "Re(f!1)"))
              (("" (LEMMA "integrable_scal" ("c" "Im(c!1)" "f" "Im(f!1)"))
                (("" (LEMMA "integrable_scal" ("c" "Im(c!1)" "f" "Re(f!1)"))
                  (("" (LEMMA "integrable_scal" ("c" "Re(c!1)" "f" "Im(f!1)"))
                    (("" (REWRITE "integrable_diff")
                      (("" (REWRITE "integral.integrable_add") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable_scal| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integrable_diff| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integrable_add| JUDGEMENT-TCC NIL |integral| |measure_integration|))
   NIL
   (|integrable_scal| SUBTYPE
    "complex_fun_ops[complex_integral.T].*(complex_integral.c, complex_integral.f)"
    "integrable" (51 29 51 30))))
 (|integrable_opp| 0
  (|integrable_opp-1| |nil| 3476682466
   ("" (SKOSIMP)
    (("" (ASSERT)
      (("" (TYPEPRED "f!1")
        (("" (EXPAND "integrable?" -)
          (("" (FLATTEN)
            (("" (REWRITE "integrable_opp")
              (("" (REWRITE "integrable_opp") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|integrable_opp| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|))
   NIL
   (|integrable_opp| SUBTYPE
    "(complex_fun_ops[complex_integral.T].-)(complex_integral.f)" "integrable"
    (52 29 52 30))))
 (|integrable_diff| 0
  (|integrable_diff-1| |nil| 3476682466
   ("" (SKOSIMP)
    (("" (TYPEPRED "f1!1")
      (("" (TYPEPRED "f2!1")
        (("" (ASSERT)
          (("" (FLATTEN)
            (("" (REWRITE "integrable_diff")
              (("" (REWRITE "integrable_diff") NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|integrable_diff| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|))
   NIL
   (|integrable_diff| SUBTYPE
    "(complex_fun_ops[complex_integral.T].-)(complex_integral.f1, complex_integral.f2)"
    "integrable" (53 29 53 30))))
 (|integrable_abs| 0
  (|integrable_abs-1| |nil| 3477710890
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (LEMMA "integrable_is_measurable")
        (("" (INST - "f!1")
          (("" (LEMMA "abs_complex_measurable" ("g" "f!1"))
            (("" (EXPAND "integrable?" -3)
              (("" (FLATTEN)
                (("" (LEMMA "integrable_abs" ("f" "Re(f!1)"))
                  (("1" (LEMMA "integrable_abs" ("f" "Im(f!1)"))
                    (("1"
                      (CASE
                          "forall x: abs(f!1)(x) <= (abs(Re(f!1))+abs(Im(f!1)))(x)")
                      (("1"
                        (LEMMA "integral.integrable_add"
                         ("f1" "abs[T](Re(f!1))" "f2" "abs[T](Im(f!1))"))
                        (("1"
                          (LEMMA "integral_ae_abs"
                           ("h" "abs(f!1)" "f" "abs(Re(f!1)) + abs(Im(f!1))"))
                          (("1" (ASSERT)
                            (("1" (HIDE-ALL-BUT (1 -2))
                              (("1" (EXPAND "ae_le?")
                                (("1" (EXPAND "pointwise_ae?")
                                  (("1" (EXPAND "ae?")
                                    (("1" (EXPAND "fullset")
                                      (("1" (EXPAND "ae_in?")
                                        (("1" (INST + "emptyset")
                                          (("1" (SKOSIMP)
                                            (("1" (EXPAND "member")
                                              (("1" (HIDE 1)
                                                (("1" (INST - "x!1")
                                                  (("1" (EXPAND "abs" -1 1)
                                                    (("1" (EXPAND "abs" 1 1)
                                                      (("1" (EXPAND "abs" 1 2)
                                                        (("1"
                                                          (EXPAND "abs" 1 1)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "abs" 1
                                                                      2)
                                                              (("1"
                                                                (EXPAND "abs" 1
                                                                        2)
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (PROPAX) NIL NIL))
                          NIL)
                         ("2" (PROPAX) NIL NIL) ("3" (PROPAX) NIL NIL))
                        NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (SKOSIMP)
                          (("2" (EXPAND "abs")
                            (("2" (EXPAND "+")
                              (("2" (EXPAND "Im")
                                (("2" (EXPAND "Re")
                                  (("2" (EXPAND "abs" 1 1)
                                    (("2" (EXPAND "sq_abs")
                                      (("2"
                                        (LEMMA "sq_le"
                                         ("nna"
                                          "sqrt(sq(Im(f!1(x!1))) + sq(Re(f!1(x!1))))"
                                          "nnb"
                                          "abs(Im(f!1(x!1))) + abs(Re(f!1(x!1)))"))
                                        (("2" (REPLACE -1 1 RL)
                                          (("2" (HIDE -1)
                                            (("2" (REWRITE "sq_sqrt")
                                              (("2" (REWRITE "sq_plus" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (PROPAX) NIL NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable_abs| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|integral_ae_abs| FORMULA-DECL NIL |integral| |measure_integration|)
    (|measurable_function?| CONST-DECL "bool" |measure_space_def|
     |measure_integration|)
    (|measurable_function| NONEMPTY-TYPE-EQ-DECL NIL |measure_space_def|
     |measure_integration|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|complex_measurable_def| FORMULA-DECL NIL |complex_measurable| NIL)
    (|integrable_add| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sq_abs| FORMULA-DECL NIL |sq| |reals|)
    (|sq_plus| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq_le| FORMULA-DECL NIL |sq| |reals|)
    (|abs_complex_measurable| JUDGEMENT-TCC NIL |complex_measurable| NIL)
    (|complex_measurable?| CONST-DECL "bool" |complex_measurable| NIL)
    (|complex_measurable| NONEMPTY-TYPE-EQ-DECL NIL |complex_measurable| NIL)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|))
   NIL
   (|integrable_abs| SUBTYPE
    "complex_fun_ops[complex_integral.T].abs(complex_integral.f)"
    "integrable[T, S, mu]" (54 29 54 32))))
 (|integral_add| 0
  (|integral_add-1| |nil| 3476767793
   ("" (SKOSIMP)
    (("" (EXPAND "integral")
      (("" (ASSERT)
        (("" (TYPEPRED "f1!1")
          (("" (TYPEPRED "f2!1")
            (("" (EXPAND "integrable?")
              (("" (FLATTEN)
                (("" (REWRITE "integral_add")
                  (("" (REWRITE "integral_add")
                    (("" (EXPAND "complex_")
                      (("" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|integral_add| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|integral| CONST-DECL "real" |integral| |measure_integration|))
   SHOSTAK))
 (|integral_scal| 0
  (|integral_scal-1| |nil| 3476767954
   ("" (SKOSIMP)
    (("" (ASSERT)
      (("" (TYPEPRED "f!1")
        (("" (EXPAND "integrable?")
          (("" (FLATTEN)
            ((""
              (LEMMA "integral.integrable_scal" ("c" "Re(c!1)" "f" "Re(f!1)"))
              (("1"
                (LEMMA "integral.integrable_scal"
                 ("c" "Im(c!1)" "f" "Re(f!1)"))
                (("1"
                  (LEMMA "integral.integrable_scal"
                   ("c" "Re(c!1)" "f" "Im(f!1)"))
                  (("1"
                    (LEMMA "integral.integrable_scal"
                     ("c" "Im(c!1)" "f" "Im(f!1)"))
                    (("1" (EXPAND "*" 1 2)
                      (("1" (EXPAND "integral" 1 1)
                        (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                          (("1" (REWRITE "integral.integral_add" 1)
                            (("1" (REWRITE "integral_scal" 1)
                              (("1" (REWRITE "integral_scal" 1) NIL NIL)) NIL))
                            NIL)
                           ("2" (REWRITE "integral_diff" 1)
                            (("2" (REWRITE "integral_scal" 1)
                              (("2" (REWRITE "integral_scal" 1) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (PROPAX) NIL NIL))
                  NIL))
                NIL)
               ("2" (PROPAX) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable_scal| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integral| CONST-DECL "real" |integral| |measure_integration|)
    (|integral_scal| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integral_add| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integral_diff| FORMULA-DECL NIL |integral| |measure_integration|))
   SHOSTAK))
 (|integral_opp| 0
  (|integral_opp-1| |nil| 3477202455
   ("" (SKOSIMP)
    (("" (LEMMA "integral_scal" ("f" "f!1" "c" "complex_(-1,0)"))
      (("" (ASSERT)
        (("" (CASE-REPLACE "complex_(-1, 0) * f!1 = -f!1")
          (("" (HIDE-ALL-BUT 1)
            (("" (GRIND)
              (("1" (DECOMPOSE-EQUALITY) (("1" (GRIND) NIL NIL)) NIL)
               ("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|integrable| NONEMPTY-TYPE-EQ-DECL NIL |complex_integral| NIL)
    (|integrable?| CONST-DECL "bool" |complex_integral| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |complex_integral| NIL)
    (|complex_| CONST-DECL "complex" |complex_types| |complex|)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|complex| TYPE-EQ-DECL NIL |complex_types| |complex|)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|integral_scal| FORMULA-DECL NIL |complex_integral| NIL)
    (- CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (* CONST-DECL "[T -> complex]" |complex_fun_ops| |complex|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|c_fun_eq1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Im_fun_neg1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Im_fun_mul2| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Re_fun_neg1| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|Re_fun_mul2| FORMULA-DECL NIL |complex_fun_ops| |complex|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (+ CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (* CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|Re| CONST-DECL "[T -> real]" |complex_fun_ops| |complex|)
    (|Im| CONST-DECL "[T -> real]" |complex_fun_ops| |complex|)
    (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (- CONST-DECL "[T -> real]" |real_fun_ops| |reals|)
    (|integrable_opp| APPLICATION-JUDGEMENT "integrable" |complex_integral|
     NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|integrable_scal| APPLICATION-JUDGEMENT "integrable" |complex_integral|
     NIL)
    (|complex_n1_mult| FORMULA-DECL NIL |complex_types| |complex|))
   SHOSTAK))
 (|integral_diff| 0
  (|integral_diff-1| |nil| 3477202588
   ("" (SKOSIMP)
    (("" (LEMMA "integral_opp" ("f" "f2!1"))
      (("" (LEMMA "integral_add" ("f1" "f1!1" "f2" "-f2!1"))
        (("" (CASE-REPLACE "f1!1 + -f2!1=f1!1 - f2!1")
          (("1" (EXPAND "=" -1)
            (("1" (FLATTEN)
              (("1" (EXPAND "integral" (1 -3))
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1" (REPLACE -1 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT 1)
            (("2" (GRIND)
              (("1" (EXPAND "-")
                (("1" (EXPAND "+")
                  (("1" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                NIL)
               ("2" (EXPAND "+")
                (("2" (EXPAND "-")
                  (("2" (APPLY-EXTENSIONALITY :HIDE? T) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|integral| CONST-DECL "real" |integral| |measure_integration|))
   SHOSTAK))
 (|integral_abs| 0
  (|integral_abs-1| |nil| 3477711946
   ("" (SKOSIMP)
    (("" (TYPEPRED "f!1")
      (("" (LEMMA "integrable_abs" ("f" "f!1"))
        ((""
          (CASE
              "EXISTS (c:complex): abs(c) = 1 AND LET z = c * integral(f!1), x = abs(integral(f!1)) IN x = Re(z) AND Im(z) = 0 ")
          (("1" (SKOSIMP)
            (("1" (BETA -2)
              (("1" (FLATTEN)
                (("1" (ASSERT)
                  (("1" (TYPEPRED "abs(integral(f!1))")
                    (("1" (REPLACE -3)
                      (("1" (HIDE -3)
                        (("1" (NAME "A" "Re(c!1)")
                          (("1" (REPLACE -1)
                            (("1" (NAME "B" "Im(c!1)")
                              (("1" (REPLACE -1)
                                (("1" (NAME "G" "Re(f!1)")
                                  (("1" (REPLACE -1)
                                    (("1" (NAME "H" "Im(f!1)")
                                      (("1" (REPLACE -1)
                                        (("1"
                                          (CASE
                                              "A * integral.integral(G) - B *integral.integral(H) <= integral.integral(abs(A*G-B*H))")
                                          (("1"
                                            (LEMMA "integral_ae_le"
                                             ("f1" "abs(A * G - B * H)" "f2"
                                              "abs(f!1)"))
                                            (("1" (ASSERT)
                                              (("1" (FLATTEN)
                                                (("1"
                                                  (HIDE -1 -6 -8 -9 -10 -11 2)
                                                  (("1" (EXPAND "ae_le?")
                                                    (("1"
                                                      (EXPAND "pointwise_ae?")
                                                      (("1" (EXPAND "ae?")
                                                        (("1"
                                                          (EXPAND "fullset")
                                                          (("1"
                                                            (EXPAND "ae_in?")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST +
                                                                 "emptyset")
                                                                (("1" (SKOSIMP)
                                                                  (("1"
                                                                    (HIDE 1)
                                                                    (("1"
                                                                      (CASE-REPLACE
                                                                       "abs(f!1)=abs(c!1*f!1)")
                                                                      (("1"
                                                                        (HIDE
                                                                         -1)
                                                                        (("1"
                                                                          (EXPAND
                                                                           "abs"
                                                                           1)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "*"
                                                                             1)
                                                                            (("1"
                                                                              (EXPAND
                                                                               "-"
                                                                               1)
                                                                              (("1"
                                                                                (LEMMA
                                                                                 "sq_le"
                                                                                 ("nna"
                                                                                  "abs(A * G(x!1) - B * H(x!1))"
                                                                                  "nnb"
                                                                                  "abs(c!1 * f!1(x!1))"))
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   1
                                                                                   RL)
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REWRITE
                                                                                       "sq_abs")
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "sq_minus")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "sq_times")
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "sq_times")
                                                                                            (("1"
                                                                                              (CASE
                                                                                                  "sq(A) * sq(G(x!1)) + sq(B) * sq(H(x!1)) -
                                 2 * (G(x!1) * H(x!1) * A * B)
                                 <= (sq(A)+sq(B))*(sq(G(x!1))+sq(H(x!1)))")
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "abs_mult"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REPLACE
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "sq_times"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (REWRITE
                                                                                                       "one_times")
                                                                                                      (("1"
                                                                                                        (CASE-REPLACE
                                                                                                         "sq(abs(f!1(x!1)))=sq(G(x!1)) + sq(H(x!1))")
                                                                                                        (("1"
                                                                                                          (CASE-REPLACE
                                                                                                           "sq(A) + sq(B)=1")
                                                                                                          (("1"
                                                                                                            (ASSERT)
                                                                                                            NIL
                                                                                                            NIL)
                                                                                                           ("2"
                                                                                                            (HIDE-ALL-BUT
                                                                                                             (1
                                                                                                              -5
                                                                                                              -6
                                                                                                              -7))
                                                                                                            (("2"
                                                                                                              (EXPAND
                                                                                                               "abs")
                                                                                                              (("2"
                                                                                                                (LEMMA
                                                                                                                 "sq_eq_rew"
                                                                                                                 ("a"
                                                                                                                  "sqrt(sq_abs(c!1))"
                                                                                                                  "b"
                                                                                                                  "1"))
                                                                                                                (("2"
                                                                                                                  (REWRITE
                                                                                                                   "sq_sqrt")
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "sq_abs")
                                                                                                                    (("2"
                                                                                                                      (ASSERT)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL)
                                                                                                         ("2"
                                                                                                          (HIDE-ALL-BUT
                                                                                                           (-2
                                                                                                            -3
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (EXPAND
                                                                                                             "abs")
                                                                                                            (("2"
                                                                                                              (REWRITE
                                                                                                               "sq_sqrt")
                                                                                                              (("2"
                                                                                                                (EXPAND
                                                                                                                 "sq_abs")
                                                                                                                (("2"
                                                                                                                  (ASSERT)
                                                                                                                  (("2"
                                                                                                                    (EXPAND
                                                                                                                     "G")
                                                                                                                    (("2"
                                                                                                                      (EXPAND
                                                                                                                       "H")
                                                                                                                      (("2"
                                                                                                                        (EXPAND
                                                                                                                         "Im"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (EXPAND
                                                                                                                           "Re"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (PROPAX)
                                                                                                                            NIL
                                                                                                                            NIL))
                                                                                                                          NIL))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL)
                                                                                               ("2"
                                                                                                (HIDE
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (ASSERT)
                                                                                                  (("2"
                                                                                                    (CASE
                                                                                                        "0 <= sq(H(x!1)) * sq(A) +sq(G(x!1)) * sq(B)+2 * (G(x!1) * H(x!1) * A * B)")
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (HIDE
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (TYPEPRED
                                                                                                         "sq(A*H(x!1)+B*G(x!1))")
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "sq_plus")
                                                                                                          (("2"
                                                                                                            (REWRITE
                                                                                                             "sq_times")
                                                                                                            (("2"
                                                                                                              (REWRITE
                                                                                                               "sq_times")
                                                                                                              (("2"
                                                                                                                (ASSERT)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (HIDE-ALL-BUT
                                                                         (-5
                                                                          1))
                                                                        (("2"
                                                                          (APPLY-EXTENSIONALITY
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "abs"
                                                                             1)
                                                                            (("2"
                                                                              (EXPAND
                                                                               "*"
                                                                               1)
                                                                              (("2"
                                                                                (REWRITE
                                                                                 "abs_mult")
                                                                                (("2"
                                                                                  (REPLACE
                                                                                   -1)
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE 2)
                                            (("2"
                                              (REWRITE "integral.integral_scal"
                                               1 :DIR RL)
                                              (("2"
                                                (REWRITE
                                                 "integral.integral_scal" 1
                                                 :DIR RL)
                                                (("2"
                                                  (REWRITE
                                                   "integral.integral_diff" 1
                                                   :DIR RL)
                                                  (("2"
                                                    (LEMMA "integral_abs"
                                                     ("f" "A * G - B * H"))
                                                    (("2" (EXPAND "abs" -1 1)
                                                      (("2" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (HIDE -5 -7 -8 2)
                                            (("3"
                                              (REWRITE
                                               "integral.integrable_abs")
                                              (("3"
                                                (REWRITE
                                                 "integral.integrable_diff")
                                                (("1"
                                                  (REWRITE
                                                   "integral.integrable_scal")
                                                  NIL NIL)
                                                 ("2"
                                                  (REWRITE
                                                   "integral.integrable_scal")
                                                  NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 2)
            (("2" (CASE "integral(f!1) = complex_(0,0)")
              (("1" (INST + "complex_(1,0)")
                (("1" (SPLIT)
                  (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (FLATTEN)
                      (("2" (EXPAND "integral" 1 1)
                        (("2" (EXPAND "complex_")
                          (("2" (DECOMPOSE-EQUALITY -1)
                            (("2" (ASSERT)
                              (("2" (REPLACE -1)
                                (("2" (REPLACE -2)
                                  (("2" (HIDE-ALL-BUT 1)
                                    (("2" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (INST + "abs(integral(f!1))/integral(f!1)")
                (("1" (NAME-REPLACE "INT" "integral(f!1)")
                  (("1" (HIDE -1 -2)
                    (("1" (REWRITE "abs_div3" 2)
                      (("1" (REWRITE "div_simp")
                        (("1" (LEMMA "abs_is_0" ("z" "INT"))
                          (("1" (NAME-REPLACE "AI" "abs(INT)")
                            (("1"
                              (LEMMA "complex_div_cancel2"
                               ("z" "complex_(AI,0)" "n0z" "INT"))
                              (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE 3)
                          (("2" (EXPAND "/=")
                            (("2" (REWRITE "abs_is_0") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (GRIND) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|setofsets| TYPE-EQ-DECL NIL |sets| NIL)
    (|sigma_algebra?| CONST-DECL "bool" |subset_algebra_def|
     |measure_integration|)
    (|sigma_algebra| NONEMPTY-TYPE-EQ-DECL NIL |subset_algebra_def|
     |measure_integration|)
    (|extended_nnreal| NONEMPTY-TYPE-EQ-DECL NIL |extended_nnreal|
     |extended_nnreal|)
    (|measure?| CONST-DECL "bool" |generalized_measure_def|
     |measure_integration|)
    (|measure_type| NONEMPTY-TYPE-EQ-DECL NIL |generalized_measure_def|
     |measure_integration|)
    (|integrable?| CONST-DECL "bool" |integral| |measure_integration|)
    (|integrable| NONEMPTY-TYPE-EQ-DECL NIL |integral| |measure_integration|)
    (|integral| CONST-DECL "real" |integral| |measure_integration|)
    (|abs| CONST-DECL "[T -> nonneg_real]" |real_fun_ops| |reals|)
    (|pointwise_ae?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|fullset| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|sq_abs| FORMULA-DECL NIL |sq| |reals|)
    (|sq_times| FORMULA-DECL NIL |sq| |reals|)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sq_sqrt| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|sq_eq_rew| FORMULA-DECL NIL |sq| |reals|)
    (|sq_1| FORMULA-DECL NIL |sq| |reals|)
    (|sq_nz_pos| APPLICATION-JUDGEMENT "posreal" |sq| |reals|)
    (|sq_plus| FORMULA-DECL NIL |sq| |reals|)
    (|sq_minus| FORMULA-DECL NIL |sq| |reals|)
    (|sq_le| FORMULA-DECL NIL |sq| |reals|) (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|negligible_set?| CONST-DECL "bool" |measure_theory|
     |measure_integration|)
    (|negligible| NONEMPTY-TYPE-EQ-DECL NIL |measure_theory|
     |measure_integration|)
    (|emptyset| CONST-DECL "set" |sets| NIL)
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|ae_in?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|ae_le?| CONST-DECL "bool" |measure_theory| |measure_integration|)
    (|integral_ae_le| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integral_scal| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integral_diff| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integral_abs| FORMULA-DECL NIL |integral| |measure_integration|)
    (|integrable_abs| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integrable_scal| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|integrable_diff| JUDGEMENT-TCC NIL |integral| |measure_integration|)
    (|sqrt_1| FORMULA-DECL NIL |sqrt| |reals|)
    (|sqrt_0| FORMULA-DECL NIL |sqrt| |reals|))
   SHOSTAK)))

