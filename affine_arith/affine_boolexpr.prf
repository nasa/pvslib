(|affine_boolexpr| (|beval_vs_BCONST_TCC1| 0 (|beval_vs_BCONST_TCC1-1| |nil| 3640260933 ("" (SUBTYPE-TCC) NIL NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|beval_vs_BCONST| SUBTYPE "affine_boolexpr.ctxt WITH [`result := Maybe[booleans.boolean].Some(IntervalExpr_adt.opb(affine_boolexpr.bexpr))]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt))"))) (|beval_vs_BNOT_TCC1| 0 (|beval_vs_BNOT_TCC1-1| |nil| 3640260933 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bop| ADT-ACCESSOR-DECL "[(bnot?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|beval_vs_BNOT| SUBTYPE "affine_boolexpr.ctxt WITH [`result := IF Maybe[bool].some?(affine_boolexpr.ctxt`result) THEN Maybe[bool].Some((booleans.NOT)(Maybe[bool].val(affine_boolexpr.ctxt`result))) ELSE Maybe[bool].None ENDIF]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BAND_TCC1| 0 (|beval_vs_BAND_TCC1-1| |nil| 3640336403 ("" (SKEEP*) (("" (EXPAND "beval_vs_post") (("" (ASSERT) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (TYPEPRED "ctxt2") (("1" (EXPAND "beval_vs_post") (("1" (TYPEPRED "ctxt1") (("1" (EXPAND "beval_vs_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKEEP) (("1" (INST -1 "n") (("1" (INST -3 "n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 2) (("2" (TYPEPRED "ctxt1") (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (TYPEPRED "ctxt2") (("2" (EXPAND "beval_vs_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|beval_vs_BAND| SUBTYPE "affine_boolexpr.ctxt2 WITH [`result := IF booleans.AND(Maybe[bool].some?(affine_boolexpr.ctxt1`result), Maybe[bool].some?(affine_boolexpr.ctxt2`result)) THEN Maybe[bool].Some(booleans.AND(Maybe[bool].val(affine_boolexpr.ctxt1`result), Maybe[bool].val(affine_boolexpr.ctxt2`result))) ELSE Maybe[bool].None ENDIF]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BOR_TCC1| 0 (|beval_vs_BOR_TCC1-1| |nil| 3640336403 ("" (SKEEP* :PREDS? T) (("" (EXPAND "beval_vs_post") (("" (FLATTEN) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|beval_vs_BOR| SUBTYPE "affine_boolexpr.ctxt2 WITH [`result := IF booleans.AND(Maybe[bool].some?(affine_boolexpr.ctxt1`result), Maybe[bool].some?(affine_boolexpr.ctxt2`result)) THEN Maybe[bool].Some(booleans.OR(Maybe[bool].val(affine_boolexpr.ctxt1`result), Maybe[bool].val(affine_boolexpr.ctxt2`result))) ELSE Maybe[bool].None ENDIF]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BIMPLIES_TCC1| 0 (|beval_vs_BIMPLIES_TCC1-1| |nil| 3640258683 ("" (SKEEP* :PREDS? T) (("" (EXPAND "beval_vs_post") (("" (FLATTEN) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|beval_vs_BIMPLIES| SUBTYPE "affine_boolexpr.ctxt2 WITH [`result := IF booleans.AND(Maybe[bool].some?(affine_boolexpr.ctxt1`result), Maybe[bool].some?(affine_boolexpr.ctxt2`result)) THEN Maybe[bool].Some(booleans.IMPLIES(Maybe[bool].val(affine_boolexpr.ctxt1`result), Maybe[bool].val(affine_boolexpr.ctxt2`result))) ELSE Maybe[bool].None ENDIF]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BINCLUDES_TCC1| 0 (|beval_vs_BINCLUDES_TCC1-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) ((|##| CONST-DECL "bool" |interval| |interval_arith|) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|beval_vs_BINCLUDES| SUBTYPE "affine_boolexpr.ctxt WITH [`result := Maybe[bool].Some(interval.##(interval_expr.eval(IntervalExpr_adt.op(affine_boolexpr.bexpr), affine_boolexpr.ctxt`vs, affine_boolexpr.ctxt`n), IntervalExpr_adt.opi(affine_boolexpr.bexpr)))]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt))"))) (|beval_vs_BREL_TCC1| 0 (|beval_vs_BREL_TCC1-1| |nil| 3640445453 ("" (SUBTYPE-TCC) NIL NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|beval_vs_BREL| SUBTYPE "affine_boolexpr.ctxt WITH [`result := Maybe[bool].Some(IntervalExpr_adt.rel(affine_boolexpr.bexpr)(interval_expr.eval(IntervalExpr_adt.op1(affine_boolexpr.bexpr), affine_boolexpr.ctxt`vs, affine_boolexpr.ctxt`n), interval_expr.eval(IntervalExpr_adt.op2(affine_boolexpr.bexpr), affine_boolexpr.ctxt`vs, affine_boolexpr.ctxt`n)))]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt))"))) (|beval_vs_BLETIN_RealExpr_ini_TCC1| 0 (|beval_vs_BLETIN_RealExpr_ini_TCC1-1| |nil| 3638182539 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)) NIL (|beval_vs_BLETIN_RealExpr_ini| SUBTYPE "affine_boolexpr.rexpr" "RealExpr"))) (|beval_vs_BLETIN_RealExpr_TCC1| 0 (|beval_vs_BLETIN_RealExpr_TCC1-1| |nil| 3640447145 ("" (SKEEP* :PREDS? T) (("" (EXPAND "beval_vs_post") (("" (FLATTEN) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|beval_vs_BLETIN_RealExpr_ini| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|eval| DEF-DECL "real" |interval_expr| |interval_arith|) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|sq| CONST-DECL "nonneg_real" |sq| |reals|) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|blet| ADT-ACCESSOR-DECL "[(bletin?) -> IntervalExpr]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|beval_vs_BLETIN_RealExpr| SUBTYPE "affine_boolexpr.ctxt" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BLETIN_BoolExpr_TCC1| 0 (|beval_vs_BLETIN_BoolExpr_TCC1-1| |nil| 3640447145 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|boolexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|blet| ADT-ACCESSOR-DECL "[(bletin?) -> IntervalExpr]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bin| ADT-ACCESSOR-DECL "[(bletin?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|beval_vs_BLETIN_BoolExpr| SUBTYPE "affine_boolexpr.ctxt0 WITH [`result := affine_boolexpr.ctxt2`result]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BITE_TCC1| 0 (|beval_vs_BITE_TCC1-1| |nil| 3640445453 ("" (SKEEP* :PREDS? T) (("" (EXPAND "beval_vs_BITE_merge1") (("" (EXPAND "beval_vs_BITE_merge2") (("" (EXPAND "beval_vs_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKEEP) (("" (INST -9 "n") (("" (INST -6 "n") (("" (INST -3 "n") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_BITE_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|beval_vs_BITE_merge2| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|beval_vs_BITE| SUBTYPE "affine_boolexpr.ctxt3 WITH [result := affine_boolexpr.ctxt2`result]" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BITE_TCC2| 0 (|beval_vs_BITE_TCC2-1| |nil| 3640445453 ("" (SKEEP* :PREDS? T) (("" (EXPAND "beval_vs_BITE_merge1") (("" (EXPAND "beval_vs_BITE_merge2") (("" (EXPAND "beval_vs_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKEEP) (("" (INST -3 "n") (("" (INST -6 "n") (("" (INST -9 "n") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_BITE_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|beval_vs_BITE_merge2| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|beval_vs_BITE| SUBTYPE "affine_boolexpr.ctxt3" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|beval_vs_BITE_TCC3| 0 (|beval_vs_BITE_TCC3-1| |nil| 3640445453 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BITE_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|belse| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BITE_merge2| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|beval_vs_BITE| SUBTYPE "affine_boolexpr.ctxt1" "(affine_boolexpr.beval_vs_post(affine_boolexpr.bexpr, affine_boolexpr.ctxt0))"))) (|first_noise_idx_available_box_TCC1| 0 (|first_noise_idx_available_box_TCC1-1| |nil| 3638705326 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|first_noise_idx_available_box| SUBTYPE "(number_fields.+)((number_fields.+)(interval_bexpr.max_local_vars_count(affine_boolexpr.bexpr), affine_box.last_idx_in_box(affine_boolexpr.box)), 1)" "nat"))) (|mk_CDBB_TCC1| 0 (|mk_CDBB_TCC1-1| |nil| 3638705326 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|mk_CDBB| SUBTYPE "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.box), 1)" "above(affine_box.last_idx_in_box(affine_boolexpr.box))"))) (|mk_CDBB_TCC2| 0 (|mk_CDBB_TCC2-1| |nil| 3645894564 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|mk_CDBB| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some((# `result := affine_boolexpr.result, `box := affine_boolexpr.box, `nextid := affine_boolexpr.nextid, `cache := affine_boolexpr.cache, nxtlcl := (number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.box), 1) #))" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BCONST_TCC1| 0 (|BEval_Box_BCONST_TCC1-1| |nil| 3638705326 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (INST 1 "null") (("" (ASSERT) (("" (EXPAND "append") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BCONST| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt_) WITH [`result := Maybe[booleans.boolean].Some(IntervalExpr_adt.opb(affine_boolexpr.bexpr))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BCONST_TCC2| 0 (|BEval_Box_BCONST_TCC2-1| |nil| 3638705326 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BCONST| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BNOT_TCC1| 0 (|BEval_Box_BNOT_TCC1-1| |nil| 3638705326 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bop| ADT-ACCESSOR-DECL "[(bnot?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BNOT| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[bool].Some((booleans.NOT)(Maybe[bool].val(affine_boolexpr.ctxt_`result)))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BNOT_TCC2| 0 (|BEval_Box_BNOT_TCC2-1| |nil| 3640260933 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bop| ADT-ACCESSOR-DECL "[(bnot?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BNOT| SUBTYPE "affine_boolexpr.ctxt_" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BNOT_TCC3| 0 (|BEval_Box_BNOT_TCC3-1| |nil| 3640260933 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BNOT| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|mk_result_TCC1| 0 (|mk_result_TCC1-1| |nil| 3640177658 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|mk_result| SUBTYPE "affine_boolexpr.c1" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BAND_TCC1| 0 (|BEval_Box_BAND_TCC1-1| |nil| 3638705326 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BAND_TCC2| 0 (|BEval_Box_BAND_TCC2-1| |nil| 3638705326 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)) NIL (|BEval_Box_BAND| SUBTYPE "affine_boolexpr.ctxt1_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BAND_TCC3| 0 (|BEval_Box_BAND_TCC3-1| |nil| 3640075840 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result" "(Maybe[bool].some?)"))) (|BEval_Box_BAND_TCC4| 0 (|BEval_Box_BAND_TCC4-1| |nil| 3640336403 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)) NIL (|BEval_Box_BAND| SUBTYPE "affine_boolexpr.ctxt2_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BAND_TCC5| 0 (|BEval_Box_BAND_TCC5-3| "" 3789916601 ("" (SKEEP*) NIL NIL) NIL SHOSTAK (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC5-2| |nil| 3646478706 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACES -3) (("1" (SKOLEM -5 "l1") (("1" (INST 3 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC5-1| |nil| 3640336403 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BAND_TCC6| 0 (|BEval_Box_BAND_TCC6-3| "" 3758872810 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (SKOLEM -4 "l0") (("1" (SKOLEM -7 "l1") (("1" (REPLACES -3) (("1" (INST 3 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC6-2| |nil| 3646478750 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (SKOLEM -4 "l0") (("1" (SKOLEM -7 "l1") (("1" (REPLACES -3) (("1" (INST 4 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC6-1| |nil| 3640336403 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 1) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOLEM -3 "l0") (("2" (REPLACE -3 :HIDE? T) (("2" (SKOLEM -7 "l1") (("2" (INST 1 "append(l1,l0)") (("2" (USE "append_assoc[CacheData]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BAND_TCC7| 0 (|BEval_Box_BAND_TCC7-1| "" 3758872883 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -6 "l1") (("" (REPLACES -3) (("" (INST 4 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC8-2| |nil| 3646478823 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -6 "l1") (("" (REPLACES -3) (("" (INST 5 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC8-1| |nil| 3640336403 ("" (SKEEP*) (("" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "mk_result") (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (HIDE 1) (("1" (ASSERT) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (TYPEPRED "ctxt1_") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mk_result") (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "ctxt2_") (("1" (EXPAND "BEval_Box_post") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (TYPEPRED "ctxt1_") (("1" (EXPAND "BEval_Box_post") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (SKOLEM -7 "l1") (("1" (INST 1 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BAND_TCC8| 0 (|BEval_Box_BAND_TCC7-2| |nil| 3646478800 ("" (SKEEP*) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (SKOLEM -6 "l1") (("1" (INST 4 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BAND| SUBTYPE "affine_boolexpr.ctxt2_" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC7-1| |nil| 3640336403 ("" (SKEEP*) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -8 "l1") (("" (INST 2 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "affine_boolexpr.ctxt2_" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BAND_TCC9| 0 (|BEval_Box_BAND_TCC9-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BAND_TCC10| 0 (|BEval_Box_BAND_TCC10-2| "" 3758873074 ("" (SKEEP*) (("" (ASSERT) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -6 "l1") (("" (REPLACES -3) (("" (INST 5 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(booleans.FALSE)])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BAND_TCC10-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BAND| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(booleans.FALSE)])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BOR_TCC1| 0 (|BEval_Box_BOR_TCC1-1| |nil| 3639939268 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BOR_TCC2| 0 (|BEval_Box_BOR_TCC2-1| |nil| 3639939268 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)) NIL (|BEval_Box_BOR| SUBTYPE "affine_boolexpr.ctxt1_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BOR_TCC3| 0 (|BEval_Box_BOR_TCC3-1| |nil| 3640075228 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result" "(Maybe[bool].some?)"))) (|BEval_Box_BOR_TCC4| 0 (|BEval_Box_BOR_TCC4-2| "" 3789916608 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BOR| SUBTYPE "affine_boolexpr.ctxt2_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)")) (|BEval_Box_BOR_TCC4-1| |nil| 3640336403 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 1) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOLEM -3 "l0") (("2" (REPLACE -3 :HIDE? T) (("2" (SKOLEM -7 "l1") (("2" (INST 1 "append(l1,l0)") (("2" (USE "append_assoc[CacheData]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "affine_boolexpr.ctxt2_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BOR_TCC5| 0 (|BEval_Box_BOR_TCC5-3| "" 3789916608 ("" (SKEEP*) NIL NIL) NIL SHOSTAK (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC5-2| |nil| 3646478851 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 3) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACE -3 :HIDE? T) (("1" (SKOLEM -5 "l1") (("1" (INST 1 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC5-1| |nil| 3640336403 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BOR_TCC6| 0 (|BEval_Box_BOR_TCC6-3| "" 3758873273 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -5 "l1") (("" (INST + "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC6-2| |nil| 3646478874 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -5 "l1") (("" (INST 4 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC6-1| |nil| 3640336403 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 2) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ctxt1_") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "some?(ctxt2_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -4 "l0") (("1" (REPLACE -4 :HIDE? T) (("1" (SKOLEM -7 "l1") (("1" (INST 1 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BOR_TCC7| 0 (|BEval_Box_BOR_TCC7-3| "" 3789916610 ("" (SKEEP*) (("" (ASSERT) (("" (SPLIT 4) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (TYPEPRED "ctxt1_") (("2" (ASSERT) (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOLEM -3 "l0") (("2" (REPLACES -3) (("2" (SKOLEM -5 "l1") (("2" (INST 1 "append(l1,l0)") (("2" (USE "append_assoc[CacheData]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC7-2| |nil| 3646478896 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 4) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (TYPEPRED "ctxt1_") (("2" (ASSERT) (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOLEM -3 "l0") (("2" (REPLACES -3) (("2" (SKOLEM -5 "l1") (("2" (INST 1 "append(l1,l0)") (("2" (USE "append_assoc[CacheData]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC7-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BOR_TCC8| 0 (|BEval_Box_BOR_TCC8-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BOR_TCC9| 0 (|BEval_Box_BOR_TCC9-2| "" 3758873329 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -6 "l1") (("" (REPLACES -3) (("" (INST + "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(booleans.TRUE)])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BOR_TCC9-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BOR| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(booleans.TRUE)])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BIMPLIES_TCC1| 0 (|BEval_Box_BIMPLIES_TCC1-1| |nil| 3639939268 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BIMPLIES_TCC2| 0 (|BEval_Box_BIMPLIES_TCC2-1| |nil| 3639939268 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)) NIL (|BEval_Box_BIMPLIES| SUBTYPE "affine_boolexpr.ctxt1_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BIMPLIES_TCC3| 0 (|BEval_Box_BIMPLIES_TCC3-1| |nil| 3640014834 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result" "(Maybe[bool].some?)"))) (|BEval_Box_BIMPLIES_TCC4| 0 (|BEval_Box_BIMPLIES_TCC4-2| "" 3789916614 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BIMPLIES| SUBTYPE "affine_boolexpr.ctxt2_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)")) (|BEval_Box_BIMPLIES_TCC4-1| |nil| 3640177658 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 1) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOLEM -3 "l0") (("2" (REPLACE -3 :HIDE? T) (("2" (SKOLEM -7 "l1") (("2" (INST 1 "append(l1,l0)") (("2" (USE "append_assoc[CacheData]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "affine_boolexpr.ctxt2_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BIMPLIES_TCC5| 0 (|BEval_Box_BIMPLIES_TCC5-3| "" 3789916615 ("" (SKEEP*) NIL NIL) NIL SHOSTAK (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC5-2| |nil| 3646478925 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACES -3) (("1" (SKOLEM -5 "l1") (("1" (INST 3 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC5-1| |nil| 3640177658 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BIMPLIES_TCC6| 0 (|BEval_Box_BIMPLIES_TCC6-3| "" 3758873380 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACE -3 :HIDE? T) (("1" (SKOLEM -5 "l1") (("1" (INST + "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC6-2| |nil| 3646478955 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACE -3 :HIDE? T) (("1" (SKOLEM -5 "l1") (("1" (INST 4 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC6-1| |nil| 3640177658 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (SPLIT 3) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (TYPEPRED "ctxt2_") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ctxt1_") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt2_") (("2" (EXPAND "BEval_Box_post") (("2" (TYPEPRED "ctxt1_") (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "some?(ctxt2_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -4 "l0") (("1" (REPLACE -4 :HIDE? T) (("1" (SKOLEM -7 "l1") (("1" (INST 1 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BIMPLIES_TCC7| 0 (|BEval_Box_BIMPLIES_TCC7-3| "" 3758873427 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACE -3 :HIDE? T) (("1" (SKOLEM -5 "l1") (("1" (INST + "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC7-2| |nil| 3646478978 ("" (SKEEP*) (("" (EXPAND "mk_result") (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (CASE "some?(ctxt0_)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -3 "l0") (("1" (REPLACE -3 :HIDE? T) (("1" (SKOLEM -5 "l1") (("1" (INST 5 "append(l1,l0)") (("1" (USE "append_assoc[CacheData]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC7-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BIMPLIES_TCC8| 0 (|BEval_Box_BIMPLIES_TCC8-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BIMPLIES_TCC9| 0 (|BEval_Box_BIMPLIES_TCC9-2| "" 3758873485 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -6 "l1") (("" (REPLACES -3) (("" (INST + "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(booleans.TRUE)])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BIMPLIES_TCC9-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BIMPLIES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(booleans.TRUE)])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BINCLUDES_TCC1| 0 (|BEval_Box_BINCLUDES_TCC1-1| |nil| 3638540476 ("" (SKEEP*) (("" (TYPEPRED "evalop") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2" "(list_adt[CacheData].cons?)"))) (|BEval_Box_BINCLUDES_TCC2| 0 (|BEval_Box_BINCLUDES_TCC2-1| |nil| 3638540476 ("" (SKEEP*) (("" (TYPEPRED "evalop") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}"))) (|BEval_Box_BINCLUDES_TCC3| 0 (|BEval_Box_BINCLUDES_TCC3-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (<< CONST-DECL "bool" |interval| |interval_arith|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1)(c_)}"))) (|BEval_Box_BINCLUDES_TCC4| 0 (|BEval_Box_BINCLUDES_TCC4-1| |nil| 3638705326 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BINCLUDES_TCC5| 0 (|BEval_Box_BINCLUDES_TCC5-2| |nil| 3640258822 ("" (SKEEP*) (("" (TYPEPRED "evalop") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}")) (|BEval_Box_BINCLUDES_TCC5-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}"))) (|BEval_Box_BINCLUDES_TCC6| 0 (|BEval_Box_BINCLUDES_TCC6-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (<< CONST-DECL "bool" |interval| |interval_arith|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1)(c_)}"))) (|BEval_Box_BINCLUDES_TCC7| 0 (|BEval_Box_BINCLUDES_TCC7-2| |nil| 3640258973 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")) (|BEval_Box_BINCLUDES_TCC7-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BINCLUDES_TCC8| 0 (|BEval_Box_BINCLUDES_TCC8-2| |nil| 3646479006 ("" (SKEEP*) (("" (TYPEPRED "evalop") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}")) (|BEval_Box_BINCLUDES_TCC8-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box))}"))) (|BEval_Box_BINCLUDES_TCC9| 0 (|BEval_Box_BINCLUDES_TCC9-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (<< CONST-DECL "bool" |interval| |interval_arith|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1)(c_)}"))) (|BEval_Box_BINCLUDES_TCC10| 0 (|BEval_Box_BINCLUDES_TCC10-2| |nil| 3646479044 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")) (|BEval_Box_BINCLUDES_TCC10-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [`result := Maybe[bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.evalop)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BINCLUDES_TCC11| 0 (|BEval_Box_BINCLUDES_TCC11-1| |nil| 3640258683 ("" (SUBTYPE-TCC) NIL NIL) ((|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BINCLUDES_TCC12| 0 (|BEval_Box_BINCLUDES_TCC12-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BINCLUDES_TCC13| 0 (|BEval_Box_BINCLUDES_TCC13-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BINCLUDES| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC1| 0 (|BEval_Box_BREL_TCC1-1| |nil| 3638540476 ("" (SKEEP* :PREDS? T) (("" (ASSERT) NIL NIL)) NIL) ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`1" "{nextfreeidx: naturalnumbers.nat | reals.>(nextfreeidx, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC2| 0 (|BEval_Box_BREL_TCC2-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`2" "{cache: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`1)(cache)}"))) (|BEval_Box_BREL_TCC3| 0 (|BEval_Box_BREL_TCC3-2| |nil| 3638540949 ("" (SKEEP* :PREDS? T) (("" (ASSERT) NIL NIL)) NIL) ((|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BREL_TCC3-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop1)`2" "(list_adt[CacheData].cons?)"))) (|BEval_Box_BREL_TCC4| 0 (|BEval_Box_BREL_TCC4-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "(list_adt[CacheData].cons?)"))) (|BEval_Box_BREL_TCC5| 0 (|BEval_Box_BREL_TCC5-1| |nil| 3638540476 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "evalop1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC6| 0 (|BEval_Box_BREL_TCC6-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ub_aff| CONST-DECL "real" |affine| NIL) (|lb_aff| CONST-DECL "real" |affine| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))) (|BEval_Box_BREL_TCC7| 0 (|BEval_Box_BREL_TCC7-1| |nil| 3638705326 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "first_added_idx") (("" (EXPAND "first_noise_idx_available_box") (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (SKOLEM -4 "l0") (("" (REPLACE -4 :HIDE? T) (("" (SKOLEM -7 "l1") (("" (INST 3 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC8| 0 (|BEval_Box_BREL_TCC8-1| |nil| 3640169165 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "evalop1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC9| 0 (|BEval_Box_BREL_TCC9-1| |nil| 3640169165 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ub_aff| CONST-DECL "real" |affine| NIL) (|lb_aff| CONST-DECL "real" |affine| NIL) (|neg_rel| CONST-DECL "bool" |real_orders| |reals|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))) (|BEval_Box_BREL_TCC10| 0 (|BEval_Box_BREL_TCC10-1| |nil| 3640253510 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -2 "l0") (("" (SKOLEM -6 "l1") (("" (INST 4 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC11| 0 (|BEval_Box_BREL_TCC11-2| |nil| 3646479195 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "evalop1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")) (|BEval_Box_BREL_TCC11-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC12| 0 (|BEval_Box_BREL_TCC12-2| "" 3789916671 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")) (|BEval_Box_BREL_TCC12-1| |nil| 3640254849 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))) (|BEval_Box_BREL_TCC13| 0 (|BEval_Box_BREL_TCC13-2| |nil| 3646479219 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -6 "l1") (("" (INST 5 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")) (|BEval_Box_BREL_TCC13-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC14| 0 (|BEval_Box_BREL_TCC14-2| "" 3789916674 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (TYPEPRED "evalop1") (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")) (|BEval_Box_BREL_TCC14-1| |nil| 3640254849 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop1") (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -2 "l1") (("" (SKOLEM -6 "l0") (("" (INST 4 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC15| 0 (|BEval_Box_BREL_TCC15-2| "" 3789916676 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}")) (|BEval_Box_BREL_TCC15-1| |nil| 3640254849 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))) (|BEval_Box_BREL_TCC16| 0 (|BEval_Box_BREL_TCC16-2| |nil| 3646479256 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop1") (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -2 "l1") (("" (SKOLEM -6 "l0") (("" (INST 4 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")) (|BEval_Box_BREL_TCC16-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].Some(booleans.TRUE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC17| 0 (|BEval_Box_BREL_TCC17-3| "" 3789916679 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (TYPEPRED "evalop1") (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")) (|BEval_Box_BREL_TCC17-2| |nil| 3640255769 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop1") (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -2 "l1") (("" (SKOLEM -6 "l0") (("" (INST 5 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")) (|BEval_Box_BREL_TCC17-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC18| 0 (|BEval_Box_BREL_TCC18-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|lb_aff| CONST-DECL "real" |affine| NIL) (|ub_aff| CONST-DECL "real" |affine| NIL) (|neg_rel| CONST-DECL "bool" |real_orders| |reals|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))) (|BEval_Box_BREL_TCC19| 0 (|BEval_Box_BREL_TCC19-2| |nil| 3646479285 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop1") (("" (TYPEPRED "evalop2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -2 "l1") (("" (SKOLEM -6 "l0") (("" (INST 5 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")) (|BEval_Box_BREL_TCC19-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].Some(booleans.FALSE), `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC20| 0 (|BEval_Box_BREL_TCC20-2| |nil| 3646479324 ("" (SKEEP*) (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}")) (|BEval_Box_BREL_TCC20-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.ctxt__`box))}"))) (|BEval_Box_BREL_TCC21| 0 (|BEval_Box_BREL_TCC21-1| |nil| 3640254849 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|lb_aff| CONST-DECL "real" |affine| NIL) (|ub_aff| CONST-DECL "real" |affine| NIL) (|neg_rel| CONST-DECL "bool" |real_orders| |reals|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box)) | affine_expr_Eval_fnd.idxs_bounded(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1)(c_)}"))) (|BEval_Box_BREL_TCC22| 0 (|BEval_Box_BREL_TCC22-2| |nil| 3646479350 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "evalop2") (("" (TYPEPRED "evalop1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -2 "l0") (("" (REPLACES -2) (("" (SKOLEM -5 "l1") (("" (INST 6 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|op1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|op2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         brel?(x) OR fun4?(x) OR fun2?(x) OR div?(x) OR mult?(x) OR sub?(x)
     OR add?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))")) (|BEval_Box_BREL_TCC22-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt__ WITH [`result := Maybe[bool].None, `cache := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`2, `nextid := Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt__`box))]].val(affine_boolexpr.evalop2)`1])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC23| 0 (|BEval_Box_BREL_TCC23-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC24| 0 (|BEval_Box_BREL_TCC24-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BREL_TCC25| 0 (|BEval_Box_BREL_TCC25-1| |nil| 3646478206 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BREL| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt_))"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC1| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC3-7| "" 3789916706 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC3-6| "" 3640532143 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (REPLACES -1) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC3-5| |nil| 3640449664 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (REPLACES -1) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC3-4| |nil| 3639940123 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`cache") (("" (SPLIT 2) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACES -1) (("1" (SKEEP -4) (("1" (TYPEPRED "val(eval_blet)`2") (("1" (REPLACE -5 :HIDE? T) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "every_implies[CacheData]") (("1" (INST -1 "CacheData_correct?(ctxt_1`box)" "CacheData_correct?(append[Interval]
                                                           (ctxt_1`box,
                                                            cons[ProperInterval]
                                                            (eval_by_intervals
                                                             (car[CacheData]
                                                              (append(l, ctxt_1`cache))`2),
                                                             null[ProperInterval])))" "append(l, ctxt_1`cache)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP) (("2" (INST? -6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC3-3| |nil| 3639926306 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (REPLACES -1) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC3-2| |nil| 3638541176 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`cache") (("" (SPLIT 2) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACES -1) (("1" (SKEEP -4) (("1" (TYPEPRED "val(eval_blet)`2") (("1" (REPLACE -5 :HIDE? T) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "every_implies[CacheData]") (("1" (INST -1 "CacheData_correct?(ctxt_1`box)" "CacheData_correct?(append[Interval]
                                                   (ctxt_1`box,
                                                    cons[ProperInterval]
                                                    (eval_by_intervals
                                                     (car[CacheData]
                                                      (append(l, ctxt_1`cache))`2),
                                                     null[ProperInterval])))" "append(l, ctxt_1`cache)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP) (("2" (INST? -6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC3-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2" "(list_adt[CacheData].cons?)"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC2| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC1-2| "" 3743906647 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (REPLACES -1) (("" (EXPAND "length" 2 2) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1)" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))}")) (|BEval_Box_BLETIN_RealExpr_ini_TCC1-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1)" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))}"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC3| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC2-5| "" 3789916705 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)" "nat")) (|BEval_Box_BLETIN_RealExpr_ini_TCC2-4| |nil| 3646479536 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (REPLACES -1) (("" (EXPAND "length" 2 2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)" "nat")) (|BEval_Box_BLETIN_RealExpr_ini_TCC2-3| |nil| 3639940093 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) NIL NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)" "nat")) (|BEval_Box_BLETIN_RealExpr_ini_TCC2-2| |nil| 3638541033 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)" "nat")) (|BEval_Box_BLETIN_RealExpr_ini_TCC2-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)" "nat"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC4| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC4-4| |nil| 3640449634 ("" (SKEEP*) (("" (SPLIT 1) (("1" (EXPAND "correct_cache?") (("1" (SPLIT 1) (("1" (EXPAND "CacheData_correct?") (("1" (EXPAND "powvar?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (USE "correct_cache?_alt_def") (("2" (REPLACES -1) (("2" (TYPEPRED "val(eval_blet)`2") (("2" (TYPEPRED "eval_blet") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -2) (("2" (REPLACE -2 :HIDE? T) (("2" (USE "correct_cache?_alt_def") (("2" (REPLACE -1 :HIDE? T) (("2" (LEMMA "every_implies[CacheData]") (("2" (INST -1 "CacheData_correct?(ctxt_1`box)" "CacheData_correct?(append[Interval]
         (ctxt_1`box,
          cons[ProperInterval]
          (eval_by_intervals
           (car[CacheData]
            (append(l, ctxt_1`cache))`2),
           null[ProperInterval])))" "append(l, ctxt_1`cache)") (("2" (ASSERT) (("2" (HIDE 3) (("2" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP :PREDS? T) (("2" (EXPAND "length" -1) (("2" (CASE "i=0") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "nth" 1) (("1" (TYPEPRED "eval_blet") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "idxs_bounded" -4) (("1" (INST -4 "0") (("1" (EXPAND "nth" -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "eval_blet") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "idxs_bounded" -4) (("2" (INST -4 "i-1") (("2" (EXPAND "nth" 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|CacheData_correct?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|CacheData_correct?_inclusion| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|every_implies| FORMULA-DECL NIL |more_list_props| |structures|) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|correct_cache?_alt_def| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (VARIDX ADT-CONSTRUCTOR-DECL "[nat -> (varidx?)]" |IntervalExpr_adt| |interval_arith|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|ctxt_1| SKOLEM-CONST-DECL "[# box: Box,
   nextid: {n_: nat | n_ > last_idx_in_box(box)},
   cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
   nxtlcl: above(last_idx_in_box(box)),
   result: Maybe[bool] #]" |affine_boolexpr| NIL) (|rexpr| SKOLEM-CONST-DECL "(realexpr?)" |affine_boolexpr| NIL) (|eval_blet| SKOLEM-CONST-DECL "{result: Maybe[[nat, (correct_cache?(ctxt_1`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = rexpr)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, ctxt_1`cache))
     AND (val(result)`1 >= ctxt_1`nextid)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" |affine_boolexpr| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}")) (|BEval_Box_BLETIN_RealExpr_ini_TCC4-3| |nil| 3639940149 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}")) (|BEval_Box_BLETIN_RealExpr_ini_TCC4-2| |nil| 3639926275 ("" (SKEEP*) (("" (TYPEPRED "eval_blet") (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "ctxt_1`cache") (("" (SPLIT 2) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACES -1) (("1" (SKEEP -4) (("1" (TYPEPRED "val(eval_blet)`2") (("1" (REPLACE -5 :HIDE? T) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "every_implies[CacheData]") (("1" (INST -1 "CacheData_correct?(ctxt_1`box)" "CacheData_correct?(append[Interval]
                                                       (ctxt_1`box,
                                                        cons[ProperInterval]
                                                        (eval_by_intervals
                                                         (car[CacheData]
                                                          (append(l, ctxt_1`cache))`2),
                                                         null[ProperInterval])))" "append(l, ctxt_1`cache)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP) (("2" (INST? -6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}")) (|BEval_Box_BLETIN_RealExpr_ini_TCC4-1| |nil| 3638705326 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1))(c_)}"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC5| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC5-2| |nil| 3646479955 ("" (SKEEP*) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) (("" (REPLACES -1) (("" (TYPEPRED "ctxt_1`nxtlcl") (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)" "above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))")) (|BEval_Box_BLETIN_RealExpr_ini_TCC5-1| |nil| 3638705326 ("" (SKEEP*) (("" (SPLIT 1) (("1" (EXPAND "correct_cache?") (("1" (SPLIT 1) (("1" (EXPAND "CacheData_correct?") (("1" (EXPAND "powvar?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (USE "correct_cache?_alt_def") (("2" (REPLACES -1) (("2" (TYPEPRED "val(eval_blet)`2") (("2" (TYPEPRED "eval_blet") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -2) (("2" (REPLACE -2 :HIDE? T) (("2" (USE "correct_cache?_alt_def") (("2" (REPLACE -1 :HIDE? T) (("2" (LEMMA "every_implies[CacheData]") (("2" (INST -1 "CacheData_correct?(ctxt_1`box)" "CacheData_correct?(append[Interval]
   (ctxt_1`box,
    cons[ProperInterval]
    (eval_by_intervals
     (car[CacheData]
      (append(l, ctxt_1`cache))`2),
     null[ProperInterval])))" "append(l, ctxt_1`cache)") (("2" (ASSERT) (("2" (HIDE 3) (("2" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP :PREDS? T) (("2" (EXPAND "length" -1) (("2" (CASE "i=0") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "nth" 1) (("1" (TYPEPRED "eval_blet") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "idxs_bounded" -4) (("1" (INST -4 "0") (("1" (EXPAND "nth" -4) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "eval_blet") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "idxs_bounded" -4) (("2" (INST -4 "i-1") (("2" (EXPAND "nth" 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)" "above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :))))"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC6| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC6-2| "" 3789916712 ("" (SKEEP*) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [box := list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)), nextid := (number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1), cache := list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)])" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC6-1| |nil| 3640260933 ("" (SKEEP*) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) (("" (REPLACES -1) (("" (TYPEPRED "ctxt_1`nxtlcl") (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt_ WITH [box := list_props[Interval].append(affine_boolexpr.ctxt_`box, (: affine.eval_by_intervals(list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2) :)), nextid := (number_fields.+)(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`1, 1), cache := list_adt[CacheData].cons((IntervalExpr_adt.VARIDX((number_fields.+)(affine_box.last_idx_in_box(affine_boolexpr.ctxt_`box), 1)), list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`2, list_adt[CacheData].car(Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2)`3), Maybe[[nat, (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.ctxt_`box))]].val(affine_boolexpr.eval_blet)`2), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt_`nxtlcl, 1)])" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC7| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC7-2| "" 3789916713 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")) (|BEval_Box_BLETIN_RealExpr_ini_TCC7-1| |nil| 3645894564 ("" (SKEEP*) (("" (HIDE -6) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BLETIN_RealExpr_ini_TCC8| 0 (|BEval_Box_BLETIN_RealExpr_ini_TCC8-1| |nil| 3645894564 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BEval_Box_BLETIN_RealExpr_ini| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BLETIN_RealExpr_TCC1| 0 (|BEval_Box_BLETIN_RealExpr_TCC1-1| |nil| 3640248905 ("" (SKEEP*) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "ctxt_") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (LIFT-IF -2) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (NAME-REPLACE "ev" " Eval_wCache(blet(bexpr))(val(ctxt0_)`box, val(ctxt0_)`nextid, val(ctxt0_)`cache)") (("1" (TYPEPRED "ev") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOLEM -2 "l0") (("1" (REPLACE -2 -7 :HIDE? T) (("1" (SKOLEM -6 "l1") (("1" (INST 2 "append(l1,cons[CacheData] ((VARIDX(1 + last_idx_in_box(val(ctxt0_)`box)), car(append(l0, val(ctxt0_)`cache))`2,
                    car(append(l0, val(ctxt0_)`cache))`3),
                   l0))") (("1" (USE "append_assoc[CacheData]") (("1" (REPLACE -1 2 :HIDE? T) (("1" (EXPAND "append" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (VARIDX ADT-CONSTRUCTOR-DECL "[nat -> (varidx?)]" |IntervalExpr_adt| |interval_arith|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|BEval_Box_BLETIN_RealExpr_ini| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|blet| ADT-ACCESSOR-DECL "[(bletin?) -> IntervalExpr]" |IntervalExpr_adt| |interval_arith|) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|bin| ADT-ACCESSOR-DECL "[(bletin?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BLETIN_RealExpr| SUBTYPE "affine_boolexpr.ctxt_" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC1| 0 (|BEval_Box_BLETIN_BoolExpr_merge1_TCC4-2| "" 3789916718 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "affine_boolexpr.ctxt2_`result" "(Maybe[bool].some?)")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC4-1| |nil| 3638705326 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (TYPEPRED "ctxt1_1`nxtlcl") (("1" (EXPAND "last_idx_in_box") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "affine_boolexpr.ctxt2_`result" "(Maybe[bool].some?)"))) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC2| 0 (|BEval_Box_BLETIN_BoolExpr_merge1_TCC1-2| "" 3743909346 ("" (SKEEP*) (("" (TYPEPRED "ctxt1_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (REPLACE -1 :HIDE? T) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1)" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|-1, -1/2|] ENDIF :))))}")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC1-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1)" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|-1, -1/2|] ENDIF :))))}"))) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC3| 0 (|BEval_Box_BLETIN_BoolExpr_merge1_TCC2-3| "" 3743910364 ("" (SKEEP*) (("" (TYPEPRED "ctxt1_1`cache") (("" (SPLIT 1) (("1" (LEMMA "correct_cache?_alt_def") (("1" (INST? -1 :WHERE -2) (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "correct_cache?_alt_def") (("1" (INST? -1 :WHERE 1) (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "every_implies[CacheData]") (("1" (INST? -1 :WHERE 1) (("1" (INST? -1 :WHERE -2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|correct_cache?_alt_def| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|every_implies| FORMULA-DECL NIL |more_list_props| |structures|) (|CacheData_correct?_inclusion| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|CacheData_correct?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "affine_boolexpr.ctxt1_`cache" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, affine_boolexpr.ctxt1_`nextid))(c_)}")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC2-2| |nil| 3638541244 ("" (SKEEP*) (("" (TYPEPRED "ctxt1_1`nextid") (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "affine_boolexpr.ctxt1_`cache" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, affine_boolexpr.ctxt1_`nextid))(c_)}")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC2-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "affine_boolexpr.ctxt1_`cache" "{c_: (affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)))) | affine_expr_Eval_fnd.idxs_bounded((number_fields.+)(1, affine_boolexpr.ctxt1_`nextid))(c_)}"))) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC4| 0 (|BEval_Box_BLETIN_BoolExpr_merge1_TCC3-3| "" 3743912124 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) (("" (REPLACES -1) (("" (ASSERT) (("" (TYPEPRED "ctxt1_1`nxtlcl") (("" (EXPAND "last_idx_in_box") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)" "above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|-1, -1/2|] ENDIF :))))")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC3-2| |nil| 3638541349 ("" (SKEEP*) (("" (TYPEPRED "ctxt1_1`cache") (("" (SPLIT 1) (("1" (USE "correct_cache?_alt_def") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "correct_cache?_alt_def") (("1" (INST? -1 :WHERE 1) (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "every_implies[CacheData]") (("1" (INST? -1 :WHERE 1) (("1" (INST? -1 :WHERE -2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (USE "CacheData_correct?_inclusion") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_bounded") (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)" "above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|-1, -1/2|] ENDIF :))))")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC3-1| |nil| 3638540476 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "(number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)" "above(affine_box.last_idx_in_box(list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|1/2, 1|] ELSE [|-1, -1/2|] ENDIF :))))"))) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC5| 0 (|BEval_Box_BLETIN_BoolExpr_merge1_TCC5-3| "" 3883636516 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("" (ASSERT) (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt1_ WITH [`box := list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)), nextid := (number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)])" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC5-2| "" 3789916719 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) NIL SHOSTAK (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt1_ WITH [`box := list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)), nextid := (number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)])" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)")) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC5-1| |nil| 3638705326 ("" (SKEEP*) (("" (ASSERT) (("" (HIDE -6) (("" (EXPAND "last_idx_in_box") (("" (USE "length_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.ctxt1_ WITH [`box := list_props[Interval].append(affine_boolexpr.ctxt1_`box, (: IF Maybe[bool].none?(affine_boolexpr.ctxt2_`result) THEN [|-1, 1|] ELSIF Maybe[bool].val(affine_boolexpr.ctxt2_`result) THEN [|number_fields./(1, 2), 1|] ELSE [|-1, number_fields./(-1, 2)|] ENDIF :)), nextid := (number_fields.+)(affine_boolexpr.ctxt1_`nextid, 1), nxtlcl := (number_fields.+)(affine_boolexpr.ctxt1_`nxtlcl, 1)])" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BLETIN_BoolExpr_merge1_TCC6| 0 (|BEval_Box_BLETIN_BoolExpr_merge1_TCC6-1| |nil| 3883615166 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BEval_Box_BLETIN_BoolExpr_merge1| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BLETIN_BoolExpr_TCC1| 0 (|BEval_Box_BLETIN_BoolExpr_TCC1-2| "" 3789916719 ("" (SKEEP*) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1") (("" (LIFT-IF -2) (("" (SPLIT -2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|bin| ADT-ACCESSOR-DECL "[(bletin?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|boolexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|blet| ADT-ACCESSOR-DECL "[(bletin?) -> IntervalExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BLETIN_BoolExpr_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BLETIN_BoolExpr| SUBTYPE "affine_boolexpr.ctxt0_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)")) (|BEval_Box_BLETIN_BoolExpr_TCC1-1| |nil| 3640251183 ("" (SKEEP*) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1") (("" (LIFT-IF -2) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -4) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_post") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BLETIN_BoolExpr| SUBTYPE "affine_boolexpr.ctxt0_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BLETIN_BoolExpr_TCC2| 0 (|BEval_Box_BLETIN_BoolExpr_TCC2-1| |nil| 3640509638 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1") (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (TYPEPRED "ctxt0_") (("1" (ASSERT) (("1" (INST 1 "null") (("1" (ASSERT) (("1" (EXPAND "append") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|BEval_Box_BLETIN_BoolExpr_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|blet| ADT-ACCESSOR-DECL "[(bletin?) -> IntervalExpr]" |IntervalExpr_adt| |interval_arith|) (|boolexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|bin| ADT-ACCESSOR-DECL "[(bletin?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BLETIN_BoolExpr| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt0_) WITH [`result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BLETIN_BoolExpr_TCC3| 0 (|BEval_Box_BLETIN_BoolExpr_TCC3-1| |nil| 3640509638 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BLETIN_BoolExpr| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BITE_merge2_TCC1| 0 (|BEval_Box_BITE_merge2_TCC1-1| |nil| 3646657037 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BEval_Box_BITE_merge2| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BITE_merge2_TCC2| 0 (|BEval_Box_BITE_merge2_TCC2-1| |nil| 3646657037 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)) NIL (|BEval_Box_BITE_merge2| SUBTYPE "affine_boolexpr.ctxt1_" "(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].some?)"))) (|BEval_Box_BITE_merge2_TCC3| 0 (|BEval_Box_BITE_merge2_TCC3-1| |nil| 3646657037 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BEval_Box_BITE_merge2| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_) WITH [result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt1_)`result])" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BITE_merge2_TCC4| 0 (|BEval_Box_BITE_merge2_TCC4-1| |nil| 3646657037 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BEval_Box_BITE_merge2| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "CDBB(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)"))) (|BEval_Box_BITE_TCC1| 0 (|BEval_Box_BITE_TCC1-2| |nil| 3646480003 ("" (SKEEP*) (("" (EXPAND "BEval_Box_post") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "BEval_Box_BITE_merge1") (("" (ASSERT) (("" (EXPAND "BEval_Box_BITE_merge2") (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (SKOLEM -7 "l1") (("" (SKOLEM -11 "l3") (("" (REPLACES -3) (("" (REPLACES -6) (("" (REPLACES -9) (("" (INST 1 "append(l0,append(l1,l3))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BITE_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BITE_merge2| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|belse| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC1-1| |nil| 3639767132 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BITE_TCC2| 0 (|BEval_Box_BITE_TCC2-2| |nil| 3646480026 ("" (SKEEP*) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (EXPAND "BEval_Box_BITE_merge2") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "BEval_Box_BITE_merge1") (("" (ASSERT) (("" (SKOLEM -7 "l0") (("" (SKOLEM -3 "l1") (("" (SKOLEM -10 "l2") (("" (REPLACES -10) (("" (REPLACES -3) (("" (REPLACES -6) (("" (INST 2 "append(l2,append(l1,l0))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|belse| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BITE_merge2| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BITE_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BEval_Box_BITE| SUBTYPE "affine_boolexpr.ctxt3_" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC2-1| |nil| 3640181970 ("" (SKEEP*) (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACE -3 -7 :HIDE? T) (("" (SKOLEM -6 "l1") (("" (INST 1 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "affine_boolexpr.ctxt3_" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BITE_TCC3| 0 (|BEval_Box_BITE_TCC3-3| "" 3789916726 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC3-2| |nil| 3646480054 ("" (SKEEP*) (("" (ASSERT) (("" (EXPAND "mk_result") (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_post") (("" (EXPAND "BEval_Box_BITE_merge2") (("" (TYPEPRED "ctxt2_") (("" (EXPAND "BEval_Box_post") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (TYPEPRED "ctxt1_") (("" (ASSERT) (("" (EXPAND "BEval_Box_post") (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -5 "l1") (("" (REPLACES -5) (("" (SKOLEM -7 "l2") (("" (REPLACES -7) (("" (INST 2 "append(l2,append(l1,l0))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC3-1| |nil| 3640181970 ("" (SKEEP*) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (EXPAND "BEval_Box_BITE_merge2") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACE -3 -7 :HIDE? T) (("" (SKOLEM -6 "l1") (("" (INST 2 "append(l1,l0)") (("" (USE "append_assoc[CacheData]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BITE_TCC4| 0 (|BEval_Box_BITE_TCC4-4| "" 3789916727 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (EXPAND "BEval_Box_BITE_merge2") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -8 "l1") (("" (SKOLEM -5 "l2") (("" (REPLACES -8) (("" (INST + "append(l2,append(l1,l0))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|BEval_Box_BITE_merge2| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|belse| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BITE_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC4-3| "" 3758873568 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (EXPAND "BEval_Box_BITE_merge2") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -8 "l1") (("" (SKOLEM -5 "l2") (("" (REPLACES -8) (("" (REPLACES -5) (("" (INST + "append(l2,append(l1,l0))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC4-2| |nil| 3646480075 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (EXPAND "BEval_Box_BITE_merge2") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -8 "l1") (("" (SKOLEM -5 "l2") (("" (REPLACES -8) (("" (REPLACES -5) (("" (INST 3 "append(l2,append(l1,l0))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC4-1| |nil| 3640182777 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(affine_boolexpr.cres WITH [`result := Maybe[bool].Some(Maybe[bool].val(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt2_)`result))])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BITE_TCC5| 0 (|BEval_Box_BITE_TCC5-2| "" 3758873846 ("" (SKEEP*) (("" (ASSERT) (("" (TYPEPRED "ctxt2_") (("" (TYPEPRED "ctxt3_") (("" (EXPAND "BEval_Box_BITE_merge1") (("" (EXPAND "BEval_Box_BITE_merge2") (("" (TYPEPRED "ctxt1_") (("" (EXPAND "BEval_Box_post") (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) (("" (SKOLEM -3 "l0") (("" (REPLACES -3) (("" (SKOLEM -8 "l1") (("" (SKOLEM -5 "l2") (("" (REPLACES -8) (("" (REPLACES -5) (("" (INST + "append(l2,append(l1,l0))") (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) (("" (USE "append_assoc[CacheData]") (("" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|BEval_Box_BITE_merge2| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|belse| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_assoc| FORMULA-DECL NIL |list_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BITE_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))")) (|BEval_Box_BITE_TCC5-1| |nil| 3640182777 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].Some(Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].val(affine_boolexpr.ctxt3_) WITH [result := Maybe[bool].None])" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_BITE_TCC6| 0 (|BEval_Box_BITE_TCC6-1| |nil| 3758870044 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL)) NIL (|BEval_Box_BITE| SUBTYPE "Maybe[[# box: box.Box, nextid: {n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(box))}, cache: {c_: (affine_expr_Eval_fnd.correct_cache?(box)) | affine_expr_Eval_fnd.idxs_bounded(nextid)(c_)}, nxtlcl: integers.above(affine_box.last_idx_in_box(box)), result: Maybe[bool].Maybe #]].None" "(affine_boolexpr.BEval_Box_post(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box, affine_boolexpr.first_added_idx)(affine_boolexpr.bexpr, affine_boolexpr.ctxt0_))"))) (|BEval_Box_TCC1| 0 (|BEval_Box_TCC1-1| |nil| 3638540476 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|BEval_Box| SUBTYPE "affine_boolexpr.initial_box" "{b_: box.Box | reals.<(affine_box.last_idx_in_box(b_), affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.initial_bexpr, affine_boolexpr.initial_box))}"))) (|BEval_Box_TCC2| 0 (|BEval_Box_TCC2-1| |nil| 3638540476 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|BEval_Box| SUBTYPE "affine_boolexpr.first_added_idx" "{n_: naturalnumbers.nat | reals.>(n_, affine_box.last_idx_in_box(affine_boolexpr.initial_box))}"))) (|BEval_Box_TCC3| 0 (|BEval_Box_TCC3-1| |nil| 3638540476 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL)) NIL (|BEval_Box| SUBTYPE "list_adt[CacheData].null" "{c_: (affine_expr_Eval_fnd.correct_cache?(affine_boolexpr.initial_box)) | affine_expr_Eval_fnd.idxs_bounded(affine_boolexpr.first_added_idx)(c_)}"))) (|p_inclusion_pre_TCC1| 0 (|p_inclusion_pre_TCC1-1| |nil| 3638640465 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|p_inclusion_pre| SUBTYPE "affine_boolexpr.first_added_idx" "upfrom((number_fields.+)(1, affine_box.last_idx_in_box(affine_boolexpr.box)))"))) (|BEval_Box_BAND_preservation_TCC1| 0 (|BEval_Box_BAND_preservation_TCC1-1| |nil| 3640075840 ("" (SUBTYPE-TCC) NIL NIL) ((|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL)) NIL (|BEval_Box_BAND_preservation| SUBTYPE "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)" "upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))"))) (|BEval_Box_BAND_preservation| 0 (|BEval_Box_BAND_preservation-2| |nil| 3646480623 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL TARGET 1) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_BAND" -7) (("" (LIFT-IF -7) (("" (ASSERT) (("" (SPLIT -7) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BAND") (("2" (ASSERT) (("2" (EXPAND "beval_vs_BAND") (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "p_inclusion_pre" -10) (("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (ASSERT) (("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE 1) (("2" (APPLY-EXTENSIONALITY 2) (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BAND| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Maybe_Some_extensionality| FORMULA-DECL NIL |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (FALSE CONST-DECL "bool" |booleans| NIL) (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (/= CONST-DECL "boolean" |notequal| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|BEval_Box_BAND_preservation-1| |nil| 3640075872 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL TARGET 1) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_BAND" -7) (("" (LIFT-IF -7) (("" (ASSERT) (("" (SPLIT -7) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (REVEAL TARGET) (("1" (EXPAND "BEval_Box_BAND") (("1" (ASSERT) (("1" (REPLACE -3) (("1" (EXPAND "beval_vs_BAND") (("1" (EXPAND "beval_vs_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -13) (("1" (FLATTEN) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" -11) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BAND") (("2" (ASSERT) (("2" (REPLACE -2) (("2" (EXPAND "beval_vs_BAND") (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "p_inclusion_pre" -12) (("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "p_inclusion_pre" -8) (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BAND") (("2" (ASSERT) (("2" (REPLACE 2) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BAND") (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" -11) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -11) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -7) (("2" (REPLACE -8) (("2" (EXPAND "p_inclusion_pre" -5) (("2" (FLATTEN) (("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY 2) (("2" (HIDE 2) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "BEval_Box_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|BEval_Box_BOR_preservation| 0 (|BEval_Box_BOR_preservation-3| |nil| 3646480657 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL TARGET 1) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_BOR" -7) (("" (LIFT-IF -7) (("" (ASSERT) (("" (SPLIT -7) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BOR") (("2" (ASSERT) (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "p_inclusion_pre" -10) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BOR") (("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE 1) (("2" (ASSERT) (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BOR| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|beval_vs_BOR| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (/= CONST-DECL "boolean" |notequal| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|Maybe_Some_extensionality| FORMULA-DECL NIL |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|g_ctxt1| SKOLEM-CONST-DECL "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))" |affine_boolexpr| NIL) (|box| SKOLEM-CONST-DECL "Box" |affine_boolexpr| NIL) (|bexpr| SKOLEM-CONST-DECL "BoolExpr" |affine_boolexpr| NIL) (|f_ctxt1| SKOLEM-CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|BEval_Box_BOR_preservation-2| |nil| 3640526619 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL TARGET 1) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_BOR" -7) (("" (LIFT-IF -7) (("" (ASSERT) (("" (SPLIT -7) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (REVEAL TARGET) (("1" (EXPAND "BEval_Box_BOR") (("1" (ASSERT) (("1" (REPLACE -3) (("1" (EXPAND "beval_vs_post") (("1" (REPLACE -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -13) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_BOR") (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" -10) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BOR") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BOR") (("1" (EXPAND P_INCLUSION_PRE -8) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND P_INCLUSION_PRE -7) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE "some?(val(g_ctxt2)`result)") (("1" (ASSERT) (("1" (EXPAND "BEval_Box_post") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND P_INCLUSION_PRE -4) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BOR") (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|BEval_Box_BOR_preservation-1| |nil| 3640075291 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL "target" 1) (("" (HIDE TARGET) (("" (EXPAND "p_inclusion_pre" -3) (("" (CASE "some?(g_ctxt1)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "some?(g_ctxt2)") (("1" (EXPAND "p_inclusion_pre" -15) (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -23) (("1" (REVEAL TARGET) (("1" (EXPAND "beval_vs_BOR" 1) (("1" (EXPAND "BEval_Box_BOR" 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (REPLACE -3) (("1" (REPLACE -2) (("1" (REPLACE -25) (("1" (CASE "some?(val(g_ctxt1)`result)") (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REPLACE 1) (("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_BOR") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_BOR") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|BEval_Box_BIMPLIES_preservation| 0 (|BEval_Box_BIMPLIES_preservation-2| |nil| 3646480736 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL TARGET 1) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_BIMPLIES" -7) (("" (LIFT-IF -7) (("" (ASSERT) (("" (SPLIT -7) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BIMPLIES") (("2" (ASSERT) (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -10) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BIMPLIES") (("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -2) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE 1) (("2" (ASSERT) (("2" (APPLY-EXTENSIONALITY 2) (("2" (HIDE 3) (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BIMPLIES| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Maybe_Some_extensionality| FORMULA-DECL NIL |Maybe| |structures|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|BEval_Box_BIMPLIES_preservation-1| |nil| 3640021322 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (LABEL TARGET 1) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_BIMPLIES" -7) (("" (LIFT-IF -7) (("" (ASSERT) (("" (SPLIT -7) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (REVEAL TARGET) (("1" (EXPAND "BEval_Box_BIMPLIES") (("1" (ASSERT) (("1" (REPLACE -3) (("1" (EXPAND "beval_vs_post") (("1" (REPLACE -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -13) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_BIMPLIES") (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" -11) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (REVEAL TARGET) (("2" (EXPAND "BEval_Box_BIMPLIES") (("2" (ASSERT) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BIMPLIES") (("1" (EXPAND P_INCLUSION_PRE -7) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND P_INCLUSION_PRE -7) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE "some?(val(g_ctxt2)`result)") (("1" (ASSERT) (("1" (EXPAND "BEval_Box_post") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND P_INCLUSION_PRE -3) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BIMPLIES") (("2" (EXPAND "BEval_Box_post") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|BINCLUDES_pre_preservation_TCC1| 0 (|BINCLUDES_pre_preservation_TCC1-1| |nil| 3639235142 ("" (SKEEP*) (("" (TYPEPRED "g_ctxt0") (("" (TYPEPRED "first_added_idx") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL (|BINCLUDES_pre_preservation| SUBTYPE "affine_boolexpr.g_ctxt0" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BINCLUDES_pre_preservation_TCC2| 0 (|BINCLUDES_pre_preservation_TCC2-2| "" 3789916748 ("" (SKEEP*) (("" (TYPEPRED "g_ctxt0") (("" (TYPEPRED "first_added_idx") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BINCLUDES_pre_preservation| SUBTYPE "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)" "upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))")) (|BINCLUDES_pre_preservation_TCC2-1| |nil| 3639235142 ("" (SKEEP*) (("" (EXPAND "BEval_Box_BINCLUDES" 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (TYPEPRED "g_ctxt0") (("1" (TYPEPRED "first_added_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BINCLUDES_pre_preservation| SUBTYPE "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)" "upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))"))) (|BINCLUDES_pre_preservation_TCC3| 0 (|BINCLUDES_pre_preservation_TCC3-2| "" 3789916749 ("" (SKEEP*) (("" (EXPAND "BEval_Box_BINCLUDES" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (EXPAND "BEval_Box_BINCLUDES") (("1" (ASSERT) (("1" (TYPEPRED "g_ctxt0") (("1" (TYPEPRED "first_added_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|BEval_Box_BINCLUDES| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))" |affine_boolexpr| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK (|BINCLUDES_pre_preservation| SUBTYPE "affine_boolexpr.BEval_Box_BINCLUDES(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))(IntervalExpr_adt.BINCLUDES(affine_boolexpr.op, affine_boolexpr.opi), affine_boolexpr.g_ctxt0)" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)")) (|BINCLUDES_pre_preservation_TCC3-1| |nil| 3639404311 ("" (SKEEP*) (("" (EXPAND "BEval_Box_BINCLUDES" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (EXPAND "BEval_Box_BINCLUDES") (("1" (ASSERT) (("1" (TYPEPRED "g_ctxt0") (("1" (TYPEPRED "first_added_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "BEval_Box_BINCLUDES") (("1" (ASSERT) (("1" (REPLACE -1) (("1" (TYPEPRED "g_ctxt0") (("1" (TYPEPRED "first_added_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|BINCLUDES_pre_preservation| SUBTYPE "affine_boolexpr.BEval_Box_BINCLUDES(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))(IntervalExpr_adt.BINCLUDES(affine_boolexpr.op, affine_boolexpr.opi), affine_boolexpr.g_ctxt0)" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BINCLUDES_pre_preservation| 0 (|BINCLUDES_pre_preservation-2| |nil| 3646480785 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" -1) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "BEval_Box_BINCLUDES" -10) (("1" (LIFT-IF -10) (("1" (ASSERT) (("1" (SPLIT -10) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (REVEAL 1) (("1" (EXPAND "BEval_Box_BINCLUDES" 1) (("1" (EXPAND "beval_vs_BINCLUDES" 1) (("1" (USE "RE2AC_EvalwCache_eq") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op,
                                                                          val(g_ctxt0)`box,
                                                                          f_ctxt0`vs,
                                                                          val(g_ctxt0)`nextid,
                                                                          val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "nicniig_RE2AC_preservation") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) NIL NIL)) NIL) ("5" (FLATTEN) (("5" (LIFT-IF -1) (("5" (ASSERT) (("5" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "##") (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (SKOLEM -4 "N") (("1" (FLATTEN) (("1" (EXPAND "compatible_pairs_on?") (("1" (INST -5 "0") (("1" (EXPAND "nth" -5) (("1" (INST -5 "f_ctxt0`n") (("1" (EXPAND "eval_ACExpr_Env") (("1" (FLATTEN) (("1" (HIDE -6) (("1" (USE "ean_in_ebi") (("1" (REPLACE -3 -6 :HIDE? T) (("1" (REPLACE -5 :HIDE? T) (("1" (EXPAND "##") (("1" (FLATTEN) (("1" (EXPAND "<<") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (SKOLEM -4 "N") (("1" (FLATTEN) (("1" (EXPAND "compatible_pairs_on?") (("1" (INST -5 "0") (("1" (INST -5 "f_ctxt0`n") (("1" (EXPAND "nth" -5) (("1" (FLATTEN) (("1" (HIDE -6) (("1" (EXPAND "eval_ACExpr_Env") (("1" (REPLACE -2) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 2) (("1" (REPLACE -6 :DIR RL) (("1" (USE "ean_in_ebi") (("1" (EXPAND "##") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_BINCLUDES" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (|Maybe_Some_extensionality| FORMULA-DECL NIL |Maybe| |structures|) (|eval| DEF-DECL "real" |interval_expr| |interval_arith|) (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|) (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (<< CONST-DECL "bool" |interval| |interval_arith|) (|ean_in_ebi| FORMULA-DECL NIL |affine| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|bexpr| SKOLEM-CONST-DECL "BoolExpr" |affine_boolexpr| NIL) (|box| SKOLEM-CONST-DECL "Box" |affine_boolexpr| NIL) (|g_ctxt0| SKOLEM-CONST-DECL "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))" |affine_boolexpr| NIL) (|op| SKOLEM-CONST-DECL "RealExpr" |affine_boolexpr| NIL) (|f_ctxt0| SKOLEM-CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|vrcib_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|nicniig_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|iacniig_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (RE2AC DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" |affine_expr_Eval_fnd| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|RE2AC_EvalwCache_eq| FORMULA-DECL NIL |affine_expr_Eval| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|BEval_Box_BINCLUDES| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|BINCLUDES_pre_preservation-1| |nil| 3639235143 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre" -1) (("" (EXPAND "p_inclusion_pre" 1) (("" (FLATTEN) (("" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "BEval_Box_BINCLUDES" -10) (("1" (LIFT-IF -10) (("1" (ASSERT) (("1" (SPLIT -10) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (REVEAL 1) (("1" (EXPAND "BEval_Box_BINCLUDES" 1) (("1" (EXPAND "beval_vs_BINCLUDES" 1) (("1" (USE "RE2AC_EvalwCache_eq") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op,
                                                                  val(g_ctxt0)`box,
                                                                  f_ctxt0`vs,
                                                                  val(g_ctxt0)`nextid,
                                                                  val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "nicniig_RE2AC_preservation") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) NIL NIL)) NIL) ("5" (APPLY-EXTENSIONALITY) (("5" (HIDE 2) (("5" (SKOLEM -3 "N") (("5" (FLATTEN) (("5" (EXPAND "compatible_pairs_on?") (("5" (INST -4 0) (("1" (EXPAND "nth" -4) (("1" (INST -4 "f_ctxt0`n") (("1" (EXPAND "eval_ACExpr_Env") (("1" (FLATTEN) (("1" (HIDE -5) (("1" (USE "ean_in_ebi") (("1" (REPLACE -2 -5 :HIDE? T) (("1" (REPLACE -4 :HIDE? T) (("1" (LEMMA "Member_trans") (("1" (INST -1 "eval_by_intervals(car(val(RE2AC(op,
                                                                val(g_ctxt0)`box,
                                                                f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid,
                                                                val(g_ctxt0)`cache))`2)`2)" "opi" "eval(op, f_ctxt0`vs, f_ctxt0`n)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REVEAL 1) (("1" (EXPAND "BEval_Box_BINCLUDES" 1) (("1" (EXPAND "beval_vs_BINCLUDES" 1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (USE "RE2AC_EvalwCache_eq") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op,
                                                                  val(g_ctxt0)`box,
                                                                  f_ctxt0`vs,
                                                                  val(g_ctxt0)`nextid,
                                                                  val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) NIL NIL)) NIL) ("3" (USE "nicniig_RE2AC_preservation") (("3" (ASSERT) NIL NIL)) NIL) ("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKOLEM -3 "N") (("5" (FLATTEN) (("5" (EXPAND "compatible_pairs_on?") (("5" (INST -4 0) (("1" (EXPAND "nth" -4) (("1" (INST -4 "f_ctxt0`n") (("1" (EXPAND "eval_ACExpr_Env") (("1" (FLATTEN) (("1" (HIDE -5) (("1" (USE "ean_in_ebi") (("1" (REPLACE -2 -5 :HIDE? T) (("1" (REPLACE -4 :HIDE? T) (("1" (APPLY-EXTENSIONALITY) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_BINCLUDES" -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|BREL_pre_preservation| 0 (|BREL_pre_preservation-4| "" 3646480857 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BREL" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BREL") (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                val(g_ctxt0)`cache))`2") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                            val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                            val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 3) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 -20 -13 -14)) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("1" (ASSERT) NIL NIL) ("2" (REVEAL -6 -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (NAME-REPLACE "re2ac1" "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                              val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("6" (NAME-REPLACE "re2ac2" "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                              val(re2ac1)`2)") (("6" (HIDE 2) (("6" (SKOLEM -8 "N2") (("6" (FLATTEN -8) (("6" (EXPAND "compatible_pairs_on?" -9) (("6" (EXPAND "eval_ACExpr_Env" -9) (("6" (INST -9 0) (("1" (INST -9 "f_ctxt0`n") (("1" (FLATTEN -9) (("1" (EXPAND "nth" -9) (("1" (REPLACE -6 :HIDE? T) (("1" (REPLACE -8 :DIR RL :HIDE? T) (("1" (SKOLEM -3 "N1") (("1" (FLATTEN -3) (("1" (EXPAND "compatible_pairs_on?" -4) (("1" (INST -4 0) (("1" (INST -4 "f_ctxt0`n") (("1" (FLATTEN -4) (("1" (EXPAND "nth" -4) (("1" (EXPAND "eval_ACExpr_Env" -4) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (USE "ean_in_ebi") (("1" (USE "ean_in_ebi" ("N" "N2")) (("1" (EXPAND "##") (("1" (FLATTEN (-1 -2)) (("1" (EXPAND "ub_aff") (("1" (EXPAND "lb_aff") (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "A" "eval_ac_noise(car(val(re2ac1)`2)`2, N1)") (("1" (NAME-REPLACE "B" "ub(eval_by_intervals(car(val(re2ac1)`2)`2))") (("1" (NAME-REPLACE "C" "lb(eval_by_intervals(car(val(re2ac2)`2)`2))") (("1" (NAME-REPLACE "D" "eval_ac_noise(car(val(re2ac2)`2)`2, N2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (LIFT-IF -5) (("1" (ASSERT) (("1" (SPLIT -5) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "neg_rel") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACES -1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (LIFT-IF -5) (("2" (ASSERT) (("2" (SPLIT -5) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (EXPAND "neg_rel") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACES -1) (("3" (ASSERT) (("3" (FLATTEN) (("3" (LIFT-IF -5) (("3" (ASSERT) (("3" (SPLIT -5) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (EXPAND "neg_rel") (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REPLACES -1) (("4" (ASSERT) (("4" (FLATTEN) (("4" (LIFT-IF -5) (("4" (ASSERT) (("4" (SPLIT -5) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "neg_rel") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REVEAL 2) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BREL| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|RE2AC_EvalwCache_eq| FORMULA-DECL NIL |affine_expr_Eval| NIL) (|op1| SKOLEM-CONST-DECL "RealExpr" |affine_boolexpr| NIL) (RE2AC DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|f_ctxt0| SKOLEM-CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|g_ctxt0| SKOLEM-CONST-DECL "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))" |affine_boolexpr| NIL) (|box| SKOLEM-CONST-DECL "Box" |affine_boolexpr| NIL) (|bexpr| SKOLEM-CONST-DECL "BoolExpr" |affine_boolexpr| NIL) (|iacniig_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|first_added_idx| SKOLEM-CONST-DECL "upfrom(first_noise_idx_available_box(bexpr, box))" |affine_boolexpr| NIL) (|nicniig_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|vrcib_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|re2ac2| SKOLEM-CONST-DECL "{result: Maybe[[nat, (correct_cache?(val(g_ctxt0)`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = op2)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, val(re2ac1)`2))
     AND (EXISTS (N: Noise):
            vars_in_box_compatible?(N)(val(g_ctxt0)`box)(f_ctxt0`vs) AND
             compatible_pairs_on?(val(g_ctxt0)`box, f_ctxt0`vs)(N)
                                 (val(result)`2))
     AND (val(result)`1 >= val(re2ac1)`1)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" |affine_boolexpr| NIL) (|re2ac1| SKOLEM-CONST-DECL "{result: Maybe[[nat, (correct_cache?(val(g_ctxt0)`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = op1)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, val(g_ctxt0)`cache))
     AND (EXISTS (N: Noise):
            vars_in_box_compatible?(N)(val(g_ctxt0)`box)(f_ctxt0`vs) AND
             compatible_pairs_on?(val(g_ctxt0)`box, f_ctxt0`vs)(N)
                                 (val(result)`2))
     AND (val(result)`1 >= val(g_ctxt0)`nextid)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" |affine_boolexpr| NIL) (|op2| SKOLEM-CONST-DECL "RealExpr" |affine_boolexpr| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|ean_in_ebi| FORMULA-DECL NIL |affine| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|ub_aff| CONST-DECL "real" |affine| NIL) (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|) (|realorder?| CONST-DECL "bool" |real_orders| |reals|) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|neg_rel| CONST-DECL "bool" |real_orders| |reals|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|Proper_Add| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|neg_rel_order| APPLICATION-JUDGEMENT "RealOrder" |real_orders| |reals|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|lb_aff| CONST-DECL "real" |affine| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) NIL) (|BREL_pre_preservation-3| "" 3640522853 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BREL" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BREL") (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (EXPAND "BEval_Box_BREL" 1) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`2") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                  val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                  val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 3) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 -20 -13 -14)) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("1" (ASSERT) NIL NIL) ("2" (REVEAL -6 -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (NAME-REPLACE "re2ac1" "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("6" (NAME-REPLACE "re2ac2" "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                  val(re2ac1)`2)") (("6" (APPLY-EXTENSIONALITY) (("6" (HIDE 2) (("6" (SKOLEM -8 "N2") (("6" (FLATTEN -8) (("6" (EXPAND "compatible_pairs_on?" -9) (("6" (EXPAND "eval_ACExpr_Env" -9) (("6" (INST -9 0) (("1" (INST -9 "f_ctxt0`n") (("1" (FLATTEN -9) (("1" (EXPAND "nth" -9) (("1" (REPLACE -6 :HIDE? T) (("1" (REPLACE -8 :DIR RL :HIDE? T) (("1" (SKOLEM -3 "N1") (("1" (FLATTEN -3) (("1" (EXPAND "compatible_pairs_on?" -4) (("1" (INST -4 0) (("1" (INST -4 "f_ctxt0`n") (("1" (FLATTEN -4) (("1" (EXPAND "nth" -4) (("1" (EXPAND "eval_ACExpr_Env" -4) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (USE "ean_in_ebi") (("1" (USE "ean_in_ebi" ("N" "N2")) (("1" (EXPAND "##") (("1" (FLATTEN (-1 -2)) (("1" (EXPAND "ub_aff") (("1" (EXPAND "lb_aff") (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "A" "eval_ac_noise(car(val(re2ac1)`2)`2, N1)") (("1" (NAME-REPLACE "B" "ub(eval_by_intervals(car(val(re2ac1)`2)`2))") (("1" (NAME-REPLACE "C" "lb(eval_by_intervals(car(val(re2ac2)`2)`2))") (("1" (NAME-REPLACE "D" "eval_ac_noise(car(val(re2ac2)`2)`2, N2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REPLACES -1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "BEval_Box_BREL" 2) (("1" (ASSERT) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`2") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 4) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (NAME-REPLACE "re2ac1" "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("6" (NAME-REPLACE "re2ac2" "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                                  val(re2ac1)`2)") (("6" (APPLY-EXTENSIONALITY) (("6" (HIDE 1) (("6" (SKOLEM -9 "N2") (("6" (FLATTEN -9) (("6" (EXPAND "compatible_pairs_on?" -10) (("6" (EXPAND "eval_ACExpr_Env" -10) (("6" (INST -10 0) (("1" (INST -10 "f_ctxt0`n") (("1" (FLATTEN -10) (("1" (EXPAND "nth" -10) (("1" (REPLACE -7 :HIDE? T) (("1" (REPLACE -9 :DIR RL :HIDE? T) (("1" (SKOLEM -4 "N1") (("1" (FLATTEN -4) (("1" (EXPAND "compatible_pairs_on?" -5) (("1" (INST -5 0) (("1" (INST -5 "f_ctxt0`n") (("1" (FLATTEN -5) (("1" (EXPAND "nth" -5) (("1" (EXPAND "eval_ACExpr_Env" -5) (("1" (REPLACE -2 :HIDE? T) (("1" (REPLACE -4 :DIR RL :HIDE? T) (("1" (USE "ean_in_ebi") (("1" (USE "ean_in_ebi" ("N" "N2")) (("1" (EXPAND "##") (("1" (FLATTEN (-1 -2)) (("1" (EXPAND "ub_aff") (("1" (EXPAND "lb_aff") (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (EXPAND "neg_rel") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "neg_rel") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REPLACES -1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BREL" 2) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`2") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 4) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (NAME-REPLACE "re2ac1" "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("6" (NAME-REPLACE "re2ac2" "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                                  val(re2ac1)`2)") (("6" (APPLY-EXTENSIONALITY) (("6" (HIDE 2) (("6" (SKOLEM -8 "N2") (("6" (FLATTEN -8) (("6" (EXPAND "compatible_pairs_on?" -9) (("6" (EXPAND "eval_ACExpr_Env" -9) (("6" (INST -9 0) (("1" (INST -9 "f_ctxt0`n") (("1" (FLATTEN -9) (("1" (EXPAND "nth" -9) (("1" (REPLACE -6 :HIDE? T) (("1" (REPLACE -8 :DIR RL :HIDE? T) (("1" (SKOLEM -3 "N1") (("1" (FLATTEN -3) (("1" (EXPAND "compatible_pairs_on?" -4) (("1" (INST -4 0) (("1" (INST -4 "f_ctxt0`n") (("1" (FLATTEN -4) (("1" (EXPAND "nth" -4) (("1" (EXPAND "eval_ACExpr_Env" -4) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (USE "ean_in_ebi") (("1" (USE "ean_in_ebi" ("N" "N2")) (("1" (EXPAND "##") (("1" (FLATTEN (-1 -2)) (("1" (EXPAND "ub_aff") (("1" (EXPAND "lb_aff") (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REPLACES -1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BREL" 3) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                                    val(g_ctxt0)`cache))`2") (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                                                val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 5) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                                    val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (NAME-REPLACE "re2ac1" "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                                  val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("6" (NAME-REPLACE "re2ac2" "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                                                  val(re2ac1)`2)") (("6" (APPLY-EXTENSIONALITY) (("6" (HIDE 1) (("6" (SKOLEM -9 "N2") (("6" (FLATTEN -9) (("6" (EXPAND "compatible_pairs_on?" -10) (("6" (EXPAND "eval_ACExpr_Env" -10) (("6" (INST -10 0) (("1" (INST -10 "f_ctxt0`n") (("1" (FLATTEN -10) (("1" (EXPAND "nth" -10) (("1" (REPLACE -7 :HIDE? T) (("1" (REPLACE -9 :DIR RL :HIDE? T) (("1" (SKOLEM -4 "N1") (("1" (FLATTEN -4) (("1" (EXPAND "compatible_pairs_on?" -5) (("1" (INST -5 0) (("1" (INST -5 "f_ctxt0`n") (("1" (FLATTEN -5) (("1" (EXPAND "nth" -5) (("1" (EXPAND "eval_ACExpr_Env" -5) (("1" (REPLACE -2 :HIDE? T) (("1" (REPLACE -4 :DIR RL :HIDE? T) (("1" (USE "ean_in_ebi") (("1" (USE "ean_in_ebi" ("N" "N2")) (("1" (EXPAND "##") (("1" (FLATTEN (-1 -2)) (("1" (EXPAND "ub_aff") (("1" (EXPAND "lb_aff") (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (EXPAND "neg_rel") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "neg_rel") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REPLACES -1) (("3" (EXPAND "neg_rel") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (REPLACES -1) (("4" (EXPAND "neg_rel") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BREL_pre_preservation-2| "" 3639393079 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BREL" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BREL") (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                val(g_ctxt0)`cache))`2") (("1" (REVEAL 1) (("1" (REVEAL -1) (("1" (EXPAND "BEval_Box_BREL" 1) (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                                        val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                                        val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 3) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 -18 -11 -12)) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("1" (ASSERT) NIL NIL) ("2" (REVEAL -6 -11) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -19 -11 -12 -4 -9)) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 -20 -11 -12 -4 -9)) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                                        val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (NAME-REPLACE "re2ac1" "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                      val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("6" (NAME-REPLACE "re2ac2" "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs, val(re2ac1)`1,
                      val(re2ac1)`2)") (("6" (SKOLEM -8 "N2") (("6" (FLATTEN -8) (("6" (EXPAND "compatible_pairs_on?" -9) (("6" (EXPAND "eval_ACExpr_Env" -9) (("6" (INST -9 0) (("1" (INST -9 "f_ctxt0`n") (("1" (FLATTEN -9) (("1" (EXPAND "nth" -9) (("1" (REPLACE -6 :HIDE? T) (("1" (REPLACE -8 :DIR RL :HIDE? T) (("1" (SKOLEM -3 "N1") (("1" (FLATTEN -3) (("1" (EXPAND "compatible_pairs_on?" -4) (("1" (INST -4 0) (("1" (INST -4 "f_ctxt0`n") (("1" (FLATTEN -4) (("1" (EXPAND "nth" -4) (("1" (EXPAND "eval_ACExpr_Env" -4) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -3 :DIR RL :HIDE? T) (("1" (USE "ean_in_ebi") (("1" (USE "ean_in_ebi" ("N" "N2")) (("1" (EXPAND "##") (("1" (FLATTEN (-1 -2)) (("1" (EXPAND "ub_aff") (("1" (EXPAND "lb_aff") (("1" (FLATTEN 1) (("1" (LIFT-IF -5) (("1" (ASSERT) (("1" (SPLIT -5) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (REPLACES -1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN -1) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (GRIND) NIL NIL)) NIL) ("3" (REPLACES -1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REPLACES -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (TYPEPRED "rel") (("1" (EXPAND "realorder?") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REPLACES -1) (("3" (GRIND) NIL NIL)) NIL) ("4" (REPLACES -1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("2" (REPLACE -1) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                                        val(g_ctxt0)`cache))`2") (("1" (EXPAND "BEval_Box_BREL" 2) (("1" (REPLACE -2 :HIDE? T) (("1" (REPLACE -1 :HIDE? T) (("1" (NAME-REPLACE "re2ac1" "RE2AC
                                             (op1,
                                              val(g_ctxt0)`box,
                                              f_ctxt0`vs,
                                              val(g_ctxt0)`nextid,
                                              val(g_ctxt0)`cache)") (("1" (NAME-REPLACE "re2ac2" "RE2AC
                                             (op2,
                                              val(g_ctxt0)`box,
                                              f_ctxt0`vs,
                                              val(re2ac1)`1,
                                              val(re2ac1)`2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BREL" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BREL_pre_preservation-1| |nil| 3639245066 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BREL" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BREL") (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (EXPAND "BEval_Box_BREL" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op1" "f_ctxt0`vs" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("1" (REPLACE -1 :HIDE? T) (("1" (LEMMA "RE2AC_EvalwCache_eq") (("1" (INST -1 "val(g_ctxt0)`box" "op2" "f_ctxt0`vs" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                        val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid,
                                                                        val(g_ctxt0)`cache))`2") (("1" (REVEAL 1) (("1" (REVEAL -1) (("1" (EXPAND "BEval_Box_BREL" 1) (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (REPLACE -1 :HIDE? T) (("1" (TYPEPRED "RE2AC(op2, val(g_ctxt0)`box, f_ctxt0`vs,
                                              val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1,
                                              val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT 3) (("1" (EXPAND "compatible_pairs?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (HIDE-ALL-BUT (1 -18 -11 -12)) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("3" (ASSERT) (("3" (LEMMA "iacniig_RE2AC_preservation") (("3" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("1" (ASSERT) NIL NIL) ("2" (REVEAL -6 -11) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1 -19 -11 -12 -4 -9)) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "first_added_idx" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("4" (ASSERT) (("4" (LEMMA "nicniig_RE2AC_preservation") (("4" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "first_added_idx" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT (1 -20 -11 -12 -4 -9)) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op1" "val(g_ctxt0)`nextid" "val(g_ctxt0)`cache") (("5" (ASSERT) (("5" (LEMMA "vrcib_RE2AC_preservation") (("5" (INST -1 "val(g_ctxt0)`box" "f_ctxt0`vs" "op2" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`1" "val(RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs,
                            val(g_ctxt0)`nextid, val(g_ctxt0)`cache))`2") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "RE2AC(op1, val(g_ctxt0)`box, f_ctxt0`vs, val(g_ctxt0)`nextid, val(g_ctxt0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "BEval_Box_BREL" 1) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BREL" 2 1) (("2" (ASSERT) (("2" (EXPAND "BEval_Box_BREL" 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|BLETIN_RealExpr_ini_pre_preservation_TCC1| 0 (|BLETIN_RealExpr_ini_pre_preservation_TCC1-1| |nil| 3638637695 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|BLETIN_RealExpr_ini_pre_preservation| SUBTYPE "affine_boolexpr.blet" "(interval_expr.realexpr?)"))) (|BLETIN_RealExpr_ini_pre_preservation| 0 (|BLETIN_RealExpr_ini_pre_preservation-6| "" 3789916837 ("" (SKEEP*) (("" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                                                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                                                                                       length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "cp_box_vs_cache_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`1" "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2" "0" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1" "fct0`n" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3") (("1" (ASSERT) (("1" (EXPAND "nth" -1) (("1" (SPLIT -1) (("1" (EXPAND "eval_ACExpr_Env") (("1" (EXPAND "last_idx_in_box") (("1" (TYPEPRED "Eval_wCache(blet)
                                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                                            val(gct0)`cache)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "0") (("1" (EXPAND "nth" -4) (("1" (INST -4 "fct0`n") (("1" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "RE2AC_EvalwCache_eq") (("3" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("3" (REPLACES -1) (("3" (USE "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "RE2AC_EvalwCache_eq") (("4" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("4" (REPLACES -1) (("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (LEMMA "RE2AC_EvalwCache_eq") (("5" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("5" (REPLACES -1) (("5" (USE "nicniig_RE2AC_preservation") (("5" (ASSERT) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL) ("5" (CASE "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`2,
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`3),
                                                                                  val(Eval_wCache(blet)
                                                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                                                  val(gct0)`cache))`2),
                                                                             val(gct0)`box,
                                                                             first_added_idx)") (("1" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "iacniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (CASE "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`2,
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`3),
                                                                                 val(Eval_wCache(blet)
                                                                                                (val(gct0)`box, val(gct0)`nextid,
                                                                                                 val(gct0)`cache))`2),
                                                                           val(gct0)`box,
                                                                            first_added_idx)") (("1" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "new_idxs_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "nicniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "new_idxs_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (EXPAND "nth" 2 3) (("2" (ASSERT) (("2" (USE "nicniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "new_idxs_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "varidxs_re_cache_in_box" 1) (("7" (SKEEP) (("7" (USE "length_append[Interval]") (("7" (REPLACES -1) (("7" (EXPAND "length" 1 2) (("7" (EXPAND "length" 1 2) (("7" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "last_idx_in_box") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (USE "vrcib_RE2AC_preservation") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "varidxs_re_cache_in_box" -1) (("2" (INST -1 "i-1") (("1" (SKEEP) (("1" (INST -1 "subexpr") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) (("2" (REVEAL -3) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|beval_vs_BLETIN_RealExpr_ini| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                   car(val(Eval_wCache(blet)
                                      (val(gct0)`box, val(gct0)`nextid,
                                       val(gct0)`cache))`2)`2,
                   car(val(Eval_wCache(blet)
                                      (val(gct0)`box, val(gct0)`nextid,
                                       val(gct0)`cache))`2)`3),
                  val(Eval_wCache(blet)
                                 (val(gct0)`box, val(gct0)`nextid,
                                  val(gct0)`cache))`2)))" |affine_boolexpr| NIL) (|nicniig_box_growing_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|i| SKOLEM-CONST-DECL "below(length(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`2,
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`3),
                  val(RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                            val(gct0)`cache))`2)))" |affine_boolexpr| NIL) (VARIDX ADT-CONSTRUCTOR-DECL "[nat -> (varidx?)]" |IntervalExpr_adt| |interval_arith|) (|iacniig_box_growing_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|i| SKOLEM-CONST-DECL "below(length(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`2,
                   car(val(RE2AC(blet, val(gct0)`box, fct0`vs,
                                 val(gct0)`nextid, val(gct0)`cache))`2)`3),
                  val(RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                            val(gct0)`cache))`2)))" |affine_boolexpr| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cp_box_vs_cache_expansion| FORMULA-DECL NIL |affine_expr_Eval_fnd_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|RE2AC_EvalwCache_eq| FORMULA-DECL NIL |affine_expr_Eval| NIL) (|fct0| SKOLEM-CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (RE2AC DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (EXISTS (N: Noise):
              vars_in_box_compatible?(N)(box)(vs) AND
               compatible_pairs_on?(box, vs)(N)(res))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)
       AND correct_cache?(box)(res)}" |affine_expr_Eval_fnd| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|iacniig_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|vrcib_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|nicniig_RE2AC_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|initial_bexpr| SKOLEM-CONST-DECL "BoolExpr" |affine_boolexpr| NIL) (|initial_box| SKOLEM-CONST-DECL "Box" |affine_boolexpr| NIL) (|first_added_idx| SKOLEM-CONST-DECL "upfrom(first_noise_idx_available_box(initial_bexpr, initial_box))" |affine_boolexpr| NIL) (|gct0| SKOLEM-CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|blet| SKOLEM-CONST-DECL "RealExpr" |affine_boolexpr| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Eval_wCache| DEF-DECL "{result: Maybe[[nat, (correct_cache?(box))]] |
   some?(result) IMPLIES
    LET res = val(result)`2, newnidx = val(result)`1 IN
           (NOT null?(res)) AND (car(res)`1 = re)
       AND (EXISTS (l: list[CacheData]): res = append(l, cache))
       AND (newnidx >= nextfreeidx) AND idxs_bounded(newnidx)(res)}" |affine_expr_Eval| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (/= CONST-DECL "boolean" |notequal| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|Proper_Add| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|containment_interval| FORMULA-DECL NIL |affine| NIL) (|EvalwCache_inclusion_| FORMULA-DECL NIL |affine_expr_Eval| NIL) (|containment| CONST-DECL "bool" |affine| NIL) (|evalw| SKOLEM-CONST-DECL "{result: Maybe[[nat, (correct_cache?(val(gct0)`box))]] |
   some?(result) IMPLIES
         (NOT null?(val(result)`2)) AND (car(val(result)`2)`1 = blet)
     AND (EXISTS (l: list[CacheData]):
            val(result)`2 = append(l, val(gct0)`cache))
     AND (val(result)`1 >= val(gct0)`nextid)
     AND idxs_bounded(val(result)`1)(val(result)`2)}" |affine_boolexpr| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|) (|eval| DEF-DECL "real" |interval_expr| |interval_arith|) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|BEval_Box_BLETIN_RealExpr_ini| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|BLETIN_RealExpr_ini_pre_preservation-5| "" 3646565348 ("" (SKEEP*) (("" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (REPLACES -1) (("1" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                                                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                                                                                       length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "cp_box_vs_cache_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`1" "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2" "0" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1" "fct0`n" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3") (("1" (ASSERT) (("1" (EXPAND "nth" -1) (("1" (SPLIT -1) (("1" (EXPAND "eval_ACExpr_Env") (("1" (EXPAND "last_idx_in_box") (("1" (TYPEPRED "Eval_wCache(blet)
                                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                                            val(gct0)`cache)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "0") (("1" (EXPAND "nth" -4) (("1" (INST -4 "fct0`n") (("1" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "RE2AC_EvalwCache_eq") (("3" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("3" (REPLACES -1) (("3" (USE "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "RE2AC_EvalwCache_eq") (("4" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("4" (REPLACES -1) (("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (LEMMA "RE2AC_EvalwCache_eq") (("5" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("5" (REPLACES -1) (("5" (USE "nicniig_RE2AC_preservation") (("5" (ASSERT) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL) ("5" (CASE "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`2,
                                                                                   car(val(Eval_wCache(blet)
                                                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                                                       val(gct0)`cache))`2)`3),
                                                                                  val(Eval_wCache(blet)
                                                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                                                  val(gct0)`cache))`2),
                                                                             val(gct0)`box,
                                                                             first_added_idx)") (("1" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "iacniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (CASE "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`2,
                                                                                  car(val(Eval_wCache(blet)
                                                                                                     (val(gct0)`box, val(gct0)`nextid,
                                                                                                      val(gct0)`cache))`2)`3),
                                                                                 val(Eval_wCache(blet)
                                                                                                (val(gct0)`box, val(gct0)`nextid,
                                                                                                 val(gct0)`cache))`2),
                                                                           val(gct0)`box,
                                                                            first_added_idx)") (("1" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "new_idxs_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "nicniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "new_idxs_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2 1) (("2" (EXPAND "nth" 2 3) (("2" (ASSERT) (("2" (USE "nicniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "new_idxs_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "varidxs_re_cache_in_box" 1) (("7" (SKEEP) (("7" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "last_idx_in_box") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (USE "vrcib_RE2AC_preservation") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "varidxs_re_cache_in_box" -1) (("2" (INST -1 "i-1") (("1" (SKEEP) (("1" (INST -1 "subexpr") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) (("2" (REVEAL -3) (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|BLETIN_RealExpr_ini_pre_preservation-4| "" 3646565327 ("" (SKEEP*) (("" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (REPLACES -1) (("1" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                                                 length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "cp_box_vs_cache_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`2" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1" "fct0`n" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (EXPAND "eval_ACExpr_Env") (("1" (EXPAND "last_idx_in_box") (("1" (TYPEPRED "Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid,
                                                                    val(gct0)`cache)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "0") (("1" (EXPAND "nth" -4) (("1" (INST -4 "fct0`n") (("1" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "RE2AC_EvalwCache_eq") (("3" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("3" (REPLACES -1) (("3" (USE "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "RE2AC_EvalwCache_eq") (("4" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("4" (REPLACES -1) (("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (LEMMA "RE2AC_EvalwCache_eq") (("5" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("5" (REPLACES -1) (("5" (USE "nicniig_RE2AC_preservation") (("5" (ASSERT) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "idxs_bounded") (("2" (NAME-REPLACE "nwcache" "val[[nat, (correct_cache?(val(gct0)`box))]]
                             (Eval_wCache(blet)
                                         (val
                                              [[# box: Box,
                                                  nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                  cache:
                                                    {c_: (correct_cache?(box)) |
                                                             idxs_bounded(nextid)(c_)},
                                                  nxtlcl: above(last_idx_in_box(box)),
                                                  result: Maybe[bool] #]]
                                              (gct0)`box,
                                          val
                                              [[# box: Box,
                                                  nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                  cache:
                                                    {c_: (correct_cache?(box)) |
                                                             idxs_bounded(nextid)(c_)},
                                                  nxtlcl: above(last_idx_in_box(box)),
                                                  result: Maybe[bool] #]]
                                              (gct0)`nextid,
                                          val
                                              [[# box: Box,
                                                  nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                  cache:
                                                    {c_: (correct_cache?(box)) |
                                                             idxs_bounded(nextid)(c_)},
                                                  nxtlcl: above(last_idx_in_box(box)),
                                                  result: Maybe[bool] #]]
                                              (gct0)`cache))`2") (("2" (SKEEP) (("2" (INST -4 "i") (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL) ("5" (CASE "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                         car(val(Eval_wCache(blet)
                                                                            (val(gct0)`box, val(gct0)`nextid,
                                                                             val(gct0)`cache))`2)`2,
                                                         car(val(Eval_wCache(blet)
                                                                            (val(gct0)`box, val(gct0)`nextid,
                                                                             val(gct0)`cache))`2)`3),
                                                        val(Eval_wCache(blet)
                                                                       (val(gct0)`box, val(gct0)`nextid,
                                                                        val(gct0)`cache))`2),
                                                   val(gct0)`box,
                                                   first_added_idx)") (("1" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "iacniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (CASE "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                        car(val(Eval_wCache(blet)
                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                            val(gct0)`cache))`2)`2,
                                                        car(val(Eval_wCache(blet)
                                                                           (val(gct0)`box, val(gct0)`nextid,
                                                                            val(gct0)`cache))`2)`3),
                                                       val(Eval_wCache(blet)
                                                                      (val(gct0)`box, val(gct0)`nextid,
                                                                       val(gct0)`cache))`2),
                                                 val(gct0)`box,
                                                  first_added_idx)") (("1" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("7" (CASE "varidxs_re_cache_in_box(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                                car(val(Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid,
                                                                    val(gct0)`cache))`2)`2,
                                                car(val(Eval_wCache(blet)
                                                                   (val(gct0)`box, val(gct0)`nextid,
                                                                    val(gct0)`cache))`2)`3),
                                               val(Eval_wCache(blet)
                                                              (val(gct0)`box, val(gct0)`nextid,
                                                               val(gct0)`cache))`2),
                                          val(gct0)`box)") (("1" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_RealExpr_ini_pre_preservation-3| "" 3646564213 ("" (SKEEP*) (("" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (WITH-LABELS (CASE "varidxs_re_cache_in_box(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`2,
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`3),
                                   val(Eval_wCache(blet)
                                                  (val(gct0)`box, val(gct0)`nextid,
                                                   val(gct0)`cache))`2),
                              val(gct0)`box)") "vrcib_extended_cache") (("1" (HIDE "vrcib_extended_cache") (("1" (WITH-LABELS (CASE "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`2,
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`3),
                                         val(Eval_wCache(blet)
                                                        (val(gct0)`box, val(gct0)`nextid,
                                                         val(gct0)`cache))`2),
                                   val(gct0)`box,
                                    first_added_idx)") "nicniig_extended_cache") (("1" (HIDE "nicniig_extended_cache") (("1" (WITH-LABELS (CASE "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`2,
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`3),
                                        val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2),
                                   val(gct0)`box,
                                   first_added_idx)") "iacniig_extended_cache") (("1" (HIDE "iacniig_extended_cache") (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (REPLACES -1) (("1" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                        length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "cp_box_vs_cache_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "first_added_idx+1" "val(Eval_wCache(blet)
                                                                          (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`2" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`1" "fct0`n" "car(val(Eval_wCache(blet) (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)`3") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (EXPAND "eval_ACExpr_Env") (("1" (EXPAND "last_idx_in_box") (("1" (TYPEPRED "Eval_wCache(blet)
                                                 (val(gct0)`box, val(gct0)`nextid,
                                                  val(gct0)`cache)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "0") (("1" (EXPAND "nth" -4) (("1" (INST -4 "fct0`n") (("1" (FLATTEN) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (LEMMA "RE2AC_EvalwCache_eq") (("3" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("3" (REPLACES -1) (("3" (USE "iacniig_RE2AC_preservation") (("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (LEMMA "RE2AC_EvalwCache_eq") (("4" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("4" (REPLACES -1) (("4" (USE "vrcib_RE2AC_preservation") (("4" (ASSERT) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (LEMMA "RE2AC_EvalwCache_eq") (("5" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("5" (REPLACES -1) (("5" (USE "nicniig_RE2AC_preservation") (("5" (ASSERT) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL) ("5" (REVEAL "iacniig_extended_cache") (("5" (USE "iacniig_box_growing_preservation") (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (REVEAL "nicniig_extended_cache") (("6" (USE "nicniig_box_growing_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (REVEAL "vrcib_extended_cache") (("7" (USE "vrcib_box_growing_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "iacniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (POSTPONE) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (POSTPONE) NIL NIL)) NIL) ("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_RealExpr_ini_pre_preservation-2| "" 3646497667 ("" (SKEEP*) (("" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (WITH-LABELS (CASE "varidxs_re_cache_in_box(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`2,
                                    car(val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2)`3),
                                   val(Eval_wCache(blet)
                                                  (val(gct0)`box, val(gct0)`nextid,
                                                   val(gct0)`cache))`2),
                              val(gct0)`box)") "vrcib_extended_cache") (("1" (HIDE "vrcib_extended_cache") (("1" (WITH-LABELS (CASE "new_idxs_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`2,
                                          car(val(Eval_wCache(blet)
                                                             (val(gct0)`box, val(gct0)`nextid,
                                                              val(gct0)`cache))`2)`3),
                                         val(Eval_wCache(blet)
                                                        (val(gct0)`box, val(gct0)`nextid,
                                                         val(gct0)`cache))`2),
                                   val(gct0)`box,
                                    first_added_idx)") "nicniig_extended_cache") (("1" (HIDE "nicniig_extended_cache") (("1" (WITH-LABELS (CASE "idxs_ac_cache_not_in_idx_gap(cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`2,
                                         car(val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid,
                                                             val(gct0)`cache))`2)`3),
                                        val(Eval_wCache(blet)
                                                       (val(gct0)`box, val(gct0)`nextid,
                                                        val(gct0)`cache))`2),
                                   val(gct0)`box,
                                   first_added_idx)") "iacniig_extended_cache") (("1" (HIDE "iacniig_extended_cache") (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (REPLACES -1) (("1" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                               (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                                        length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "first_added_idx+1" "cons((VARIDX(1 + last_idx_in_box(val(gct0)`box)),
                                              car(val(Eval_wCache(blet)
                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                  val(gct0)`cache))`2)`2,
                                              car(val(Eval_wCache(blet)
                                                                 (val(gct0)`box, val(gct0)`nextid,
                                                                  val(gct0)`cache))`2)`3),
                                             val(Eval_wCache(blet)
                                                            (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))`2)" "eval_by_intervals(car(val(Eval_wCache(blet)
                                                                                       (val(gct0)`box,
                                                                                        val(gct0)`nextid,
                                                                                        val(gct0)`cache))`2)`2)" "eval(blet, fct0`vs, fct0`n)") (("1" (ASSERT) (("1" (HIDE 2) (("1" (SPLIT 1) (("1" (REVEAL "iacniig_extended_cache") (("1" (PROPAX) NIL NIL)) NIL) ("2" (REVEAL "vrcib_extended_cache") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REVEAL "nicniig_extended_cache") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (NAME-REPLACE "I" "eval_by_intervals(car[CacheData]
                                      (val[[nat, (correct_cache?(val(gct0)`box))]]
                                           (Eval_wCache(blet)
                                                       (val
                                                            [[# box: Box,
                                                                nextid:
                                                                {n_: nat | n_ > last_idx_in_box(box)},
                                                                cache:
                                                                {c_: (correct_cache?(box)) |
                                                                 idxs_bounded(nextid)(c_)},
                                                                nxtlcl: above(last_idx_in_box(box)),
                                                                result: Maybe[bool] #]]
                                                            (gct0)`box,
                                                        val
                                                            [[# box: Box,
                                                                nextid:
                                                                {n_: nat | n_ > last_idx_in_box(box)},
                                                                cache:
                                                                {c_: (correct_cache?(box)) |
                                                                 idxs_bounded(nextid)(c_)},
                                                                nxtlcl: above(last_idx_in_box(box)),
                                                                result: Maybe[bool] #]]
                                                            (gct0)`nextid,
                                                        val
                                                            [[# box: Box,
                                                                nextid:
                                                                {n_: nat | n_ > last_idx_in_box(box)},
                                                                cache:
                                                                {c_: (correct_cache?(box)) |
                                                                 idxs_bounded(nextid)(c_)},
                                                                nxtlcl: above(last_idx_in_box(box)),
                                                                result: Maybe[bool] #]]
                                                            (gct0)`cache))`2)`2)") (("1" (NAME-REPLACE "x" "eval(blet, fct0`vs, fct0`n)") (("1" (CASE "x ## I") (("1" (USE "  containment_var") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST 1 "e") (("1" (USE "eval_var_ac") (("1" (REPLACE -1 -2 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "x") (("2" (EXPAND "I") (("2" (USE "containment_interval") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "containment") (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                                      val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (EXPAND "compatible_pairs_on?") (("2" (INST -4 "0") (("1" (INST -4 "fct0`n") (("1" (EXPAND "nth" -4) (("1" (FLATTEN) (("1" (EXPAND "eval_ACExpr_Env") (("1" (REPLACES -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (ASSERT) (("3" (SPLIT 1) (("1" (POSTPONE) NIL NIL) ("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACE -1 :HIDE? T) (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                                      val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "compatible_pairs?" 2) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" 2) (("2" (SKEEP 2) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2) (("1" (ASSERT) (("1" (EXPAND "powvar?" 2) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 3) (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "i-1") (("2" (HIDE 4) (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("4" (ASSERT) NIL NIL)) NIL) ("5" (REVEAL "iacniig_extended_cache") (("5" (USE "iacniig_box_growing_preservation") (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (REVEAL "nicniig_extended_cache") (("6" (USE "nicniig_box_growing_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (REVEAL "vrcib_extended_cache") (("7" (USE "vrcib_box_growing_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "RE2AC_EvalwCache_eq") (("2" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("2" (REPLACES -1) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" 1) (("2" (SKEEP 1) (("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "nth" 1) (("1" (USE "iacniig_RE2AC_preservation") (("1" (ASSERT) (("1" (ASSERT) (("1" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("1" (INST -1 "0") (("1" (EXPAND "nth" -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid, val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (USE "iacniig_RE2AC_preservation") (("2" (ASSERT) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap" -1) (("2" (INST -1 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (POSTPONE) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (POSTPONE) NIL NIL)) NIL) ("3" (TYPEPRED "Eval_wCache(blet)(val(gct0)`box, val(gct0)`nextid, val(gct0)`cache)") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|more_list_props| "" 3644770737 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("1" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                         (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (REPLACES -1) (("1" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                     length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -5) (("2" (HIDE-ALL-BUT 1) (("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "evalw") (("3" (LEMMA "RE2AC_EvalwCache_eq") (("3" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("3" (REPLACES -1) (("3" (LEMMA "RE2AC_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "blet" "val(gct0)`nextid" "val(gct0)`cache" "eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2)" "eval(blet, fct0`vs, length(val(gct0)`box))" "first_added_idx") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -7 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (TYPEPRED "(RE2AC(blet,
                                                append(val(gct0)`box,
                                                       (: eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2) :)),
                                                fct0`vs
                                                  WITH [(length(val(gct0)`box))
                                                          := eval(blet, fct0`vs, length(val(gct0)`box))],
                                                val(gct0)`nextid, val(gct0)`cache))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "compatible_pairs?" 2) (("1" (SKEEP -3) (("1" (INST 2 "N") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "I" "(eval_by_intervals(car[CacheData]
                                                      (val
                                                           [[nat,
                                                             (correct_cache?(val(gct0)`box))]]
                                                           (RE2AC
                                                            (blet,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`box,
                                                             fct0`vs,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`nextid,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`cache))`2)`2))") (("2" (HIDE 2) (("2" (NAME-REPLACE "x" "eval(blet, fct0`vs,
                                  length[Interval]
                                      (val
                                           [[# box: Box,
                                               nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                               cache:
                                                 {c_: (correct_cache?(box)) |
                                                          idxs_bounded(nextid)(c_)},
                                               result: Maybe[bool] #]]
                                           (gct0)`box))") (("2" (CASE "x ## I") (("1" (USE "  containment_var") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST 1 "e") (("1" (USE "eval_var_ac") (("1" (REPLACE -1 -2 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "x") (("2" (EXPAND "I") (("2" (USE "containment_interval") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "containment") (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                          val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (EXPAND "compatible_pairs_on?") (("2" (INST -4 "0") (("1" (INST -4 "fct0`n") (("1" (EXPAND "nth" -4) (("1" (FLATTEN) (("1" (EXPAND "eval_ACExpr_Env") (("1" (REPLACES -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "evalw") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "evalw") (("5" (LEMMA "RE2AC_EvalwCache_eq") (("5" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("5" (REPLACES -1) (("5" (USE "iacniig_RE2AC_preservation") (("5" (ASSERT) (("5" (ASSERT) (("5" (USE "iacniig_box_growing_preservation") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "evalw") (("6" (LEMMA "RE2AC_EvalwCache_eq") (("6" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("6" (REPLACES -1) (("6" (USE "nicniig_RE2AC_preservation") (("6" (ASSERT) (("6" (ASSERT) (("6" (USE "nicniig_box_growing_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "evalw") (("7" (LEMMA "RE2AC_EvalwCache_eq") (("7" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("7" (REPLACES -1) (("7" (USE "vrcib_RE2AC_preservation") (("7" (ASSERT) (("7" (ASSERT) (("7" (USE "vrcib_box_growing_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_RealExpr_ini_pre_preservation-1| |nil| 3638637724 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini" -2) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("1" (EXPAND "beval_vs_BLETIN_RealExpr_ini") (("1" (NAME-REPLACE "evalw" "(Eval_wCache(blet)
                                         (val(gct0)`box, val(gct0)`nextid, val(gct0)`cache))") (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?") (("1" (SKOLEM 1 "i") (("1" (CASE "i < length(val(gct0)`box)") (("1" (USE "nth_append2[Interval]") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (CASE "i = length(val(gct0)`box)") (("1" (HIDE 1) (("1" (CASE "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)](i) = eval(blet, val(fct0)`vs, val(fct0)`n)") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (CASE "nth(append(val(gct0)`box, (: eval_by_intervals(car(val(evalw)`2)`2) :)),
                                                                                     length(val(gct0)`box)) = eval_by_intervals(car(val(evalw)`2)`2) ") (("1" (REPLACES -1) (("1" (EXPAND "evalw") (("1" (USE "containment_interval") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "containment") (("1" (LEMMA "EvalwCache_inclusion_") (("1" (ASSERT) (("1" (EXPAND "eval_ACExpr_Env") (("1" (INST? -1 :WHERE 1) (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "nth_append[Interval]") (("1" (ASSERT) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (USE "length_append[Interval]") (("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -5) (("2" (HIDE-ALL-BUT 1) (("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "evalw") (("3" (LEMMA "RE2AC_EvalwCache_eq") (("3" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("3" (REPLACES -1) (("3" (LEMMA "RE2AC_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "blet" "val(gct0)`nextid" "val(gct0)`cache" "eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2)" "eval(blet, fct0`vs, length(val(gct0)`box))" "first_added_idx") (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -7 1) (("1" (ASSERT) (("1" (HIDE -2) (("1" (TYPEPRED "(RE2AC(blet,
                                                append(val(gct0)`box,
                                                       (: eval_by_intervals(car
                                                                            (val
                                                                             (RE2AC
                                                                              (blet,
                                                                               val(gct0)`box,
                                                                               fct0`vs,
                                                                               val(gct0)`nextid,
                                                                               val
                                                                               (gct0)`cache))`2)`2) :)),
                                                fct0`vs
                                                  WITH [(length(val(gct0)`box))
                                                          := eval(blet, fct0`vs, length(val(gct0)`box))],
                                                val(gct0)`nextid, val(gct0)`cache))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "compatible_pairs?" 2) (("1" (SKEEP -3) (("1" (INST 2 "N") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "I" "(eval_by_intervals(car[CacheData]
                                                      (val
                                                           [[nat,
                                                             (correct_cache?(val(gct0)`box))]]
                                                           (RE2AC
                                                            (blet,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`box,
                                                             fct0`vs,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`nextid,
                                                             val
                                                             [[# box: Box,
                                                                 nextid:
                                                                 {n_: nat |
                                                                  n_ > last_idx_in_box(box)},
                                                                 cache:
                                                                 {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                                 result: Maybe[bool] #]]
                                                             (gct0)`cache))`2)`2))") (("2" (HIDE 2) (("2" (NAME-REPLACE "x" "eval(blet, fct0`vs,
                                  length[Interval]
                                      (val
                                           [[# box: Box,
                                               nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                               cache:
                                                 {c_: (correct_cache?(box)) |
                                                          idxs_bounded(nextid)(c_)},
                                               result: Maybe[bool] #]]
                                           (gct0)`box))") (("2" (CASE "x ## I") (("1" (USE "  containment_var") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST 1 "e") (("1" (USE "eval_var_ac") (("1" (REPLACE -1 -2 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "x") (("2" (EXPAND "I") (("2" (USE "containment_interval") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "containment") (("2" (TYPEPRED "RE2AC(blet, val(gct0)`box, fct0`vs, val(gct0)`nextid,
                                          val(gct0)`cache)") (("2" (ASSERT) (("2" (FLATTEN) (("2" (SKEEP -3) (("2" (INST 2 "N") (("2" (EXPAND "compatible_pairs_on?") (("2" (INST -4 "0") (("1" (INST -4 "fct0`n") (("1" (EXPAND "nth" -4) (("1" (FLATTEN) (("1" (EXPAND "eval_ACExpr_Env") (("1" (REPLACES -4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "evalw") (("4" (ASSERT) NIL NIL)) NIL) ("5" (EXPAND "evalw") (("5" (LEMMA "RE2AC_EvalwCache_eq") (("5" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("5" (REPLACES -1) (("5" (USE "iacniig_RE2AC_preservation") (("5" (ASSERT) (("5" (ASSERT) (("5" (USE "iacniig_box_growing_preservation") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "evalw") (("6" (LEMMA "RE2AC_EvalwCache_eq") (("6" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("6" (REPLACES -1) (("6" (USE "nicniig_RE2AC_preservation") (("6" (ASSERT) (("6" (ASSERT) (("6" (USE "nicniig_box_growing_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "evalw") (("7" (LEMMA "RE2AC_EvalwCache_eq") (("7" (INST -1 "val(gct0)`box" "blet" "fct0`vs" "val(gct0)`nextid" "val(gct0)`cache") (("7" (REPLACES -1) (("7" (USE "vrcib_RE2AC_preservation") (("7" (ASSERT) (("7" (ASSERT) (("7" (USE "vrcib_box_growing_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|BLETIN_RealExpr_pre_preservation_TCC1| 0 (|BLETIN_RealExpr_pre_preservation_TCC1-1| |nil| 3789916246 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|)) NIL (|BLETIN_RealExpr_pre_preservation| SUBTYPE "affine_boolexpr.blet" "(interval_expr.realexpr?)"))) (|BLETIN_RealExpr_pre_preservation_TCC2| 0 (|BLETIN_RealExpr_pre_preservation_TCC1-1| |nil| 3639308540 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BLETIN_RealExpr_ini| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_RealExpr_ini| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|BLETIN_RealExpr_pre_preservation| SUBTYPE "IntervalExpr_adt.BLETIN(affine_boolexpr.blet, affine_boolexpr.bin)" "{b_: (IntervalExpr_adt.bletin?) | interval_expr.realexpr?(IntervalExpr_adt.blet(b_))}"))) (|BLETIN_RealExpr_pre_preservation| 0 (|BLETIN_RealExpr_pre_preservation-2| "" 3883666127 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_RealExpr" -3) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED "g_ctxtbin") (("" (EXPAND "BEval_Box_post") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (FLATTEN) (("" (ASSERT) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "beval_vs_BLETIN_RealExpr") (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_RealExpr_pre_preservation-1| |nil| 3639327139 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_RealExpr" -3) (("" (ASSERT) (("" (FLATTEN) (("" (TYPEPRED G_CTXTBIN) (("" (EXPAND "BEval_Box_post") (("" (EXPAND "BEval_Box_BLETIN_RealExpr_ini") (("" (FLATTEN) (("" (ASSERT) (("" (LIFT-IF -2) (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "beval_vs_BLETIN_RealExpr") (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (EXPAND "BEval_Box_BLETIN_RealExpr" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_RealExpr| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|beval_vs_BLETIN_RealExpr| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|BEval_Box_BLETIN_RealExpr_ini| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|BLETIN_BoolExpr_pre_preservation_TCC1| 0 (|BLETIN_BoolExpr_pre_preservation_TCC1-1| |nil| 3639308932 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BLETIN_BoolExpr_pre_preservation| SUBTYPE "affine_boolexpr.g_ctxt0" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BLETIN_BoolExpr_pre_preservation_TCC2| 0 (|BLETIN_BoolExpr_pre_preservation_TCC2-1| |nil| 3639322923 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|BLETIN_BoolExpr_pre_preservation| SUBTYPE "affine_boolexpr.g_ctxt1" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BLETIN_BoolExpr_pre_preservation_TCC3| 0 (|BLETIN_BoolExpr_pre_preservation_TCC3-1| |nil| 3639322923 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|BLETIN_BoolExpr_pre_preservation| SUBTYPE "affine_boolexpr.g_ctxt2" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BLETIN_BoolExpr_pre_preservation_TCC4| 0 (|BLETIN_BoolExpr_pre_preservation_TCC4-1| |nil| 3639322923 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|boolexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|BLETIN_BoolExpr_pre_preservation| SUBTYPE "IntervalExpr_adt.BLETIN(affine_boolexpr.blet, affine_boolexpr.bin)" "{b_: (IntervalExpr_adt.bletin?) | interval_expr.boolexpr?(IntervalExpr_adt.blet(b_))}"))) (|BLETIN_BoolExpr_pre_preservation| 0 (|BLETIN_BoolExpr_pre_preservation-3| "" 3883667000 ("" (WITH-LABELS (SKEEP*) (("p_inc_pre 0" "post 0" "p_inc_pre 1" "post 1" "p_inc_pre 2" "p_inc_pre res"))) (("" (EXPAND "p_inclusion_pre") (("" (WITH-LABELS (FLATTEN "p_inc_pre res") (("beval2" "target"))) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr" "beval2") (("" (LIFT-IF "beval2") (("" (ASSERT) (("" (WITH-LABELS (SPLIT "beval2") "some2") (("" (HIDE "target") (("" (EXPAND "BEval_Box_post" "post 1") (("" (ASSERT) (("" (WITH-LABELS (FLATTEN "post 1") (("somm1" "cachem1" "nextidm1"))) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" "somm1") (("" (LIFT-IF "somm1") (("" (ASSERT "somm1") (("" (SPLIT "somm1") (("1" (WITH-LABELS (FLATTEN "somm1") (("some0" "some1" "lastid0"))) (("1" (ASSERT) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 0") (("vars0" "n0" "comp0" "nextid>=fistid 0" "iaccniig0" "nicniig0" "vrcib0" "res0"))) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 1") (("vars1" "n1" "comp1" "nextid>=fistid 1" "iaccniig1" "nicniig1" "vrcib1" "res1"))) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 2") (("vars2" "n2" "comp2" "nextid>=fistid 2" "iaccniig2" "nicniig2" "vrcib2" "res2"))) (("1" (REVEAL "target") (("1" (EXPAND "beval_vs_BLETIN_BoolExpr") (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_BoolExpr_pre_preservation-2| "" 3789916850 ("" (WITH-LABELS (SKEEP*) (("p_inc_pre 0" "post 0" "p_inc_pre 1" "post 1" "p_inc_pre 2" "p_inc_pre res"))) (("" (EXPAND "p_inclusion_pre") (("" (WITH-LABELS (FLATTEN "p_inc_pre res") ((BEVAL2 TARGET))) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr" BEVAL2) (("" (LIFT-IF BEVAL2) (("" (ASSERT) (("" (WITH-LABELS (SPLIT BEVAL2) SOME2) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_post" "post 1") (("" (ASSERT) (("" (WITH-LABELS (FLATTEN "post 1") ((SOMM1 CACHEM1 NEXTIDM1))) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" SOMM1) (("" (LIFT-IF SOMM1) (("" (ASSERT SOMM1) (("" (SPLIT SOMM1) (("1" (WITH-LABELS (FLATTEN SOMM1) ((SOME0 SOME1 LASTID0))) (("1" (ASSERT) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 0") ((VARS0 N0 COMP0 "nextid>=fistid 0" IACCNIIG0 NICNIIG0 VRCIB0 RES0))) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 1") ((VARS1 N1 COMP1 "nextid>=fistid 1" IACCNIIG1 NICNIIG1 VRCIB1 RES1))) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 2") ((VARS2 N2 COMP2 "nextid>=fistid 2" IACCNIIG2 NICNIIG2 VRCIB2 RES2))) (("1" (REVEAL TARGET) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr") (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_BoolExpr| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|BEval_Box_BLETIN_BoolExpr_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|beval_vs_BLETIN_BoolExpr| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|BLETIN_BoolExpr_pre_preservation-1| |nil| 3639327452 ("" (WITH-LABELS (SKEEP*) (("p_inc_pre 0" "post 0" "p_inc_pre 1" "post 1" "p_inc_pre 2" "p_inc_pre res"))) (("" (EXPAND "p_inclusion_pre") (("" (WITH-LABELS (FLATTEN "p_inc_pre res") ((BEVAL2 TARGET))) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr" BEVAL2) (("" (LIFT-IF BEVAL2) (("" (ASSERT) (("" (WITH-LABELS (SPLIT BEVAL2) SOME2) (("" (HIDE TARGET) (("" (EXPAND "BEval_Box_post" "post 1") (("" (ASSERT) (("" (WITH-LABELS (FLATTEN "post 1") ((SOMM1 CACHEM1 NEXTIDM1))) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" SOMM1) (("" (LIFT-IF SOMM1) (("" (ASSERT SOMM1) (("" (SPLIT SOMM1) (("1" (WITH-LABELS (FLATTEN SOMM1) ((SOME0 SOME1 LASTID0))) (("1" (ASSERT) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 0") ((VARS0 N0 COMP0 "nextid>=fistid 0" IACCNIIG0 NICNIIG0 VRCIB0 RES0))) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 1") ((VARS1 N1 COMP1 "nextid>=fistid 1" IACCNIIG1 NICNIIG1 VRCIB1 RES1))) (("1" (WITH-LABELS (FLATTEN "p_inc_pre 2") ((VARS2 N2 COMP2 "nextid>=fistid 2" IACCNIIG2 NICNIIG2 VRCIB2 RES2))) (("1" (REVEAL TARGET) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr") (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr" "target" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|BLETIN_BoolExpr_merge1_pre_preservation_TCC1| 0 (|BLETIN_BoolExpr_merge1_pre_preservation_TCC1-1| |nil| 3639322923 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL)) NIL (|BLETIN_BoolExpr_merge1_pre_preservation| SUBTYPE "affine_boolexpr.gct0" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BLETIN_BoolExpr_merge1_pre_preservation_TCC2| 0 (|BLETIN_BoolExpr_merge1_pre_preservation_TCC2-1| |nil| 3639322923 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|BLETIN_BoolExpr_merge1_pre_preservation| SUBTYPE "affine_boolexpr.gct1" "CDBB(affine_boolexpr.bexpr, affine_boolexpr.box, affine_boolexpr.first_added_idx)"))) (|BLETIN_BoolExpr_merge1_pre_preservation| 0 (|BLETIN_BoolExpr_merge1_pre_preservation-6| "" 3883667663 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -7) (("1" (INST -7 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" 1 2) (("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF" "1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                             (val
                                                                  [[# box: Box,
                                                                      nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                      cache:
                                                                        {c_: (correct_cache?(box)) |
                                                                                 idxs_bounded(nextid)(c_)},
                                                                      result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                                                  (gct1)`result)") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 2) (("2" (CASE "some?(fct1`result)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -6) (("1" (INST -6 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (EXPAND "##") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" 1 2) (("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean](val
                       [[# box: Box,
                           nextid: {n_: nat | n_ > last_idx_in_box(box)},
                           cache:
                             {c_: (correct_cache?(box)) |
                                      idxs_bounded(nextid)(c_)},
                           result: Maybe[bool] , nxtlcl : above(last_idx_in_box(box))  #]]
                       (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST 2 "-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SPLIT 3) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -5) (("1" (INST -5 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "##") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (EXPAND "##") (("2" (EXPAND "nth") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i") (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" 1 2) (("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                    (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_BoolExpr_merge1_pre_preservation-5| "" 3789916859 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -7) (("1" (INST -7 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" 1 2) (("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF" "1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                             (val
                                                                  [[# box: Box,
                                                                      nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                      cache:
                                                                        {c_: (correct_cache?(box)) |
                                                                                 idxs_bounded(nextid)(c_)},
                                                                      result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                                                  (gct1)`result)") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 2) (("2" (CASE "some?(fct1`result)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -6) (("1" (INST -6 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (EXPAND "##") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" 1 2) (("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean](val
                       [[# box: Box,
                           nextid: {n_: nat | n_ > last_idx_in_box(box)},
                           cache:
                             {c_: (correct_cache?(box)) |
                                      idxs_bounded(nextid)(c_)},
                           result: Maybe[bool] , nxtlcl : above(last_idx_in_box(box))  #]]
                       (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST 2 -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SPLIT 3) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -5) (("1" (INST -5 "i") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "##") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (EXPAND "##") (("2" (EXPAND "nth") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" -1 2) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (REPLACES -1) (("2" (EXPAND "length" 1 2) (("2" (EXPAND "length" 1 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                    (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|BEval_Box_BLETIN_BoolExpr_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|vrcib_box_growing_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|nicniig_box_growing_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|iacniig_box_growing_preservation| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|cp_box_vs_expansion| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|nnrat_plus_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|) (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|gct1| SKOLEM-CONST-DECL "CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))" |affine_boolexpr| NIL) (|box| SKOLEM-CONST-DECL "Box" |affine_boolexpr| NIL) (|bexpr| SKOLEM-CONST-DECL "BoolExpr" |affine_boolexpr| NIL) (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals| NIL) (|nprat_div_posrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL) (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|BLETIN_BoolExpr_merge1_pre_preservation-4| "" 3646481613 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -7) (("1" (INST -7 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF" "1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                             (val
                                                                  [[# box: Box,
                                                                      nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                      cache:
                                                                        {c_: (correct_cache?(box)) |
                                                                                 idxs_bounded(nextid)(c_)},
                                                                      result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                                                  (gct1)`result)") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 2) (("2" (CASE "some?(fct1`result)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -6) (("1" (INST -6 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (EXPAND "##") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean](val
                       [[# box: Box,
                           nextid: {n_: nat | n_ > last_idx_in_box(box)},
                           cache:
                             {c_: (correct_cache?(box)) |
                                      idxs_bounded(nextid)(c_)},
                           result: Maybe[bool] , nxtlcl : above(last_idx_in_box(box))  #]]
                       (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST 2 -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SPLIT 3) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -5) (("1" (INST -5 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "##") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (EXPAND "##") (("2" (EXPAND "nth") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool], nxtlcl : above(last_idx_in_box(box)) #]]
                                    (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|BLETIN_BoolExpr_merge1_pre_preservation-3| "" 3646481584 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -7) (("1" (INST -7 "i") NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                    THEN [|-1, 1|]
                                                    ELSIF val(val(gct1)`result)
                                                    THEN [|1/2, 1|]
                                                    ELSE [|-1, -1 / 2|]
                                                    ENDIF" "1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (PROPAX) NIL))))) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                              (val
                                                   [[# box: Box,
                                                       nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                       cache:
                                                         {c_: (correct_cache?(box)) |
                                                                  idxs_bounded(nextid)(c_)},
                                                       result: Maybe[bool] #]]
                                                   (gct1)`result)") (("1" (ASSERT) (("1" (INST?) NIL))) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL))))))))))) ("3" (FLATTEN) (("3" (ASSERT) NIL))))))) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("7" (PROPAX) NIL))))))))) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 2) (("2" (CASE "some?(fct1`result)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -6) (("1" (INST -6 "i") NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL))))) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (EXPAND "##") (("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (PROPAX) NIL))))) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                                 (val
                                                                      [[# box: Box,
                                                                          nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                          cache:
                                                                            {c_: (correct_cache?(box)) |
                                                                                     idxs_bounded(nextid)(c_)},
                                                                          result: Maybe[bool] #]]
                                                                      (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL))))) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST 2 -1) (("2" (ASSERT) NIL))))))))))) ("3" (FLATTEN) (("3" (ASSERT) NIL))))))) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("7" (PROPAX) NIL))))) ("2" (ASSERT) (("2" (SPLIT 3) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -5) (("1" (INST -5 "i") NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "##") (("1" (EXPAND "nth") (("1" (ASSERT) NIL))))))))) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL))) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (EXPAND "##") (("2" (EXPAND "nth") (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))))))))))))))) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL))))))) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                                THEN [|-1, 1|]
                                                                ELSIF val(val(gct1)`result)
                                                                THEN [|1/2, 1|]
                                                                ELSE [|-1, -1 / 2|]
                                                                ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (PROPAX) NIL))))) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                                 (val
                                                                      [[# box: Box,
                                                                          nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                                          cache:
                                                                            {c_: (correct_cache?(box)) |
                                                                                     idxs_bounded(nextid)(c_)},
                                                                          result: Maybe[bool] #]]
                                                                      (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL))))) ("2" (ASSERT) NIL))))) ("3" (FLATTEN) (("3" (ASSERT) NIL))))))) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL))))) ("7" (PROPAX) NIL))))))))))))))))))))))) ("2" (PROPAX) NIL)))))))))))))) NIL) NIL NIL) (|more_list_props| "" 3644770082 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -7) (("1" (INST -7 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                            THEN [|-1, 1|]
                                            ELSIF val(val(gct1)`result)
                                            THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF" "1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                               (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool] #]]
                                    (gct1)`result)") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 2) (("2" (CASE "some?(fct1`result)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -6) (("1" (INST -6 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (ASSERT) (("2" (EXPAND "nth") (("2" (EXPAND "##") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                      THEN [|-1, 1|]
                                                      ELSIF val(val(gct1)`result)
                                                      THEN [|1/2, 1|]
                                                      ELSE [|-1, -1 / 2|]
                                                      ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                (val
                                                     [[# box: Box,
                                                         nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                         cache:
                                                           {c_: (correct_cache?(box)) |
                                                                    idxs_bounded(nextid)(c_)},
                                                         result: Maybe[bool] #]]
                                                     (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST 2 -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SPLIT 3) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -5) (("1" (INST -5 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "more_list_props[Interval].nth_append") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND "##") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT 2) (("2" (EXPAND "##") (("2" (EXPAND "nth") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                                      THEN [|-1, 1|]
                                                      ELSIF val(val(gct1)`result)
                                                      THEN [|1/2, 1|]
                                                      ELSE [|-1, -1 / 2|]
                                                      ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                                                (val
                                                     [[# box: Box,
                                                         nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                                         cache:
                                                           {c_: (correct_cache?(box)) |
                                                                    idxs_bounded(nextid)(c_)},
                                                         result: Maybe[bool] #]]
                                                     (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_BoolExpr_merge1_pre_preservation-2| "" 3639335741 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "nth_append2[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -7) (("1" (INST -7 "i") (("1" (REPLACE -8 :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "nth_append[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 3) (("1" (EXPAND "length" 1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                    THEN [|-1, 1|]
                                    ELSIF val(val(gct1)`result)
                                    THEN [|1/2, 1|]
                                    ELSE [|-1, -1 / 2|]
                                    ENDIF" "1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                (val
                     [[# box: Box,
                         nextid: {n_: nat | n_ > last_idx_in_box(box)},
                         cache:
                           {c_: (correct_cache?(box)) |
                                    idxs_bounded(nextid)(c_)},
                         result: Maybe[bool] #]]
                     (gct1)`result)") (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 2) (("2" (CASE "some?(fct1`result)") (("1" (ASSERT) (("1" (SPLIT 2) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "nth_append2[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -6) (("1" (INST -6 "i") (("1" (REPLACE -7 :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "nth_append[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 3) (("1" (EXPAND "length" 1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                            THEN [|-1, 1|]
                                            ELSIF val(val(gct1)`result)
                                            THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -7) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                               (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool] #]]
                                    (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) (("2" (INST 2 -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SPLIT 3) (("1" (EXPAND "vars_in_box?" 1) (("1" (SKEEP) (("1" (CASE "i<length(val(gct0)`box)") (("1" (USE "nth_append2[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box?" -5) (("1" (INST -5 "i") (("1" (REPLACE -6 :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "i=length(val(gct0)`box)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "nth_append[Interval]") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 3) (("1" (EXPAND "length" 1 3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED I) (("2" (ASSERT) (("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("1" (REPLACES -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (LEMMA "cp_box_vs_expansion") (("3" (INST -1 "val(gct0)`box" "fct0`vs" "first_added_idx" "val(gct0)`nextid" "val(gct0)`cache" "IF none?(val(gct1)`result)
                                            THEN [|-1, 1|]
                                            ELSIF val(val(gct1)`result)
                                            THEN [|1/2, 1|]
                                            ELSE [|-1, -1 / 2|]
                                            ENDIF" "-1") (("1" (ASSERT) (("1" (REPLACE -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "none?[boolean]
                               (val
                                    [[# box: Box,
                                        nextid: {n_: nat | n_ > last_idx_in_box(box)},
                                        cache:
                                          {c_: (correct_cache?(box)) |
                                                   idxs_bounded(nextid)(c_)},
                                        result: Maybe[bool] #]]
                                    (gct1)`result)") (("1" (ASSERT) (("1" (INST 1 "-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (USE "iacniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (USE "nicniig_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (USE "vrcib_box_growing_preservation") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BLETIN_BoolExpr_merge1_pre_preservation-1| |nil| 3639328365 ("" (SKEEP*) (("" (EXPAND "p_inclusion_pre") (("" (FLATTEN) (("" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" -3) (("" (LIFT-IF -3) (("" (ASSERT) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BLETIN_BoolExpr_merge1") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BLETIN_BoolExpr_merge1" 1) (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|BITE_preservation_TCC1| 0 (|BITE_preservation_TCC1-1| |nil| 3640431482 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL)) NIL (|BITE_preservation| SUBTYPE "(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))" "upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))"))) (|BITE_preservation| 0 (|BITE_preservation-3| "" 3789916862 ("" (SKEEP*) (("" (EXPAND "BEval_Box_BITE") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (EXPAND "beval_vs_post") (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -6) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -5) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post" -20) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_post") (("1" (EXPAND "beval_vs_BITE_merge2") (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE_merge1") (("1" (ASSERT) (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REPLACES -4) (("2" (APPLY-EXTENSIONALITY 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|BEval_Box_BITE| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|beval_vs_BITE| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Maybe_Some_extensionality| FORMULA-DECL NIL |Maybe| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (> CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|beval_vs_BITE_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|beval_vs_BITE_merge2| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|BITE_preservation-2| |nil| 3646480973 ("" (SKEEP*) (("" (EXPAND "BEval_Box_BITE") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (EXPAND "beval_vs_post") (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -6) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -5) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post" -20) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_post") (("1" (EXPAND "beval_vs_BITE_merge2") (("1" (FLATTEN) (("1" (REPLACES -38) (("1" (EXPAND "beval_vs_BITE_merge1") (("1" (REPLACES -35) (("1" (ASSERT) (("1" (REPLACES -23) (("1" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REPLACES -4) (("2" (REPLACES -29) (("2" (APPLY-EXTENSIONALITY 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_post") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (EXPAND "beval_vs_post") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|BITE_preservation-1| |nil| 3640431483 ("" (SKEEP*) (("" (EXPAND "BEval_Box_BITE") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (EXPAND "beval_vs_post") (("1" (ASSERT) (("1" (EXPAND "p_inclusion_pre" -3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "BEval_Box_post") (("1" (FLATTEN) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "BEval_Box_post" -13) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" 1) (("1" (EXPAND "beval_vs_BITE_merge2") (("1" (EXPAND "BEval_Box_BITE_merge2") (("1" (EXPAND "BEval_Box_BITE_merge1") (("1" (EXPAND "BEval_Box_post") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "BEval_Box_post") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REPLACE -4 2 :HIDE? T) (("2" (APPLY-EXTENSIONALITY 2) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "BEval_Box_BITE_merge2") (("2" (EXPAND "p_inclusion_pre" 2) (("2" (EXPAND "p_inclusion_pre" -6) (("2" (EXPAND "BEval_Box_post" -12) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "p_inclusion_pre") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|beval___TCC1| 0 (|beval___TCC1-2| "" 3640448228 ("" (SKEEP) (("" (TYPEPRED "beval_vs((# `result := None[bool], `vs := vs, `n := n #))(bexpr)") (("" (EXPAND "beval_vs_post") (("" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL) ((|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|None| ADT-CONSTRUCTOR-DECL "(none?)" |Maybe| |structures|) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|beval__| SUBTYPE "affine_boolexpr.beval_vs((# `result := Maybe[bool].None, `vs := affine_boolexpr.vs, `n := affine_boolexpr.n #))(affine_boolexpr.bexpr)`result" "(Maybe[bool].some?)")) (|beval___TCC1-1| |nil| 3639912895 ("" (SKEEP*) (("" (EXPAND "beval_vs") (("" (TYPEPRED "boolexpr_lfcs
               [ContextData_beval_vs, beval_vs_post, beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND,
                beval_vs_BOR, beval_vs_BIMPLIES, beval_vs_BREL, beval_vs_BINCLUDES,
                beval_vs_BITE_merge1, beval_vs_BITE_merge2, beval_vs_BITE,
                beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F
               (bexpr)((# `result := None[bool], `vs := vs, `n := n #))") (("" (EXPAND "beval_vs_post") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|beval__| SUBTYPE "affine_boolexpr.beval_vs((# `result := Maybe[bool].None, `vs := affine_boolexpr.vs, `n := affine_boolexpr.n #))(affine_boolexpr.bexpr)`result" "(Maybe[bool].some?)"))) (|BEval__TCC1| 0 (|BEval__TCC1-1| |nil| 3638882655 ("" (SUBTYPE-TCC) NIL NIL) ((|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL)) NIL (|BEval_| SUBTYPE "affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box)" "upfrom(affine_boolexpr.first_noise_idx_available_box(affine_boolexpr.bexpr, affine_boolexpr.box))"))) (|BEval_inclusion____| 0 (|BEval_inclusion____-5| "" 3743866780 ("" (SKEEP*) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "BEval_") (("" (LIFT-IF -1) (("" (ASSERT) (("" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box") (("1" (EXPAND "beval__") (("1" (LEMMA "boolexpr_lfcmrs[ContextData_beval_vs
                          	         , beval_vs_post
                      					      , beval_vs_BCONST,
                                                                    beval_vs_BNOT, beval_vs_BAND,
                 						   beval_vs_BOR, beval_vs_BIMPLIES,
                 						   beval_vs_BREL, beval_vs_BINCLUDES,
                                       		  beval_vs_BITE_merge1,
                                       		  beval_vs_BITE_merge2,
                                       		  beval_vs_BITE,
                                                                    beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                                    beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                                CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_post(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BCONST(bexpr, box,
                                                                                first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BNOT(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BAND(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BOR(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BIMPLIES(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BREL(bexpr, box,
                                                                              first_noise_idx_available_box(bexpr, box)),
                                                               BEval_Box_BINCLUDES(bexpr, box,
                                                                                   first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                   BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                   BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                   BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                                 box)),
                                                               BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                             box,
                                                                                             first_noise_idx_available_box
                                                                                             (bexpr, box)),
                                                               BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                         box,
                                                                                         first_noise_idx_available_box
                                                                                         (bexpr, box)),
                                                               BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                                box,
                                                                                                first_noise_idx_available_box
                                                                                                (bexpr, box)),
                                                               BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                         box,
                                                                                         first_noise_idx_available_box
                                                                                         (bexpr, box))
                                                					
                                                                   , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                              (bexpr,
                                                                                                               box)))].preservation_property") (("1" (INST -1 "bexpr" "_" "_") (("1" (INST -1 "(# `result := None[bool], `vs := vs, `n := length(box) #)::ContextData_beval_vs" "_") (("1" (INST -1 "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                                           (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])") (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (HIDE -2 -3) (("1" (FLATTEN) (("1" (EXPAND "beval_vs") (("1" (NAME-REPLACE "f1" "boolexpr_lfcs
                                               [ContextData_beval_vs, beval_vs_post,
                                                beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                                                beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE_merge1,
                                                beval_vs_BITE_merge2, beval_vs_BITE, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F") (("1" (NAME-REPLACE "f2" "boolexpr_lfcs
                                                  [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                                                 first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                                                    first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F") (("1" (NAME-REPLACE "a" "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result") (("1" (NAME-REPLACE "b" "val(f2(bexpr)
                                                                                                                          (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                                                  (None[bool], box,
                                                                                                                                   first_noise_idx_available_box(bexpr, box),
                                                                                                                                   null[CacheData])))`result") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (EXPAND "mk_CDBB") (("2" (SPLIT 1) (("1" (EXPAND "compatible_pairs?") (("1" (TYPEPRED "vs") (("1" (USE "vib_vibnoise") (("1" (ASSERT) (("1" (EXPAND "vars_in_box_noise?") (("1" (FLATTEN) (("1" (SKOLEM -2 "N") (("1" (INST 1 "N") (("1" (ASSERT) (("1" (EXPAND "compatible_pairs_on?") (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (ASSERT) (("1" (SKEEP) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (SKEEP :PREDS? T) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "new_idxs_cache_not_in_idx_gap") (("3" (SKEEP :PREDS? T) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "varidxs_re_cache_in_box") (("4" (SKEEP :PREDS? T) (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BIMPLIES_preservation") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP*) (("3" (USE "BEval_Box_BOR_preservation") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP*) (("4" (EXPAND "BEval_Box_BITE_merge2") (("4" (EXPAND "beval_vs_BITE_merge2") (("4" (LIFT-IF 1) (("4" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (EXPAND "beval_vs_BITE_merge1") (("5" (EXPAND "BEval_Box_BITE_merge1") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP*) (("6" (USE "BITE_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKEEP*) (("7" (ASSERT) (("7" (USE "BLETIN_BoolExpr_merge1_pre_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKEEP*) (("8" (USE "BLETIN_BoolExpr_pre_preservation") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKEEP*) (("9" (USE "BLETIN_RealExpr_ini_pre_preservation") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE-ALL-BUT 1) (("10" (SKEEP*) (("10" (USE "BLETIN_RealExpr_pre_preservation") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("11" (HIDE-ALL-BUT 1) (("11" (SKEEP*) (("11" (USE "BREL_pre_preservation") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE-ALL-BUT 1) (("12" (SKEEP*) (("12" (USE "BINCLUDES_pre_preservation") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE-ALL-BUT 1) (("13" (SKEEP*) (("13" (USE "BEval_Box_BAND_preservation") (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKEEP*) (("14" (EXPAND "p_inclusion_pre") (("14" (FLATTEN) (("14" (EXPAND "BEval_Box_BNOT" -4) (("14" (LIFT-IF -4) (("14" (ASSERT) (("14" (SPLIT -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BNOT") (("1" (EXPAND "beval_vs_post") (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BNOT") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKEEP*) (("15" (EXPAND "p_inclusion_pre") (("15" (FLATTEN) (("15" (EXPAND "BEval_Box_BCONST") (("15" (LIFT-IF -2) (("15" (ASSERT) (("15" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_BCONST") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|BEval_| CONST-DECL "Maybe[Maybe[bool]]" |affine_boolexpr| NIL) (|beval__| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BAND_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BINCLUDES_pre_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BREL_pre_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BLETIN_RealExpr_pre_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BLETIN_RealExpr_ini_pre_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BLETIN_BoolExpr_pre_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BLETIN_BoolExpr_merge1_pre_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BITE_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|BEval_Box_BOR_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_BIMPLIES_preservation| FORMULA-DECL NIL |affine_boolexpr| NIL) (|mk_CDBB| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|vib_vibnoise| FORMULA-DECL NIL |affine_box| NIL) (|vars_in_box_noise?| CONST-DECL "bool" |affine_box| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|beval_vs| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (F DEF-DECL "(post(bexpr, ctxt0))" |boolexpr_lfcs| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|) (|None| ADT-CONSTRUCTOR-DECL "(none?)" |Maybe| |structures|) (|none?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (BIMPLIES ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bimplies?)]" |IntervalExpr_adt| |interval_arith|) (BOR ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (bor?)]" |IntervalExpr_adt| |interval_arith|) (BITE ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr, BoolExpr] -> (bite?)]" |IntervalExpr_adt| |interval_arith|) (BLETIN ADT-CONSTRUCTOR-DECL "[[IntervalExpr, BoolExpr] -> (bletin?)]" |IntervalExpr_adt| |interval_arith|) (|realorder?| CONST-DECL "bool" |real_orders| |reals|) (|RealOrder| TYPE-EQ-DECL NIL |real_orders| |reals|) (BREL ADT-CONSTRUCTOR-DECL "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" |IntervalExpr_adt| |interval_arith|) (BINCLUDES ADT-CONSTRUCTOR-DECL "[[RealExpr, Interval] -> (bincludes?)]" |IntervalExpr_adt| |interval_arith|) (BAND ADT-CONSTRUCTOR-DECL "[[BoolExpr, BoolExpr] -> (band?)]" |IntervalExpr_adt| |interval_arith|) (BNOT ADT-CONSTRUCTOR-DECL "[BoolExpr -> (bnot?)]" |IntervalExpr_adt| |interval_arith|) (BCONST ADT-CONSTRUCTOR-DECL "[bool -> (bconst?)]" |IntervalExpr_adt| |interval_arith|) (|preservation_property| FORMULA-DECL NIL |boolexpr_lfcmrs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Maybe| TYPE-DECL NIL |Maybe| |structures|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|ContextData_beval_vs| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|beval_vs_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|beval_vs_BCONST| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (|bop| ADT-ACCESSOR-DECL "[(bnot?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BNOT| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|bop1| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bop2| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BAND| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|beval_vs_BOR| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|beval_vs_BIMPLIES| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|beval_vs_BREL| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (|beval_vs_BINCLUDES| CONST-DECL "(beval_vs_post(bexpr, ctxt))" |affine_boolexpr| NIL) (|beval_vs_BITE_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|beval_vs_BITE_merge2| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|bif| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|bthen| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|belse| ADT-ACCESSOR-DECL "[(bite?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BITE| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|realexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|beval_vs_BLETIN_RealExpr_ini| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|blet| ADT-ACCESSOR-DECL "[(bletin?) -> IntervalExpr]" |IntervalExpr_adt| |interval_arith|) (|bin| ADT-ACCESSOR-DECL "[(bletin?) -> BoolExpr]" |IntervalExpr_adt| |interval_arith|) (|beval_vs_BLETIN_RealExpr| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|beval_vs_BLETIN_BoolExpr_merge1| CONST-DECL "ContextData_beval_vs" |affine_boolexpr| NIL) (|boolexpr?| CONST-DECL "bool" |interval_expr| |interval_arith|) (|beval_vs_BLETIN_BoolExpr| CONST-DECL "(beval_vs_post(bexpr, ctxt0))" |affine_boolexpr| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|ContextData_BEval_Box| TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|) (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) (|first_noise_idx_available_box| CONST-DECL "nat" |affine_boolexpr| NIL) (CDBB TYPE-EQ-DECL NIL |affine_boolexpr| NIL) (|BEval_Box_post| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box_BCONST| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))" |affine_boolexpr| NIL) (|BEval_Box_BNOT| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|BEval_Box_BAND| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|BEval_Box_BOR| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|BEval_Box_BIMPLIES| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|BEval_Box_BREL| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))" |affine_boolexpr| NIL) (|BEval_Box_BINCLUDES| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt_))" |affine_boolexpr| NIL) (|BEval_Box_BITE_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|BEval_Box_BITE_merge2| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|BEval_Box_BITE| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_RealExpr_ini| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_RealExpr| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_BoolExpr_merge1| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|BEval_Box_BLETIN_BoolExpr| CONST-DECL "(BEval_Box_post(initial_bexpr, initial_box, first_added_idx)(bexpr, ctxt0_))" |affine_boolexpr| NIL) (|p_inclusion_pre| CONST-DECL "bool" |affine_boolexpr| NIL) (|BEval_Box| CONST-DECL "CDBB(initial_bexpr, initial_box, first_added_idx)" |affine_boolexpr| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|BEval_inclusion____-4| "" 3640361572 ("" (SKEEP*) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "BEval_") (("" (LIFT-IF -1) (("" (ASSERT) (("" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box") (("1" (EXPAND "beval__") (("1" (LEMMA "boolexpr_lfcmrs[ContextData_beval_vs
                      	         , beval_vs_post
                  					      , beval_vs_BCONST,
                                                                beval_vs_BNOT, beval_vs_BAND,
             						   beval_vs_BOR, beval_vs_BIMPLIES,
             						   beval_vs_BREL, beval_vs_BINCLUDES,
                                   		  beval_vs_BITE_merge1,
                                   		  beval_vs_BITE_merge2,
                                   		  beval_vs_BITE,
                                                                beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                            CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_post(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BCONST(bexpr, box,
                                                                            first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BNOT(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BAND(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BOR(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BIMPLIES(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BREL(bexpr, box,
                                                                          first_noise_idx_available_box(bexpr, box)),
                                                           BEval_Box_BINCLUDES(bexpr, box,
                                                                               first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                               BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                               BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                               BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                             box)),
                                                           BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                         box,
                                                                                         first_noise_idx_available_box
                                                                                         (bexpr, box)),
                                                           BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box)),
                                                           BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                            box,
                                                                                            first_noise_idx_available_box
                                                                                            (bexpr, box)),
                                                           BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box))
                                            					
                                                               , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                          (bexpr,
                                                                                                           box)))].preservation_property") (("1" (INST -1 "bexpr" "_" "_") (("1" (INST -1 "(# `result := None[bool], `vs := vs, `n := length(box) #)::ContextData_beval_vs" "_") (("1" (INST -1 "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                                     (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])") (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (HIDE -2 -3) (("1" (FLATTEN) (("1" (EXPAND "beval_vs") (("1" (NAME-REPLACE "f1" "boolexpr_lfcs
                                       [ContextData_beval_vs, beval_vs_post,
                                        beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                                        beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE_merge1,
                                        beval_vs_BITE_merge2, beval_vs_BITE, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                        beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F") (("1" (NAME-REPLACE "f2" "boolexpr_lfcs
                                          [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                                         first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                                            first_noise_idx_available_box(bexpr, box)),
                                           BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F") (("1" (NAME-REPLACE "a" "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result") (("1" (NAME-REPLACE "b" "val(f2(bexpr)
                                                                                                                  (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                                          (None[bool], box,
                                                                                                                           first_noise_idx_available_box(bexpr, box),
                                                                                                                           null[CacheData])))`result") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (EXPAND "mk_CDBB") (("2" (SPLIT 1) (("1" (EXPAND "compatible_pairs?") (("1" (TYPEPRED "vs") (("1" (USE "vib_vibnoise") (("1" (ASSERT) (("1" (EXPAND "vars_in_box_noise?") (("1" (FLATTEN) (("1" (SKOLEM -2 "N") (("1" (INST 1 "N") (("1" (ASSERT) (("1" (EXPAND "compatible_pairs_on?") (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (SKEEP :PREDS? T) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "new_idxs_cache_not_in_idx_gap") (("3" (SKEEP :PREDS? T) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (EXPAND "varidxs_re_cache_in_box") (("4" (SKEEP :PREDS? T) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BIMPLIES_preservation") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP*) (("3" (USE "BEval_Box_BOR_preservation") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP*) (("4" (EXPAND "BEval_Box_BITE_merge2") (("4" (EXPAND "beval_vs_BITE_merge2") (("4" (LIFT-IF 1) (("4" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (EXPAND "beval_vs_BITE_merge1") (("5" (EXPAND "BEval_Box_BITE_merge1") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP*) (("6" (USE "BITE_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKEEP*) (("7" (ASSERT) (("7" (USE "BLETIN_BoolExpr_merge1_pre_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKEEP*) (("8" (USE "BLETIN_BoolExpr_pre_preservation") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKEEP*) (("9" (USE "BLETIN_RealExpr_ini_pre_preservation") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE-ALL-BUT 1) (("10" (SKEEP*) (("10" (USE "BLETIN_RealExpr_pre_preservation") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("11" (HIDE-ALL-BUT 1) (("11" (SKEEP*) (("11" (USE "BREL_pre_preservation") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE-ALL-BUT 1) (("12" (SKEEP*) (("12" (USE "BINCLUDES_pre_preservation") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE-ALL-BUT 1) (("13" (SKEEP*) (("13" (USE "BEval_Box_BAND_preservation") (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKEEP*) (("14" (EXPAND "p_inclusion_pre") (("14" (FLATTEN) (("14" (EXPAND "BEval_Box_BNOT" -4) (("14" (LIFT-IF -4) (("14" (ASSERT) (("14" (SPLIT -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BNOT") (("1" (EXPAND "beval_vs_post") (("1" (ASSERT) (("1" (EXPAND "BEval_Box_BNOT") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKEEP*) (("15" (EXPAND "p_inclusion_pre") (("15" (FLATTEN) (("15" (EXPAND "BEval_Box_BCONST") (("15" (LIFT-IF -2) (("15" (ASSERT) (("15" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "beval_vs_BCONST") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|BEval_inclusion____-3| |nil| 3640359321 ("" (SKEEP*) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "BEval_") (("" (LIFT-IF -1) (("" (ASSERT) (("" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box") (("1" (EXPAND "beval__") (("1" (LEMMA "boolexpr_lfcmrs[ContextData_beval_vs
                  	         , LAMBDA(bexpr,ctxt0)(ctxt): some?(ctxt`result)
              					      , beval_vs_BCONST,
                                                            beval_vs_BNOT, beval_vs_BAND,
         						   beval_vs_BOR, beval_vs_BIMPLIES,
         						   beval_vs_BREL, beval_vs_BINCLUDES,
                               		  beval_vs_BITE_merge1,
                               		  beval_vs_BITE_merge2,
                               		  beval_vs_BITE,
                                                            beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                            beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                        CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_post(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BCONST(bexpr, box,
                                                                        first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BNOT(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BAND(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BOR(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BIMPLIES(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BREL(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BINCLUDES(bexpr, box,
                                                                           first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                           BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                           BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                           BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                                                       BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box)),
                                                       BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                        box,
                                                                                        first_noise_idx_available_box
                                                                                        (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box))
                                        					
                                                           , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                      (bexpr,
                                                                                                       box)))].preservation_property") (("1" (INST -1 "bexpr" "_" "_") (("1" (INST -1 "(# `result := None, `vs := vs, `n := length(box) #)::ContextData_beval_vs" "_") (("1" (INST -1 "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                               (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])") (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (HIDE -2 -3) (("1" (FLATTEN) (("1" (EXPAND "beval_vs") (("1" (NAME-REPLACE "f1" "boolexpr_lfcs
                               [ContextData_beval_vs, LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): some?(ctxt`result),
                                beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                                beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE_merge1,
                                beval_vs_BITE_merge2, beval_vs_BITE, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F") (("1" (NAME-REPLACE "f2" "boolexpr_lfcs
                                  [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                                 first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                                    first_noise_idx_available_box(bexpr, box)),
                                   BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F") (("1" (NAME-REPLACE "a" "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result") (("1" (NAME-REPLACE "b" "val(f2(bexpr)
                                                                                                        (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                                (None[bool], box,
                                                                                                                 first_noise_idx_available_box(bexpr, box),
                                                                                                                 null[CacheData])))`result") (("1" (ASSERT) NIL))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BLETIN_RealExpr_post") (("2" (ASSERT) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (EXPAND "mk_CDBB") (("2" (SPLIT 1) (("1" (EXPAND "compatible_pairs?") (("1" (TYPEPRED "vs") (("1" (USE "vib_vibnoise") (("1" (ASSERT) (("1" (EXPAND "vars_in_box_noise?") (("1" (FLATTEN) (("1" (SKOLEM -2 "N") (("1" (INST 1 "N") (("1" (ASSERT) (("1" (EXPAND "compatible_pairs_on?") (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (ASSERT) NIL))))))))))))))))))))))))) ("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (SKEEP :PREDS? T) (("2" (ASSERT) NIL))))) ("3" (EXPAND "new_idxs_cache_not_in_idx_gap") (("3" (SKEEP :PREDS? T) (("3" (ASSERT) NIL))))) ("4" (EXPAND "varidxs_re_cache_in_box") (("4" (SKEEP :PREDS? T) (("4" (ASSERT) NIL))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BIMPLIES_preservation") (("2" (ASSERT) NIL))))))) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP*) (("3" (USE "BEval_Box_BOR_preservation") (("3" (ASSERT) NIL))))))) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP*) (("4" (USE "BEval_Box_BIMPLIES_post") (("4" (ASSERT) NIL))))))) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (USE "BEval_Box_BOR_post") (("5" (ASSERT) NIL))))))) ("6" (HIDE-ALL-BUT 1) (("6" (GRIND) NIL))) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL))) ("8" (HIDE-ALL-BUT 1) (("8" (SKEEP*) (("8" (EXPAND "BEval_Box_BITE_merge2") (("8" (EXPAND "beval_vs_BITE_merge2") (("8" (PROPAX) NIL))))))))) ("9" (HIDE-ALL-BUT 1) (("9" (SKEEP*) (("9" (EXPAND "beval_vs_BITE_merge1") (("9" (EXPAND "BEval_Box_BITE_merge1") (("9" (PROPAX) NIL))))))))) ("10" (HIDE-ALL-BUT 1) (("10" (SKEEP*) (("10" (EXPAND "BEval_Box_BITE") (("10" (LIFT-IF 1) (("10" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (EXPAND "p_inclusion_pre" -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL))))))))))) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -3) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (PROPAX) NIL))))))))))))))))) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (PROPAX) NIL))))))))))))))) ("11" (HIDE-ALL-BUT 1) (("11" (SKEEP*) (("11" (ASSERT) (("11" (USE "BEval_Box_BITE_post") (("11" (ASSERT) NIL))))))))) ("12" (HIDE-ALL-BUT 1) (("12" (GRIND) NIL))) ("13" (HIDE-ALL-BUT 1) (("13" (SKEEP*) (("13" (USE "BLETIN_BoolExpr_merge1_pre_preservation") (("13" (ASSERT) NIL))))))) ("14" (HIDE-ALL-BUT 1) (("14" (SKEEP*) (("14" (USE "BLETIN_BoolExpr_pre_preservation") (("14" (ASSERT) NIL))))))) ("15" (HIDE-ALL-BUT 1) (("15" (SKEEP*) (("15" (USE "BEval_Box_BLETIN_BoolExpr_post") (("15" (ASSERT) NIL))))))) ("16" (HIDE-ALL-BUT 1) (("16" (GRIND) NIL))) ("17" (HIDE-ALL-BUT 1) (("17" (SKEEP*) (("17" (USE "BLETIN_RealExpr_ini_pre_preservation") (("17" (ASSERT) NIL))))))) ("18" (HIDE-ALL-BUT 1) (("18" (SKEEP*) (("18" (USE "BLETIN_RealExpr_pre_preservation") (("18" (ASSERT) NIL))))))) ("19" (HIDE-ALL-BUT 1) (("19" (SKEEP*) (("19" (USE "BEval_Box_BLETIN_RealExpr_post") (("19" (ASSERT) NIL))))))) ("20" (HIDE-ALL-BUT 1) (("20" (GRIND) NIL))) ("21" (HIDE-ALL-BUT 1) (("21" (SKEEP*) (("21" (USE "BREL_pre_preservation") (("21" (ASSERT) NIL))))))) ("22" (HIDE-ALL-BUT 1) (("22" (SKEEP*) (("22" (USE "BEval_Box_BREL_post") NIL))))) ("23" (HIDE-ALL-BUT 1) (("23" (GRIND) NIL))) ("24" (HIDE-ALL-BUT 1) (("24" (SKEEP*) (("24" (USE "BINCLUDES_pre_preservation") (("24" (ASSERT) NIL))))))) ("25" (HIDE-ALL-BUT 1) (("25" (SKEEP*) (("25" (USE "BEval_Box_BINCLUDES_post") NIL))))) ("26" (HIDE-ALL-BUT 1) (("26" (GRIND) NIL))) ("27" (HIDE-ALL-BUT 1) (("27" (SKEEP*) (("27" (USE "BEval_Box_BAND_preservation") (("27" (ASSERT) NIL))))))) ("28" (HIDE-ALL-BUT 1) (("28" (SKEEP*) (("28" (EXPAND "p_inclusion_pre" -1) (("28" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BNOT" 1) (("1" (EXPAND "beval_vs_BNOT" 1) (("1" (ASSERT) (("1" (GRIND) NIL))))))))))))))) ("2" (EXPAND "p_inclusion_pre" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL))))))))))))))) ("29" (HIDE-ALL-BUT 1) (("29" (SKEEP*) (("29" (EXPAND "p_inclusion_pre" 1) (("29" (FLATTEN) (("29" (EXPAND "p_inclusion_pre" -1) (("29" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BCONST" 1) (("1" (EXPAND "beval_vs_BCONST" 1) (("1" (ASSERT) NIL))))))))) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL))))))))))))))) ("30" (HIDE-ALL-BUT 1) (("30" (SKEEP*) (("30" (USE "BEval_Box_BAND_post") (("30" (ASSERT) NIL))))))) ("31" (HIDE-ALL-BUT 1) (("31" (SKEEP*) (("31" (USE "BEval_Box_BNOT_post") (("31" (ASSERT) NIL))))))) ("32" (HIDE-ALL-BUT 1) (("32" (SKEEP*) (("32" (USE "BEval_Box_BCONST_post") NIL))))) ("33" (HIDE-ALL-BUT 1) (("33" (GRIND) NIL))) ("34" (HIDE-ALL-BUT 1) (("34" (GRIND) NIL))) ("35" (HIDE-ALL-BUT 1) (("35" (GRIND) NIL))))))))))) ("2" (PROPAX) NIL)))))))))))))) NIL) NIL NIL) (|BEval_inclusion____-2| |nil| 3639914392 ("" (SKEEP*) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "BEval_") (("" (LIFT-IF -1) (("" (ASSERT) (("" (SPLIT -1) (("1" (ASSERT) (("1" (EXPAND "BEval_Box") (("1" (EXPAND "beval__") (("1" (LEMMA "boolexpr_lfcmrs[ContextData_beval_vs
              	         , LAMBDA(bexpr,ctxt0)(ctxt): some?(ctxt`result)
          					      , beval_vs_BCONST,
                                                        beval_vs_BNOT, beval_vs_BAND,
     						   beval_vs_BOR, beval_vs_BIMPLIES,
     						   beval_vs_BREL, beval_vs_BINCLUDES,
                           		  beval_vs_BITE,
                           		  beval_vs_BITE_merge1,
                           		  beval_vs_BITE_merge2,
                                                        beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                        beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                                    CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_post(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BCONST(bexpr, box,
                                                                    first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BNOT(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BAND(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BOR(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BIMPLIES(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BREL(bexpr, box,
                                                                  first_noise_idx_available_box(bexpr, box)),
                                                   BEval_Box_BINCLUDES(bexpr, box,
                                                                       first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                       BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                       BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                       BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                     box)),
                                                   BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box)),
                                                   BEval_Box_BLETIN_RealExpr(bexpr,
                                                                             box,
                                                                             first_noise_idx_available_box
                                                                             (bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                    box,
                                                                                    first_noise_idx_available_box
                                                                                    (bexpr, box)),
                                                   BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                             box,
                                                                             first_noise_idx_available_box
                                                                             (bexpr, box))
                                    					
                                                       , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                                  (bexpr,
                                                                                                   box)))].preservation_property") (("1" (INST -1 "bexpr" "_" "_") (("1" (INST -1 "(# `result := None, `vs := vs, `n := length(box) #)::ContextData_beval_vs" "_") (("1" (INST -1 "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                                         (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])") (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (HIDE -2 -3) (("1" (FLATTEN) (("1" (EXPAND "beval_vs") (("1" (NAME-REPLACE "f1" "boolexpr_lfcs
                       [ContextData_beval_vs, LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): some?(ctxt`result),
                        beval_vs_BCONST, beval_vs_BNOT, beval_vs_BAND, beval_vs_BOR, beval_vs_BIMPLIES,
                        beval_vs_BREL, beval_vs_BINCLUDES, beval_vs_BITE, beval_vs_BITE_merge1,
                        beval_vs_BITE_merge2, beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                        beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F") (("1" (NAME-REPLACE "f2" "boolexpr_lfcs
                          [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_post(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BCONST(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BNOT(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BAND(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BOR(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BIMPLIES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BREL(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BINCLUDES(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_RealExpr_ini(bexpr, box,
                                                         first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_RealExpr(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_BoolExpr_merge1(bexpr, box,
                                                            first_noise_idx_available_box(bexpr, box)),
                           BEval_Box_BLETIN_BoolExpr(bexpr, box, first_noise_idx_available_box(bexpr, box))].F") (("1" (NAME-REPLACE "a" "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result") (("1" (NAME-REPLACE "b" "val(f2(bexpr)
                                                                                              (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                                                      (None[bool], box,
                                                                                                       first_noise_idx_available_box(bexpr, box),
                                                                                                       null[CacheData])))`result") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BLETIN_RealExpr_post") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (EXPAND "mk_CDBB") (("2" (SPLIT 1) (("1" (EXPAND "compatible_pairs?") (("1" (TYPEPRED "vs") (("1" (USE "vib_vibnoise") (("1" (ASSERT) (("1" (EXPAND "vars_in_box_noise?") (("1" (FLATTEN) (("1" (SKOLEM -2 "N") (("1" (INST 1 "N") (("1" (ASSERT) (("1" (EXPAND "compatible_pairs_on?") (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (SKEEP :PREDS? T) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "new_idxs_cache_not_in_idx_gap") (("3" (SKEEP :PREDS? T) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (EXPAND "varidxs_re_cache_in_box") (("4" (SKEEP :PREDS? T) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BIMPLIES_preservation") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP*) (("3" (USE "BEval_Box_BOR_preservation") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP*) (("4" (USE "BEval_Box_BIMPLIES_post") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (USE "BEval_Box_BOR_post") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKEEP*) (("8" (EXPAND "BEval_Box_BITE_merge2") (("8" (EXPAND "beval_vs_BITE_merge2") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKEEP*) (("9" (EXPAND "beval_vs_BITE_merge1") (("9" (EXPAND "BEval_Box_BITE_merge1") (("9" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("10" (HIDE-ALL-BUT 1) (("10" (SKEEP*) (("10" (EXPAND "BEval_Box_BITE") (("10" (LIFT-IF 1) (("10" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (EXPAND "p_inclusion_pre" -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -3) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("11" (HIDE-ALL-BUT 1) (("11" (SKEEP*) (("11" (ASSERT) (("11" (USE "BEval_Box_BITE_post") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("12" (HIDE-ALL-BUT 1) (("12" (GRIND) NIL NIL)) NIL) ("13" (HIDE-ALL-BUT 1) (("13" (SKEEP*) (("13" (USE "BLETIN_BoolExpr_merge1_pre_preservation") (("13" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKEEP*) (("14" (USE "BLETIN_BoolExpr_pre_preservation") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKEEP*) (("15" (USE "BEval_Box_BLETIN_BoolExpr_post") (("15" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (GRIND) NIL NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKEEP*) (("17" (USE "BLETIN_RealExpr_ini_pre_preservation") (("17" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("18" (HIDE-ALL-BUT 1) (("18" (SKEEP*) (("18" (USE "BLETIN_RealExpr_pre_preservation") (("18" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("19" (HIDE-ALL-BUT 1) (("19" (SKEEP*) (("19" (USE "BEval_Box_BLETIN_RealExpr_post") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE-ALL-BUT 1) (("20" (GRIND) NIL NIL)) NIL) ("21" (HIDE-ALL-BUT 1) (("21" (SKEEP*) (("21" (USE "BREL_pre_preservation") (("21" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("22" (HIDE-ALL-BUT 1) (("22" (SKEEP*) (("22" (USE "BEval_Box_BREL_post") NIL NIL)) NIL)) NIL) ("23" (HIDE-ALL-BUT 1) (("23" (GRIND) NIL NIL)) NIL) ("24" (HIDE-ALL-BUT 1) (("24" (SKEEP*) (("24" (USE "BINCLUDES_pre_preservation") (("24" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("25" (HIDE-ALL-BUT 1) (("25" (SKEEP*) (("25" (USE "BEval_Box_BINCLUDES_post") NIL NIL)) NIL)) NIL) ("26" (HIDE-ALL-BUT 1) (("26" (GRIND) NIL NIL)) NIL) ("27" (HIDE-ALL-BUT 1) (("27" (SKEEP*) (("27" (USE "BEval_Box_BAND_preservation") (("27" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("28" (HIDE-ALL-BUT 1) (("28" (SKEEP*) (("28" (EXPAND "p_inclusion_pre" -1) (("28" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BNOT" 1) (("1" (EXPAND "beval_vs_BNOT" 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "p_inclusion_pre" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("29" (HIDE-ALL-BUT 1) (("29" (SKEEP*) (("29" (EXPAND "p_inclusion_pre" 1) (("29" (FLATTEN) (("29" (EXPAND "p_inclusion_pre" -1) (("29" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BCONST" 1) (("1" (EXPAND "beval_vs_BCONST" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("30" (HIDE-ALL-BUT 1) (("30" (SKEEP*) (("30" (USE "BEval_Box_BAND_post") (("30" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("31" (HIDE-ALL-BUT 1) (("31" (SKEEP*) (("31" (USE "BEval_Box_BNOT_post") (("31" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("32" (HIDE-ALL-BUT 1) (("32" (SKEEP*) (("32" (USE "BEval_Box_BCONST_post") NIL NIL)) NIL)) NIL) ("33" (HIDE-ALL-BUT 1) (("33" (GRIND) NIL NIL)) NIL) ("34" (HIDE-ALL-BUT 1) (("34" (GRIND) NIL NIL)) NIL) ("35" (HIDE-ALL-BUT 1) (("35" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|BEval_inclusion____-1| |nil| 3639913269 ("" (SKEEP*) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "BEval_") (("" (LIFT-IF -1) (("" (ASSERT) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "BEval_Box") (("1" (EXPAND "beval__") (("1" (LEMMA "boolexpr_lfcmrs[ContextData_beval_vs,
                                          LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): TRUE, beval_vs_BCONST,
                                          beval_vs_BNOT, beval_vs_BAND, beval_vs_BREL, beval_vs_BINCLUDES,
             		  beval_vs_BITE,
             		  beval_vs_BITE_merge1,
             		  beval_vs_BITE_merge2,
                                          beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                          beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr,
                      CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_post(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BCONST(bexpr, box,
                                                      first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BNOT(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BAND(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BREL(bexpr, box,
                                                    first_noise_idx_available_box(bexpr, box)),
                                     BEval_Box_BINCLUDES(bexpr, box,
                                                         first_noise_idx_available_box(bexpr,
                                                                                       box)),
         BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                       box)),
         BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                       box)),
         BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                       box)),
                                     BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                   box,
                                                                   first_noise_idx_available_box
                                                                   (bexpr, box)),
                                     BEval_Box_BLETIN_RealExpr(bexpr,
                                                               box,
                                                               first_noise_idx_available_box
                                                               (bexpr, box)),
                                     BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                      box,
                                                                      first_noise_idx_available_box
                                                                      (bexpr, box)),
                                     BEval_Box_BLETIN_BoolExpr(bexpr,
                                                               box,
                                                               first_noise_idx_available_box
                                                               (bexpr, box))
                      					
                                         , p_inclusion_pre(bexpr, box,(first_noise_idx_available_box
                                                                                    (bexpr,
                                                                                     box)))].preservation_property") (("1" (INST -1 "bexpr" "_" "_") (("1" (INST -1 "(# `result := None, `vs := vs, `n := length(box) #)::ContextData_beval_vs" "_") (("1" (INST -1 "mk_CDBB(bexpr, box, first_noise_idx_available_box
                                                                       (bexpr, box))(None[bool], box, first_noise_idx_available_box(bexpr, box), null[CacheData])") (("1" (EXPAND "p_inclusion_pre") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (HIDE -2 -3) (("1" (FLATTEN) (("1" (EXPAND "beval_vs") (("1" (NAME-REPLACE "f1" "boolexpr_lfcs
                                                            [ContextData_beval_vs,
                                                             LAMBDA (bexpr, ctxt0): LAMBDA (ctxt): TRUE, beval_vs_BCONST,
                                                             beval_vs_BNOT, beval_vs_BAND, beval_vs_BREL, beval_vs_BINCLUDES,
                          		 beval_vs_BITE,
                 			 beval_vs_BITE_merge1,
                 			 beval_vs_BITE_merge2,
                                                             beval_vs_BLETIN_RealExpr_ini, beval_vs_BLETIN_RealExpr,
                                                             beval_vs_BLETIN_BoolExpr_merge1, beval_vs_BLETIN_BoolExpr].F") (("1" (NAME-REPLACE "f2" "boolexpr_lfcs
                                                      [CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_post(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BCONST(bexpr, box,
                                                                        first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BNOT(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BAND(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BREL(bexpr, box,
                                                                      first_noise_idx_available_box(bexpr, box)),
                                                       BEval_Box_BINCLUDES(bexpr, box,
                                                                           first_noise_idx_available_box(bexpr,
                                                                                                         box)),
                          		  BEval_Box_BITE(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                  box)),
                          		  BEval_Box_BITE_merge1(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                  box)),
                          		  BEval_Box_BITE_merge2(bexpr, box, first_noise_idx_available_box(bexpr,
                                                                                                  box)),
                                                       BEval_Box_BLETIN_RealExpr_ini(bexpr,
                                                                                     box,
                                                                                     first_noise_idx_available_box
                                                                                     (bexpr, box)),
                                                       BEval_Box_BLETIN_RealExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr_merge1(bexpr,
                                                                                        box,
                                                                                        first_noise_idx_available_box
                                                                                        (bexpr, box)),
                                                       BEval_Box_BLETIN_BoolExpr(bexpr,
                                                                                 box,
                                                                                 first_noise_idx_available_box
                                                                                 (bexpr, box))].F") (("1" (NAME-REPLACE "a" "f1(bexpr)((# `result := None, `vs := vs, `n := length(box) #))`result") (("1" (NAME-REPLACE "b" "val(f2(bexpr)
                                                              (mk_CDBB(bexpr, box, first_noise_idx_available_box(bexpr, box))
                                                                      (None[bool], box,
                                                                       first_noise_idx_available_box(bexpr, box),
                                                                       null[CacheData])))`result") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (USE "BEval_Box_BLETIN_RealExpr_post") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (EXPAND "mk_CDBB") (("2" (SPLIT 1) (("1" (EXPAND "compatible_pairs?") (("1" (TYPEPRED "vs") (("1" (USE "vib_vibnoise") (("1" (ASSERT) (("1" (EXPAND "vars_in_box_noise?") (("1" (FLATTEN) (("1" (SKOLEM -2 "N") (("1" (INST 1 "N") (("1" (ASSERT) (("1" (EXPAND "compatible_pairs_on?") (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (SKEEP :PREDS? T) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "new_idxs_cache_not_in_idx_gap") (("3" (SKEEP :PREDS? T) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (EXPAND "varidxs_re_cache_in_box") (("4" (SKEEP :PREDS? T) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (EXPAND "BEval_Box_BITE_merge2") (("2" (EXPAND "beval_vs_BITE_merge2") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP*) (("3" (EXPAND "beval_vs_BITE_merge1") (("3" (EXPAND "BEval_Box_BITE_merge1") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (SKEEP*) (("4" (EXPAND "BEval_Box_BITE") (("4" (LIFT-IF 1) (("4" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "beval_vs_BITE") (("1" (EXPAND "p_inclusion_pre" -4) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre" -3) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "beval_vs_BITE") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "p_inclusion_pre") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (SKEEP*) (("5" (USE "BEval_Box_TCC11") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (HIDE-ALL-BUT 1) (("6" (SKEEP*) (("6" (USE "BLETIN_BoolExpr_merge1_pre_preservation") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (HIDE-ALL-BUT 1) (("7" (SKEEP*) (("7" (USE "BLETIN_BoolExpr_pre_preservation") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (HIDE-ALL-BUT 1) (("8" (SKEEP*) (("8" (USE "BEval_Box_BLETIN_BoolExpr_post") (("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("9" (HIDE-ALL-BUT 1) (("9" (SKEEP*) (("9" (USE "BLETIN_RealExpr_ini_pre_preservation") (("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("10" (HIDE-ALL-BUT 1) (("10" (SKEEP*) (("10" (USE "BLETIN_RealExpr_pre_preservation") (("10" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("11" (HIDE-ALL-BUT 1) (("11" (SKEEP*) (("11" (USE "BEval_Box_BLETIN_RealExpr_post") (("11" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("12" (HIDE-ALL-BUT 1) (("12" (SKEEP*) (("12" (USE "BREL_pre_preservation") (("12" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("13" (HIDE-ALL-BUT 1) (("13" (SKEEP*) (("13" (USE "BEval_Box_BREL_post") NIL NIL)) NIL)) NIL) ("14" (HIDE-ALL-BUT 1) (("14" (SKEEP*) (("14" (USE "BINCLUDES_pre_preservation") (("14" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("15" (HIDE-ALL-BUT 1) (("15" (SKEEP*) (("15" (USE "BEval_Box_BINCLUDES_post") NIL NIL)) NIL)) NIL) ("16" (HIDE-ALL-BUT 1) (("16" (SKEEP*) (("16" (EXPAND "p_inclusion_pre" 1) (("16" (FLATTEN) (("16" (EXPAND "p_inclusion_pre" -1) (("16" (CASE "some?(g_ctxt1)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" -11) (("1" (CASE "some?(g_ctxt2)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BAND" 1) (("1" (EXPAND "beval_vs_BAND" 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LIFT-IF -22) (("1" (ASSERT) (("1" (SPLIT -22) (("1" (FLATTEN) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -13)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("17" (HIDE-ALL-BUT 1) (("17" (SKEEP*) (("17" (EXPAND "p_inclusion_pre" -1) (("17" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "p_inclusion_pre" 1) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BNOT" 1) (("1" (EXPAND "beval_vs_BNOT" 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "p_inclusion_pre" 2) (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-3 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("18" (HIDE-ALL-BUT 1) (("18" (SKEEP*) (("18" (EXPAND "p_inclusion_pre" 1) (("18" (FLATTEN) (("18" (EXPAND "p_inclusion_pre" -1) (("18" (CASE "some?(g_ctxt0)") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "BEval_Box_BCONST" 1) (("1" (EXPAND "beval_vs_BCONST" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("19" (HIDE-ALL-BUT 1) (("19" (SKEEP*) (("19" (USE "BEval_Box_BAND_post") (("19" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("20" (HIDE-ALL-BUT 1) (("20" (SKEEP*) (("20" (USE "BEval_Box_BNOT_post") (("20" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("21" (HIDE-ALL-BUT 1) (("21" (SKEEP*) (("21" (USE "BEval_Box_BCONST_post") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|BEval_inclusion_Proper____| 0 (|BEval_inclusion_Proper____-1| |nil| 3639913788 ("" (SKEEP) (("" (BETA) (("" (FLATTEN) (("" (IFF) (("" (LEMMA "BEval_inclusion____") (("" (INST -1 "pox" _ "bexpr") (("" (SPLIT) (("1" (FLATTEN) (("1" (SKEEP) (("1" (INST? -) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -1 "midvars(pox)") (("2" (INST -2 "midvars(pox)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|ProperBox?| CONST-DECL "bool" |box| |interval_arith|) (|ProperBox| TYPE-EQ-DECL NIL |box| |interval_arith|) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bconst?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bnot?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|band?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bor?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bimplies?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|brel?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bite?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|bletin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|BoolExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|midvars| CONST-DECL "(vars_in_box?(pox))" |box| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|) (|vars_in_box?| CONST-DECL "bool" |box| |interval_arith|) (|BEval_inclusion____| FORMULA-DECL NIL |affine_boolexpr| NIL)) NIL)))
