(boolexpr_lfcs (f_BLETIN_RealExpr_TCC1 0 (f_BLETIN_RealExpr_TCC1-1 nil 3789916211 ("" (skeep :preds? t) (("" (typepred "t`1") (("" (propax) nil nil)) nil)) nil) ((Ctxt formal-type-decl nil boolexpr_lfcs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil (f_BLETIN_RealExpr subtype "IntervalExpr_adt.blet(t`1)" "(interval_expr.realexpr?)"))) (f_BLETIN_BoolExpr_TCC1 0 (f_BLETIN_BoolExpr_TCC1-1 nil 3640250086 ("" (skeep*) (("" (typepred "t`1") (("" (assert) (("" (expand "boolexpr?") (("" (propax) nil nil)) nil)) nil)) nil)) nil) ((Ctxt formal-type-decl nil boolexpr_lfcs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (boolexpr? const-decl "bool" interval_expr interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (f_BLETIN_BoolExpr subtype "IntervalExpr_adt.blet(t`1)" "BoolExpr"))) (F_TCC1 0 (F_TCC1-2 nil 3637689778 ("" (lemma "well_founded_restrict[IntervalExpr,BoolExpr]") (("" (inst?) (("" (expand "well_founded?") (("" (propax) nil nil)) nil)) nil)) nil) ((<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (strict_well_founded? const-decl "bool" orders nil) (well_founded? const-decl "bool" orders nil) (pred type-eq-decl nil defined_types nil) (well_founded_restrict judgement-tcc nil restrict_order_props nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (F well-founded "restrict[[IntervalExpr_adt.IntervalExpr, IntervalExpr_adt.IntervalExpr], [BoolExpr, BoolExpr], bool].restrict(IntervalExpr_adt.<<)" "nil")) (F_TCC1-1 nil 3637689533 ("" (well-founded-tcc) nil nil) nil nil (F well-founded "restrict[[IntervalExpr_adt.IntervalExpr, IntervalExpr_adt.IntervalExpr], [BoolExpr, BoolExpr], bool].restrict(IntervalExpr_adt.<<)" "nil"))) (F_TCC2 0 (F_TCC2-1 nil 3637689533 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (F subtype "boolexpr_lfcs.bexpr" "(IntervalExpr_adt.bconst?)"))) (F_TCC3 0 (F_TCC3-1 nil 3637689533 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop)" "nil"))) (F_TCC4 0 (F_TCC4-1 nil 3637689533 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.res_ctxt" "(boolexpr_lfcs.post(IntervalExpr_adt.bop(boolexpr_lfcs.bexpr), boolexpr_lfcs.ctxt0))"))) (F_TCC5 0 (F_TCC5-1 nil 3637689533 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.bexpr" "(IntervalExpr_adt.bnot?)"))) (F_TCC6 0 (F_TCC6-1 nil 3637689533 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop1)" "nil"))) (F_TCC7 0 (F_TCC7-3 "" 3743961070 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) shostak (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop2)" "nil")) (F_TCC7-2 nil 3640260553 ("" (skeep* :preds? t) (("" (lemma "f_BAND_post") (("" (inst? -1 :where 1) (("" (inst? -1 :where 1) (("" (assert) nil nil)) nil)) nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop2)" "nil")) (F_TCC7-1 nil 3637692337 ("" (termination-tcc) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop2)" "nil"))) (F_TCC8 0 (F_TCC8-1 nil 3637943019 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.f_BAND(IntervalExpr_adt.BAND(boolexpr_lfcs.bop1, boolexpr_lfcs.bop2), boolexpr_lfcs.ctxt0)(boolexpr_lfcs.ctxt1, boolexpr_lfcs.ctxt2)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))"))) (F_TCC9 0 (F_TCC9-1 nil 3637943019 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (F subtype "boolexpr_lfcs.f_BINCLUDES(IntervalExpr_adt.BINCLUDES(boolexpr_lfcs.op, boolexpr_lfcs.opi), boolexpr_lfcs.ctxt0)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))"))) (F_TCC10 0 (F_TCC10-2 "" 3789918358 ("" (skeep) (("" (assert) nil nil)) nil) nil shostak (F subtype "boolexpr_lfcs.f_BREL(IntervalExpr_adt.BREL(boolexpr_lfcs.rel, boolexpr_lfcs.op1, boolexpr_lfcs.op2), boolexpr_lfcs.ctxt0)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))")) (F_TCC10-1 nil 3637943019 ("" (use "f_BINCLUDES_post") (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil) nil nil (F subtype "boolexpr_lfcs.f_BREL(IntervalExpr_adt.BREL(boolexpr_lfcs.rel, boolexpr_lfcs.op1, boolexpr_lfcs.op2), boolexpr_lfcs.ctxt0)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))"))) (F_TCC11 0 (F_TCC11-2 "" 3789918359 ("" (skeep) (("" (assert) nil nil)) nil) nil shostak (F subtype "boolexpr_lfcs.bexpr" "(IntervalExpr_adt.bletin?)")) (F_TCC11-1 nil 3637949303 ("" (skeep) (("" (use "f_BREL_post") (("" (assert) nil nil)) nil)) nil) nil nil (F subtype "boolexpr_lfcs.bexpr" "(IntervalExpr_adt.bletin?)"))) (F_TCC12 0 (F_TCC12-1 nil 3638112535 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (F subtype "boolexpr_lfcs.blet" "(interval_expr.realexpr?)"))) (F_TCC13 0 (F_TCC13-1 nil 3638123374 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bin)" "nil"))) (F_TCC14 0 (F_TCC14-2 "" 3789918361 ("" (skeep*) (("" (replaces -) (("" (assert) nil nil)) nil)) nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) shostak (F subtype "boolexpr_lfcs.ctxt1" "(boolexpr_lfcs.post(IntervalExpr_adt.bin(boolexpr_lfcs.bexpr), boolexpr_lfcs.f_BLETIN_RealExpr_ini(IntervalExpr_adt.blet(boolexpr_lfcs.bexpr), boolexpr_lfcs.ctxt0)))")) (F_TCC14-1 nil 3638123374 ("" (skeep*) (("" (replaces -) (("" (use "f_BLETIN_RealExpr_post") (("1" (assert) nil nil) ("2" (grind) nil nil)) nil)) nil)) nil) nil nil (F subtype "boolexpr_lfcs.ctxt1" "(boolexpr_lfcs.post(IntervalExpr_adt.bin(boolexpr_lfcs.bexpr), boolexpr_lfcs.f_BLETIN_RealExpr_ini(IntervalExpr_adt.blet(boolexpr_lfcs.bexpr), boolexpr_lfcs.ctxt0)))"))) (F_TCC15 0 (F_TCC15-1 nil 3638123374 ("" (grind) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (F subtype "boolexpr_lfcs.blet" "BoolExpr"))) (F_TCC16 0 (F_TCC16-1 nil 3638123374 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.blet)" "nil"))) (F_TCC17 0 (F_TCC17-1 nil 3638123374 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (realexpr? const-decl "bool" interval_expr interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bin)" "nil"))) (F_TCC18 0 (F_TCC18-1 nil 3638123374 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (f_BLETIN_BoolExpr_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (F subtype "boolexpr_lfcs.ctxt1" "(boolexpr_lfcs.post(IntervalExpr_adt.blet(boolexpr_lfcs.bexpr), boolexpr_lfcs.ctxt0))"))) (F_TCC19 0 (F_TCC19-1 nil 3638177046 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (f_BLETIN_BoolExpr_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (F subtype "boolexpr_lfcs.ctxt2" "(boolexpr_lfcs.post(IntervalExpr_adt.bin(boolexpr_lfcs.bexpr), boolexpr_lfcs.f_BLETIN_BoolExpr_merge1(boolexpr_lfcs.ctxt0, boolexpr_lfcs.ctxt1)))"))) (F_TCC20 0 (F_TCC20-1 nil 3638177046 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (f_BLETIN_BoolExpr_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (realexpr? const-decl "bool" interval_expr interval_arith) (boolexpr? const-decl "bool" interval_expr interval_arith)) nil (F subtype "boolexpr_lfcs.bexpr" "{b_: (IntervalExpr_adt.bletin?) | interval_expr.boolexpr?(IntervalExpr_adt.blet(b_))}"))) (F_TCC21 0 (F_TCC21-1 nil 3638177817 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bif)" "nil"))) (F_TCC22 0 (F_TCC22-1 nil 3639754004 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bt)" "nil"))) (F_TCC23 0 (F_TCC23-1 nil 3639754004 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (f_BITE_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.be)" "nil"))) (F_TCC24 0 (F_TCC24-1 nil 3639754004 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (f_BITE_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (f_BITE_merge2 formal-const-decl "[Ctxt, Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.ctxt1" "(boolexpr_lfcs.post(IntervalExpr_adt.bif(boolexpr_lfcs.bexpr), boolexpr_lfcs.ctxt0))"))) (F_TCC25 0 (F_TCC25-1 nil 3639754004 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (f_BITE_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (f_BITE_merge2 formal-const-decl "[Ctxt, Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.ctxt2" "(boolexpr_lfcs.post(IntervalExpr_adt.bthen(boolexpr_lfcs.bexpr), boolexpr_lfcs.f_BITE_merge1(boolexpr_lfcs.ctxt0, boolexpr_lfcs.ctxt1)))"))) (F_TCC26 0 (F_TCC26-1 nil 3639764611 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (f_BITE_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (f_BITE_merge2 formal-const-decl "[Ctxt, Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.ctxt3" "(boolexpr_lfcs.post(IntervalExpr_adt.belse(boolexpr_lfcs.bexpr), boolexpr_lfcs.f_BITE_merge2(boolexpr_lfcs.ctxt0, boolexpr_lfcs.ctxt1, boolexpr_lfcs.ctxt2)))"))) (F_TCC27 0 (F_TCC27-1 nil 3639936904 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (f_BITE_merge1 formal-const-decl "[Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil) (f_BITE_merge2 formal-const-decl "[Ctxt, Ctxt, Ctxt -> Ctxt]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.bexpr" "(IntervalExpr_adt.bite?)"))) (F_TCC28 0 (F_TCC28-1 nil 3639936904 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop1)" "nil"))) (F_TCC29 0 (F_TCC29-2 "" 3743961120 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) shostak (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop2)" "nil")) (F_TCC29-1 nil 3639936904 ("" (skeep*) (("" (replace -1 :hide? t) (("" (use "f_BOR_post") (("" (assert) nil nil)) nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop2)" "nil"))) (F_TCC30 0 (F_TCC30-2 nil 3640250236 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.f_BOR(IntervalExpr_adt.BOR(boolexpr_lfcs.bop1, boolexpr_lfcs.bop2), boolexpr_lfcs.ctxt0)(boolexpr_lfcs.ctxt1, boolexpr_lfcs.ctxt2)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))")) (F_TCC30-1 nil 3639936904 ("" (termination-tcc) nil nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith)) nil (F subtype "boolexpr_lfcs.f_BOR(IntervalExpr_adt.BOR(boolexpr_lfcs.bop1, boolexpr_lfcs.bop2), boolexpr_lfcs.ctxt0)(boolexpr_lfcs.ctxt1, boolexpr_lfcs.ctxt2)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))"))) (F_TCC31 0 (F_TCC31-1 nil 3639936904 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop1)" "nil"))) (F_TCC32 0 (F_TCC32-1 nil 3639936904 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil) (<< adt-def-decl "(strict_well_founded?[IntervalExpr])" IntervalExpr_adt interval_arith) (restrict const-decl "R" restrict nil)) nil (F termination "boolexpr_lfcs.F(boolexpr_lfcs.bop2)" "nil"))) (F_TCC33 0 (F_TCC33-1 nil 3640179821 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (Ctxt formal-type-decl nil boolexpr_lfcs nil) (post formal-const-decl "[BoolExpr, Ctxt -> [Ctxt -> bool]]" boolexpr_lfcs nil)) nil (F subtype "boolexpr_lfcs.f_BIMPLIES(IntervalExpr_adt.BIMPLIES(boolexpr_lfcs.bop1, boolexpr_lfcs.bop2), boolexpr_lfcs.ctxt0)(boolexpr_lfcs.ctxt1, boolexpr_lfcs.ctxt2)" "(boolexpr_lfcs.post(boolexpr_lfcs.bexpr, boolexpr_lfcs.ctxt0))"))) (F_TCC34 0 (F_TCC34-1 nil 3640179821 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (F cases "boolexpr_lfcs.bexpr" "IntervalExpr: DATATYPE WITH SUBTYPES RealExpr, BoolExpr
 BEGIN
  IMPORTING interval, structures@Unit, reals@real_orders

  CONST(opc: [Unit -> real], opC: (Includes?(opc(unit)))): const?: RealExpr
  VARIDX(varidx: nat): varidx?: RealExpr
  ADD(op1, op2: RealExpr): add?: RealExpr
  ABS(op: RealExpr): abs?: RealExpr
  NEG(op: RealExpr): neg?: RealExpr
  SUB(op1, op2: RealExpr): sub?: RealExpr
  MULT(op1, op2: RealExpr): mult?: RealExpr
  SQ(op: RealExpr): sq?: RealExpr
  POW(op: RealExpr, opn: nat): pow?: RealExpr
  DIV(op1, op2: RealExpr): div?: RealExpr
  FUN(pre: (Precondition?), opf: [real -> real], opF: {F: [Interval -> Interval] | Inclusion?(pre, opf)(F) AND Fundamental?(pre)(F)}, op: RealExpr): fun?: RealExpr
  FUN2(pre1: (Precondition?), pre2: (Precondition2?), opf2: [real, real -> real], opF2: {F: [[Interval, Interval] -> Interval] | Inclusion2?(pre1, pre2, opf2)(F) AND Fundamental2?(pre1, pre2)(F)}, op1, op2: RealExpr): fun2?: RealExpr
  LETIN(rlet: RealExpr, rin: RealExpr): letin?: RealExpr
  BCONST(opb: bool): bconst?: BoolExpr
  BNOT(bop: BoolExpr): bnot?: BoolExpr
  BAND(bop1, bop2: BoolExpr): band?: BoolExpr
  BOR(bop1, bop2: BoolExpr): bor?: BoolExpr
  BIMPLIES(bop1, bop2: BoolExpr): bimplies?: BoolExpr
  BREL(rel: RealOrder, op1, op2: RealExpr): brel?: BoolExpr
  BINCLUDES(op: RealExpr, opi: Interval): bincludes?: BoolExpr
  BITE(bif, bthen, belse: BoolExpr): bite?: BoolExpr
  BLETIN(blet: IntervalExpr, bin: BoolExpr): bletin?: BoolExpr
  FUN4(pre1: (Precondition?), pre2: (Precondition2?), pre3: (Precondition3?), pre4: (Precondition4?), opf4: [real, real, real, real -> real], opF4: {F: [[Interval, Interval, Interval, Interval] -> Interval] | Inclusion4?(pre1, pre2, pre3, pre4, opf4)(F) AND Fundamental4?(pre1, pre2, pre3, pre4)(F)}, op1, op2, op3, op4: RealExpr): fun4?: RealExpr
 END IntervalExpr"))))
