(|affine| (|ErrorTerms_TCC1| 0 (|ErrorTerms_TCC1-1| |nil| 3635094734 ("" (ASSUMING-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL)) NIL (|ErrorTerms| ASSUMING "structures@ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].ordered_list" "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)"))) (|null_is_ErrorTerms| 0 (|null_is_ErrorTerms-1| |nil| 3637506941 ("" (EXPAND "ordered_list?") (("" (PROPAX) NIL NIL)) NIL) ((|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|)) NIL (|null_is_ErrorTerms| SUBTYPE "list_adt[[nat, nzBaseType]].null" "ErrorTerms"))) (|idxs_pd_TCC1| 0 (|idxs_pd_TCC1-1| |nil| 3628272610 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|idxs_pd| TERMINATION "affine.idxs_pd(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds))" "NIL"))) (|idxs_pd_append| 0 (|idxs_pd_append-1| |nil| 3628944396 ("" (INDUCT "pds1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ((|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons2_var!1| SKOLEM-CONST-DECL "list[[nat, nzBaseType]]" |affine| NIL) (|cons1_var!1| SKOLEM-CONST-DECL "[nat, nzBaseType]" |affine| NIL) (|pds2!1| SKOLEM-CONST-DECL "{pd: ErrorTerms | appendable_ol?(cons(cons1_var!1, cons2_var!1), pd)}" |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|add_ET_TCC1| 0 (|add_ET_TCC1-2| "" 3789916262 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|add_ET| SUBTYPE "affine.x" "nzBaseType")) (|add_ET_TCC1-1| |nil| 3621075711 ("" (TCC)) NIL NIL (|add_ET| SUBTYPE "affine.x" "nzBaseType"))) (|add_ET_TCC2| 0 (|add_ET_TCC2-2| "" 3789916263 ("" (TCC) NIL NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|add_ET| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(affine.ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.x), list_adt[[nat, nzBaseType]].car(affine.ol)))}")) (|add_ET_TCC2-1| |nil| 3621075711 ("" (TCC)) NIL NIL (|add_ET| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(affine.ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.x), list_adt[[nat, nzBaseType]].car(affine.ol)))}"))) (|add_ET_TCC3| 0 (|add_ET_TCC3-2| "" 3789916263 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|add_ET| SUBTYPE "affine.x" "nzBaseType")) (|add_ET_TCC3-1| |nil| 3621075711 ("" (TCC)) NIL NIL (|add_ET| SUBTYPE "affine.x" "nzBaseType"))) (|add_ET_TCC4| 0 (|add_ET_TCC4-2| "" 3789916264 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|add_ET| SUBTYPE "affine.pds" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(affine.ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.x), list_adt[[nat, nzBaseType]].car(affine.ol)))}")) (|add_ET_TCC4-1| |nil| 3621075711 ("" (TCC)) NIL NIL (|add_ET| SUBTYPE "affine.pds" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(affine.ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.x), list_adt[[nat, nzBaseType]].car(affine.ol)))}"))) (|last_idx_append| 0 (|last_idx_append-2| "" 3789916267 ("" (INDUCT "pds1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND "last_idx" 1 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 2 1) (("1" (EXPAND "append_ol" 2) (("1" (EXPAND "append" 2) (("1" (EXPAND "last_ol" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "last_ol" 2 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST?) (("1" (EXPAND "append_ol") (("1" (CASE "max(hpds`1, last_idx(pds2)) = last_idx(pds2)") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (1 -1 3)) (("2" (TYPEPRED "pds2") (("2" (EXPAND "appendable_ol?") (("2" (CASE "NOT null?(pds2)") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (EXPAND "last_ol") (("1" (EXPAND "last_idx") (("1" (EXPAND "first_ol") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "null_append[[nat,nzBaseType]]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (INST? -1) (("1" (EXPAND "last_idx" -1 1) (("1" (EXPAND "append_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|tpds| SKOLEM-CONST-DECL "list[[nat, nzBaseType]]" |affine| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|hpds| SKOLEM-CONST-DECL "[nat, nzBaseType]" |affine| NIL) (|pds2| SKOLEM-CONST-DECL "{pd: ErrorTerms | appendable_ol?(cons(hpds, tpds), pd)}" |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|null_append| FORMULA-DECL NIL |more_list_props| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK) (|last_idx_append-1| |nil| 3629028963 ("" (INDUCT "pds1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND "last_idx" 1 1) (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 2 1) (("1" (EXPAND "append_ol" 2) (("1" (EXPAND "append" 2) (("1" (EXPAND "last_ol" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "last_ol" 2 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (INST?) (("1" (EXPAND "last_idx" -1 1) (("1" (EXPAND "append_ol") (("1" (REPLACES -1) (("1" (CASE "max(hpds`1, last_idx(pds2)) = last_idx(pds2)") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (1 -1 3)) (("2" (TYPEPRED "pds2") (("2" (EXPAND "appendable_ol?") (("2" (CASE "NOT null?(pds2)") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (EXPAND "last_ol") (("1" (EXPAND "last_idx") (("1" (EXPAND "first_ol") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "null_append[[nat,nzBaseType]]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (INST? -1) (("1" (EXPAND "last_idx" -1 1) (("1" (EXPAND "append_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|last_error_TCC1| 0 (|last_error_TCC1-2| "" 3789916268 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|non_empty?| CONST-DECL "bool" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|last_error| SUBTYPE "(number_fields.-)(list_props[[nat, nzBaseType]].length(affine.pds), 1)" "below[length[[nat, nzBaseType]](pds)]")) (|last_error_TCC1-1| |nil| 3620397935 ("" (TCC)) NIL NIL (|last_error| SUBTYPE "(number_fields.-)(list_props[[nat, nzBaseType]].length(affine.pds), 1)" "below[length[[nat, nzBaseType]](pds)]"))) (|ac_proj_cv| 0 (|ac_proj_cv-1| |nil| 3621349067 ("" (GRIND) NIL NIL) ((|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL)) SHOSTAK)) (|ac_proj_pd| 0 (|ac_proj_pd-1| |nil| 3621349072 ("" (GRIND) NIL NIL) ((|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL)) SHOSTAK)) (|last_idx_acs_TCC1| 0 (|last_idx_acs_TCC1-1| |nil| 3628272610 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|)) NIL (|last_idx_acs| TERMINATION "affine.last_idx_acs(affine.t)" "NIL"))) (|search_error_term_by_idx_TCC1| 0 (|search_error_term_by_idx_TCC1-2| "" 3789916270 ("" (TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|search_error_term_by_idx| SUBTYPE "affine.t" "ErrorTerms")) (|search_error_term_by_idx_TCC1-1| |nil| 3619884608 ("" (TCC)) NIL NIL (|search_error_term_by_idx| SUBTYPE "affine.t" "ErrorTerms"))) (|search_error_term_by_idx_TCC2| 0 (|search_error_term_by_idx_TCC2-2| "" 3789916271 ("" (TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|search_error_term_by_idx| TERMINATION "affine.search_error_term_by_idx(affine.t, affine.i)" "NIL")) (|search_error_term_by_idx_TCC2-1| |nil| 3620572108 ("" (TCC)) NIL NIL (|search_error_term_by_idx| TERMINATION "affine.search_error_term_by_idx(affine.t, affine.i)" "NIL"))) (|setbi_nnull_member| 0 (|setbi_nnull_member-1| |nil| 3628609596 ("" (INDUCT "pds") (("1" (TYPEPRED "pds!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (SPLIT -1) (("1" (EXPAND "idxs_pd" 2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "member" 2) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (INST?) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|next_idx_TCC1| 0 (|next_idx_TCC1-2| "" 3789916272 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|)) SHOSTAK (|next_idx| SUBTYPE "(number_fields.+)(indexed_list[nzBaseType].last_idx(affine.pds), 1)" "nat")) (|next_idx_TCC1-1| |nil| 3620471172 ("" (TCC)) NIL NIL (|next_idx| SUBTYPE "(number_fields.+)(indexed_list[nzBaseType].last_idx(affine.pds), 1)" "nat"))) (|beyond_last_idx_notmember| 0 (|beyond_last_idx_notmember-1| |nil| 3635010030 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "ol") (("2" (FLATTEN) (("2" (SKEEP*) (("2" (EXPAND "last_idx" -2) (("2" (EXPAND "last_ol" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "last_idx" -2) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "idxs_pd" -2) (("2" (EXPAND_OL) (("2" (EXPAND "member" -2) (("2" (TYPEPRED "x::[nat, nzBaseType]") (("2" (EXPAND "ordered_list?" -1) (("2" (EXPAND "lt_idx") (("2" (EXPAND ">") (("2" (USE "olidx_car_last[nzBaseType]") (("2" (ASSERT) (("2" (EXPAND "car_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|Noise_TCC1| 0 (|Noise_TCC1-1| |nil| 3635094734 ("" (ASSUMING-TCC) NIL NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL)) NIL (|Noise| ASSUMING "structures@ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].ordered_list" "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)"))) (|null_is_noise| 0 (|null_is_noise-2| "" 3789916274 ("" (TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|null_is_noise| SUBTYPE "list_adt[[nat, nzEpsilon]].null" "Noise")) (|null_is_noise-1| |nil| 3620496072 ("" (TCC)) NIL NIL (|null_is_noise| SUBTYPE "list_adt[[nat, nzEpsilon]].null" "Noise"))) (|idxs_noise_TCC1| 0 (|idxs_noise_TCC1-1| |nil| 3628272610 ("" (SKEEP) (("" (EXPAND_OL) (("" (EXPAND "length" 2 2) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN 2 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|idxs_noise| TERMINATION "affine.idxs_noise(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.N))" "NIL"))) (|empty_noise_is_ol| 0 (|empty_noise_is_ol-2| "" 3789916275 ("" (GROUND) (("" (EXPAND "empty_noise") (("" (PROPAX) NIL NIL)) NIL)) NIL) ((|empty_noise| CONST-DECL "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK) (|empty_noise_is_ol-1| |nil| 3621867992 ("" (GROUND) (("" (EXPAND "empty_noise") (("" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|add_N_TCC1| 0 (|add_N_TCC1-2| "" 3789916276 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|add_N| SUBTYPE "affine.e" "nzEpsilon")) (|add_N_TCC1-1| |nil| 3621614428 ("" (TCC)) NIL NIL (|add_N| SUBTYPE "affine.e" "nzEpsilon"))) (|add_N_TCC2| 0 (|add_N_TCC2-2| "" 3789916276 ("" (TCC) NIL NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|add_N| SUBTYPE "affine.empty_noise" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(affine.ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(affine.ol)))}")) (|add_N_TCC2-1| |nil| 3621614428 ("" (TCC)) NIL NIL (|add_N| SUBTYPE "affine.empty_noise" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(affine.ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(affine.ol)))}"))) (|add_N_TCC3| 0 (|add_N_TCC3-2| "" 3789916277 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|add_N| SUBTYPE "affine.e" "nzEpsilon")) (|add_N_TCC3-1| |nil| 3621614428 ("" (TCC)) NIL NIL (|add_N| SUBTYPE "affine.e" "nzEpsilon"))) (|add_N_TCC4| 0 (|add_N_TCC4-2| "" 3789916278 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|add_N| SUBTYPE "affine.N" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(affine.ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(affine.ol)))}")) (|add_N_TCC4-1| |nil| 3621614428 ("" (TCC)) NIL NIL (|add_N| SUBTYPE "affine.N" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(affine.ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(affine.ol)))}"))) (|extend_N_prop1| 0 (|extend_N_prop1-1| |nil| 3621792343 ("" (GRIND) NIL NIL) ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL)) SHOSTAK)) (|get_noise_by_idx_TCC1| 0 (|get_noise_by_idx_TCC1-2| "" 3789916279 ("" (SKEEP*) (("" (TYPEPRED "N") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|get_noise_by_idx| TERMINATION "affine.get_noise_by_idx(affine.n, affine.t)" "NIL")) (|get_noise_by_idx_TCC1-1| |nil| 3619963656 ("" (SKEEP*) (("" (TYPEPRED "N") (("" (ASSERT) (("" (GRIND) (("" (USE "list_cons_eta[[nat, nzEpsilon]]") (("" (REPLACE -1 4 :DIR RL :HIDE? T) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|get_noise_by_idx| TERMINATION "affine.get_noise_by_idx(affine.n, affine.t)" "NIL"))) (|upd_noise_TCC1| 0 (|upd_noise_TCC1-1| |nil| 3628272610 ("" (SKEEP* :PREDS? T) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|upd_noise| SUBTYPE "affine.add_N(affine.n, affine.e, affine.empty_noise)" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}"))) (|upd_noise_TCC2| 0 (|upd_noise_TCC2-1| |nil| 3628272610 ("" (SKEEP*) (("" (EXPAND_OL) (("" (EXPAND "lt_idx") (("" (REPLACES -1) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|upd_noise| SUBTYPE "affine.N" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|upd_noise_TCC3| 0 (|upd_noise_TCC3-1| |nil| 3628272610 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|upd_noise| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol((affine.n, affine.e), affine.N)" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}"))) (|upd_noise_TCC4| 0 (|upd_noise_TCC4-1| |nil| 3628272610 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|upd_noise| SUBTYPE "affine.N" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}"))) (|upd_noise_TCC5| 0 (|upd_noise_TCC5-2| "" 3803780696 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND* "null_ol?" "car_ol" "cdr_ol") (("" (REPLACES -7) (("" (REPLACES -6) (("" (EXPAND "ordered_list?") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|upd_noise| SUBTYPE "affine.tN" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(ol)))}")) (|upd_noise_TCC5-1| |nil| 3628272610 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND* "null_ol?" "car_ol" "cdr_ol") (("" (REPLACES -8) (("" (REPLACES -6) (("" (REPLACES -6 :DIR RL) (("" (HIDE 3) (("" (EXPAND "ordered_list?") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|upd_noise| SUBTYPE "affine.tN" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.e), list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|upd_noise_TCC6| 0 (|upd_noise_TCC6-1| |nil| 3628852553 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|upd_noise| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol((affine.n, affine.e), affine.tN)" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}"))) (|upd_noise_TCC7| 0 (|upd_noise_TCC7-2| "" 3803780995 ("" (SKEEP* :PREDS? T) (("" (EXPAND_OL) (("" (REPLACES (-6 -7)) (("" (REPLACES -6 :DIR RL) (("" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "car_ol(N)`1 < car_ol(cdr_ol(N))`1") (("1" (GRIND) NIL NIL) ("2" (EXPAND "ordered_list?" -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|upd_noise| SUBTYPE "affine.tN" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}")) (|upd_noise_TCC7-1| |nil| 3628852553 ("" (SKEEP* :PREDS? T) (("" (EXPAND_OL) (("" (REPLACES (-6 -9)) (("" (REPLACES -7 :DIR RL) (("" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (CASE "car_ol(N)`1 < car_ol(cdr_ol(N))`1") (("1" (GRIND) NIL NIL) ("2" (EXPAND "ordered_list?" -2) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|upd_noise| SUBTYPE "affine.tN" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}"))) (|upd_noise_TCC8| 0 (|upd_noise_TCC8-5| "" 3789916284 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (TYPEPRED "v(tN,n,e)") (("" (REPLACES -) (("" (CASE "null_ol?(cdr_ol(N))") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -5) (("1" (REPLACES -2) (("1" (HIDE-ALL-BUT (-4 6 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">=") (("2" (REWRITE "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "<=") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<=") (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" -4 :ASSERT? NONE) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "ordered_list?" -3) (("2" (HIDE-ALL-BUT (-3 7 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|upd_noise| SUBTYPE "affine.upd_noise(affine.tN, affine.n, affine.e)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.hN, list_adt[[nat, nzEpsilon]].car(ol)))}")) (|upd_noise_TCC8-4| |nil| 3685211931 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (TYPEPRED "v(tN,n,e)") (("" (REPLACES -) (("" (CASE "null_ol?(cdr_ol(N))") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -5) (("1" (REPLACES -2) (("1" (HIDE-ALL-BUT (-4 6 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">=") (("2" (REWRITE "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "<=") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<=") (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" -4 :ASSERT? NONE) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (-1 -3 8)) (("2" (NAME-REPLACE "A" "car(N)`1") (("2" (NAME-REPLACE "B" "car(cdr(N))`1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "ordered_list?" -3) (("2" (HIDE-ALL-BUT (-3 7 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|upd_noise| SUBTYPE "affine.upd_noise(affine.tN, affine.n, affine.e)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.hN, list_adt[[nat, nzEpsilon]].car(ol)))}")) (|upd_noise_TCC8-3| |nil| 3629576957 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (TYPEPRED "v(tN,n,e)") (("" (REPLACES -) (("" (CASE "null_ol?(cdr_ol(N))") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -5) (("1" (REPLACES -2) (("1" (HIDE-ALL-BUT (-4 6 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">=") (("2" (REWRITE "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "<=") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<=") (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" -4 :ASSERT? NONE) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "ordered_list?" -3) (("2" (HIDE-ALL-BUT (-3 7 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|upd_noise| SUBTYPE "affine.upd_noise(affine.tN, affine.n, affine.e)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.hN, list_adt[[nat, nzEpsilon]].car(ol)))}")) (|upd_noise_TCC8-2| |nil| 3629576231 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (TYPEPRED "v(tN,n,e)") (("" (REPLACES -) (("" (CASE "null_ol?(cdr_ol(N))") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -5) (("1" (REPLACES -2) (("1" (HIDE-ALL-BUT (-4 6 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">=") (("2" (REWRITE "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "<=") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<=") (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" -4 :ASSERT? NONE) (("1" (EXPAND "lt_idx") (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "ordered_list?" -3) (("2" (HIDE-ALL-BUT (-3 7 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|upd_noise| SUBTYPE "affine.upd_noise(affine.tN, affine.n, affine.e)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.hN, list_adt[[nat, nzEpsilon]].car(ol)))}")) (|upd_noise_TCC8-1| |nil| 3628852553 ("" (SKEEP* :PREDS? T) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (TYPEPRED "v(tN,n,e)") (("" (REPLACES -) (("" (CASE "null_ol?(cdr_ol(N))") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -5) (("1" (REPLACES -2) (("1" (HIDE-ALL-BUT (-4 6 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">=") (("2" (REWRITE "min") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "<=") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "<=") (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" -4) (("1" (EXPAND "lt_idx") (("1" (HIDE-ALL-BUT (-1 -4 7 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "ordered_list?" -3) (("2" (HIDE-ALL-BUT (-3 7 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|upd_noise| SUBTYPE "affine.upd_noise(affine.tN, affine.n, affine.e)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.hN, list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|upd_noise_TCC9| 0 (|upd_noise_TCC9-1| |nil| 3628852553 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|upd_noise| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol(affine.hN, affine.upd_noise(affine.tN, affine.n, affine.e))" "{N_: affine.Noise | booleans.AND((booleans.IMPLIES(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), (booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)))), (booleans.IMPLIES((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.OR((booleans.AND(reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = affine.n)), booleans.OR((booleans.AND(reals.>(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1)), reals.>=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1, real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, affine.n)))))))))}"))) (|upd_noise_range_TCC1| 0 (|upd_noise_range_TCC1-1| |nil| 3630426729 ("" (SUBTYPE-TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|upd_noise_range| SUBTYPE "(number_fields.-)(affine.i, 1)" "nat"))) (|upd_noise_range_TCC2| 0 (|upd_noise_range_TCC2-1| |nil| 3630426729 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|upd_noise_range| TERMINATION "affine.upd_noise_range(affine.N, affine.starting_idx, (number_fields.-)(affine.i, 1), affine.upd)" "NIL"))) (|upd_noise_burst__TCC1| 0 (|upd_noise_burst__TCC1-1| |nil| 3632162810 ("" (TERMINATION-TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|upd_noise_burst_| TERMINATION "affine.upd_noise_burst_(affine.N, affine.t, affine.upd, (number_fields.+)(affine.n, 1))" "NIL"))) (|gnbi_upd| 0 (|gnbi_upd-1| |nil| 3628852150 ("" (INDUCT "N") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hN" "tN")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (SPLIT -1) (("1" (EXPAND "upd_noise" 1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "get_noise_by_idx" 1) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (REPLACES -1) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL)) SHOSTAK)) (|gnbi_upd_2| 0 (|gnbi_upd_2-2| "" 3789916289 ("" (INDUCT "N") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hN" "tN")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (SPLIT -1) (("1" (INST -1 "e" "i" "n") (("1" (ASSERT) (("1" (EXPAND "upd_noise" 2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "cons_ol") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND ">") (("1" (EXPAND "get_noise_by_idx") (("1" (EXPAND "null_ol?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "tN = null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL)) SHOSTAK) (|gnbi_upd_2-1| |nil| 3628517751 ("" (INDUCT "N") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hN" "tN")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (SPLIT -1) (("1" (INST -1 "e" "i" "n") (("1" (ASSERT) (("1" (EXPAND "upd_noise" 2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "add_N") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "get_noise_by_idx" 1 2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND ">") (("1" (EXPAND "get_noise_by_idx") (("1" (EXPAND "null_ol?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "tN = null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|gnbi_updr_TCC1| 0 (|gnbi_updr_TCC1-1| |nil| 3630758897 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) NIL (|gnbi_updr| SUBTYPE "(number_fields.-)(affine.i, affine.start)" "nat"))) (|gnbi_updr| 0 (|gnbi_updr-1| |nil| 3630762148 ("" (SKEEP :BUT "n") (("" (INDUCT "n") (("1" (FLATTEN) (("1" (CASE "i=start") (("1" (REPLACES -1 :DIR RL) (("1" (HIDE -) (("1" (EXPAND "upd_noise_range") (("1" (USE "gnbi_upd") NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "upd_noise_range" 1) (("2" (CASE "i = 1 + j + start") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "gnbi_upd") NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (USE "gnbi_upd_2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|upd_noise_range| DEF-DECL "Noise" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|i| SKOLEM-CONST-DECL "nat" |affine| NIL) (|start| SKOLEM-CONST-DECL "nat" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|gnbi_upd| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|gnbi_upd_2| FORMULA-DECL NIL |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|gnbi_updr_2| 0 (|gnbi_updr_2-1| |nil| 3630762350 ("" (SKEEP :BUT "n") (("" (INDUCT "n") (("1" (FLATTEN) (("1" (EXPAND "upd_noise_range") (("1" (USE "gnbi_upd_2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "upd_noise_range" 1) (("2" (USE "gnbi_upd_2") (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|upd_noise_range| DEF-DECL "Noise" |affine| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gnbi_upd_2| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|gnbi_updb__TCC1| 0 (|gnbi_updb__TCC1-1| |nil| 3635094734 ("" (ASSUMING-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|strict_total_order_restrict| APPLICATION-JUDGEMENT "(strict_total_order?[S])" |restrict_order_props| NIL)) NIL (|gnbi_updb_| ASSUMING "structures@ordered_list[nat, restrict[[real, real], [nat, nat], bool].restrict(reals.<)].ordered_list" "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)"))) (|gnbi_updb_| 0 (|gnbi_updb_-1| |nil| 3635073667 ("" (SKEEP*) (("" (NAME "l" "length(nwidxs)+n+k") (("" (GENERALIZE-SKOLEM-CONSTANTS) (("" (INDUCT "l_1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "l_") (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "nth" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "upd_noise_burst_" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (USE "gnbi_upd") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "upd_noise_burst_" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (USE "gnbi_upd_2") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (INST -1 "N_1" "k_1+1" "n_1-1" "cdr(nwidxs_1)" "upd_fun_1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "nwidxs_1") (("2" (EXPAND "ordered_list?" -2) (("2" (EXPAND "ordered_list?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2 4 -3)) (("2" (LEMMA "nth_ol[nat,<]") (("2" (INST -1 "nwidxs_1" "n_1" "0") (("1" (GRIND) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|gnbi_upd| FORMULA-DECL NIL |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|gnbi_upd_2| FORMULA-DECL NIL |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|n_1| SKOLEM-CONST-DECL "nat" |affine| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nth_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nwidxs_1| SKOLEM-CONST-DECL "ordered_list[nat, restrict[[real, real], [nat, nat], bool](<)]" |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|upd_noise_burst_| DEF-DECL "Noise" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|gnbi_updb| 0 (|gnbi_updb-1| |nil| 3635011259 ("" (SKEEP) (("" (EXPAND "upd_noise_burst") (("" (USE "gnbi_updb_") (("" (TYPEPRED "n") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|upd_noise_burst| CONST-DECL "Noise" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gnbi_updb_| FORMULA-DECL NIL |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|gnbi_updb_2_| 0 (|gnbi_updb_2_-1| |nil| 3635089637 ("" (INDUCT "nwidxs") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("idx" "idxs")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "member" 1) (("2" (FLATTEN) (("2" (EXPAND "upd_noise_burst_" 3) (("2" (USE "gnbi_upd_2") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (INST -1 "N" "i" "upd_fun" "k+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|gnbi_upd_2| FORMULA-DECL NIL |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upd_noise_burst_| DEF-DECL "Noise" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|gnbi_updb_2| 0 (|gnbi_updb_2-1| |nil| 3635089734 ("" (SKEEP) (("" (EXPAND "upd_noise_burst") (("" (USE "gnbi_updb_2_") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|upd_noise_burst| CONST-DECL "Noise" |affine| NIL) (|gnbi_updb_2_| FORMULA-DECL NIL |affine| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|restrict_by_idxs_TCC1| 0 (|restrict_by_idxs_TCC1-1| |nil| 3628272610 ("" (SUBTYPE-TCC) NIL NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) NIL (|restrict_by_idxs| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol" "{N_: affine.Noise | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), reals.<=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1))))}"))) (|restrict_by_idxs_TCC2| 0 (|restrict_by_idxs_TCC2-1| |nil| 3628355849 ("" (SKEEP*) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (TYPEPRED "v(cdr_ol(N), idxs)") (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "car_ol(N)`1 < car_ol(cdr_ol(N))`1") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "N") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "length" 1 2) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN 2 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|restrict_by_idxs| SUBTYPE "affine.restrict_by_idxs(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.N), affine.idxs)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N), list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|restrict_by_idxs_TCC3| 0 (|restrict_by_idxs_TCC3-1| |nil| 3628355849 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|restrict_by_idxs| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N), affine.restrict_by_idxs(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.N), affine.idxs))" "{N_: affine.Noise | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), reals.<=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1))))}"))) (|restrict_by_idxs_TCC4| 0 (|restrict_by_idxs_TCC4-1| "" 3803781227 ("" (SKEEP*) (("" (EXPAND_OL) (("" (ASSERT) (("" (TYPEPRED "v(cdr_ol(N), idxs)") (("1" (EXPAND_OL) (("1" (FLATTEN) (("1" (TYPEPRED "N") (("1" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (HIDE-ALL-BUT (-1 -4 6)) (("2" (NAME-LABEL* ("A_64" "car(N)`1" "B_65" "car(cdr(N))`1") :HIDE? T :LABEL (:PAIRING ("wfn:3977" "A:3975") ("wfn:3977" "B:3976")) :TCC-LABEL NIL :TCC-STEP NIL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (HIDE-ALL-BUT (1 2)) (("2" (EXPAND "length" 1 2 :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN 2 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|restrict_by_idxs| SUBTYPE "affine.restrict_by_idxs(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.N), affine.idxs)" "{N_: affine.Noise | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), reals.<=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1))))}")) (|restrict_by_idxs_TCC4-2| |nil| 3629577924 ("" (SKEEP*) (("" (EXPAND_OL) (("" (ASSERT) (("" (TYPEPRED "v(cdr_ol(N), idxs)") (("1" (EXPAND_OL) (("1" (FLATTEN) (("1" (TYPEPRED "N") (("1" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (HIDE-ALL-BUT (-1 -4 6)) (("2" (NAME-LABEL* ("A_64" "car(N)`1" "B_65" "car(cdr(N))`1") :HIDE? T :LABEL (:PAIRING ("wfn:3977" "A:3975") ("wfn:3977" "B:3976")) :TCC-LABEL NIL :TCC-STEP NIL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (HIDE-ALL-BUT (1 3)) (("2" (EXPAND "length" 1 2 :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN 2 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|restrict_by_idxs| SUBTYPE "affine.restrict_by_idxs(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.N), affine.idxs)" "{N_: affine.Noise | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N)), reals.<=(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1))))}"))) (|eval_pd_noise_TCC1| 0 (|eval_pd_noise_TCC1-2| "" 3803781398 ("" (SKEEP*) (("" (REPLACES -2) (("" (CASE "length[[nat, nzBaseType]](cdr_ol(pds)) < length[[nat, nzBaseType]](pds)") (("1" (CASE "length[[nat, nzEpsilon]](cdr_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]](noise)) < length[[nat, nzEpsilon]](noise)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|eval_pd_noise| TERMINATION "affine.eval_pd_noise(affine.t, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.noise))" "NIL")) (|eval_pd_noise_TCC1-1| |nil| 3619884927 ("" (SKEEP*) (("" (REPLACES -3) (("" (CASE "length[[nat, nzBaseType]](cdr_ol(pds)) < length[[nat, nzBaseType]](pds)") (("1" (CASE "length[[nat, nzEpsilon]](cdr_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]](noise)) < length[[nat, nzEpsilon]](noise)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|eval_pd_noise| TERMINATION "affine.eval_pd_noise(affine.t, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.noise))" "NIL"))) (|eval_pd_noise_TCC2| 0 (|eval_pd_noise_TCC2-2| "" 3789916300 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|eval_pd_noise| TERMINATION "affine.eval_pd_noise(affine.t, affine.noise)" "NIL")) (|eval_pd_noise_TCC2-1| |nil| 3619884927 ("" (TCC)) NIL SHOSTAK (|eval_pd_noise| TERMINATION "affine.eval_pd_noise(affine.t, affine.noise)" "NIL"))) (|eval_pd_noise_TCC3| 0 (|eval_pd_noise_TCC3-2| "" 3789916301 ("" (SKEEP*) (("" (ASSERT) NIL NIL)) NIL) ((|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|eval_pd_noise| TERMINATION "affine.eval_pd_noise(affine.pds, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.noise))" "NIL")) (|eval_pd_noise_TCC3-1| |nil| 3619884927 ("" (SKEEP*) (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK (|eval_pd_noise| TERMINATION "affine.eval_pd_noise(affine.pds, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cdr_ol(affine.noise))" "NIL"))) (|epn_pds_monotony| 0 (|epn_pds_monotony-2| "" 3789916301 ("" (SKEEP*) (("" (EXPAND "eval_pd_noise" 3 2) (("" (LIFT-IF) (("" (EXPAND "null_ol?") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|epn_pds_monotony-1| |nil| 3621261987 ("" (SKEEP*) (("" (EXPAND "eval_pd_noise" 3 2) (("" (LIFT-IF) (("" (EXPAND "null_ol?") (("" (ASSERT) (("" (EXPAND "car_ol") (("" (ASSERT) (("" (EXPAND "cdr_ol") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|epn_noise_monotony| 0 (|epn_noise_monotony-1| |nil| 3621415031 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK)) (|eval_pd_noise_rec_pds_def| 0 (|eval_pd_noise_rec_pds_def-3| "" 3789916304 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (EXPAND "null_ol?") (("" (SKOLEM 1 ("pds_" "N_")) (("" (FLATTEN) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_noise" 2 1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (CASE "get_noise_by_idx(car_ol(pds_)`1, N_) = car_ol(N_)`2") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (AUTO-REWRITE "null_ol?") (("1" (CASE "car_ol(pds_)`2 * car_ol(N_)`2 = car_ol(N_)`2 * car_ol(pds_)`2") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "null_ol?(cdr_ol(pds_))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND_OL) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "epn_noise_monotony") (("2" (INST -1 "N_" "cdr_ol(pds_)") (("2" (ASSERT) (("2" (EXPAND_OL) (("2" (REPLACES -1 :DIR RL) (("2" (TYPEPRED "pds_") (("2" (EXPAND "ordered_list?" -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 4 5)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (HIDE-ALL-BUT (-1 1 3 4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car_ol(pds_)`1, N_)= get_noise_by_idx(car_ol(pds_)`1, cdr_ol(N_))") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_noise_monotony") (("1" (INST? -1 :WHERE 5) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND_OL) (("1" (SPLIT 1) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "pds_") (("2" (EXPAND "ordered_list?") (("2" (SPLIT -1) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND "null_ol?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 6)) (("2" (EXPAND "length" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|epn_noise_monotony| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|eval_pd_noise_rec_pds_def-2| |nil| 3629629684 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (EXPAND "null_ol?") (("" (SKOLEM 1 ("pds_" "N_")) (("" (FLATTEN) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_noise" 2 1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (CASE "get_noise_by_idx(car_ol(pds_)`1, N_) = car_ol(N_)`2") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (AUTO-REWRITE "null_ol?") (("1" (CASE "car_ol(pds_)`2 * car_ol(N_)`2 = car_ol(N_)`2 * car_ol(pds_)`2") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "null_ol?(cdr_ol(pds_))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND_OL) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "epn_noise_monotony") (("2" (INST -1 "N_" "cdr_ol(pds_)") (("2" (ASSERT) (("2" (EXPAND_OL) (("2" (REPLACES -1 :DIR RL) (("2" (TYPEPRED "pds_") (("2" (EXPAND "ordered_list?" -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 4 5)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (HIDE-ALL-BUT (-1 1 3 4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car_ol(pds_)`1, N_)= get_noise_by_idx(car_ol(pds_)`1, cdr_ol(N_))") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_noise_monotony") (("1" (INST? -1 :WHERE 5) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND_OL) (("1" (SPLIT 1) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "pds_") (("2" (EXPAND "ordered_list?") (("2" (SPLIT -1) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND "null_ol?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 6)) (("2" (EXPAND "length" -1 1) (("2" (ASSERT) (("2" (LIFT-IF -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|eval_pd_noise_rec_pds_def-1| |nil| 3621268877 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (EXPAND "null_ol?") (("" (SKOLEM 1 ("pds_" "N_")) (("" (FLATTEN) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_noise" 2 1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (CASE "get_noise_by_idx(car_ol(pds_)`1, N_) = car_ol(N_)`2") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (CASE "car_ol(pds_)`2 * car_ol(N_)`2 = car_ol(N_)`2 * car_ol(pds_)`2") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "null_ol?(cdr_ol(pds_))") (("1" (HIDE-ALL-BUT (-1 1)) (("1" (EXPAND_OL) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "epn_noise_monotony") (("2" (INST -1 "N_" "cdr_ol(pds_)") (("2" (ASSERT) (("2" (EXPAND_OL) (("2" (REPLACES -1 :DIR RL) (("2" (TYPEPRED "pds_") (("2" (EXPAND "ordered_list?" -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 4 5)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (HIDE-ALL-BUT (-1 1 3 4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car(pds_)`1, N_)= get_noise_by_idx(car(pds_)`1, cdr(N_))") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_noise_monotony") (("1" (INST? -1 :WHERE 5) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND_OL) (("1" (SPLIT 1) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "pds_") (("2" (EXPAND "ordered_list?") (("2" (SPLIT -1) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 6)) (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|eval_pd_noise_rec_N_def| 0 (|eval_pd_noise_rec_N_def-2| |nil| 3629635262 ("" (SKOLEM!) (("" (NAME "L" "length(N!1)+length(pds!1)") (("" (GENERALIZE "pds!1" "pds") (("" (GENERALIZE "N!1" "N") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cdr_ol") (("" (EXPAND "eval_pd_noise" 1 1) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "pds=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "eval_pd_noise" 1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "search_error_term_by_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (AUTO-REWRITE "null_ol?") (("1" (INST -1 "cdr_ol(N)" "pds") (("1" (EXPAND "cdr_ol" :ASSERT? NONE) (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (REPLACE -1 1) (("1" (CASE "search_error_term_by_idx(pds, car_ol(N)`1) = car_ol(pds)`2") (("1" (EXPAND "car_ol" :ASSERT? NONE) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car_ol(N)`1, cdr_ol(N)) * car_ol(pds)`2 = 0") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" 1) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (ASSERT) NIL NIL) ("2" (HIDE -2) (("2" (HIDE 2) (("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (TYPEPRED "N") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (FLATTEN) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (HIDE-ALL-BUT (-1)) (("1" (INVOKE (WITH-FRESH-NAMES ((A "%1")) (ASSERT)) (! -1 1)) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "search_error_term_by_idx") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (USE "eval_pd_noise_rec_pds_def" ("pds" "pds")) (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (AUTO-REWRITE "null_ol?") (("1" (CASE "get_noise_by_idx(car_ol(pds)`1, cdr_ol(N))=0") (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "search_error_term_by_idx" 1) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE 1) (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2) (("2" (EXPAND "get_noise_by_idx" 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "lt_idx") (("2" (FLATTEN) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol" :ASSERT? NONE) (("1" (REPLACES -1) (("1" (HIDE-ALL-BUT (-1 -3)) (("1" (INVOKE (WITH-FRESH-NAMES ((A "%1") (B "%2")) (ASSERT)) (! -1 1) (! -1 2)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol" :ASSERT? NONE) (("2" (HIDE-ALL-BUT (-1 -3 1)) (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (N SKOLEM-CONST-DECL "Noise" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL) (|eval_pd_noise_rec_N_def-1| |nil| 3628609806 ("" (SKOLEM!) (("" (NAME "L" "length(N!1)+length(pds!1)") (("" (GENERALIZE "pds!1" "pds") (("" (GENERALIZE "N!1" "N") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cdr_ol") (("" (EXPAND "eval_pd_noise" 1 1) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "pds=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "eval_pd_noise" 1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "search_error_term_by_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "cdr(N)" "pds") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACE -1 1) (("1" (CASE "search_error_term_by_idx(pds, car(N)`1) = car(pds)`2") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car(N)`1, cdr(N)) * car(pds)`2 = 0") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "get_noise_by_idx" 1) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N") (("2" (EXPAND "ordered_list?" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (USE "eval_pd_noise_rec_pds_def" ("pds" "pds")) (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "get_noise_by_idx(car(pds)`1, cdr(N))=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "search_error_term_by_idx" 1) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE 1) (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N") (("2" (EXPAND "ordered_list?" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|appendable_Noises_1| 0 (|appendable_Noises_1-3| "" 3789916307 ("" (SKEEP) (("" (USE "olidx_car_last[nzEpsilon]") (("" (EXPAND_OL) (("" (ASSERT) (("" (EXPAND "appendable_ol?") (("" (EXPAND "lt_idx") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|appendable_Noises_1-2| |nil| 3629629861 ("" (SKEEP) (("" (USE "olidx_car_last[nzEpsilon]") (("" (EXPAND_OL) (("" (ASSERT) (("" (EXPAND "appendable_ol?") (("" (EXPAND "lt_idx") (("" (GRIND) NIL)))))))))))) NIL) NIL NIL) (|appendable_Noises_1-1| |nil| 3621261906 ("" (GRIND) (("" (USE "olidx_car_last[nzEpsilon]") (("" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|eval_pd_noise_noise_append_2| 0 (|eval_pd_noise_noise_append_2-6| "" 3750581789 ("" (INDUCT "n" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "append_ol") (("" (EXPAND "append" 1) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_noise" 2 1) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (1 -1)) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_noise" 1 2) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (INST -2 "j-2") (("1" (ASSERT) (("1" (AUTO-REWRITE "null_ol?") (("1" (INST -2 "cdr_ol(N1)" "N2" "cdr_ol(pds)") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (CASE "NOT null_ol?(N2)") (("1" (LEMMA "epn_pds_monotony") (("1" (INST -1 "N2" "pds") (("1" (PROP) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "null_ol?") (("3" (USE "appendable_Noises_1") (("3" (ASSERT) (("3" (EXPAND "car_ol") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3 4)) (("2" (REPLACE -1 1 :HIDE? T) (("2" (EXPAND "length" 1 1) (("2" (EXPAND "length" 1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "eval_pd_noise(pds, N1) + eval_pd_noise(pds, N2) = eval_pd_noise(cdr_ol(pds), append_ol(N1,N2))") (("1" (REPLACES -1) (("1" (EXPAND "append_ol") (("1" (EXPAND "append" 1 2) (("1" (HIDE-ALL-BUT (1 4)) (("1" (LIFT-IF 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N1" "N2" "cdr_ol(pds)") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "append_ol") (("1" (REPLACES -1) (("1" (LEMMA "epn_pds_monotony") (("1" (INST -1 "N1" "pds") (("1" (CASE "NOT null_ol?(pds) AND
                                                 NOT null_ol?(N1) AND car_ol(pds)`1 < car_ol(N1)`1") (("1" (SPLIT -2) (("1" (HIDE -2) (("1" (EXPAND "cdr_ol" :ASSERT? NONE) (("1" (REPLACES -1) (("1" (LEMMA "epn_pds_monotony") (("1" (INST -1 "N2" "pds") (("1" (EXPAND "cdr_ol" :ASSERT? NONE) (("1" (EXPAND "car_ol" :ASSERT? NONE) (("1" (EXPAND "null_ol?" :ASSERT? NONE) (("1" (CASE "null_ol?(N2)") (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL) ("2" (PROP) (("1" (EXPAND "appendable_ol?") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND_OL) NIL NIL) ("3" (LEMMA "olidx_car_last[nzEpsilon]") (("3" (INST -1 "N1") (("3" (ASSERT) (("3" (EXPAND "appendable_ol?" :ASSERT? NONE) (("3" (EXPAND_OL) (("3" (ASSERT) (("3" (EXPAND "lt_idx") (("3" (EXPAND "first_ol") (("3" (HIDE-ALL-BUT (-1 -2 -4 1 6)) (("3" (NAME-REPLACE "A" "car(N1)") (("3" (NAME-REPLACE "B" "last_ol(N1)") (("3" (CASE "A`1 = B`1") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE "A`1 < B`1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL) ("3" (FLATTEN) NIL NIL) ("4" (FLATTEN) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND "null_ol?" :ASSERT? NONE) (("2" (EXPAND "car_ol" :ASSERT? NONE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (INST -1 "cdr_ol(N1)" "N2" "pds") (("1" (EXPAND "cdr_ol") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "epn_noise_monotony") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (AUTO-REWRITE "null_ol?") (("1" (CASE "null_ol?(cdr_ol(N1))") (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) (("2" (EXPAND "eval_pd_noise" 3 2 :ASSERT? NONE) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "length" -1 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (N1 SKOLEM-CONST-DECL "Noise" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|epn_noise_monotony| FORMULA-DECL NIL |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epn_pds_monotony| FORMULA-DECL NIL |affine| NIL) (|appendable_Noises_1| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK)) (|eval_pd_noise_noise_append| 0 (|eval_pd_noise_noise_append-1| |nil| 3621187208 ("" (SKEEP) (("" (USE "eval_pd_noise_noise_append_2") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise_noise_append_2| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_pd_noise_append| 0 (|eval_pd_noise_append-1| |nil| 3621413347 ("" (SKEEP) (("" (NAME "lengths" "length(pds1)+length(pds2)") (("" (GENERALIZE "pds1" "pds1") (("" (GENERALIZE "pds2" "pds2") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "lengths" "lengths") (("" (INDUCT "lengths" :NAME "NAT_induction") (("" (SKEEP) (("" (SKOLEM 1 ("N_" "pds2_" "pds1_")) (("" (FLATTEN) (("" (EXPAND "append_ol") (("" (EXPAND "append" 1 1) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "car_ol") (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "N_" "pds2_" "cdr_ol(pds1_)") (("1" (SPLIT -1) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(cdr(pds1_), N_) + eval_pd_noise(pds2_, N_) + get_noise_by_idx(car(pds1_)`1, N_) * car(pds1_)`2 = eval_pd_noise(cdr(pds1_), N_) + get_noise_by_idx(car(pds1_)`1, N_) * car(pds1_)`2+ eval_pd_noise(pds2_, N_)") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N_" "pds1_") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1 :DIR RL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pds1_| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_ac_partial_ext| 0 (|eval_ac_partial_ext-1| |nil| 3628362410 ("" (SKEEP) (("" (EXPAND "eval_ac_noise") (("" (EXPAND "idxs_ac") (("" (GENERALIZE "pd(Xa)" "pds") (("" (INDUCT "pds") (("1" (TYPEPRED "pds!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_noise") (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("pdsh" "pdst")) (("3" (FLATTEN) (("3" (USE "eval_pd_noise_rec_pds_def") (("3" (EXPAND "null_ol?") (("3" (REPLACES -1) (("3" (EXPAND "cdr_ol") (("3" (EXPAND "car_ol") (("3" (USE "eval_pd_noise_rec_pds_def" ("N" "N2" "pds" "cons(pdsh, pdst)")) (("3" (REPLACES -1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "cdr_ol") (("3" (EXPAND "car_ol") (("3" (EXPAND "ordered_list?" -2) (("3" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "eval_pd_noise(pdst, N1) = eval_pd_noise(pdst, N2)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "pdsh`1") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (HIDE 1) (("2" (SKEEP) (("2" (INST? -4) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_upd_no_idxs_ac| 0 (|eval_upd_no_idxs_ac-1| |nil| 3628517071 ("" (SKEEP) (("" (EXPAND "eval_ac_noise") (("" (EXPAND "idxs_ac") (("" (GENERALIZE "pd(Xa)" "pds") (("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_noise") (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (USE "eval_pd_noise_rec_pds_def") (("3" (REPLACES -1) (("3" (LIFT-IF 2) (("3" (EXPAND "null_ol?") (("3" (EXPAND "cdr_ol") (("3" (EXPAND "car_ol") (("3" (USE "eval_pd_noise_rec_pds_def" ("N" "N" "pds" "cons(hpds,tpds)")) (("3" (REPLACES -1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "cdr_ol") (("3" (EXPAND "car_ol") (("3" (EXPAND "idxs_pd" 1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "member" 1) (("3" (FLATTEN) (("3" (EXPAND "cdr_ol") (("3" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (REPLACES -1) (("2" (ASSERT) (("2" (USE "gnbi_upd_2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gnbi_upd_2| FORMULA-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_updb_no_idxs_| 0 (|eval_updb_no_idxs_-1| |nil| 3635090130 ("" (INDUCT "nwidxs") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("idx" "idxs")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "upd_noise_burst_" 1) (("2" (USE "eval_upd_no_idxs_ac") (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (INST?) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (HIDE 2) (("2" (SKEEP) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|eval_upd_no_idxs_ac| FORMULA-DECL NIL |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|upd_noise_burst_| DEF-DECL "Noise" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|eval_updb_no_idxs| 0 (|eval_updb_no_idxs-1| |nil| 3635089975 ("" (SKEEP) (("" (EXPAND "upd_noise_burst") (("" (USE "eval_updb_no_idxs_") (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|upd_noise_burst| CONST-DECL "Noise" |affine| NIL) (|eval_updb_no_idxs_| FORMULA-DECL NIL |affine| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|mergeable?_TCC1| 0 (|mergeable?_TCC1-1| |nil| 3628272610 ("" (SKEEP*) (("" (REPLACES -) (("" (EXPAND "cdr_ol") (("" (EXPAND "null_ol?") (("" (EXPAND "length" 3 3 :ASSERT? NONE) (("" (LIFT-IF 3) (("" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (NAME-REPLACE "A" "length(cdr(N1))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|mergeable?| TERMINATION "affine.mergeable?(affine.t1)(affine.N2)" "NIL"))) (|mergeable?_TCC2| 0 (|mergeable?_TCC2-1| |nil| 3628272610 ("" (SKEEP*) (("" (REPLACES -) (("" (EXPAND "cdr_ol") (("" (EXPAND "null_ol?") (("" (EXPAND "length" 4 4 :ASSERT? NONE) (("" (LIFT-IF 4) (("" (SPLIT 4) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (NAME-REPLACE "A" "length(cdr(N2))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|mergeable?| TERMINATION "affine.mergeable?(affine.N1)(affine.t2)" "NIL"))) (|mergeable?_TCC3| 0 (|mergeable?_TCC3-1| |nil| 3628272610 ("" (SKEEP*) (("" (REPLACES -) (("" (EXPAND "null_ol?") (("" (EXPAND "cdr_ol") (("" (EXPAND "length" 5 (3 4) :ASSERT? NONE) (("" (LIFT-IF 5) (("" (SPLIT 5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (NAME-REPLACE "A" "length(cdr(N1))") (("2" (NAME-REPLACE "B" "length(cdr(N2))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|mergeable?| TERMINATION "affine.mergeable?(affine.t1)(affine.t2)" "NIL"))) (|mergeable_wrt_pd?_TCC1| 0 (|mergeable_wrt_pd?_TCC1-1| |nil| 3628272610 ("" (TERMINATION-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|mergeable_wrt_pd?| TERMINATION "affine.mergeable_wrt_pd?(affine.pdst, affine.N1)" "NIL"))) (|mergeable_wrt_pd?_nonrec_def| 0 (|mergeable_wrt_pd?_nonrec_def-1| |nil| 3628608581 ("" (SKEEP) (("" (IFF) (("" (SPLIT 1) (("1" (GENERALIZE "pds" "pds") (("1" (INDUCT "pds") (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "pds!1") (("2" (PROPAX) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND "idxs_pd") (("3" (EXPAND "null_ol?") (("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("hpds" "tpds")) (("4" (FLATTEN) (("4" (SKEEP) (("4" (EXPAND "idxs_pd" -4) (("4" (EXPAND "null_ol?") (("4" (EXPAND "car_ol") (("4" (EXPAND "member" -4) (("4" (SPLIT -4) (("1" (EXPAND "mergeable_wrt_pd?" -4) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (SPLIT -2) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "mergeable_wrt_pd?" -3) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ordered_list?" -2) (("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GENERALIZE "pds" "pds") (("2" (INDUCT "pds") (("1" (BETA) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "pds!1") (("2" (PROPAX) NIL NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "mergeable_wrt_pd?") (("3" (EXPAND "null_ol?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("hpds" "tpds")) (("4" (FLATTEN) (("4" (EXPAND "mergeable_wrt_pd?" 1) (("4" (EXPAND "null_ol?") (("4" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (INST -3 "hpds`1") (("1" (SPLIT -3) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "idxs_pd" 1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "member" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (SPLIT -1) (("1" (SKEEP) (("1" (INST?) (("1" (SPLIT -3) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "idxs_pd" 1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "member" 1) (("3" (EXPAND "cdr_ol") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|mergeable_wrt_pd?| DEF-DECL "bool" |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|merge_TCC1| 0 (|merge_TCC1-1| |nil| 3628272610 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|merge| SUBTYPE "affine.N2" "{N_: affine.Noise | booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1)))), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1))))))))}"))) (|merge_TCC2| 0 (|merge_TCC2-1| |nil| 3628272610 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|)) NIL (|merge| SUBTYPE "affine.N1" "{N_: affine.Noise | booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1)))), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1))))))))}"))) (|merge_TCC3| 0 (|merge_TCC3-2| "" 3789916320 ("" (SKEEP*) (("" (EXPAND "cdr_ol") (("" (EXPAND "length" 3 3) (("" (EXPAND "null_ol?") (("" (LIFT-IF 3) (("" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACES -5) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|merge| TERMINATION "affine.merge(affine.N1, affine.t2)" "NIL")) (|merge_TCC3-1| |nil| 3628272610 ("" (SKEEP*) (("" (EXPAND "cdr_ol") (("" (EXPAND "length" 3 3) (("" (EXPAND "null_ol?") (("" (LIFT-IF 3) (("" (SPLIT 3) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (REPLACES -5) (("2" (ASSERT) (("2" (NAME-REPLACE "A" "length(cdr(N2))") (("2" (NAME-REPLACE "B" "length[[nat, nzEpsilon]](N1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|merge| TERMINATION "affine.merge(affine.N1, affine.t2)" "NIL"))) (|merge_TCC4| 0 (|merge_TCC4-2| "" 3803782519 ("" (SKEEP*) (("" (EXPAND "lt_idx") (("" (TYPEPRED "v(N1,t2)") (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (REPLACES -1) (("2" (EXPAND "cdr_ol") (("2" (REPLACES -5) (("2" (REPLACES -4) (("2" (REPLACES -2) (("2" (CASE "car_ol(N2)`1 < car_ol(cdr_ol(N2))`1") (("1" (GRIND) NIL NIL) ("2" (EXPAND_OL) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|merge| SUBTYPE "affine.merge(affine.N1, affine.t2)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.h2, list_adt[[nat, nzEpsilon]].car(ol)))}")) (|merge_TCC4-1| |nil| 3628272610 ("" (SKEEP*) (("" (EXPAND "lt_idx") (("" (TYPEPRED "v(N1,t2)") (("" (ASSERT) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (REPLACES -1) (("2" (EXPAND "cdr_ol") (("2" (REPLACES -6) (("2" (REPLACES -4) (("2" (REPLACES -2) (("2" (CASE "car_ol(N2)`1 < car_ol(cdr_ol(N2))`1") (("1" (GRIND) NIL NIL) ("2" (EXPAND_OL) (("2" (HIDE-ALL-BUT (1 4 2)) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|merge| SUBTYPE "affine.merge(affine.N1, affine.t2)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.h2, list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|merge_TCC5| 0 (|merge_TCC5-1| |nil| 3628337988 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|merge| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol(affine.h2, affine.merge(affine.N1, affine.t2))" "{N_: affine.Noise | booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1)))), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1))))))))}"))) (|merge_TCC6| 0 (|merge_TCC6-5| |nil| 3629482527 ("" (SKEEP*) (("" (REPLACES -) (("" (EXPAND_OL) (("" (EXPAND "length" 4 3) (("" (LIFT-IF 4) (("" (SPLIT 4) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (APPLY (THEN (ASSERT) (NAME-REPLACE "A" "length(cdr(N1))") (NAME-REPLACE "B" "length[[nat, nzEpsilon]](N2)") (ASSERT))) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|merge| TERMINATION "affine.merge(affine.t1, affine.N2)" "NIL"))) (|merge_TCC7| 0 (|merge_TCC7-1| |nil| 3628337988 ("" (SKEEP*) (("" (EXPAND "lt_idx") (("" (REPLACES -) (("" (TYPEPRED "v(cdr_ol(N1), N2)") (("" (EXPAND_OL) (("" (ASSERT) (("" (FLATTEN) (("" (REPLACES -2) (("" (CASE "car_ol(N1)`1 < car_ol(cdr_ol(N1))`1") (("1" (EXPAND_OL) (("1" (HIDE-ALL-BUT (-1 -3 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "N1") (("2" (EXPAND "ordered_list?" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|merge| SUBTYPE "affine.merge(affine.t1, affine.N2)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.h1, list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|merge_TCC8| 0 (|merge_TCC8-1| |nil| 3628337988 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|merge| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol(affine.h1, affine.merge(affine.t1, affine.N2))" "{N_: affine.Noise | booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1)))), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1))))))))}"))) (|merge_TCC9| 0 (|merge_TCC9-1| |nil| 3628339943 ("" (SKEEP*) (("" (REPLACES -) (("" (EXPAND_OL) (("" (EXPAND "length" 5 (3 4)) (("" (LIFT-IF 5) (("" (SPLIT 5) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN 2 2 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|merge| TERMINATION "affine.merge(affine.t1, affine.t2)" "NIL"))) (|merge_TCC10| 0 (|merge_TCC10-1| |nil| 3628339943 ("" (SKEEP*) (("" (EXPAND "lt_idx") (("" (REPLACES -) (("" (TYPEPRED "v(cdr_ol(N1), cdr_ol(N2))") (("" (EXPAND "null_ol?") (("" (ASSERT) (("" (SPLIT -2) (("1" (EXPAND_OL) (("1" (FLATTEN) (("1" (REPLACES -2) (("1" (CASE "car_ol(N2)`1 = car_ol(N1)`1") (("1" (EXPAND_OL) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (REPLACES -2) (("2" (TYPEPRED "N1") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) (("3" (FLATTEN) (("3" (REPLACES -1) (("3" (CASE "car_ol(N1)`1 < car_ol(cdr_ol(N2))`1") (("1" (CASE "car_ol(N1)`1 < car_ol(cdr_ol(N1))`1") (("1" (GRIND) NIL NIL) ("2" (EXPAND_OL) (("2" (TYPEPRED "N1") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL) ("2" (CASE "car_ol(N2)`1 = car_ol(N1)`1") (("1" (EXPAND_OL) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (EXPAND_OL) NIL NIL) ("5" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|merge| SUBTYPE "affine.merge(affine.t1, affine.t2)" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx(affine.h1, list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|merge_TCC11| 0 (|merge_TCC11-1| |nil| 3628339943 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|merge| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol(affine.h1, affine.merge(affine.t1, affine.t2))" "{N_: affine.Noise | booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1)))), booleans.OR((booleans.AND(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1)))), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N1)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N2)), booleans.AND((booleans.NOT)(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(N_)), ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(N_)`1 = real_defs.min(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N1)`1, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N2)`1))))))))}"))) (|merge_prop1| 0 (|merge_prop1-2| |nil| 3629642538 ("" (SKEEP) (("" (NAME "L" "length(N1)+length(N2)") (("" (GENERALIZE "N1" "N1") (("" (GENERALIZE "N2" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "get_noise_by_idx" 1 1) (("" (EXPAND "null_ol?") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "merge" -1) (("1" (LIFT-IF -1) (("1" (EXPAND "null_ol?") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "N1!1=empty_noise") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "N2!1=empty_noise") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "merge" -2) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (REPLACES -2 :DIR RL) (("1" (REPLACES -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "merge" -2) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (REPLACES -2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "car_ol(N2!1)`1 = car_ol(N1!1)`1") (("1" (EXPAND "cons_ol") (("1" (EXPAND "merge" -2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (REPLACES -2 :DIR RL) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" -1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND ">") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND ">") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "merge" 2) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(N2!1)" "N1!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "merge" 5) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "cons_ol") (("3" (EXPAND "get_noise_by_idx" -3 2) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "merge" 6) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "cons_ol") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2!1" "cdr_ol(N1!1)") (("1" (SPLIT -2) (("1" (EXPAND "merge" (5 6)) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(N2!1)" "cdr_ol(N1!1)") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (EXPAND "merge" (6 7)) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "length" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (3 -1)) (("2" (ABSTRACT-AND-THEN 1 2 (ASSERT)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (N2!1 SKOLEM-CONST-DECL "Noise" |affine| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AAT__21 SKOLEM-CONST-DECL "{x: uint8 | even?(x)}" |affine| NIL) (AAT__20 SKOLEM-CONST-DECL "nat" |affine| NIL) (AAT__19 SKOLEM-CONST-DECL "nat" |affine| NIL) (AAT__18 SKOLEM-CONST-DECL "nat" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|merge| DEF-DECL "{N_: Noise |
   (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
    (null_ol?(N1) AND
      NOT null_ol?(N2) AND
       NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
     OR
     (null_ol?(N2) AND
       NOT null_ol?(N1) AND
        NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
      OR
      (NOT null_ol?(N1) AND
        NOT null_ol?(N2) AND
         NOT null_ol?(N_) AND
          car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL) (|merge_prop1-1| |nil| 3628614543 ("" (SKEEP) (("" (NAME "L" "length(N1)+length(N2)") (("" (GENERALIZE "N1" "N1") (("" (GENERALIZE "N2" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "get_noise_by_idx" 1 1) (("" (EXPAND "null_ol?") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "merge" -1) (("1" (LIFT-IF -1) (("1" (EXPAND "null_ol?") (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "N1!1=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "N2!1=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "merge" -2) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (REPLACES -2 :DIR RL) (("1" (REPLACES -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "merge" -2) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (REPLACES -2 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "car(N2!1)`1 = car(N1!1)`1") (("1" (EXPAND "cons_ol") (("1" (EXPAND "merge" -2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (REPLACES -2 :DIR RL) (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" -1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND ">") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND ">") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "merge" 2) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(N2!1)" "N1!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "merge" 5) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "cons_ol") (("3" (EXPAND "get_noise_by_idx" -3 2) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "merge" 6) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "cons_ol") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2!1" "cdr_ol(N1!1)") (("1" (SPLIT -2) (("1" (EXPAND "merge" (5 6)) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (ASSERT) (("2" (NAME-REPLACE "A" "length(N2!1)") (("2" (NAME "B" "length(cdr_ol(N1!1))") (("1" (GRIND) NIL NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(N2!1)" "cdr_ol(N1!1)") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (EXPAND "merge" (6 7)) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "cdr_ol") (("2" (NAME "B" "length(cdr_ol(N2!1))") (("1" (NAME "A" "length(cdr_ol(N1!1))") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "length" -3) (("1" (LIFT-IF -3) (("1" (ASSERT) (("1" (LIFT-IF -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "length" -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mergeable_wrt_null_all_idxs_zero| 0 (|mergeable_wrt_null_all_idxs_zero-2| "" 3789916332 ("" (INDUCT "pds") (("1" (TYPEPRED "pds!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "idxs_pd") (("2" (EXPAND "null_ol?") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP*) (("3" (EXPAND "idxs_pd" -4 :ASSERT? NONE) (("3" (EXPAND_OL) (("3" (EXPAND "member" -4) (("3" (SPLIT -1) (("1" (SPLIT -4) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "mergeable_wrt_pd?" :ASSERT? NONE) (("1" (EXPAND_OL) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "get_noise_by_idx") (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "N") (("2" (EXPAND "mergeable_wrt_pd?" -4 :ASSERT? NONE) (("2" (EXPAND_OL) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (INST? -1 :WHERE -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|mergeable_wrt_pd?| DEF-DECL "bool" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK) (|mergeable_wrt_null_all_idxs_zero-1| |nil| 3628596850 ("" (INDUCT "pds") (("1" (TYPEPRED "pds!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "idxs_pd") (("2" (EXPAND "null_ol?") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP*) (("3" (EXPAND "idxs_pd" -4 :ASSERT? NONE) (("3" (EXPAND_OL) (("3" (EXPAND "member" -4) (("3" (SPLIT -1) (("1" (SPLIT -4) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "mergeable_wrt_pd?" :ASSERT? NONE) (("1" (EXPAND_OL) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (REPLACES -1 :DIR RL) (("2" (EXPAND "get_noise_by_idx") (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -2 "N") (("2" (EXPAND "mergeable_wrt_pd?" -4 :ASSERT? NONE) (("2" (EXPAND_OL) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (INST? -1 :WHERE -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|mergeable_wrt_null_eval_zero| 0 (|mergeable_wrt_null_eval_zero-2| "" 3789916333 ("" (SKOLEM 1 ("N" "_")) (("" (INDUCT "pds") (("1" (TYPEPRED "pds!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (1)) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (EXPAND "eval_pd_noise" 1) (("3" (EXPAND "null_ol?") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (USE "mergeable_wrt_null_all_idxs_zero") (("2" (ASSERT) (("2" (SPLIT -2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "eval_pd_noise(tpds, cdr(N))=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "hpds`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 -2)) (("2" (EXPAND "eval_pd_noise" -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (REVEAL -1) (("2" (REPLACES -1 :DIR RL) (("2" (REVEAL -3) (("2" (EXPAND "ordered_list?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "car_ol") (("2" (CASE "eval_pd_noise(tpds, cdr(N)) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -2 "hpds`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "eval_pd_noise" -1) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (HIDE-ALL-BUT (1 -1)) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mergeable_wrt_pd?" -3) (("2" (EXPAND "null_ol?") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ordered_list?" -2) (("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|mergeable_wrt_pd?| DEF-DECL "bool" |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|mergeable_wrt_null_all_idxs_zero| FORMULA-DECL NIL |affine| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK) (|mergeable_wrt_null_eval_zero-1| |nil| 3628597794 ("" (SKOLEM 1 ("N" "_")) (("" (INDUCT "pds") (("1" (TYPEPRED "pds!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (1)) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (EXPAND "eval_pd_noise" 1) (("3" (EXPAND "null_ol?") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (USE "mergeable_wrt_null_all_idxs_zero") (("2" (ASSERT) (("2" (SPLIT -2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "eval_pd_noise(tpds, cdr(N))=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "hpds`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 -2)) (("2" (EXPAND "eval_pd_noise" -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (REVEAL -1) (("2" (REPLACES -1 :DIR RL) (("2" (REVEAL -3) (("2" (EXPAND "ordered_list?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "car_ol") (("2" (CASE "eval_pd_noise(tpds, cdr(N)) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -2 "hpds`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "eval_pd_noise" -1) (("2" (EXPAND "null_ol?") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (HIDE-ALL-BUT (1 -1)) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mergeable_wrt_pd?" -3) (("2" (EXPAND "null_ol?") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "ordered_list?" -2) (("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (1)) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mergeable_noises_respect_eval| 0 (|mergeable_noises_respect_eval-4| "" 3789916337 ("" (SKOLEM!) (("" (NAME "L" "length(N1!1)+length(N2!1)") (("" (GENERALIZE "N1!1" "N1") (("" (GENERALIZE "N2!1" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "merge" 1) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cdr_ol") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "N1=empty_noise") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "eval_ac_noise") (("1" (EXPAND "eval_pd_noise" 1 2) (("1" (EXPAND_OL) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_null_eval_zero") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(N2)" "N1") (("1" (SPLIT -2) (("1" (ASSERT) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (CASE "search_error_term_by_idx(pd(Xa!1), car_ol(N2)`1) /= 0") (("1" (HIDE 1) (("1" (USE "setbi_nnull_member") (("1" (ASSERT) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (ASSERT) (("1" (INST -1 "car_ol(N2)`1") (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(car_ol(N2)`1, N2) = 0") (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (TYPEPRED "car_ol(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -1 1) (("2" (EXPAND_OL) (("2" (SPLIT -1) (("1" (TYPEPRED "car_ol(N2)`2") (("1" (EXPAND_OL) (("1" (EXPAND "/=") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx") (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (EXPAND "/=") (("2" (WITH-TCCS (NAME-REPLACE* ("ABS_123" (TYPECHECKED "search_error_term_by_idx(pd(Xa!1), car(N2)`1)" "BaseType") "ABS_124" (TYPECHECKED "0" "real")))) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (BETA) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND_OL) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND_OL) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "i=car_ol(N2)`1") (("1" (REPLACES -1) (("1" (HIDE 2) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" 3 1) (("2" (EXPAND_OL) (("2" (ASSERT) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND ">") (("1" (EXPAND "get_noise_by_idx" 3) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 3)) (("3" (EXPAND_OL) (("3" (EXPAND "length" -1 2 :ASSERT? NONE) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (EXPAND "length" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2" "cdr_ol(N1)") (("1" (SPLIT -2) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 5)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (CASE "i = car_ol(N1)`1") (("1" (REPLACES -1) (("1" (REVEAL (-6 3)) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 5)) (("3" (EXPAND "length" -1 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_ac_noise") (("2" (USE "eval_pd_noise_rec_N_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr(N2)" "cdr(N1)") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(N2)`1 = car(N1)`1") (("1" (HIDE-ALL-BUT (-1 -3 1 5 6)) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (REPLACE -2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -1 5 6)) (("3" (EXPAND "length" -1 :ASSERT? NONE) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|mergeable_wrt_pd?_nonrec_def| FORMULA-DECL NIL |affine| NIL) (|setbi_nnull_member| FORMULA-DECL NIL |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (N2 SKOLEM-CONST-DECL "Noise" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|eval_pd_noise_rec_N_def| FORMULA-DECL NIL |affine| NIL) (N1 SKOLEM-CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|mergeable_wrt_null_eval_zero| FORMULA-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|mergeable_wrt_ac?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|merge| DEF-DECL "{N_: Noise |
   (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
    (null_ol?(N1) AND
      NOT null_ol?(N2) AND
       NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
     OR
     (null_ol?(N2) AND
       NOT null_ol?(N1) AND
        NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
      OR
      (NOT null_ol?(N1) AND
        NOT null_ol?(N2) AND
         NOT null_ol?(N_) AND
          car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|mergeable_noises_respect_eval-3| "" 3629628859 ("" (SKOLEM!) (("" (NAME "L" "length(N1!1)+length(N2!1)") (("" (GENERALIZE "N1!1" "N1") (("" (GENERALIZE "N2!1" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "merge" 1) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cdr_ol") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "N1=empty_noise") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "eval_ac_noise") (("1" (EXPAND "eval_pd_noise" 1 2) (("1" (EXPAND_OL) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_null_eval_zero") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(N2)" "N1") (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (CASE "search_error_term_by_idx(pd(Xa!1), car_ol(N2)`1) /= 0") (("1" (HIDE 1) (("1" (USE "setbi_nnull_member") (("1" (ASSERT) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (ASSERT) (("1" (INST -1 "car_ol(N2)`1") (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(car_ol(N2)`1, N2) = 0") (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (TYPEPRED "car_ol(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -1 1) (("2" (EXPAND_OL) (("2" (SPLIT -1) (("1" (TYPEPRED "car_ol(N2)`2") (("1" (EXPAND_OL) (("1" (EXPAND "/=") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx") (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (EXPAND "/=") (("2" (WITH-TCCS (NAME-REPLACE* ("ABS_123" (TYPECHECKED "search_error_term_by_idx(pd(Xa!1), car(N2)`1)" "BaseType") "ABS_124" (TYPECHECKED "0" "real")))) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (BETA) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND_OL) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND_OL) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "i=car_ol(N2)`1") (("1" (REPLACES -1) (("1" (HIDE 2) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" 3 1) (("2" (EXPAND_OL) (("2" (ASSERT) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND ">") (("1" (EXPAND "get_noise_by_idx" 3) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 3)) (("3" (EXPAND_OL) (("3" (EXPAND "length" -1 2 :ASSERT? NONE) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (EXPAND "length" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2" "cdr_ol(N1)") (("1" (SPLIT -2) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 5)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (CASE "i = car_ol(N1)`1") (("1" (REPLACES -1) (("1" (REVEAL (-6 3)) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 5)) (("3" (EXPAND "length" -1 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_ac_noise") (("2" (USE "eval_pd_noise_rec_N_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr(N2)" "cdr(N1)") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(N2)`1 = car(N1)`1") (("1" (HIDE-ALL-BUT (-1 -3 1 5 6)) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (REPLACE -2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -1 5 6)) (("3" (EXPAND "length" -1 :ASSERT? NONE) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|mergeable_noises_respect_eval-2| "" 3629490441 ("" (SKOLEM!) (("" (NAME "L" "length(N1!1)+length(N2!1)") (("" (GENERALIZE "N1!1" "N1") (("" (GENERALIZE "N2!1" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "merge" 1) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cdr_ol") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "N1=empty_noise") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "eval_ac_noise") (("1" (EXPAND "eval_pd_noise" 1 2) (("1" (EXPAND_OL) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_null_eval_zero") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(N2)" "N1") (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (CASE "search_error_term_by_idx(pd(Xa!1), car_ol(N2)`1) /= 0") (("1" (HIDE 1) (("1" (USE "setbi_nnull_member") (("1" (ASSERT) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (ASSERT) (("1" (INST -1 "car_ol(N2)`1") (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(car_ol(N2)`1, N2) = 0") (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (TYPEPRED "car_ol(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -1 1) (("2" (EXPAND_OL) (("2" (SPLIT -1) (("1" (TYPEPRED "car_ol(N2)`2") (("1" (EXPAND_OL) (("1" (EXPAND "/=") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx") (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (EXPAND "/=") (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (BETA) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND_OL) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND_OL) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "i=car_ol(N2)`1") (("1" (REPLACES -1) (("1" (HIDE 2) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" 3 1) (("2" (EXPAND_OL) (("2" (ASSERT) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND ">") (("1" (EXPAND "get_noise_by_idx" 3) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 3)) (("3" (EXPAND_OL) (("3" (EXPAND "length" -1 2 :ASSERT? NONE) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (EXPAND "length" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2" "cdr_ol(N1)") (("1" (SPLIT -2) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 5)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (CASE "i = car(N1)`1") (("1" (REPLACES -1) (("1" (REVEAL (-6 3)) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 5)) (("3" (EXPAND "length" -1 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_ac_noise") (("2" (USE "eval_pd_noise_rec_N_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr(N2)" "cdr(N1)") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(N2)`1 = car(N1)`1") (("1" (HIDE-ALL-BUT (-1 -3 1 5 6)) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (REPLACE -2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -1 5 6)) (("3" (EXPAND "length" -1 :ASSERT? NONE) (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|mergeable_noises_respect_eval-1| |nil| 3628593395 ("" (SKOLEM!) (("" (NAME "L" "length(N1!1)+length(N2!1)") (("" (GENERALIZE "N1!1" "N1") (("" (GENERALIZE "N2!1" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "merge" 1) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cdr_ol") (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "N1=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (EXPAND "eval_ac_noise") (("1" (EXPAND "eval_pd_noise" 1 2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_null_eval_zero") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr(N2)" "N1") (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (CASE "search_error_term_by_idx(pd(Xa!1), car(N2)`1) /= 0") (("1" (HIDE 1) (("1" (USE "setbi_nnull_member") (("1" (ASSERT) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (ASSERT) (("1" (INST -1 "car(N2)`1") (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(car(N2)`1, N2) = 0") (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (TYPEPRED "car(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -1 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (EXPAND "/=") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 3)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (BETA) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACES -1) (("2" (CASE "i=car(N2)`1") (("1" (REPLACES -1) (("1" (HIDE 2) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" 3 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (EXPAND "cdr_ol") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 3)) (("3" (EXPAND "length" -1 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 3)) (("2" (EXPAND "length") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "eval_ac_noise") (("1" (USE "eval_pd_noise_rec_N_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2" "cdr(N1)") (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 5)) (("2" (EXPAND "mergeable_wrt_ac?") (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (USE "mergeable_wrt_pd?_nonrec_def") (("2" (REPLACES -1) (("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (CASE "i = car(N1)`1") (("1" (REPLACES -1) (("1" (REVEAL (-6 3)) (("1" (HIDE-ALL-BUT (-1 1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 5)) (("3" (EXPAND "length" -1 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_ac_noise") (("2" (USE "eval_pd_noise_rec_N_def") (("2" (REPLACES -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr(N2)" "cdr(N1)") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_N_def") (("1" (INST -1 "N1" "pd(Xa!1)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car(N2)`1 = car(N1)`1") (("1" (HIDE-ALL-BUT (-1 -3 1 5 6)) (("1" (EXPAND "mergeable_wrt_ac?") (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (USE "mergeable_wrt_pd?_nonrec_def") (("1" (REPLACES -1) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car(N2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "get_noise_by_idx" -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (REPLACE -2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (EXPAND "null_ol?") (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N2") (("1" (EXPAND "ordered_list?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N2") (("2" (EXPAND "ordered_list?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1 5 6)) (("3" (EXPAND "length" -1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mergeable_suff_conditions| 0 (|mergeable_suff_conditions-1| |nil| 3628592586 ("" (SKEEP) (("" (EXPAND "mergeable_wrt_ac?") (("" (EXPAND "mergeable_wrt_pd?") (("" (EXPAND "null_ol?") (("" (FLATTEN) (("" (EXPAND "idxs_ac") (("" (GENERALIZE "pd(Xa)" "pda") (("1" (INDUCT "pda") (("1" (TYPEPRED "pda!1") (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "pda!1") (("2" (PROPAX) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (SKOLEM 1 ("hpda" "tpda")) (("4" (FLATTEN) (("4" (EXPAND "car_ol") (("4" (EXPAND "cdr_ol") (("4" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "hpda`1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mergeable_wrt_pd?" 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (EXPAND "ordered_list?" -2) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (SKEEP) (("2" (INST?) (("2" (SPLIT -4) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (GRIND) NIL NIL) ("6" (HIDE-ALL-BUT (2 3)) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE-ALL-BUT (3 4)) (("7" (GRIND) NIL NIL)) NIL) ("8" (HIDE-ALL-BUT (3 2)) (("8" (GRIND) NIL NIL)) NIL) ("9" (HIDE-ALL-BUT (3 4)) (("9" (GRIND) NIL NIL)) NIL) ("10" (HIDE-ALL-BUT (3 2)) (("10" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE 2) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 3) (("5" (GRIND) NIL NIL)) NIL) ("6" (HIDE 3) (("6" (GRIND) NIL NIL)) NIL) ("7" (HIDE 3) (("7" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mergeable_wrt_ac?| CONST-DECL "bool" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (N2 SKOLEM-CONST-DECL "Noise" |affine| NIL) (N1 SKOLEM-CONST-DECL "Noise" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|mergeable_wrt_pd?| DEF-DECL "bool" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|merge_commutativity| 0 (|merge_commutativity-3| |nil| 3629647010 ("" (SKEEP) (("" (NAME "L" "length(N1)+length(N2)") (("" (GENERALIZE "N1" "N1") (("" (GENERALIZE "N2" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "merge" 1 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "merge" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1 2) (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND_OL) (("1" (CASE "merge(N1!1, cdr(N2!1)) = merge(cdr(N2!1), N1!1)") (("1" (INST? -3 :WHERE -1) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 -3 3)) (("2" (EXPAND "length" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -2 :WHERE 1) (("2" (ASSERT) (("2" (SPLIT 5) (("1" (HIDE-ALL-BUT (-2 1 4)) (("1" (EXPAND "length" -1 2 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (CASE "get_noise_by_idx(i, N2!1) = 0") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "car_ol") (("1" (EXPAND ">") (("1" (TYPEPRED "N2!1") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -3 2) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1 2) (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND_OL) (("1" (CASE "merge(cdr(N1!1), N2!1) = merge(N2!1, cdr(N1!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (INST? -2 :WHERE 1) (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (CASE "get_noise_by_idx(i, N1!1) = 0") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car_ol(N1!1)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (LIFT-IF 2) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -3 1) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?") (("1" (HIDE-ALL-BUT (-1 -2 2 9)) (("1" (EXPAND "null_ol?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "get_noise_by_idx" -1) (("2" (TYPEPRED "car_ol(N1!1)`2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (EXPAND_OL) (("1" (CASE "merge(cdr(N1!1), cdr(N2!1)) =
                                                          merge(cdr(N2!1), cdr(N1!1))") (("1" (EXPAND "merge" 2 2 :ASSERT? NONE) (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (CASE "car_ol(N2!1)`1=car_ol(N1!1)`1") (("1" (INST -3 "car_ol(N2!1)`1") (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "get_noise_by_idx" -1 2) (("3" (REPLACE -2 -1) (("3" (EXPAND "get_noise_by_idx" -1 1) (("3" (CASE "car_ol(N1!1) = car_ol(N2!1)") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 -2)) (("2" (EXPAND_OL) (("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -1 :WHERE 1) (("2" (ASSERT) (("2" (SPLIT 7) (("1" (HIDE-ALL-BUT (-1 1 6 7)) (("1" (EXPAND "length" -1 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ABSTRACT-AND-THEN 3 2 (ASSERT)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (CASE "get_noise_by_idx(i, N1!1) = 0") (("1" (HIDE -3) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?" :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "get_noise_by_idx(i, N2!1) = 0") (("1" (HIDE -3) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -2 1) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 3) (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "get_noise_by_idx" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 6) (("1" (LIFT-IF 6) (("1" (SPLIT 6) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (AAT__22 SKOLEM-CONST-DECL "nat" |affine| NIL) (AAT__23 SKOLEM-CONST-DECL "nat" |affine| NIL) (AAT__24 SKOLEM-CONST-DECL "nat" |affine| NIL) (AAT__25 SKOLEM-CONST-DECL "{x: uint8 | even?(x)}" |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|merge| DEF-DECL "{N_: Noise |
   (null_ol?(N1) AND null_ol?(N2) AND null_ol?(N_)) OR
    (null_ol?(N1) AND
      NOT null_ol?(N2) AND
       NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N2)`1)
     OR
     (null_ol?(N2) AND
       NOT null_ol?(N1) AND
        NOT null_ol?(N_) AND car_ol(N_)`1 = car_ol(N1)`1)
      OR
      (NOT null_ol?(N1) AND
        NOT null_ol?(N2) AND
         NOT null_ol?(N_) AND
          car_ol(N_)`1 = min(car_ol(N1)`1, car_ol(N2)`1))}" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL) (|merge_commutativity-2| |nil| 3629646061 ("" (SKEEP) (("" (NAME "L" "length(N1)+length(N2)") (("" (GENERALIZE "N1" "N1") (("" (GENERALIZE "N2" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "merge" 1 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "merge" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1 2) (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND_OL) (("1" (CASE "merge(N1!1, cdr(N2!1)) = merge(cdr(N2!1), N1!1)") (("1" (INST? -3 :WHERE -1) (("1" (SPLIT -3) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 -3 3)) (("2" (EXPAND "length" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -2 :WHERE 1) (("2" (ASSERT) (("2" (SPLIT 5) (("1" (HIDE-ALL-BUT (-2 1 4)) (("1" (EXPAND "length" -1 2 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (ASSERT) (("2" (CASE "get_noise_by_idx(i, N2!1) = 0") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "car_ol") (("1" (EXPAND ">") (("1" (TYPEPRED "N2!1") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -3 2) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1 2) (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND_OL) (("1" (CASE "merge(cdr(N1!1), N2!1) = merge(N2!1, cdr(N1!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (INST? -2 :WHERE 1) (("2" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (CASE "get_noise_by_idx(i, N1!1) = 0") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car_ol(N1!1)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (LIFT-IF 2) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?" :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -3 1) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?") (("1" (HIDE-ALL-BUT (-1 -2 2 9)) (("1" (EXPAND "null_ol?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "get_noise_by_idx" -1) (("2" (TYPEPRED "car_ol(N1!1)`2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (EXPAND_OL) (("1" (CASE "merge(cdr(N1!1), cdr(N2!1)) =
                        merge(cdr(N2!1), cdr(N1!1))") (("1" (EXPAND "merge" 2 2 :ASSERT? NONE) (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (CASE "car_ol(N2!1)`1=car_ol(N1!1)`1") (("1" (INST -3 "car_ol(N2!1)`1") (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "get_noise_by_idx" -1 2) (("3" (REPLACE -2 -1) (("3" (EXPAND "get_noise_by_idx" -1 1) (("3" (CASE "car_ol(N1!1) = car_ol(N2!1)") (("1" (EXPAND_OL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 -2)) (("2" (EXPAND_OL) (("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST? -1 :WHERE 1) (("2" (ASSERT) (("2" (SPLIT 7) (("1" (HIDE-ALL-BUT (-1 1 6 7)) (("1" (EXPAND "length" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST?) (("2" (CASE "get_noise_by_idx(i, N1!1) = 0") (("1" (HIDE -3) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?") (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "get_noise_by_idx(i, N2!1) = 0") (("1" (HIDE -3) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -2 1) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 3) (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?" -1 :ASSERT? NONE) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "get_noise_by_idx" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 6) (("1" (LIFT-IF 6) (("1" (SPLIT 6) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|merge_commutativity-1| |nil| 3628617821 ("" (SKEEP) (("" (NAME "L" "length(N1)+length(N2)") (("" (GENERALIZE "N1" "N1") (("" (GENERALIZE "N2" "N2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "merge" 1 1) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "merge" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1 2) (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(N2!1)" "N1!1") (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (CASE "get_noise_by_idx(i, N2!1) = 0") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "car_ol") (("1" (EXPAND ">") (("1" (TYPEPRED "N2!1") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "cons_ol") (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (EXPAND "get_noise_by_idx" -3 2) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (EXPAND "car_ol") (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 3)) (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "merge" 1 2) (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "N2!1" "cdr_ol(N1!1)") (("1" (SPLIT -2) (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2 5)) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) (("3" (CASE "get_noise_by_idx(i, N1!1) = 0") (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "car_ol(N1!1)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (LIFT-IF 2) (("1" (ASSERT) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?") (("2" (LIFT-IF -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -3 1) (("2" (LIFT-IF -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 2 1) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?") (("1" (HIDE-ALL-BUT (-1 -2 2 9)) (("1" (EXPAND "null_ol?") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "get_noise_by_idx" -1) (("2" (TYPEPRED "car_ol(N1!1)`2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-2") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(N2!1)" "cdr_ol(N1!1)") (("1" (SPLIT -1) (("1" (EXPAND "merge" 2 2) (("1" (REPLACES -1) (("1" (CASE "car_ol(N2!1)`1=car_ol(N1!1)`1") (("1" (INST -3 "car_ol(N2!1)`1") (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "get_noise_by_idx" -1 2) (("3" (REPLACE -2 -1) (("3" (EXPAND "get_noise_by_idx" -1 1) (("3" (CASE "car_ol(N1!1) = car_ol(N2!1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 -1 -2)) (("2" (EXPAND "car_ol") (("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (INST?) (("3" (CASE "get_noise_by_idx(i, N1!1) = 0") (("1" (HIDE -3) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "get_noise_by_idx" 2) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?") (("1" (LIFT-IF -1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?") (("2" (LIFT-IF -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "get_noise_by_idx(i, N2!1) = 0") (("1" (HIDE -3) (("1" (EXPAND "get_noise_by_idx" -1) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "get_noise_by_idx" -2 1) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 3) (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "N1!1") (("1" (EXPAND "ordered_list?") (("1" (LIFT-IF -1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "N1!1") (("2" (EXPAND "ordered_list?") (("2" (LIFT-IF -1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "get_noise_by_idx" -1 2) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "get_noise_by_idx" 6) (("1" (LIFT-IF 6) (("1" (SPLIT 6) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 5 6)) (("2" (EXPAND "null_ol?") (("2" (EXPAND "length" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|map_error_TCC1| 0 (|map_error_TCC1-2| "" 3789916343 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|map_error| TERMINATION "affine.map_error(affine.pds1, affine.t2, affine.op)" "NIL")) (|map_error_TCC1-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|map_error| TERMINATION "affine.map_error(affine.pds1, affine.t2, affine.op)" "NIL"))) (|map_error_TCC2| 0 (|map_error_TCC2-2| "" 3789916343 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|map_error| TERMINATION "affine.map_error(affine.t1, affine.pds2, affine.op)" "NIL")) (|map_error_TCC2-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|map_error| TERMINATION "affine.map_error(affine.t1, affine.pds2, affine.op)" "NIL"))) (|map_error_TCC3| 0 (|map_error_TCC3-2| "" 3789916344 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|map_error| TERMINATION "affine.map_error(affine.t1, affine.t2, affine.op)" "NIL")) (|map_error_TCC3-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|map_error| TERMINATION "affine.map_error(affine.t1, affine.t2, affine.op)" "NIL"))) (|map_error_TCC4| 0 (|map_error_TCC4-2| "" 3789916345 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|map_error| TERMINATION "affine.map_error(affine.t1, affine.pds2, affine.op)" "NIL")) (|map_error_TCC4-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|map_error| TERMINATION "affine.map_error(affine.t1, affine.pds2, affine.op)" "NIL"))) (|map_error_TCC5| 0 (|map_error_TCC5-2| "" 3789916346 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|map_error| TERMINATION "affine.map_error(affine.pds1, affine.t2, affine.op)" "NIL")) (|map_error_TCC5-1| |nil| 3619884927 ("" (TCC)) NIL SHOSTAK (|map_error| TERMINATION "affine.map_error(affine.pds1, affine.t2, affine.op)" "NIL"))) (|nol_mp_1| 0 (|nol_mp_1-1| |nil| 3622387225 ("" (SKEEP) (("" (EXPAND "map_error") (("" (ASSERT) (("" (EXPAND "null_ol") (("" (EXPAND "null_ol?") (("" (EXPAND "add_ET") (("" (LIFT-IF) (("" (SPLIT -1) (("1" (FLATTEN) (("1" (INST -3 "car_ol(pds2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|me_ordered_1| 0 (|me_ordered_1-2| "" 3789916347 ("" (SKOLEM 1 ("op" "_")) (("" (INDUCT "pds2" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) (("2" (HIDE 1) (("2" (EXPAND "map_error" 2 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "car_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 2 3)) (("2" (EXPAND "map_error" 2) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (FLATTEN) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "map_error" 6) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK) (|me_ordered_1-1| |nil| 3622463893 ("" (SKOLEM 1 ("op" "_")) (("" (INDUCT "pds2" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) (("2" (HIDE 1) (("2" (EXPAND "map_error" 2 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "car_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 2 3)) (("2" (EXPAND "map_error" 2) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (FLATTEN) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "map_error" 6) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (HIDE-ALL-BUT 3) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (HIDE-ALL-BUT 2) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|me_ordered_1b| 0 (|me_ordered_1b-1| |nil| 3622468980 ("" (SKOLEM 1 ("op" "_")) (("" (INDUCT "pds1" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) (("2" (HIDE 1) (("2" (EXPAND "map_error" 2 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "car_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 2 3)) (("2" (EXPAND "map_error" 2) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (EXPAND "cdr_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (FLATTEN) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cons_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "map_error" 6) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL)) SHOSTAK)) (|me_ordered_2| 0 (|me_ordered_2-1| |nil| 3622469209 ("" (SKOLEM 1 ("op" "pds1_" "pds2_")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "map_error" 3) (("" (SPLIT 3) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "null_ol?") (("1" (EXPAND "empty_ErrorTerms") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)") (("1" (EXPAND "map_error" 5) (("1" (EXPAND "add_ET") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5 3)) (("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3 5 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 5) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "cons_ol") (("1" (EXPAND "car_ol") (("1" (HIDE-ALL-BUT (5 4 2)) (("1" (TYPEPRED "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (6 3 4 5)) (("1" (TYPEPRED "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "map_error" 8) (("1" (EXPAND "add_ET") (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 7 8 6)) (("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 6 7 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "map_error" 5) (("1" (EXPAND "add_ET") (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1)<=min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3 4 5)) (("2" (TYPEPRED "pds1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 5) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (5 3 4 2)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "cons_ol") (("1" (EXPAND "car_ol") (("1" (HIDE-ALL-BUT (5 3 4 6)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "map_error" 8) (("1" (EXPAND "add_ET") (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1)<=min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6 7 8)) (("2" (TYPEPRED "pds1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) < min(car_ol(cdr_ol(pds1))`1, car_ol(cdr_ol(pds2))`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 3 4 5 6)) (("2" (TYPEPRED "pds1" "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (6 4 5 3)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "cons_ol") (("1" (EXPAND "car_ol") (("1" (HIDE-ALL-BUT (7 4 5 6)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-2") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "map_error" 9) (("1" (EXPAND "add_ET") (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) < min(car_ol(cdr_ol(pds1))`1, car_ol(cdr_ol(pds2))`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 6 7 8 9)) (("2" (TYPEPRED "pds1" "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "map_error" 7) (("1" (EXPAND "add_ET") (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 4 5 6 7)) (("2" (TYPEPRED "pds1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (7 3 4 5 6)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (8 4 5 6 7)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 10) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(cdr_ol(pds1))`1, car_ol(pds2)`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 7 8 9 10)) (("2" (TYPEPRED "pds1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 5 6 7 8)) (("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5 6 7 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (8 4 5 6 7)) (("1" (TYPEPRED "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 9) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (9 8 7 6 5)) (("1" (TYPEPRED "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 11) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "min(car_ol(pds1)`1, car_ol(pds2)`1) <= min(car_ol(pds1)`1, car_ol(cdr_ol(pds2))`1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 8 9 10 11)) (("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 8 9 10 11)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|me_ordered_3| 0 (|me_ordered_3-1| |nil| 3622473500 ("" (SKOLEM 1 ("op" "pds1_" "pds2_")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "map_error" 3) (("" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 4) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 5 1 -4 3)) (("1" (TYPEPRED "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 4) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 5) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 7) (("2" (EXPAND "add_ET") (("2" (ASSERT) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (6 -3 7 8 1)) (("1" (TYPEPRED "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6 7 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (5 1 4 6 7 -4 -2)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE 4) (("2" (LEMMA "me_ordered_1b") (("2" (INST -1 "op" "cdr_ol(pds1)") (("2" (ASSERT) (("2" (CASE "cdr_ol(pds2) = null") (("1" (REPLACES -1) (("1" (EXPAND "null_ol") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (6 4 3)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT (7 5 4)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 9) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-2") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (8 -1 -3 9 10 7 1)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds2) = null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1b") (("1" (INST -1 "op" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "null_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 6 7 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 10) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (7 3 4 8 9 6 1 -3)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds2) = null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1b") (("1" (INST -1 "op" "pds1") (("1" (ASSERT) (("1" (EXPAND "null_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 9) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 11) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds2))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (10 6 7 -2 11 12 9 1)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds2) = null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1b") (("1" (INST -1 "op" "pds1") (("1" (ASSERT) (("1" (EXPAND "null_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|me_ordered_1b| FORMULA-DECL NIL |affine| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|me_ordered_4| 0 (|me_ordered_4-1| |nil| 3622476284 ("" (SKOLEM 1 ("op" "pds1_" "pds2_")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "map_error" 3) (("" (ASSERT) (("" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 4) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds1))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 5 1 -4 3)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds1) =null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "pds2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 4) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 5) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 7) (("2" (EXPAND "add_ET") (("2" (ASSERT) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds1))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (6 -3 7 8 1)) (("1" (TYPEPRED "pds1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds1) =null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "pds2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 6 7 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 5) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds1))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 -2 -4 5 6 3 1)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds1) =null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "cdr_ol(pds2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 5) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 6) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map_error" 7) (("2" (EXPAND "add_ET") (("2" (ASSERT) (("2" (INST -2 "j-2") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds1))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (8 -3 -1 1 5 7 8 6)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds1) =null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "cdr_ol(pds2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds1))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (5 -2 -4 1 4 6 7)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds1) =null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "pds2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 6) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND ("cons_ol" "car_ol")) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 7) (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND ("cons_ol" "car_ol")) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 9) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (CASE "NOT null_ol?(cdr_ol(pds1))") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (8 -1 -3 1 7 9 10)) (("1" (TYPEPRED "pds1" "pds2") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr_ol(pds1) =null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "pds2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (TYPEPRED "pds2") (("1" (HIDE-ALL-BUT (-3 7 -1 6 4)) (("1" (EXPAND "ordered_list?") (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (ASSERT) (("1" (PROP) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 6 7 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 7) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND ("cons_ol" "car_ol")) (("1" (TYPEPRED "pds2") (("1" (HIDE-ALL-BUT (-1 7 6 4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE 1) (("1" (EXPAND "map_error" 8) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (EXPAND ("cons_ol" "car_ol")) (("1" (TYPEPRED "pds2") (("1" (HIDE-ALL-BUT (8 7 5 -1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "map_error" 10) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 9 10)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|me_ordered_1| FORMULA-DECL NIL |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|epn_me_null_1| 0 (|epn_me_null_1-1| |nil| 3622479053 ("" (SKOLEM 1 ("N" "pds1_" "pds2_" "op")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP*) (("" (EXPAND "map_error" -3) (("" (LIFT-IF) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (EXPAND "empty_ErrorTerms") (("1" (HIDE -3) (("1" (TYPEPRED "op") (("1" (CASE "eval_pd_noise(pds1, N)=0") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(pds2, N)=0") (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -5)) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -6)) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (TYPEPRED "op") (("1" (INST -2 "car_ol(pds2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cons_ol") (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (LEMMA "me_ordered_1") (("1" (INST -1 "op" "pds2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (TYPEPRED "op") (("1" (INST -2 "car_ol(pds1)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -4 "j-2") (("1" (ASSERT) (("1" (INST -4 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (TYPEPRED "op") (("1" (INST? -4) (("1" (REPLACES -4) (("1" (REPLACES -7) (("1" (ASSERT) (("1" (REPLACES -6) (("1" (INST? -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (TYPEPRED "op") (("1" (INST -2 "car_ol(pds1)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "op") (("1" (INST -2 "car_ol(pds2)`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|me_ordered_1| FORMULA-DECL NIL |affine| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|me_ordered_2| FORMULA-DECL NIL |affine| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|me_ordered_3| FORMULA-DECL NIL |affine| NIL) (|me_ordered_4| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|next_idx_const_ac| 0 (|next_idx_const_ac-1| |nil| 3628945177 ("" (GRIND) NIL NIL) ((|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|const_ac| CONST-DECL "AffineCombination" |affine| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|next_idx| CONST-DECL "nat" |affine| NIL)) SHOSTAK)) (|var_ac_TCC1| 0 (|var_ac_TCC1-2| "" 3789916367 ("" (TCC) NIL NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|var_ac| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.n, number_fields./(((number_fields.-)(ub(affine.Xi), lb(affine.Xi))), 2)), list_adt[[nat, nzBaseType]].car(ol)))}")) (|var_ac_TCC1-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|var_ac| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.n, number_fields./(((number_fields.-)(ub(affine.Xi), lb(affine.Xi))), 2)), list_adt[[nat, nzBaseType]].car(ol)))}"))) (|eval_var_ac| 0 (|eval_var_ac-1| |nil| 3628888567 ("" (SKEEP) (("" (EXPAND "eval_ac_noise") (("" (USE "eval_pd_noise_rec_pds_def") (("" (EXPAND "null_ol?") (("" (REPLACES -1) (("" (EXPAND "var_ac") (("" (ASSERT) (("" (LIFT-IF 1) (("" (LIFT-IF 1) (("" (LIFT-IF 1) (("" (ASSERT) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_pd_i_TCC1| 0 (|eval_pd_i_TCC1-2| "" 3789916368 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|eval_pd_i| TERMINATION "affine.eval_pd_i(affine.t)" "NIL")) (|eval_pd_i_TCC1-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|eval_pd_i| TERMINATION "affine.eval_pd_i(affine.t)" "NIL"))) (|eval_pd_i_TCC2| 0 (|eval_pd_i_TCC2-1| |nil| 3635263855 ("" (SKEEP*) (("" (TYPEPRED "v(t)") (("" (CASE "Proper?(Mult([|h`2|], [|-1, 1|]))") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|mXm| CONST-DECL "Interval" |interval| |interval_arith|) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|nXm| CONST-DECL "Interval" |interval| |interval_arith|) (|Neg| CONST-DECL "Interval" |interval| |interval_arith|) (|pXm| CONST-DECL "Interval" |interval| |interval_arith|) (|Le| CONST-DECL "bool" |interval| |interval_arith|) (|Ge| CONST-DECL "bool" |interval| |interval_arith|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Mult| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|eval_pd_i| SUBTYPE "interval.Add(interval.Mult([|affine.h`2|], [|-1, 1|]), affine.eval_pd_i(affine.t))" "ProperInterval"))) (|ebi_var_ac| 0 (|ebi_var_ac-2| "" 3789916370 ("" (SKEEP) (("" (EXPAND "var_ac") (("" (EXPAND "eval_by_intervals") (("" (ASSERT) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (FLATTEN) (("1" (EXPAND "eval_pd_i") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_i") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "Mult") (("1" (EXPAND "Ge") (("1" (ASSERT) (("1" (EXPAND "Le") (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) (("1" (APPLY-EXTENSIONALITY) NIL NIL) ("2" (TYPEPRED "pXi") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_i") (("2" (EXPAND "null_ol?") (("2" (EXPAND "Add") (("2" (ASSERT) (("2" (HIDE -1) (("2" (EXPAND "[||]") (("2" (EXPAND "empty_ErrorTerms") (("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|Proper_Add| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|Mult| CONST-DECL "Interval" |interval| |interval_arith|) (|lb_r2i| FORMULA-DECL NIL |interval| |interval_arith|) (|ub_r2i| FORMULA-DECL NIL |interval| |interval_arith|) (|lb_interval| FORMULA-DECL NIL |interval| |interval_arith|) (|ub_interval| FORMULA-DECL NIL |interval| |interval_arith|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Neg| CONST-DECL "Interval" |interval| |interval_arith|) (|pXm| CONST-DECL "Interval" |interval| |interval_arith|) (|nXm| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|r2i_Nneg| APPLICATION-JUDGEMENT "(NonNeg?)" |interval| |interval_arith|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Le| CONST-DECL "bool" |interval| |interval_arith|) (|Ge| CONST-DECL "bool" |interval| |interval_arith|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|eval_pd_i| DEF-DECL "ProperInterval" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL)) SHOSTAK) (|ebi_var_ac-1| |nil| 3629202517 ("" (SKEEP) (("" (EXPAND "var_ac") (("" (EXPAND "eval_by_intervals") (("" (ASSERT) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (FLATTEN) (("1" (EXPAND "eval_pd_i") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_i") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "Mult") (("1" (EXPAND "Ge") (("1" (ASSERT) (("1" (EXPAND "Le") (("1" (ASSERT) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) (("1" (APPLY-EXTENSIONALITY) NIL NIL) ("2" (TYPEPRED "pXi") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_i") (("2" (EXPAND "null_ol?") (("2" (EXPAND "Add") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (HIDE -1) (("2" (EXPAND "[||]") (("2" (EXPAND "empty_ErrorTerms") (("2" (APPLY-EXTENSIONALITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|idxs_ac_var_ac| 0 (|idxs_ac_var_ac-1| |nil| 3628514454 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|member| DEF-DECL "bool" |list_props| NIL)) SHOSTAK)) (|updated_noise_on_varac1| 0 (|updated_noise_on_varac1-1| |nil| 3628516132 ("" (SKEEP) (("" (USE "eval_upd_no_idxs_ac") (("" (ASSERT) (("" (USE "idxs_ac_var_ac") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|eval_upd_no_idxs_ac| FORMULA-DECL NIL |affine| NIL) (|idxs_ac_var_ac| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|updated_noise_on_varac2_TCC1| 0 (|updated_noise_on_varac2_TCC1-1| |nil| 3628272610 ("" (SUBTYPE-TCC) NIL NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL)) NIL (|updated_noise_on_varac2| SUBTYPE "affine.empty_noise" "{N | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), reals.<(affine.n, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1))}"))) (|updated_noise_on_varac2| 0 (|updated_noise_on_varac2-1| |nil| 3629202385 ("" (SKEEP) (("" (USE "eval_var_ac") (("" (REPLACES -1) (("" (USE "eval_var_ac") (("" (REPLACES -1) (("" (ASSERT) (("" (USE "gnbi_upd") (("" (REPLACES -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|eval_var_ac| FORMULA-DECL NIL |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|gnbi_upd| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|updated_noise_range_on_v1| 0 (|updated_noise_range_on_v1-1| |nil| 3630759314 ("" (SKEEP :BUT "n") (("" (INDUCT "n") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "upd_noise_range") (("1" (USE "updated_noise_on_varac1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "upd_noise_range" 1) (("2" (USE "updated_noise_on_varac1") (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|upd_noise_range| DEF-DECL "Noise" |affine| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|updated_noise_on_varac1| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|updated_noise_range_on_v2_TCC1| 0 (|updated_noise_range_on_v2_TCC1-1| |nil| 3630427738 ("" (SUBTYPE-TCC) NIL NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL)) NIL (|updated_noise_range_on_v2| SUBTYPE "affine.empty_noise" "{N | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), reals.<(affine.i, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1))}"))) (|updated_noise_range_on_v2| 0 (|updated_noise_range_on_v2-1| |nil| 3630760717 ("" (SKEEP :BUT "n") (("" (INDUCT "n") (("1" (FLATTEN) (("1" (EXPAND "upd_noise_range" 1) (("1" (CASE "i=start") (("1" (REPLACES -1 :DIR RL) (("1" (USE "updated_noise_on_varac2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "upd_noise_range" 1) (("2" (CASE "i = start + j + 1") (("1" (REPLACES -1 :DIR RL) (("1" (USE "updated_noise_on_varac2") (("1" (REPLACES -1) (("1" (REVEAL -3) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (REPLACES -1 :DIR RL) (("2" (USE "updated_noise_on_varac1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND_OL) NIL NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|upd_noise_range| DEF-DECL "Noise" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|i| SKOLEM-CONST-DECL "nat" |affine| NIL) (|start| SKOLEM-CONST-DECL "nat" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|updated_noise_on_varac2| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|updated_noise_on_varac1| FORMULA-DECL NIL |affine| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|containment_var| 0 (|containment_var-2| "" 3789916377 ("" (SKEEP) (("" (EXPAND "var_ac") (("" (EXPAND "eval_ac_noise") (("" (USE "ac_proj_cv") (("1" (REPLACES -1) (("1" (USE "ac_proj_pd") (("1" (REPLACES -1) (("1" (CASE "(ub(Xi) - lb(Xi)) / 2 /= 0") (("1" (ASSERT) (("1" (INST 1 "(x-((lb(Xi) + ub(Xi)) / 2))/((ub(Xi) - lb(Xi)) / 2)") (("1" (GRIND) (("1" (NAME-REPLACE "nor1" "(lb(Xi) + ub(Xi)) / 2") (("1" (NAME-REPLACE "nor2" "(ub(Xi) - lb(Xi)) / 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "abs((x - ((lb(Xi) + ub(Xi)) / 2)) / ((ub(Xi) - lb(Xi)) / 2)) <= 1") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (CASE "abs((x - ((lb(Xi) + ub(Xi)) / 2)) / ((ub(Xi) - lb(Xi)) / 2)) = abs((x - ((lb(Xi) + ub(Xi)) / 2))) / abs(((ub(Xi) - lb(Xi)) / 2))") (("1" (REPLACES -1) (("1" (LEMMA "both_sides_times_pos_neg_le1") (("1" (INST -1 "abs(((ub(Xi) - lb(Xi)) / 2))" "abs((x - ((lb(Xi) + ub(Xi)) / 2))) / abs(((ub(Xi) - lb(Xi)) / 2))" "1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (USE "div_cancel2") (("1" (REPLACES -1) (("1" (USE "identity_mult") (("1" (REPLACES -1) (("1" (CASE "((ub(Xi) - lb(Xi)) / 2) = ((ub(Xi) + ub(Xi) - lb(Xi) - ub(Xi)) / 2)") (("1" (REPLACES -1) (("1" (CASE "((ub(Xi) + ub(Xi) - lb(Xi) - ub(Xi)) / 2) = ub(Xi) - ((lb(Xi) + ub(Xi)) / 2)") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "abs_div") NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|n| SKOLEM-CONST-DECL "nat" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Xi| SKOLEM-CONST-DECL "Interval" |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|x| SKOLEM-CONST-DECL "BaseType" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|add_N| CONST-DECL "Noise" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|abs_div| FORMULA-DECL NIL |real_props| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|identity_mult| FORMULA-DECL NIL |number_fields| NIL) (|div_cancel2| FORMULA-DECL NIL |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|both_sides_times_pos_neg_le1| FORMULA-DECL NIL |extra_real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL)) SHOSTAK) (|containment_var-1| |nil| 3622370597 ("" (SKEEP) (("" (EXPAND "var_ac") (("" (EXPAND "eval_ac_noise") (("" (USE "ac_proj_cv") (("1" (REPLACES -1) (("1" (USE "ac_proj_pd") (("1" (REPLACES -1) (("1" (CASE "(ub(Xi) - lb(Xi)) / 2 /= 0") (("1" (ASSERT) (("1" (INST 1 "(x-((lb(Xi) + ub(Xi)) / 2))/((ub(Xi) - lb(Xi)) / 2)") (("1" (GRIND) (("1" (NAME-REPLACE "nor1" "(lb(Xi) + ub(Xi)) / 2") (("1" (NAME-REPLACE "nor2" "(ub(Xi) - lb(Xi)) / 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "abs((x - ((lb(Xi) + ub(Xi)) / 2)) / ((ub(Xi) - lb(Xi)) / 2)) <= 1") (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (CASE "abs((x - ((lb(Xi) + ub(Xi)) / 2)) / ((ub(Xi) - lb(Xi)) / 2)) = abs((x - ((lb(Xi) + ub(Xi)) / 2))) / abs(((ub(Xi) - lb(Xi)) / 2))") (("1" (REPLACES -1) (("1" (LEMMA "both_sides_times_pos_neg_le1") (("1" (INST -1 "abs(((ub(Xi) - lb(Xi)) / 2))" "abs((x - ((lb(Xi) + ub(Xi)) / 2))) / abs(((ub(Xi) - lb(Xi)) / 2))" "1") (("1" (ASSERT) (("1" (HIDE 2) (("1" (USE "div_cancel2") (("1" (REPLACES -1) (("1" (USE "identity_mult") (("1" (REPLACES -1) (("1" (CASE "((ub(Xi) - lb(Xi)) / 2) = ((ub(Xi) + ub(Xi) - lb(Xi) - ub(Xi)) / 2)") (("1" (REPLACES -1) (("1" (CASE "((ub(Xi) + ub(Xi) - lb(Xi) - ub(Xi)) / 2) = ub(Xi) - ((lb(Xi) + ub(Xi)) / 2)") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (USE "abs_div") NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|containment_var_single_interval| 0 (|containment_var_single_interval-1| |nil| 3629201620 ("" (GRIND) NIL NIL) ((|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|containment_var_simple| 0 (|containment_var_simple-1| |nil| 3630083755 ("" (SKEEP) (("" (EXPAND "containment") (("" (USE "containment_var") (("" (ASSERT) (("" (SKEEP) (("" (INST? 1 :WHERE -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|containment| CONST-DECL "bool" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|containment_var| FORMULA-DECL NIL |affine| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL)) SHOSTAK)) (|containment_cnt| 0 (|containment_cnt-1| |nil| 3621854167 ("" (GRIND) (("" (EXPAND "eval_pd_noise") (("" (GRIND) NIL NIL)) NIL)) NIL) ((|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|const_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL)) SHOSTAK)) (|containment_pd_interval| 0 (|containment_pd_interval-1| |nil| 3621856388 ("" (SKOLEM 1 ("N" "_")) (("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND "eval_pd_i") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (USE "eval_pd_noise_rec_pds_def" ("pds" "cons_ol(x,ol)")) (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "eval_pd_i" 2) (("2" (EXPAND "null_ol?") (("2" (LEMMA "Add_inclusion") (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (INST -1 "Mult([|x`2|], [|-1, 1|])" "eval_pd_i(ol)" "get_noise_by_idx(x`1, N) * x`2" "eval_pd_noise(ol, N)") (("2" (ASSERT) (("2" (HIDE 3) (("2" (USE "Mult_inclusion" ("X" "[|x`2|]" "Y" "[|-1, 1|]" "y" "get_noise_by_idx(x`1, N)" "x" "x`2")) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x::[nat,nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|##| CONST-DECL "bool" |interval| |interval_arith|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|eval_pd_i| DEF-DECL "ProperInterval" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|r2i_Nneg| APPLICATION-JUDGEMENT "(NonNeg?)" |interval| |interval_arith|) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Add_inclusion| FORMULA-DECL NIL |interval| |interval_arith|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Mult_inclusion| FORMULA-DECL NIL |interval| |interval_arith|) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Mult| CONST-DECL "Interval" |interval| |interval_arith|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|Ge| CONST-DECL "bool" |interval| |interval_arith|) (|Le| CONST-DECL "bool" |interval| |interval_arith|) (|pXm| CONST-DECL "Interval" |interval| |interval_arith|) (|Neg| CONST-DECL "Interval" |interval| |interval_arith|) (|nXm| CONST-DECL "Interval" |interval| |interval_arith|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|mXm| CONST-DECL "Interval" |interval| |interval_arith|) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|containment_interval| 0 (|containment_interval-1| |nil| 3621855220 ("" (SKEEP) (("" (EXPAND "containment") (("" (SKEEP) (("" (EXPAND "eval_by_intervals") (("" (EXPAND "eval_ac_noise") (("" (USE "Add_inclusion") (("" (ASSERT) (("" (HIDE 2) (("" (PROP) (("1" (USE "r2i_inclusion") NIL NIL) ("2" (HIDE -1) (("2" (USE "containment_pd_interval") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|containment| CONST-DECL "bool" |affine| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|eval_pd_i| DEF-DECL "ProperInterval" |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|Add_inclusion| FORMULA-DECL NIL |interval| |interval_arith|) (|containment_pd_interval| FORMULA-DECL NIL |affine| NIL) (|r2i_inclusion| FORMULA-DECL NIL |interval| |interval_arith|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Proper_Add| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|r2i_Proper| APPLICATION-JUDGEMENT "ProperInterval" |interval| |interval_arith|) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|ean_in_ebi| 0 (|ean_in_ebi-1| |nil| 3638118476 ("" (SKEEP) (("" (USE "containment_interval") (("" (ASSERT) (("" (EXPAND "containment") (("" (INST 1 "N") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|containment_interval| FORMULA-DECL NIL |affine| NIL) (|containment| CONST-DECL "bool" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|epn_app| 0 (|epn_app-1| |nil| 3622393060 ("" (SKOLEM 1 ("N" "pds1_" "pds2_")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "add_pd_pd") (("" (EXPAND "map_error" 1) (("" (CASE "null_ol?(pds1)") (("1" (ASSERT) (("1" (CASE "null_ol?(pds2)") (("1" (ASSERT) (("1" (HIDE -3) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME "opadd" "restrict[[numfield, numfield],
                                      [BaseType, BaseType],
                                      numfield]
                                     (+)") (("2" (REPLACES -1) (("2" (CASE "opadd(0, car_ol(pds2)`2)=car_ol(pds2)`2") (("1" (REPLACES -1) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, car_ol(pds2)`2), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N)=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (HIDE -2) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "null_ol" "cdr_ol(pds2)" "opadd") (("1" (EXPAND "null_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, car_ol(pds2)`2),
                            map_error(pds1, cdr_ol(pds2), opadd))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "me_ordered_1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (ASSERT) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "null_ol?(pds2)") (("1" (ASSERT) (("1" (NAME "opadd" "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (+)") (("1" (REPLACES -1) (("1" (CASE "opadd(car_ol(pds1)`2, 0)=car_ol(pds1)`2") (("1" (REPLACES -1) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N)=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "pds2=null") (("1" (REPLACES -1) (("1" (HIDE -2) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "null_ol" "opadd") (("1" (EXPAND "null_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2),
                                        map_error(cdr_ol(pds1), pds2, opadd))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "pds2=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "me_ordered_1b") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "null_ol") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (NAME "opadd" "restrict[[numfield, numfield],
                                      [BaseType, BaseType],
                                      numfield]
                                     (+)") (("2" (REPLACES -1) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST-CP -1 "N" "pds2") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "opadd") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1,
                             opadd(car_ol(pds1)`2, car_ol(pds2)`2)),
                            empty_ErrorTerms)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "cdr_ol(pds2)" "opadd") (("1" (SPLIT -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST-CP -1 "N" "pds2") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (CASE "eval_pd_noise(cdr(pds1), N) + eval_pd_noise(cdr(pds2), N) = 0") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACES -2) (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1,
                             opadd(car_ol(pds1)`2, car_ol(pds2)`2)),
                            map_error(cdr_ol(pds1), cdr_ol(pds2), opadd))") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -2) (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "pds2" "opadd") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, opadd(car_ol(pds1)`2, 0)),
                                          empty_ErrorTerms)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "eval_pd_noise(cdr_ol(pds1), N) + eval_pd_noise(pds2, N)=0") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, opadd(car_ol(pds1)`2, 0)),
                            map_error(cdr_ol(pds1), pds2, opadd))") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opadd(0, car_ol(pds2)`2)), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "pds1" "cdr_ol(pds2)" "opadd") (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opadd") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opadd(0, car_ol(pds2)`2)),
                            map_error(pds1, cdr_ol(pds2), opadd))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "opadd") (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opadd") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|opadd| SKOLEM-CONST-DECL "[[BaseType, BaseType] -> numfield]" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pds2| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|pds1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|me_ordered_2| FORMULA-DECL NIL |affine| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|me_ordered_3| FORMULA-DECL NIL |affine| NIL) (|me_ordered_4| FORMULA-DECL NIL |affine| NIL) (|me_ordered_1b| FORMULA-DECL NIL |affine| NIL) (|opadd| SKOLEM-CONST-DECL "[[BaseType, BaseType] -> numfield]" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|me_ordered_1| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|opadd| SKOLEM-CONST-DECL "[[BaseType, BaseType] -> numfield]" |affine| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|epn_me_null_1| FORMULA-DECL NIL |affine| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|add_pd_pd| CONST-DECL "ErrorTerms" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|containment_add| 0 (|containment_add-1| |nil| 3622374465 ("" (SKEEP) (("" (EXPAND "add_ac_ac") (("" (EXPAND "eval_ac_noise" 1) (("" (ASSERT) (("" (EXPAND "eval_ac_noise") (("" (REPLACES -1 :DIR RL) (("" (REPLACES -1 :DIR RL) (("" (ASSERT) (("" (USE "epn_app") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|add_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|epn_app| FORMULA-DECL NIL |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|next_idx_add_ac_ac| 0 (|next_idx_add_ac_ac-2| "" 3883677618 ("" (DEFTACTIC APPLYIH (LEN NUM IHFNUM LFNUM THFNUM NNFNUM) (SPREAD (INST IHFNUM LEN) ((THEN (ASSERT) (EXPAND "last_idx" IHFNUM 1) (INST? IHFNUM :WHERE THFNUM) (EXPAND "length" LFNUM NUM) (ASSERT) (EXPAND "last_idx" THFNUM NUM) (EXPAND "last_ol" THFNUM NUM) (EXPAND "last_idx" IHFNUM NUM) (HIDE-ALL-BUT (LIST IHFNUM THFNUM NNFNUM)) (LIFT-IF 1) (LIFT-IF -1) (GRIND)) (LET ((NLFNUM (+ LFNUM 1)) (NNNFNUM (IF (LISTP NNFNUM) (MAPCAR (LAMBDA (N) (+ N 1)) NNFUM) (+ NNFNUM 1)))) (THEN (HIDE-ALL-BUT (LIST 1 NNNFNUM NLFNUM)) (GRIND)))))) (("" (SKEEP) (("" (EXPAND "add_ac_ac") (("" (ASSERT) (("" (EXPAND "next_idx") (("" (NAME-REPLACE "pds1_" "pd(Xa1)") (("" (NAME-REPLACE "pds2_" "pd(Xa2)") (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "add_pd_pd") (("" (EXPAND "map_error" 1) (("" (EXPAND_OL) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (EXPAND_OL) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 2)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds2") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 2 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 2 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 3)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds1") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 1 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 1 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (2 3)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),
                          
                              (+)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,
                          
                              (+)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (EXPAND "last_idx" 1 (2 1)) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (4 5)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("2" (NAME-REPLACE "A" "last_ol(map_error(null, cdr(pds2),

                                                  (+)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 1) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("1" (NAME-REPLACE "A" "last_ol(map_error(cdr(pds1), null,

                                                  (+)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "lengths" -3) (("2" (LABEL "ind-hyp" -2) (("2" (LABEL "thesis" 2) (("2" (LABEL "not null" (5 6)) (("2" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),

                                                  (+)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,

                                                  (+)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol") (("1" (EXPAND "last_idx" 1) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (INST? -3 :WHERE 1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
       last_ol(map_error(cdr(pds1), pds2,(+)))`1") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 2) (("1" (EXPAND "length" -3 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
                           last_ol(map_error(cdr(pds1), pds2,(+)))`1") (("1" (HIDE-ALL-BUT (-1 -3 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                           last_idx(map_error(pds1, cdr(pds2),(+)))") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1) (("1" (EXPAND "cons_ol") (("1" (ASSERT) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (USE "olidx_car_last[nzBaseType]" ("ol" "pds2")) (("1" (HIDE-ALL-BUT (-1 1 5 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                           last_ol(map_error(pds1, cdr(pds2),(+)))`1") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND "length" -2 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                           last_idx(map_error(pds1, cdr(pds2),(+)))") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|next_idx_add_ac_ac-1| |nil| 3628957217 ("" (DEFTACTIC APPLYIH (LEN NUM IHFNUM LFNUM THFNUM NNFNUM) (SPREAD (INST IHFNUM LEN) ((THEN (ASSERT) (EXPAND "last_idx" IHFNUM 1) (INST? IHFNUM :WHERE THFNUM) (EXPAND "length" LFNUM NUM) (ASSERT) (EXPAND "last_idx" THFNUM NUM) (EXPAND "last_ol" THFNUM NUM) (EXPAND "last_idx" IHFNUM NUM) (HIDE-ALL-BUT (LIST IHFNUM THFNUM NNFNUM)) (LIFT-IF 1) (LIFT-IF -1) (GRIND)) (LET ((NLFNUM (+ LFNUM 1)) (NNNFNUM (IF (LISTP NNFNUM) (MAPCAR (LAMBDA (N) (+ N 1)) NNFUM) (+ NNFNUM 1)))) (THEN (HIDE-ALL-BUT (LIST 1 NNNFNUM NLFNUM)) (GRIND)))))) (("" (SKEEP) (("" (EXPAND "add_ac_ac") (("" (ASSERT) (("" (EXPAND "next_idx") (("" (NAME-REPLACE "pds1_" "pd(Xa1)") (("" (NAME-REPLACE "pds2_" "pd(Xa2)") (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "add_pd_pd") (("" (EXPAND "map_error" 1) (("" (EXPAND_OL) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (EXPAND_OL) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 2)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds2") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 2 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 2 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 3)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds1") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 1 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 1 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (2 3)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT THESIS) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (THESIS IND-HYP)) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),
                          
                              (+)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF THESIS) (("1" (SPLIT THESIS) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (THESIS IND-HYP)) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,
                          
                              (+)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (EXPAND "last_idx" 1 (2 1)) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (4 5)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT THESIS) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (THESIS IND-HYP)) (("2" (NAME-REPLACE "A" "last_ol(map_error(null, cdr(pds2),

                                                  (+)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 1) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF THESIS) (("1" (SPLIT THESIS) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (THESIS IND-HYP)) (("1" (NAME-REPLACE "A" "last_ol(map_error(cdr(pds1), null,

                                                  (+)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "lengths" -3) (("2" (LABEL "ind-hyp" -2) (("2" (LABEL "thesis" 2) (("2" (LABEL "not null" (5 6)) (("2" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT THESIS) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (THESIS IND-HYP)) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),

                                                  (+)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF THESIS) (("1" (SPLIT THESIS) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (THESIS IND-HYP)) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,

                                                  (+)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol") (("1" (EXPAND "last_idx" 1) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (INST? -3 :WHERE 1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
       last_ol(map_error(cdr(pds1), pds2,(+)))`1") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 2) (("1" (EXPAND "length" -3 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
                           last_ol(map_error(cdr(pds1), pds2,(+)))`1") (("1" (HIDE-ALL-BUT (-1 -3 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                           last_idx(map_error(pds1, cdr(pds2),(+)))") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1) (("1" (EXPAND "cons_ol") (("1" (ASSERT) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (USE "olidx_car_last[nzBaseType]" ("ol" "pds2")) (("1" (HIDE-ALL-BUT (-1 1 5 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                           last_ol(map_error(pds1, cdr(pds2),(+)))`1") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND "length" -2 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                           last_idx(map_error(pds1, cdr(pds2),(+)))") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}" |real_defs| NIL) (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}" |real_defs| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|restrict| CONST-DECL "R" |restrict| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|add_pd_pd| CONST-DECL "ErrorTerms" |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|add_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|idxs_ac_add_ac_ac| 0 (|idxs_ac_add_ac_ac-1| |nil| 3628936675 ("" (SKEEP) (("" (EXPAND "add_ac_ac") (("" (EXPAND "idxs_ac") (("" (ASSERT) (("" (GENERALIZE "pd(Xa1)" "pds1") (("" (GENERALIZE "pd(Xa2)" "pds2") (("" (SKOLEM 1 ("pds2_" "pds1_")) (("" (NAME "L" "length(pds1_) + length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "add_pd_pd") (("" (EXPAND "map_error" -3) (("" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("" (LIFT-IF -3) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET" -1) (("2" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -2) (("1" (EXPAND "length" -5 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 3 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 3 5)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 4 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (EXPAND "idxs_pd" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") NIL NIL) ("2" (FLATTEN) (("2" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("2" (EXPAND "member" -1) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 5 -4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 5 -3)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -4 "j-2") (("1" (ASSERT) (("1" (INST? -4 :WHERE -2) (("1" (EXPAND "length" -5) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "member" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "idxs_pd" -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (INST -4 "j-2") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -2) (("1" (EXPAND "length" -5 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND* "null_ol?" "cons_ol" "car_ol" "cdr_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -2) (("1" (EXPAND "length" -4 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (LIFT-IF -2) (("1" (EXPAND* "null_ol?" "cons_ol" "car_ol" "cdr_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 5 8)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE -1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 6 9)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|add_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|add_pd_pd| CONST-DECL "ErrorTerms" |affine| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL)) NIL)) (|epn_spp| 0 (|epn_spp-2| "" 3789916410 ("" (SKOLEM 1 ("N" "pds1_" "pds2_")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sub_pd_pd") (("" (EXPAND "map_error" 1) (("" (CASE "null_ol?(pds1)") (("1" (ASSERT) (("1" (CASE "null_ol?(pds2)") (("1" (ASSERT) (("1" (HIDE -3) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME "opsub" "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (-)") (("2" (REPLACES -1) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N)=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (HIDE -2) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "null_ol" "cdr_ol(pds2)" "opsub") (("1" (EXPAND "null_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)),
                                        map_error(pds1, cdr_ol(pds2), opsub))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "me_ordered_1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "null_ol?(pds2)") (("1" (ASSERT) (("1" (NAME "opsub" "restrict[[numfield, numfield],
                                                            [BaseType, BaseType],
                                                            numfield]
                                                           (-)") (("1" (REPLACES -1) (("1" (CASE "opsub(car_ol(pds1)`2, 0)=car_ol(pds1)`2") (("1" (REPLACES -1) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N)=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "pds2=null") (("1" (REPLACES -1) (("1" (HIDE -2) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "null_ol" "opsub") (("1" (EXPAND "null_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2),
                                                    map_error(cdr_ol(pds1), pds2, opsub))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "pds2=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "me_ordered_1b") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "null_ol") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (NAME "opsub" "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (-)") (("2" (REPLACES -1) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST-CP -1 "N" "pds2") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "opsub") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1,
                                         opsub(car_ol(pds1)`2, car_ol(pds2)`2)),
                                        empty_ErrorTerms)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "cdr_ol(pds2)" "opsub") (("1" (SPLIT -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST-CP -1 "N" "pds2") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (CASE "eval_pd_noise(cdr(pds1), N) - eval_pd_noise(cdr(pds2), N) = 0") (("1" (CASE "eval_pd_noise(cdr(pds1), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        - eval_pd_noise(cdr(pds2), N)
        - get_noise_by_idx(car_ol(pds2)`1, N) * car_ol(pds2)`2 = 
eval_pd_noise(cdr(pds1), N) - eval_pd_noise(cdr(pds2), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        
        - get_noise_by_idx(car_ol(pds2)`1, N) * car_ol(pds2)`2") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACES -2) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1,
                                           opsub(car_ol(pds1)`2, car_ol(pds2)`2)),
                                          map_error(cdr_ol(pds1), cdr_ol(pds2), opsub))") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -2) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "pds2" "opsub") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, opsub(car_ol(pds1)`2, 0)),
                                                          empty_ErrorTerms)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "eval_pd_noise(cdr_ol(pds1), N) - eval_pd_noise(pds2, N)=0") (("1" (CASE "eval_pd_noise(cdr_ol(pds1), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        - eval_pd_noise(pds2, N) =

eval_pd_noise(cdr_ol(pds1), N) - eval_pd_noise(pds2, N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, opsub(car_ol(pds1)`2, 0)),
                                            map_error(cdr_ol(pds1), pds2, opsub))") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "pds1" "cdr_ol(pds2)" "opsub") (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)),
                                            map_error(pds1, cdr_ol(pds2), opsub))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "opsub") (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|opsub| SKOLEM-CONST-DECL "[[BaseType, BaseType] -> numfield]" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|pds1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|me_ordered_2| FORMULA-DECL NIL |affine| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|me_ordered_3| FORMULA-DECL NIL |affine| NIL) (|me_ordered_4| FORMULA-DECL NIL |affine| NIL) (|me_ordered_1b| FORMULA-DECL NIL |affine| NIL) (|opsub| SKOLEM-CONST-DECL "[[BaseType, BaseType] -> numfield]" |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|me_ordered_1| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|pds2| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|epn_me_null_1| FORMULA-DECL NIL |affine| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|opsub| SKOLEM-CONST-DECL "[[BaseType, BaseType] -> numfield]" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|sub_pd_pd| CONST-DECL "ErrorTerms" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK) (|epn_spp-1| |nil| 3622483873 ("" (SKOLEM 1 ("N" "pds1_" "pds2_")) (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sub_pd_pd") (("" (EXPAND "map_error" 1) (("" (CASE "null_ol?(pds1)") (("1" (ASSERT) (("1" (CASE "null_ol?(pds2)") (("1" (ASSERT) (("1" (HIDE -3) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (NAME "opsub" "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (-)") (("2" (REPLACES -1) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N)=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (HIDE -2) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "null_ol" "cdr_ol(pds2)" "opsub") (("1" (EXPAND "null_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)),
                                        map_error(pds1, cdr_ol(pds2), opsub))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "pds1=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "me_ordered_1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "null_ol?(pds2)") (("1" (ASSERT) (("1" (NAME "opsub" "restrict[[numfield, numfield],
                                                            [BaseType, BaseType],
                                                            numfield]
                                                           (-)") (("1" (REPLACES -1) (("1" (CASE "opsub(car_ol(pds1)`2, 0)=car_ol(pds1)`2") (("1" (REPLACES -1) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N)=0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "pds2=null") (("1" (REPLACES -1) (("1" (HIDE -2) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "null_ol" "opsub") (("1" (EXPAND "null_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, car_ol(pds1)`2),
                                                    map_error(cdr_ol(pds1), pds2, opsub))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "pds2=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (USE "me_ordered_1b") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "null_ol") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (NAME "opsub" "restrict[[numfield, numfield],
                                                 [BaseType, BaseType],
                                                 numfield]
                                                (-)") (("2" (REPLACES -1) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST-CP -1 "N" "pds2") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "opsub") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1,
                                         opsub(car_ol(pds1)`2, car_ol(pds2)`2)),
                                        empty_ErrorTerms)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "cdr_ol(pds2)" "opsub") (("1" (SPLIT -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST-CP -1 "N" "pds2") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (CASE "eval_pd_noise(cdr(pds1), N) - eval_pd_noise(cdr(pds2), N) = 0") (("1" (CASE "eval_pd_noise(cdr(pds1), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        - eval_pd_noise(cdr(pds2), N)
        - get_noise_by_idx(car_ol(pds2)`1, N) * car_ol(pds2)`2 = 
eval_pd_noise(cdr(pds1), N) - eval_pd_noise(cdr(pds2), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        
        - get_noise_by_idx(car_ol(pds2)`1, N) * car_ol(pds2)`2") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (REPLACES -2) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1,
                                           opsub(car_ol(pds1)`2, car_ol(pds2)`2)),
                                          map_error(cdr_ol(pds1), cdr_ol(pds2), opsub))") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -2) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_2") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "cdr_ol(pds1)" "pds2" "opsub") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, opsub(car_ol(pds1)`2, 0)),
                                                          empty_ErrorTerms)") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "eval_pd_noise(cdr_ol(pds1), N) - eval_pd_noise(pds2, N)=0") (("1" (CASE "eval_pd_noise(cdr_ol(pds1), N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2
        - eval_pd_noise(pds2, N) =

eval_pd_noise(cdr_ol(pds1), N) - eval_pd_noise(pds2, N) +
        get_noise_by_idx(car_ol(pds1)`1, N) * car_ol(pds1)`2") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds1)`1, opsub(car_ol(pds1)`2, 0)),
                                            map_error(cdr_ol(pds1), pds2, opsub))") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -3) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds1") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1) (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)), empty_ErrorTerms)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "eval_pd_noise(empty_ErrorTerms, N) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (LEMMA "epn_me_null_1") (("1" (INST -1 "N" "pds1" "cdr_ol(pds2)" "opsub") (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "opsub") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car_ol(pds2)`1, opsub(0, car_ol(pds2)`2)),
                                            map_error(pds1, cdr_ol(pds2), opsub))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (REPLACES -1) (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "pds2") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -2) (("1" (ASSERT) (("1" (EXPAND "opsub") (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "opsub") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "me_ordered_4") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|containment_sub| 0 (|containment_sub-1| |nil| 3622486764 ("" (SKEEP) (("" (EXPAND "sub_ac_ac") (("" (EXPAND "eval_ac_noise" 1) (("" (ASSERT) (("" (EXPAND "eval_ac_noise") (("" (REPLACES -1 :DIR RL) (("" (REPLACES -1 :DIR RL) (("" (ASSERT) (("" (USE "epn_spp") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sub_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|epn_spp| FORMULA-DECL NIL |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|next_idx_sub_ac_ac| 0 (|next_idx_sub_ac_ac-2| "" 3883678366 ("" (DEFTACTIC APPLYIH (LEN NUM IHFNUM LFNUM THFNUM NNFNUM) (SPREAD (INST IHFNUM LEN) ((THEN (ASSERT) (EXPAND "last_idx" IHFNUM 1) (INST? IHFNUM :WHERE THFNUM) (EXPAND "length" LFNUM NUM) (ASSERT) (EXPAND "last_idx" THFNUM NUM) (EXPAND "last_ol" THFNUM NUM) (EXPAND "last_idx" IHFNUM NUM) (HIDE-ALL-BUT (LIST IHFNUM THFNUM NNFNUM)) (LIFT-IF 1) (LIFT-IF -1) (GRIND)) (LET ((NLFNUM (+ LFNUM 1)) (NNNFNUM (IF (LISTP NNFNUM) (MAPCAR (LAMBDA (N) (+ N 1)) NNFUM) (+ NNFNUM 1)))) (THEN (HIDE-ALL-BUT (LIST 1 NNNFNUM NLFNUM)) (GRIND)))))) (("" (SKEEP) (("" (EXPAND "sub_ac_ac") (("" (ASSERT) (("" (EXPAND "next_idx") (("" (NAME-REPLACE "pds1_" "pd(Xa1)") (("" (NAME-REPLACE "pds2_" "pd(Xa2)") (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sub_pd_pd") (("" (EXPAND "map_error" 1) (("" (EXPAND_OL) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (EXPAND_OL) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 2)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds2") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 2 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 2 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 3)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds1") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 1 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 1 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (2 3)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),

                                                  (-)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,

                                                  (-)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (EXPAND "last_idx" 1 (2 1)) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (4 5)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("2" (NAME-REPLACE "A" "last_ol(map_error(null, cdr(pds2),
                                                                          (-)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 1) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("1" (NAME-REPLACE "A" "last_ol(map_error(cdr(pds1), null,
                                                                          (-)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "lengths" -3) (("2" (LABEL "ind-hyp" -2) (("2" (LABEL "thesis" 2) (("2" (LABEL "not null" (5 6)) (("2" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),
                                                                          (-)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT "thesis") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT ("thesis" "ind-hyp")) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,
                                                                          (-)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol") (("1" (EXPAND "last_idx" 1) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (INST? -3 :WHERE 1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
                           last_ol(map_error(cdr(pds1), pds2,(-)))`1") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 2) (("1" (EXPAND "length" -3 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
                                               last_ol(map_error(cdr(pds1), pds2,(-)))`1") (("1" (HIDE-ALL-BUT (-1 -3 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                                           last_idx(map_error(pds1, cdr(pds2),(-)))") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1) (("1" (EXPAND "cons_ol") (("1" (ASSERT) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (USE "olidx_car_last[nzBaseType]" ("ol" "pds2")) (("1" (HIDE-ALL-BUT (-1 1 5 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                                               last_ol(map_error(pds1, cdr(pds2),(-)))`1") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND "length" -2 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                                               last_idx(map_error(pds1, cdr(pds2),(-)))") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|next_idx_sub_ac_ac-1| |nil| 3629025578 ("" (DEFTACTIC APPLYIH (LEN NUM IHFNUM LFNUM THFNUM NNFNUM) (SPREAD (INST IHFNUM LEN) ((THEN (ASSERT) (EXPAND "last_idx" IHFNUM 1) (INST? IHFNUM :WHERE THFNUM) (EXPAND "length" LFNUM NUM) (ASSERT) (EXPAND "last_idx" THFNUM NUM) (EXPAND "last_ol" THFNUM NUM) (EXPAND "last_idx" IHFNUM NUM) (HIDE-ALL-BUT (LIST IHFNUM THFNUM NNFNUM)) (LIFT-IF 1) (LIFT-IF -1) (GRIND)) (LET ((NLFNUM (+ LFNUM 1)) (NNNFNUM (IF (LISTP NNFNUM) (MAPCAR (LAMBDA (N) (+ N 1)) NNFUM) (+ NNFNUM 1)))) (THEN (HIDE-ALL-BUT (LIST 1 NNNFNUM NLFNUM)) (GRIND)))))) (("" (SKEEP) (("" (EXPAND "sub_ac_ac") (("" (ASSERT) (("" (EXPAND "next_idx") (("" (NAME-REPLACE "pds1_" "pd(Xa1)") (("" (NAME-REPLACE "pds2_" "pd(Xa2)") (("" (NAME "L" "length(pds1_)+length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sub_pd_pd") (("" (EXPAND "map_error" 1) (("" (EXPAND_OL) (("" (LIFT-IF 1) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (EXPAND_OL) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 2)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds2") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 2 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 2 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 (1 3)) (("1" (ASSERT) (("1" (EXPAND "last_ol") (("1" (HIDE-ALL-BUT (1 3)) (("1" (TYPEPRED "pds1") (("1" (REWRITE "max") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (APPLYIH "j-1" 1 -3 -4 1 4) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (ASSERT) (("2" (APPLYIH "j-1" 1 -2 -3 2 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (2 3)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT THESIS) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (THESIS IND-HYP)) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),

                                                  (-)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF THESIS) (("1" (SPLIT THESIS) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (THESIS IND-HYP)) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,

                                                  (-)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1) (("1" (EXPAND "last_idx" 1 (2 1)) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-1 1 3)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (LABEL "lengths" -4) (("1" (LABEL "ind-hyp" -3) (("1" (LABEL "thesis" 1) (("1" (LABEL "not null" (4 5)) (("1" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT THESIS) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (THESIS IND-HYP)) (("2" (NAME-REPLACE "A" "last_ol(map_error(null, cdr(pds2),
                                                                          (-)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 1) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF THESIS) (("1" (SPLIT THESIS) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (THESIS IND-HYP)) (("1" (NAME-REPLACE "A" "last_ol(map_error(cdr(pds1), null,
                                                                          (-)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 1) (("2" (EXPAND "last_idx" "ind-hyp" 1) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LABEL "lengths" -3) (("2" (LABEL "ind-hyp" -2) (("2" (LABEL "thesis" 2) (("2" (LABEL "not null" (5 6)) (("2" (INST "ind-hyp" "j-2") (("1" (ASSERT) (("1" (INST? "ind-hyp" :WHERE "thesis") (("1" (EXPAND "length" "lengths") (("1" (ASSERT) (("1" (CASE "cdr(pds1)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "cdr(pds2)=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF "thesis") (("1" (SPLIT THESIS) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (THESIS IND-HYP)) (("2" (NAME-REPLACE "A" "last_idx(map_error(null, cdr(pds2),
                                                                          (-)))") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "cdr(pds2)=null") (("1" (EXPAND "last_idx" "thesis" 2) (("1" (REPLACES -1) (("1" (EXPAND "last_idx" "ind-hyp" 2) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF THESIS) (("1" (SPLIT THESIS) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (THESIS IND-HYP)) (("1" (NAME-REPLACE "A" "last_idx(map_error(cdr(pds1), null,
                                                                          (-)))") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" "thesis" 2) (("2" (EXPAND "last_idx" "ind-hyp" 2) (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1)) = last_ol(pds1) ") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2)) = last_ol(pds2) ") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol") (("1" (EXPAND "last_idx" 1) (("1" (ASSERT) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol" 1) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -3 1) (("1" (INST? -3 :WHERE 1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
                           last_ol(map_error(cdr(pds1), pds2,(-)))`1") (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "last_idx" 2 1) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 2) (("1" (EXPAND "length" -3 1) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds1)) <= last_idx(pds1)") (("1" (NAME-REPLACE "A" "1 +
                                               last_ol(map_error(cdr(pds1), pds2,(-)))`1") (("1" (HIDE-ALL-BUT (-1 -3 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds1))") (("1" (NAME-REPLACE "C" "last_idx(pds1)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                                           last_idx(map_error(pds1, cdr(pds2),(-)))") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "last_idx" 1) (("1" (EXPAND "cons_ol") (("1" (ASSERT) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (USE "olidx_car_last[nzBaseType]" ("ol" "pds2")) (("1" (HIDE-ALL-BUT (-1 1 5 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_idx" 1 1) (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (EXPAND "last_idx" -2 1) (("1" (INST? -2 :WHERE 1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                                               last_ol(map_error(pds1, cdr(pds2),(-)))`1") (("1" (HIDE-ALL-BUT (-1 -3 1)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST? -1 :WHERE 2) (("1" (EXPAND "length" -2 2) (("1" (ASSERT) (("1" (CASE "last_idx(cdr(pds2)) <= last_idx(pds2)") (("1" (NAME-REPLACE "A" "1 +
                                               last_idx(map_error(pds1, cdr(pds2),(-)))") (("1" (HIDE-ALL-BUT (-1 -2 2)) (("1" (NAME-REPLACE "B" "last_idx(cdr(pds2))") (("1" (NAME-REPLACE "C" "last_idx(pds2)") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (> CONST-DECL "bool" |reals| NIL) (|posint| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}" |real_defs| NIL) (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}" |real_defs| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|restrict| CONST-DECL "R" |restrict| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|sub_pd_pd| CONST-DECL "ErrorTerms" |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|sub_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|idxs_ac_sub_ac_ac| 0 (|idxs_ac_sub_ac_ac-1| |nil| 3628933543 ("" (SKEEP) (("" (EXPAND "sub_ac_ac") (("" (EXPAND "idxs_ac") (("" (ASSERT) (("" (GENERALIZE "pd(Xa1)" "pds1") (("" (GENERALIZE "pd(Xa2)" "pds2") (("" (SKOLEM 1 ("pds2_" "pds1_")) (("" (NAME "L" "length(pds1_) + length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "sub_pd_pd") (("" (EXPAND "map_error" -3) (("" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("" (LIFT-IF -3) (("" (SPLIT -3) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET" -1) (("2" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -2) (("1" (EXPAND "length" -5 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 3 1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-4 3 5)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 4 6)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (EXPAND "idxs_pd" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") NIL NIL) ("2" (FLATTEN) (("2" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("2" (EXPAND "member" -1) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 5 -4)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (4 5 -3)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -4 "j-2") (("1" (ASSERT) (("1" (INST? -4 :WHERE -2) (("1" (EXPAND "length" -5) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "member" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (EXPAND "idxs_pd" -1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (INST -4 "j-2") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -2) (("1" (EXPAND "length" -5 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND* "null_ol?" "cons_ol" "car_ol" "cdr_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (INST -4 "j-1") (("1" (ASSERT) (("1" (INST? -4 :WHERE -1) (("1" (EXPAND "length" -5 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET" -1) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -2) (("1" (EXPAND "length" -4 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (LIFT-IF -2) (("1" (EXPAND* "null_ol?" "cons_ol" "car_ol" "cdr_ol") (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST? -3 :WHERE -1) (("1" (EXPAND "length" -4 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-3 5 8)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST? -2 :WHERE -1) (("1" (EXPAND "length" -3 2) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (-2 6 9)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sub_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|map_error| DEF-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|sub_pd_pd| CONST-DECL "ErrorTerms" |affine| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL)) SHOSTAK)) (|car_mul_s_ac_TCC1| 0 (|car_mul_s_ac_TCC1-1| |nil| 3630083031 ("" (EXPAND_OL) (("" (GRIND) NIL NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mul_s_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) NIL (|car_mul_s_ac| SUBTYPE "affine.mul_s_pd(affine.x2, affine.pds)" "(list_adt[[nat, nzBaseType]].cons?)"))) (|car_mul_s_ac_TCC2| 0 (|car_mul_s_ac_TCC2-1| |nil| 3630083031 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL)) NIL (|car_mul_s_ac| SUBTYPE "affine.pds" "(list_adt[[nat, nzBaseType]].cons?)"))) (|car_mul_s_ac| 0 (|car_mul_s_ac-1| |nil| 3630083174 ("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND_OL) (("3" (HIDE 2) (("3" (CASE "tpds=null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (SPLIT -1) (("1" (INST? -1 :WHERE 2) (("1" (ASSERT) (("1" (EXPAND "mul_s_pd" 3) (("1" (EXPAND_OL) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF 3) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (TYPEPRED "hpds`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (REPLACES -1) (("2" (EXPAND "ordered_list?") (("2" (FLATTEN) (("2" (EXPAND "lt_idx") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (SPLIT -1) (("1" (EXPAND "ordered_list?" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|mul_s_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)) SHOSTAK)) (|containment_mul_s| 0 (|containment_mul_s-2| "" 3789916431 ("" (SKEEP) (("" (EXPAND "mul_s_ac") (("" (EXPAND "eval_ac_noise") (("" (ASSERT) (("" (GENERALIZE "pd(Xa)" "pds") (("" (GENERALIZE "cv(Xa)" "c") (("" (GENERALIZE "x1" "x1") (("" (GENERALIZE "x2" "x2") (("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "mul_s_pd") (("2" (EXPAND_OL) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (SPLIT -1) (("1" (EXPAND "mul_s_pd" 1) (("1" (EXPAND_OL) (("1" (EXPAND "add_ET") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -5) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (INST -2 "x2!1" "x1!1 - get_noise_by_idx(hpds`1, N) * hpds`2" "c") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "tpds = null") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -5) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE 1) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (REPLACES -4 :DIR RL) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE 1) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x2!1=0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE 1) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -5) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (INST -2 "x2!1" "x1!1 - get_noise_by_idx(hpds`1, N) * hpds`2" "c") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "ordered_list?") (("2" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (CASE "x2!1 = 0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "tpds = null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "car(mul_s_pd(x2!1, tpds))`1 = car(tpds)`1") (("1" (REPLACES -1) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (USE "car_mul_s_ac") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mul_s_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_mul_s_ac| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|x2!1| SKOLEM-CONST-DECL "BaseType" |affine| NIL) (|hpds| SKOLEM-CONST-DECL "[nat, nzBaseType]" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|mul_s_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|containment_mul_s-1| |nil| 3623140076 ("" (SKEEP) (("" (EXPAND "mul_s_ac") (("" (EXPAND "eval_ac_noise") (("" (ASSERT) (("" (GENERALIZE "pd(Xa)" "pds") (("" (GENERALIZE "cv(Xa)" "c") (("" (GENERALIZE "x1" "x1") (("" (GENERALIZE "x2" "x2") (("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "mul_s_pd") (("2" (EXPAND_OL) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (SPLIT -1) (("1" (EXPAND "mul_s_pd" 1) (("1" (EXPAND_OL) (("1" (EXPAND "add_ET") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -5) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (INST -2 "x2!1" "x1!1 - get_noise_by_idx(hpds`1, N) * hpds`2" "c") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "tpds = null") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -5) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE 1) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (REPLACES -4 :DIR RL) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE 1) (("1" (EXPAND_OL) (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "x2!1=0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE 1) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -5) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (INST -2 "x2!1" "x1!1 - get_noise_by_idx(hpds`1, N) * hpds`2" "c") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "ordered_list?") (("2" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (CASE "x2!1 = 0") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "tpds = null") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (CASE "car(mul_s_pd(x2!1, tpds))`1 = car(tpds)`1") (("1" (REPLACES -1) (("1" (EXPAND "lt_idx") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (USE "car_mul_s_ac") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (ASSERT) (("2" (EXPAND "ordered_list?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|containment_add_s| 0 (|containment_add_s-1| |nil| 3623096441 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|add_s_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) SHOSTAK)) (|neg_pd_TCC1| 0 (|neg_pd_TCC1-1| |nil| 3623095639 ("" (SKEEP*) (("" (TYPEPRED "pds") (("" (GRIND) NIL NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|neg_pd| SUBTYPE "affine.pds" "{ol | (booleans.NOT)(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].null_ol?(ol))}"))) (|neg_pd_TCC2| 0 (|neg_pd_TCC2-1| |nil| 3629195921 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) NIL (|neg_pd| SUBTYPE "affine.rpd" "{ol | (booleans.NOT)(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].null_ol?(ol))}"))) (|neg_pd_TCC3| 0 (|neg_pd_TCC3-1| |nil| 3629195921 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|)) NIL (|neg_pd| SUBTYPE "affine.empty_ErrorTerms" "{rpd: affine.ErrorTerms | booleans.AND((booleans.IFF(list_adt[[nat, nzBaseType]].null?(affine.pds), list_adt[[nat, nzBaseType]].null?(rpd))), (booleans.IMPLIES((booleans.NOT)(list_adt[[nat, nzBaseType]].null?(rpd)), ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(affine.pds)`1 = ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(rpd)`1)))}"))) (|neg_pd_TCC4| 0 (|neg_pd_TCC4-1| |nil| 3629195921 ("" (SKEEP* :PREDS? T) (("" (TYPEPRED "v(t)") (("" (ASSERT) (("" (EXPAND "lt_idx") (("" (EXPAND_OL) (("" (REPLACES -6) (("" (REPLACES -2 :DIR RL) (("" (REPLACES -4) (("" (EXPAND "ordered_list?" -3) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|neg_pd| SUBTYPE "affine.neg_pd(affine.t)" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.h`1, (number_fields.-)(affine.h`2)), list_adt[[nat, nzBaseType]].car(ol)))}"))) (|neg_pd_TCC5| 0 (|neg_pd_TCC5-1| |nil| 3629195921 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) NIL (|neg_pd| SUBTYPE "ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cons_ol((affine.h`1, (number_fields.-)(affine.h`2)), affine.neg_pd(affine.t))" "{rpd: affine.ErrorTerms | booleans.AND((booleans.IFF(list_adt[[nat, nzBaseType]].null?(affine.pds), list_adt[[nat, nzBaseType]].null?(rpd))), (booleans.IMPLIES((booleans.NOT)(list_adt[[nat, nzBaseType]].null?(rpd)), ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(affine.pds)`1 = ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(rpd)`1)))}"))) (|containment_neg| 0 (|containment_neg-1| |nil| 3629032893 ("" (SKEEP) (("" (EXPAND "eval_ac_noise") (("" (EXPAND "neg_ac") (("" (ASSERT) (("" (GENERALIZE "pd(Xa)" "pds") (("" (GENERALIZE "x1" "x") (("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "neg_pd") (("2" (EXPAND_OL) (("2" (EXPAND "eval_pd_noise") (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND "neg_pd" 1) (("3" (EXPAND_OL) (("3" (LEMMA "eval_pd_noise_rec_pds_def") (("3" (INST? -1 :WHERE 1) (("3" (REPLACES -1) (("3" (EXPAND_OL) (("3" (SPLIT -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST? -1 :WHERE -4) (("1" (REPLACES -1) (("1" (EXPAND_OL) (("1" (INST -1 "x-get_noise_by_idx(hpds`1, N) * hpds`2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ordered_list?" -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|neg_pd| DEF-DECL "{rpd: ErrorTerms |
   (null?(pds) IFF null?(rpd)) AND
    (NOT null?(rpd) IMPLIES car_ol(pds)`1 = car_ol(rpd)`1)}" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|neg_ac| CONST-DECL "AffineCombination" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|next_idx_neg_ac| 0 (|next_idx_neg_ac-1| |nil| 3628945045 ("" (SKEEP) (("" (EXPAND "neg_ac") (("" (ASSERT) (("" (NAME-REPLACE "pd1" "pd(Xa)") (("" (GENERALIZE "pd1" "pds") (("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_ac| CONST-DECL "AffineCombination" |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|neg_pd| DEF-DECL "{rpd: ErrorTerms |
   (null?(pds) IFF null?(rpd)) AND
    (NOT null?(rpd) IMPLIES car_ol(pds)`1 = car_ol(rpd)`1)}" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL)) SHOSTAK)) (|idxs_ac_neg_ac| 0 (|idxs_ac_neg_ac-1| |nil| 3628936839 ("" (SKEEP) (("" (EXPAND "neg_ac") (("" (EXPAND "idxs_ac") (("" (ASSERT) (("" (GENERALIZE "pd(Xa)" "pds") (("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hpds" "tpds")) (("3" (FLATTEN) (("3" (EXPAND "idxs_pd" 1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (EXPAND "member" 1) (("3" (FLATTEN) (("3" (EXPAND "cdr_ol") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|neg_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|neg_pd| DEF-DECL "{rpd: ErrorTerms |
   (null?(pds) IFF null?(rpd)) AND
    (NOT null?(rpd) IMPLIES car_ol(pds)`1 = car_ol(rpd)`1)}" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL)) SHOSTAK)) (|mult_pd_pd_TCC1| 0 (|mult_pd_pd_TCC1-2| "" 3789916437 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.pds1, affine.tl2)" "NIL")) (|mult_pd_pd_TCC1-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.pds1, affine.tl2)" "NIL"))) (|mult_pd_pd_TCC2| 0 (|mult_pd_pd_TCC2-2| "" 3789916438 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.pds2)" "NIL")) (|mult_pd_pd_TCC2-1| |nil| 3619884927 ("" (TCC)) NIL NIL (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.pds2)" "NIL"))) (|mult_pd_pd_TCC3| 0 (|mult_pd_pd_TCC3-2| "" 3789916439 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.tl2)" "NIL")) (|mult_pd_pd_TCC3-1| |nil| 3619884927 ("" (TCC)) NIL SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.tl2)" "NIL"))) (|mult_pd_pd_TCC4| 0 (|mult_pd_pd_TCC4-3| "" 3789916439 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.pds2)" "NIL")) (|mult_pd_pd_TCC4-2| "" 3621076804 ("" (TCC)) NIL SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.pds2)" "NIL")) (|mult_pd_pd_TCC4-1| |nil| 3619884927 ("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (TYPEPRED "v(cv1, cv2, pds1, tl2)") (("" (ASSERT) (("" (SPLIT -3) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (GRIND) NIL NIL) ("2" (CASE "hd2`1 < car(tl2)`1") (("1" (GRIND) NIL NIL) ("2" (TYPEPRED "pds2") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.tl1, affine.pds2)" "NIL"))) (|mult_pd_pd_TCC5| 0 (|mult_pd_pd_TCC5-3| "" 3789916440 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.pds1, affine.tl2)" "NIL")) (|mult_pd_pd_TCC5-2| "" 3621076829 ("" (TCC)) NIL SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.pds1, affine.tl2)" "NIL")) (|mult_pd_pd_TCC5-1| |nil| 3619884927 ("" (TCC) NIL NIL) NIL SHOSTAK (|mult_pd_pd| TERMINATION "affine.mult_pd_pd(affine.cv1, affine.cv2, affine.pds1, affine.tl2)" "NIL"))) (|mult_pd_pd_preserves_order_1_TCC1| 0 (|mult_pd_pd_preserves_order_1_TCC1-2| "" 3789916441 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_preserves_order_1| SUBTYPE "affine.mult_pd_pd(affine.cv1, affine.cv2, ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds), list_adt[[nat, nzBaseType]].null)" "(list_adt[[nat, nzBaseType]].cons?)")) (|mult_pd_pd_preserves_order_1_TCC1-1| |nil| 3621160483 ("" (TCC)) NIL NIL (|mult_pd_pd_preserves_order_1| SUBTYPE "affine.mult_pd_pd(affine.cv1, affine.cv2, ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds), list_adt[[nat, nzBaseType]].null)" "(list_adt[[nat, nzBaseType]].cons?)"))) (|mult_pd_pd_preserves_order_1| 0 (|mult_pd_pd_preserves_order_1-2| "" 3789916442 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (SKEEP) (("1" (EXPAND "null_ol?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP*) (("2" (INST?) (("2" (INST -1 "cv2") (("2" (HIDE 1) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (PROP) (("1" (EXPAND "car_ol") (("1" (EXPAND "mult_pd_pd" 1) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "null_ol") (("1" (PROP) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "cons_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (EXPAND "mult_pd_pd" 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "null_ol") (("2" (PROP) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 3) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "cons_ol") (("2" (TYPEPRED "x::[nat,nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x::[nat,nzBaseType]") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (EXPAND "null_ol?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|mult_pd_pd_preserves_order_1-1| |nil| 3621160527 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (SKEEP) (("1" (EXPAND "null_ol?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP*) (("2" (INST?) (("2" (INST -1 "cv2") (("2" (HIDE 1) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (PROP) (("1" (EXPAND "car_ol") (("1" (EXPAND "mult_pd_pd" 1) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "null_ol") (("1" (PROP) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "cons_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (EXPAND "mult_pd_pd" 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "null_ol") (("2" (PROP) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 3) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "cons_ol") (("2" (TYPEPRED "x::[nat,nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x::[nat,nzBaseType]") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (EXPAND "null_ol?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "ordered_list?") (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (EXPAND "ordered_list?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|mult_pd_pd_preserves_order_2_TCC1| 0 (|mult_pd_pd_preserves_order_2_TCC1-1| |nil| 3621105899 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_preserves_order_2| SUBTYPE "affine.mult_pd_pd(affine.cv1, affine.cv2, list_adt[[nat, nzBaseType]].null, ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds2))" "(list_adt[[nat, nzBaseType]].cons?)"))) (|mult_pd_pd_preserves_order_2| 0 (|mult_pd_pd_preserves_order_2-2| "" 3789916443 ("" (INDUCT "pds2" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (SKEEP) (("1" (EXPAND "null_ol?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP*) (("2" (INST?) (("2" (INST -1 "cv2") (("2" (HIDE 1) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (PROP) (("1" (EXPAND "car_ol") (("1" (EXPAND "mult_pd_pd" 1) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "null_ol") (("1" (PROP) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "cons_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (EXPAND "mult_pd_pd" 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "null_ol") (("2" (PROP) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 3) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "cons_ol") (("2" (TYPEPRED "x::[nat,nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x::[nat,nzBaseType]") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (EXPAND "null_ol?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|mult_pd_pd_preserves_order_2-1| |nil| 3621105900 ("" (INDUCT "pds2" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (SKEEP) (("1" (EXPAND "null_ol?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP*) (("2" (INST?) (("2" (INST -1 "cv2") (("2" (HIDE 1) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (PROP) (("1" (EXPAND "car_ol") (("1" (EXPAND "mult_pd_pd" 1) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "null_ol") (("1" (PROP) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "cons_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (EXPAND "mult_pd_pd" 1) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "null_ol") (("2" (PROP) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (PROP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (EXPAND "ordered_list?") (("1" (EXPAND "lt_idx") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 3) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "cons_ol") (("2" (TYPEPRED "x::[nat,nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "x::[nat,nzBaseType]") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (EXPAND "null_ol?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (EXPAND "ordered_list?") (("4" (PROPAX) NIL NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT 1) (("5" (EXPAND "ordered_list?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mult_pd_pd_preserves_order_3_TCC1| 0 (|mult_pd_pd_preserves_order_3_TCC1-2| "" 3789916444 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_preserves_order_3| SUBTYPE "affine.mult_pd_pd(affine.cv1, affine.cv2, ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds1), ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds2))" "(list_adt[[nat, nzBaseType]].cons?)")) (|mult_pd_pd_preserves_order_3_TCC1-1| |nil| 3621163685 ("" (TCC)) NIL NIL (|mult_pd_pd_preserves_order_3| SUBTYPE "affine.mult_pd_pd(affine.cv1, affine.cv2, ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds1), ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cdr_ol(affine.pds2))" "(list_adt[[nat, nzBaseType]].cons?)"))) (|mult_pd_pd_preserves_order_3| 0 (|mult_pd_pd_preserves_order_3-1| |nil| 3621163872 ("" (SKEEP) (("" (NAME "j" "length(pds1)+length(pds2)") (("" (GENERALIZE "pds1" "pds1") (("1" (GENERALIZE "pds2" "pds2") (("1" (GENERALIZE "j" "j") (("1" (INDUCT "j" :NAME "NAT_induction") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "mult_pd_pd" 3) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -3 "j_1 -1") (("1" (ASSERT) (("1" (INST -3 "cdr(pds2!1)" "pds1!1") (("1" (ASSERT) (("1" (PROP) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)") (("1" (EXPAND "car_ol") (("1" (EXPAND "mult_pd_pd" 5) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (EXPAND "cdr_ol") (("1" (HIDE-ALL-BUT (-1 -2 5)) (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 1 4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (INST -2 "j_1 -1") (("1" (ASSERT) (("1" (INST -2 "cdr(pds2!1)" "pds1!1") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (EXPAND "mult_pd_pd" 6) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (EXPAND "car_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 6) (("1" (TYPEPRED "pds2!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 6) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 6) (("1" (TYPEPRED "pds2!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "cons_ol") (("2" (SPLIT 6) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "pds2!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-1 2)) (("2" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 5 6)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "add_ET") (("3" (LIFT-IF) (("3" (EXPAND "car_ol") (("3" (INST -2 "j_1-1") (("1" (ASSERT) (("1" (INST -2 "pds2!1" "cdr_ol(pds1!1)") (("1" (EXPAND "cdr_ol") (("1" (SPLIT -2) (("1" (EXPAND "mult_pd_pd" 5) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (HIDE-ALL-BUT 6) (("2" (TYPEPRED "pds1!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 5) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (5 -2)) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds1!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 6) (("1" (TYPEPRED "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 7) (("1" (TYPEPRED "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE-ALL-BUT (7 -1)) (("2" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds1!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (1 -2 4 5)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "car_ol") (("4" (EXPAND "add_ET") (("4" (LIFT-IF) (("4" (INST -2 "j_1 -2 ") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2!1)" "cdr_ol(pds1!1)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "mult_pd_pd" 6) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (HIDE-ALL-BUT (6 -3)) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) < min(car(cdr(pds1!1))`1, car(cdr(pds2!1))`1)") (("1" (NAME-REPLACE "dummy" " car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(cdr(pds2!1))))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds1!1") (("2" (TYPEPRED "pds2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (HIDE-ALL-BUT 7) (("1" (TYPEPRED "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 8) (("1" (TYPEPRED "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (8 -2)) (("2" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) < min(car(cdr(pds1!1))`1, car(cdr(pds2!1))`1)") (("1" (NAME-REPLACE "dummy" " car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(cdr(pds2!1))))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds1!1") (("2" (TYPEPRED "pds2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 5 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "car_ol") (("5" (EXPAND "add_ET") (("5" (LIFT-IF) (("5" (INST -2 "j_1  -1") (("1" (ASSERT) (("1" (INST -2 "pds2!1" "cdr_ol(pds1!1)") (("1" (ASSERT) (("1" (EXPAND "mult_pd_pd" 7) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (HIDE-ALL-BUT (-3 7)) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds1!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 8) (("1" (TYPEPRED "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (HIDE-ALL-BUT 9) (("1" (TYPEPRED "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (HIDE-ALL-BUT (9 -2)) (("2" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(cdr(pds1!1))`1, car(pds2!1)`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(cdr(pds1!1)), cdr(pds2!1)))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds1!1") (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 6 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "add_ET") (("6" (LIFT-IF) (("6" (EXPAND "mult_pd_pd" 8) (("6" (LIFT-IF) (("6" (EXPAND "null_ol?") (("6" (ASSERT) (("6" (EXPAND "add_ET") (("6" (LIFT-IF) (("6" (EXPAND "car_ol") (("6" (EXPAND "cdr_ol") (("6" (EXPAND "cons_ol") (("6" (INST -1 "j_1-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2!1)" "pds1!1") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE-ALL-BUT (8 -2)) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (SPLIT 8) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "pds2!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT 1) (("1" (TYPEPRED "pds2!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE-ALL-BUT (2 -1)) (("2" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) <= min(car(pds1!1)`1, car(cdr(pds2!1))`1)") (("1" (NAME-REPLACE "bla" "car(mult_pd_pd(cv1, cv2, cdr(pds1!1), cdr(cdr(pds2!1))))`1") (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "pds2!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 7 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP*) (("2" (EXPAND "null_ol?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|cv2| SKOLEM-CONST-DECL "BaseType" |affine| NIL) (|cv1| SKOLEM-CONST-DECL "BaseType" |affine| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j_1| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|mult_pd_pd_last_bound__null_nnull_TCC1| 0 (|mult_pd_pd_last_bound__null_nnull_TCC1-1| |nil| 3621276799 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound__null_nnull| SUBTYPE "affine.mult_pd_pd(affine.x1, affine.x2, affine.empty_ErrorTerms, affine.pds)" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound__null_nnull_TCC2| 0 (|mult_pd_pd_last_bound__null_nnull_TCC2-1| |nil| 3621276799 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound__null_nnull| SUBTYPE "affine.pds" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound__null_nnull| 0 (|mult_pd_pd_last_bound__null_nnull-1| |nil| 3621276800 ("" (EXPAND "null_ol?") (("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("pds")) (("2" (FLATTEN) (("2" (SKOLEM 1 "x_") (("2" (SKEEP) (("2" (INST?) (("2" (INST -1 "x2") (("2" (EXPAND "mult_pd_pd" (1 2)) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "add_ET" (1 2)) (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "cons_ol") (("2" (EXPAND "empty_ErrorTerms") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE "NOT null?[[nat, nzBaseType]](pds)") (("1" (ASSERT) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "last_ol") (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mult_pd_pd") (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (ASSERT) (("1" (CASE "null_ol?(pds)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))") (("1" (REPLACES -1) (("1" (EXPAND "last_ol" 4 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "null_ol?(pds)") (("1" (GRIND) NIL NIL) ("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))") (("1" (REPLACES -1) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK)) (|mult_pd_pd_last_bound__nnull_null_TCC1| 0 (|mult_pd_pd_last_bound__nnull_null_TCC1-2| "" 3789916454 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound__nnull_null| SUBTYPE "affine.mult_pd_pd(affine.x1, affine.x2, affine.pds, affine.empty_ErrorTerms)" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}")) (|mult_pd_pd_last_bound__nnull_null_TCC1-1| |nil| 3621280662 ("" (TCC)) NIL NIL (|mult_pd_pd_last_bound__nnull_null| SUBTYPE "affine.mult_pd_pd(affine.x1, affine.x2, affine.pds, affine.empty_ErrorTerms)" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound__nnull_null_TCC2| 0 (|mult_pd_pd_last_bound__nnull_null_TCC2-2| "" 3789916455 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound__nnull_null| SUBTYPE "affine.pds" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}")) (|mult_pd_pd_last_bound__nnull_null_TCC2-1| |nil| 3621280662 ("" (TCC)) NIL NIL (|mult_pd_pd_last_bound__nnull_null| SUBTYPE "affine.pds" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound__nnull_null| 0 (|mult_pd_pd_last_bound__nnull_null-1| |nil| 3621350074 ("" (EXPAND "null_ol?") (("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("pds")) (("2" (FLATTEN) (("2" (SKOLEM 1 "x_") (("2" (SKEEP) (("2" (INST?) (("2" (INST -1 "x2") (("2" (EXPAND "mult_pd_pd" (1 2)) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "add_ET" (1 2)) (("2" (LIFT-IF) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "cons_ol") (("2" (EXPAND "empty_ErrorTerms") (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE "NOT null?[[nat, nzBaseType]](pds)") (("1" (ASSERT) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "null_ol?") (("1" (EXPAND "last_ol") (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mult_pd_pd") (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 2) (("1" (ASSERT) (("1" (CASE "null_ol?(pds)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))") (("1" (REPLACES -1) (("1" (EXPAND "last_ol" 4 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "null_ol?(pds)") (("1" (GRIND) NIL NIL) ("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cons(x_, pds))") (("1" (REPLACES -1) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) NIL)) (|mult_pd_pd_last_bound_TCC1| 0 (|mult_pd_pd_last_bound_TCC1-2| "" 3789916457 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound| SUBTYPE "affine.mult_pd_pd(affine.x1, affine.x2, affine.pds1, affine.pds2)" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}")) (|mult_pd_pd_last_bound_TCC1-1| |nil| 3621274735 ("" (TCC)) NIL NIL (|mult_pd_pd_last_bound| SUBTYPE "affine.mult_pd_pd(affine.x1, affine.x2, affine.pds1, affine.pds2)" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound_TCC2| 0 (|mult_pd_pd_last_bound_TCC2-2| "" 3789916457 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound| SUBTYPE "affine.pds1" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}")) (|mult_pd_pd_last_bound_TCC2-1| |nil| 3621274735 ("" (TCC)) NIL NIL (|mult_pd_pd_last_bound| SUBTYPE "affine.pds1" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound_TCC3| 0 (|mult_pd_pd_last_bound_TCC3-2| "" 3789916458 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|mult_pd_pd_last_bound| SUBTYPE "affine.pds2" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}")) (|mult_pd_pd_last_bound_TCC3-1| |nil| 3621275306 ("" (TCC)) NIL NIL (|mult_pd_pd_last_bound| SUBTYPE "affine.pds2" "{ol | (booleans.NOT)(list_adt[[nat, nzBaseType]].null?(ol))}"))) (|mult_pd_pd_last_bound| 0 (|mult_pd_pd_last_bound-1| |nil| 3621275044 ("" (SKEEP) (("" (NAME "L" "length(pds1)+length(pds2)") (("" (EXPAND "null_ol?") (("" (GENERALIZE "pds1" "pds1") (("" (GENERALIZE "pds2" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKOLEM 1 ("pds2_" "pds1_")) (("" (FLATTEN) (("" (EXPAND "mult_pd_pd" 4) (("" (LIFT-IF) (("" (EXPAND "null_ol?") (("" (ASSERT) (("" (EXPAND "car_ol") (("" (SPLIT 4) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2_)" "cdr_ol(pds1_)") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (CASE "null?[[nat, nzBaseType]](cdr(pds1_))") (("1" (CASE "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr(pds1_), cdr(pds2_)))") (("1" (HIDE -5) (("1" (EXPAND "mult_pd_pd" 4) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr(pds1_)=null") (("1" (REPLACES -1) (("1" (HIDE -1) (("1" (HIDE -3) (("1" (CASE "null?[[nat, nzBaseType]](cdr(pds2_))") (("1" (GRIND) NIL NIL) ("2" (LEMMA "mult_pd_pd_last_bound__null_nnull") (("2" (INST -1 "cdr_ol(pds2_)" "x1" "x2") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "empty_ErrorTerms") (("1" (REVEAL -4) (("1" (EXPAND "last_ol" 3 2) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (TYPEPRED "pds2_") (("1" (HIDE-ALL-BUT (-1 -3 -5 3 4 5)) (("1" (REPLACES -3) (("1" (LEMMA "olidx_car_last[nzBaseType]") (("1" (INST -1 "pds2_") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))") (("1" (REPLACES -1 :DIR RL) (("1" (NAME-REPLACE "dontRW" "mult_pd_pd(x1, x2, null, cdr(pds2_))") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "null?[[nat, nzBaseType]](cdr(pds2_))") (("1" (CASE "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr(pds1_), cdr(pds2_)))") (("1" (GRIND) NIL NIL) ("2" (CASE "cdr(pds2_) = null") (("1" (REPLACE -1 + :HIDE? T) (("1" (LEMMA "mult_pd_pd_last_bound__nnull_null") (("1" (INST -1 "cdr(pds1_)" "x1" "x2") (("1" (EXPAND "null_ol?") (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "last_ol" 3 3) (("1" (CASE "max(last_ol(pds1_)`1, car(pds2_)`1) = last_ol(pds1_)`1") (("1" (REPLACES -1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))") (("1" (REPLACES -1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "mult_pd_pd" 6) (("1" (LIFT-IF) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol" 1 1) (("1" (EXPAND "empty_ErrorTerms") (("1" (HIDE-ALL-BUT (1 3 4)) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "last_ol" 2 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (EXPAND "cons_ol") (("2" (INST -2 "j-2") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2_)" "cdr_ol(pds1_)") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (CASE "null_ol?(cdr_ol(pds1_))") (("1" (CASE "null_ol?(cdr_ol(pds2_))") (("1" (GRIND) NIL NIL) ("2" (EXPAND "null_ol?") (("2" (CASE "cdr(pds1_)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "cdr_ol") (("1" (LEMMA "mult_pd_pd_last_bound__null_nnull") (("1" (INST -1 "cdr_ol(pds2_)" "x1" "x2") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "last_ol" 3 (2 3)) (("1" (REPLACES -3) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))`1=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))`1") (("1" (REPLACES -1) (("1" (LEMMA "olidx_car_last[nzBaseType]") (("1" (INST -1 "cdr_ol(pds2_)") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("2" (CASE "null_ol?(cdr_ol(pds2_))") (("1" (CASE "cdr(pds2_)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (LEMMA "mult_pd_pd_last_bound__nnull_null") (("1" (INST -1 "cdr_ol(pds1_)" "x1" "x2") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_ol" 3 (2 3)) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (REPLACES -3 :DIR RL) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)") (("1" (REPLACES -1) (("1" (LEMMA "olidx_car_last[nzBaseType]") (("1" (INST -1 "pds1_") (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (PROP) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_))=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)") (("1" (REPLACES -1) (("1" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_))=last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_)") (("1" (REPLACES -1) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 7 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2_" "cdr_ol(pds1_)") (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "null_ol?(cdr_ol(pds1_))") (("1" (CASE "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr_ol(pds1_), pds2_))") (("1" (EXPAND "null_ol?") (("1" (EXPAND "mult_pd_pd" 5) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mult_pd_pd_last_bound__null_nnull") (("2" (INST -1 "pds2_" "x1" "x2") (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (SPLIT -1) (("1" (HIDE -5) (("1" (CASE "cdr(pds1_)=null") (("1" (EXPAND "cdr_ol") (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "last_ol" 2 2) (("1" (ASSERT) (("1" (CASE "max(car(pds1_)`1, last_ol(pds2_)`1) = max(car(pds2_)`1, last_ol(pds2_)`1)") (("1" (REPLACES -1) (("1" (LEMMA "olidx_car_last[nzBaseType]") (("1" (INST -1 "pds2_") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (EXPAND "cdr_ol") (("2" (CASE "cdr(pds1_)=null") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (CASE "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, cdr(pds1_), pds2_))") (("1" (EXPAND "mult_pd_pd" 6) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_)) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_ol" 1 1) (("1" (LEMMA "olidx_car_last[nzBaseType]") (("1" (INST -1 "pds1_") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "null?[[nat, nzBaseType]](cdr(pds1_))") (("1" (HIDE -3) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol" 2 1) (("1" (CASE "cdr(pds1_)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (LEMMA "mult_pd_pd_last_bound__null_nnull") (("1" (INST -1 "pds2_" "x1" "x2") (("1" (EXPAND "null_ol?") (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "last_ol" 3 1) (("2" (EXPAND "cons_ol") (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds1_)) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds1_)") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2_)" "pds1_") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "length" -2 2) (("1" (ASSERT) (("1" (CASE "null?[[nat, nzBaseType]](cdr(pds2_))") (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, pds1_, cdr(pds2_)))") (("1" (HIDE -4) (("1" (EXPAND "mult_pd_pd" 6) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "cdr(pds2_)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (LEMMA "mult_pd_pd_last_bound__nnull_null") (("1" (INST -1 "pds1_" "x1" "x2") (("1" (EXPAND "null_ol?") (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "last_ol" 1 1) (("1" (LEMMA "olidx_car_last[nzBaseType]") (("1" (INST -1 "pds1_") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "last_ol" 1 1) (("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (HIDE -2) (("2" (CASE "cdr(pds2_)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (LEMMA "mult_pd_pd_last_bound__nnull_null") (("1" (INST -1 "pds1_" "x1" "x2") (("1" (EXPAND "null_ol?") (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "null?[[nat, nzBaseType]](mult_pd_pd(x1, x2, pds1_, cdr_ol(pds2_)))") (("1" (EXPAND "mult_pd_pd" 7) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "add_ET") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 8) (("2" (HIDE -2) (("2" (EXPAND "cons_ol") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "last_ol" 2 1) (("2" (LEMMA "olidx_car_last[nzBaseType]") (("2" (INST -1 "pds1_") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cdr_ol") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (EXPAND "last_ol" 4 4) (("2" (CASE "last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](cdr(pds2_)) = last_ol[[nat,nzBaseType],lt_idx[nzBaseType]](pds2_)") (("1" (REPLACES -1) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "null_ol?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 5 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (<= CONST-DECL "bool" |reals| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|pds2_| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|mult_pd_pd_last_bound__null_nnull| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|mult_pd_pd_last_bound__nnull_null| FORMULA-DECL NIL |affine| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pds1_| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|search_ET_on_add_ET_TCC1| 0 (|search_ET_on_add_ET_TCC1-2| "" 3789916465 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|search_ET_on_add_ET| SUBTYPE "affine.pds" "(list_adt[[nat, nzBaseType]].cons?)")) (|search_ET_on_add_ET_TCC1-1| |nil| 3621103906 ("" (TCC)) NIL NIL (|search_ET_on_add_ET| SUBTYPE "affine.pds" "(list_adt[[nat, nzBaseType]].cons?)"))) (|search_ET_on_add_ET| 0 (|search_ET_on_add_ET-1| |nil| 3621103923 ("" (GRIND) (("" (EXPAND "search_error_term_by_idx") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK)) (|search_ET_car| 0 (|search_ET_car-1| |nil| 3621104073 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK)) (|search_ET_not_car_TCC1| 0 (|search_ET_not_car_TCC1-2| "" 3789916467 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|search_ET_not_car| SUBTYPE "list_adt[[nat, nzBaseType]].cdr(affine.pds)" "ErrorTerms")) (|search_ET_not_car_TCC1-1| |nil| 3621104193 ("" (TCC)) NIL NIL (|search_ET_not_car| SUBTYPE "list_adt[[nat, nzBaseType]].cdr(affine.pds)" "ErrorTerms"))) (|search_ET_not_car| 0 (|search_ET_not_car-1| |nil| 3621104193 ("" (GRIND) (("" (EXPAND "search_error_term_by_idx") (("" (LIFT-IF) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK)) (|search_ET_in_mult_pd_pd| 0 (|search_ET_in_mult_pd_pd-2| "" 3621105813 ("" (SKEEP) (("" (NAME "lens" "length(pds1)+length(pds2)") (("" (GENERALIZE "pds1" "pds1") (("" (GENERALIZE "pds2" "pds2") (("" (GENERALIZE "lens" "lens") (("" (INDUCT "lens" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (CASE "null_ol?(pds1!1)") (("1" (CASE "null_ol?(pds2!1)") (("1" (GRIND) NIL NIL) ("2" (EXPAND "mult_pd_pd" 2 1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (USE "search_ET_on_add_ET") (("2" (SPLIT -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_car") (("1" (INST -1 "pds2!1") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds1!1, car(pds2!1)`1)=0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2!1)" "pds1!1") (("1" (EXPAND "cdr_ol") (("1" (PROP) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_not_car") (("1" (INST -1 "n" "pds2!1") (("1" (EXPAND "car_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "/=") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 -1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mult_pd_pd_preserves_order_2") (("2" (INST -1 "cv1" "cv2" "pds2!1") (("2" (ASSERT) (("2" (CASE "pds1!1 = null") (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "null_ol?(pds2!1)") (("1" (EXPAND "mult_pd_pd" 2 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (USE "search_ET_on_add_ET") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_car") (("1" (INST -1 "pds1!1") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds2!1, car(pds1!1)`1)=0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2!1" "cdr_ol(pds1!1)") (("1" (EXPAND "cdr_ol") (("1" (PROP) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_not_car") (("1" (INST -1 "n" "pds1!1") (("1" (EXPAND "car_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "/=") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 -1 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mult_pd_pd_preserves_order_1") (("2" (INST -1 "cv1" "cv2" "pds1!1") (("2" (ASSERT) (("2" (CASE "pds2!1 = null") (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car_ol(pds1!1)`1 = car_ol(pds2!1)`1") (("1" (EXPAND "mult_pd_pd" 3 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (USE "search_ET_on_add_ET") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (HIDE -3) (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds2!1, car_ol(pds1!1)`1) = search_error_term_by_idx(pds2!1, car_ol(pds2!1)`1)") (("1" (REPLACES -1) (("1" (USE "search_ET_car") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (USE "search_ET_car") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-2") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2!1)" "cdr_ol(pds1!1)") (("1" (EXPAND "cdr_ol") (("1" (PROP) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_not_car") (("1" (INST -1 "n" "pds2!1") (("1" (EXPAND "null_ol?") (("1" (EXPAND "/=") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_not_car") (("1" (INST -1 "n" "pds1!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1 4 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "mult_pd_pd_preserves_order_3") (("2" (INST -1 "cv1" "cv2" "pds1!1" "pds2!1") (("2" (ASSERT) (("2" (HIDE 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "mult_pd_pd" 4) (("2" (LIFT-IF) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (EXPAND "car_ol") (("2" (SPLIT 4) (("1" (FLATTEN) (("1" (LEMMA "search_ET_on_add_ET") (("1" (INST -1 "min(car(pds1!1)`1,car(pds2!1)`1)" "n" "mult_pd_pd
                                      (cv1, cv2, cdr_ol(pds1!1), pds2!1)" "car(pds1!1)`2 * cv2") (("1" (SPLIT -1) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds1!1)`1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (USE "search_ET_car") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds2!1, car(pds1!1)`1) = 0") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2!1" "cdr_ol(pds1!1)") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_not_car") (("1" (INST -1 "n" "pds1!1") (("1" (EXPAND "null_ol?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 5 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "mult_pd_pd_preserves_order_3") (("2" (INST -1 "cv1" "cv2" "pds1!1" "cons_ol(car(pds1!1), pds2!1)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds1!1)`1") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "search_ET_on_add_ET") (("2" (INST -1 "min(car(pds1!1)`1,car(pds2!1)`1)" "n" "mult_pd_pd
                                      (cv1, cv2, pds1!1, cdr_ol(pds2!1))" "car(pds2!1)`2 * cv1") (("2" (SPLIT -1) (("1" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds2!1)`1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF) (("1" (SPLIT 2) (("1" (FLATTEN) (("1" (REPLACES -) (("1" (USE "search_ET_car") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds1!1, car(pds2!1)`1) = 0") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2!1)" "pds1!1") (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (LEMMA "search_ET_not_car") (("1" (INST -1 "n" "pds2!1") (("1" (EXPAND "null_ol?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 6 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 3) (("2" (CASE "min(car(pds1!1)`1, car(pds2!1)`1) = car(pds2!1)`1") (("1" (REPLACES -1) (("1" (LEMMA "mult_pd_pd_preserves_order_3") (("1" (INST -1 "cv1" "cv2" "cons_ol(car(pds2!1), pds1!1)" "pds2!1") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 3)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|mult_pd_pd_preserves_order_1| FORMULA-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pds1!1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|pds2!1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|mult_pd_pd_preserves_order_3| FORMULA-DECL NIL |affine| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|search_ET_on_add_ET| FORMULA-DECL NIL |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|mult_pd_pd_preserves_order_2| FORMULA-DECL NIL |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|search_ET_car| FORMULA-DECL NIL |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|search_ET_not_car| FORMULA-DECL NIL |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|search_ET_in_mult_pd_pd-1| |nil| 3621089248 ("" (SKEEP) (("" (NAME "lens" "length(pds1)+length(pds2)") (("" (GENERALIZE "pds1" "pds1") (("" (GENERALIZE "pds2" "pds2") (("" (GENERALIZE "lens" "lens") (("" (INDUCT "lens") (("1" (SKEEP) (("1" (CASE "null_ol?(pds1!1) AND null_ol?(pds2!1)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "mult_pd_pd" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (CASE "cv2 * search_error_term_by_idx(pds1!1, n) = 0") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (PROP) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -3) (("1" (ASSERT) (("1" (EXPAND "search_error_term_by_idx" 1 2) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "car_ol(pds2!1)`1 = n") (("1" (EXPAND "cons_ol") (("1" (EXPAND "search_error_term_by_idx" 1 1) (("1" (ASSERT) (("1" (HIDE -4) (("1" (EXPAND "search_error_term_by_idx" 1 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (CASE "cv1 * search_error_term_by_idx(pds2!1, n) = 0") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(cons_ol((car_ol(pds2!1)`1,
                                                                              car_ol(pds2!1)`2 * cv1),
                                                                             empty_ErrorTerms),
                                                                     n) = 0") (("1" (PROPAX) NIL NIL) ("2" (HIDE-ALL-BUT (1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (EXPAND "car_ol") (("3" (EXPAND "/=") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (5 2 -1 1)) (("2" (CASE "cons?(pds2!1)") (("1" (GENERALIZE "pds2!1" "pds2_1" :FNUMS (-1 -2 2 1)) (("1" (HIDE 2) (("1" (INDUCT "pds2_1" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKOLEM 1 "x_") (("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "mult_pd_pd" -2) (("2" (LIFT-IF) (("2" (SPLIT -2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (HIDE -3) (("1" (EXPAND "search_error_term_by_idx") (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "search_error_term_by_idx" 2) (("1" (ASSERT) (("1" (EXPAND "car_ol") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "search_error_term_by_idx" 2) (("2" (EXPAND "car_ol") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "search_error_term_by_idx" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "null_ol?") (("2" (EXPAND "car_ol") (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "null_ol?") (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) (("4" (EXPAND "null_ol?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "cons_ol") (("3" (EXPAND "car_ol") (("3" (EXPAND "cdr_ol") (("3" (EXPAND "null_ol?") (("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|sum_of_modules_TCC1| 0 (|sum_of_modules_TCC1-2| "" 3789916474 ("" (TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK (|sum_of_modules| TERMINATION "affine.sum_of_modules(affine.tl)" "NIL")) (|sum_of_modules_TCC1-1| |nil| 3621077069 ("" (TCC)) NIL NIL (|sum_of_modules| TERMINATION "affine.sum_of_modules(affine.tl)" "NIL"))) (|sum_of_modules_nnreal| 0 (|sum_of_modules_nnreal-1| |nil| 3620056534 ("" (INDUCT "pds") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL) ((|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK (|sum_of_modules_nnreal| SUBTYPE "affine.sum_of_modules(affine.pds)" "nonneg_real"))) (|sum_of_modules_append| 0 (|sum_of_modules_append-1| |nil| 3621186862 ("" (INDUCT "l1") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("h_" "t_")) (("2" (FLATTEN) (("2" (SKEEP) (("2" (EXPAND "append" 1) (("2" (EXPAND "sum_of_modules" 1 1) (("2" (EXPAND "sum_of_modules" 1 2) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|first_noises_TCC1| 0 (|first_noises_TCC1-1| |nil| 3620579570 ("" (SKEEP) (("" (USE "first_is_ol[nzEpsilon]") NIL NIL)) NIL) ((|first_is_ol| FORMULA-DECL NIL |indexed_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|first_noises| SUBTYPE "indexed_list[nzEpsilon].first(affine.N, affine.n)" "Noise"))) (|first_noises_upd| 0 (|first_noises_upd-2| |nil| 3629578919 ("" (INDUCT "N") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hN" "tN")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND "upd_noise" 1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "first_noises" 1 2) (("2" (EXPAND "first" 1) (("2" (ASSERT) (("2" (EXPAND "first_noises" 1) (("2" (EXPAND "first" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT 2) (("1" (REPLACES -3 :DIR RL) (("1" (HIDE-ALL-BUT (-1 -4 1)) (("1" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (FLATTEN) (("2" (HIDE-ALL-BUT (-1 -3)) (("2" (INVOKE (WITH-FRESH-NAMES ((A "%1") (B "%2")) (ASSERT)) (! -1 1) (! -1 2)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL)) NIL) (|first_noises_upd-1| |nil| 3628853122 ("" (INDUCT "N") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("hN" "tN")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (EXPAND "upd_noise" 1) (("3" (EXPAND "null_ol?") (("3" (EXPAND "car_ol") (("3" (LIFT-IF 1) (("3" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "first_noises" 1 2) (("2" (EXPAND "first" 1) (("2" (ASSERT) (("2" (EXPAND "first_noises" 1) (("2" (EXPAND "first" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|first_ET_TCC1| 0 (|first_ET_TCC1-1| |nil| 3621012759 ("" (SKEEP) (("" (USE "first_is_ol[nzBaseType]") NIL NIL)) NIL) ((|first_is_ol| FORMULA-DECL NIL |indexed_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|first_ET| SUBTYPE "indexed_list[nzBaseType].first(affine.pds, affine.n)" "ErrorTerms"))) (|last_first_ET| 0 (|last_first_ET-1| |nil| 3621079802 ("" (USE "last_up_to_idx[nzBaseType]") (("" (GRIND) NIL NIL)) NIL) ((|first_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|last_up_to_idx| FORMULA-DECL NIL |indexed_list| |structures|)) SHOSTAK)) (|last_first_noises| 0 (|last_first_noises-2| "" 3620752993 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) (("2" (GRIND) (("2" (EXPAND "last_ol" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK) (|last_first_noises-1| |nil| 3620566666 ("" (INDUCT "N") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("n_" "N_")) (("3" (FLATTEN) (("3" (SKEEP) (("3" (USE "ol_suffix[[nat, nzEpsilon], lt_idx[nzEpsilon]]") (("3" (ASSERT) (("3" (INST?) (("3" (PROP) (("1" (GRIND) (("1" (EXPAND "last_ol" 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKEEP*) (("4" (USE "Noise_as_list") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|gnbi_lt_first_idem| 0 (|gnbi_lt_first_idem-1| |nil| 3621712240 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP*) (("2" (EXPAND "first_noises") (("2" (EXPAND "first" 1) (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "get_noise_by_idx" 1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|first_noises_zero_prop| 0 (|first_noises_zero_prop-1| |nil| 3620665660 ("" (GRIND) (("" (EXPAND "first") (("" (LIFT-IF) (("" (ASSERT) (("" (PROP) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL)) SHOSTAK)) (|first_error_terms_recursive_def_TCC1| 0 (|first_error_terms_recursive_def_TCC1-2| "" 3789916481 ("" (TCC) NIL NIL) ((|first_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|first_error_terms_recursive_def| SUBTYPE "affine.empty_ErrorTerms" "{ol2 | ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].appendable_ol?(affine.first_ET(affine.pds, affine.n), ol2)}")) (|first_error_terms_recursive_def_TCC1-1| |nil| 3621005252 ("" (TCC)) NIL NIL (|first_error_terms_recursive_def| SUBTYPE "affine.empty_ErrorTerms" "{ol2 | ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].appendable_ol?(affine.first_ET(affine.pds, affine.n), ol2)}"))) (|first_error_terms_recursive_def_TCC2| 0 (|first_error_terms_recursive_def_TCC2-2| "" 3789916482 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|first_error_terms_recursive_def| SUBTYPE "affine.search_error_term_by_idx(affine.pds, affine.n)" "nzBaseType")) (|first_error_terms_recursive_def_TCC2-1| |nil| 3621005252 ("" (TCC)) NIL NIL (|first_error_terms_recursive_def| SUBTYPE "affine.search_error_term_by_idx(affine.pds, affine.n)" "nzBaseType"))) (|first_error_terms_recursive_def_TCC3| 0 (|first_error_terms_recursive_def_TCC3-2| "" 3789916482 ("" (TCC) NIL NIL) ((|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|first_error_terms_recursive_def| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.search_error_term_by_idx(affine.pds, affine.n)), list_adt[[nat, nzBaseType]].car(ol)))}")) (|first_error_terms_recursive_def_TCC3-1| |nil| 3621005252 ("" (TCC)) NIL NIL (|first_error_terms_recursive_def| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.search_error_term_by_idx(affine.pds, affine.n)), list_adt[[nat, nzBaseType]].car(ol)))}"))) (|first_error_terms_recursive_def_TCC4| 0 (|first_error_terms_recursive_def_TCC4-1| |nil| 3621005252 ("" (SKEEP*) (("" (GRIND) (("" (USE "last_first_ET") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|first_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|last_first_ET| FORMULA-DECL NIL |affine| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|first_error_terms_recursive_def| SUBTYPE "ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cons_ol((affine.n, affine.search_error_term_by_idx(affine.pds, affine.n)), affine.empty_ErrorTerms)" "{ol2 | ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].appendable_ol?(affine.first_ET(affine.pds, affine.n), ol2)}"))) (|first_error_terms_recursive_def| 0 (|first_error_terms_recursive_def-2| "" 3750581915 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "pds_") (("2" (FLATTEN) (("2" (SKOLEM 1 "pd_") (("2" (SKEEP) (("2" (EXPAND "first_ET" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_ET" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(pd_,
                                                                     append_ol(first_ET(pds_, n),
                                                                               IF search_error_term_by_idx(pds_, n) = 0 THEN empty_ErrorTerms
                                                                               ELSE cons_ol((n, search_error_term_by_idx(pds_, n)),
                                                                                            empty_ErrorTerms)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(pd_,first_ET(pds_, n)),
                                                                               IF search_error_term_by_idx(pds_, n) = 0 THEN empty_ErrorTerms
                                                                               ELSE cons_ol((n, search_error_term_by_idx(pds_, n)),
                                                                                            empty_ErrorTerms)
                                                                               ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "pd_") (("1" (CASE "pd_`1 = n") (("1" (ASSERT) (("1" (CASE "first(pds_, n) = null") (("1" (REPLACES -1) (("1" (CASE "first(cons(pd_, pds_), n) = null") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(cons(pd_, pds_),n) = pd_`2") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds_, n) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT pd_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "pd_ = (pd_`1,pd_`2)") (("1" (GRIND) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL) ("2" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "pd_ = (pd_`1,pd_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (EXPAND "search_error_term_by_idx") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "pd_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null?(pds_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "pd_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (LEMMA "last_first_ET") (("2" (ASSERT) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (GRIND) (("5" (TYPEPRED "pd_") (("5" (EXPAND "ordered_list?") (("5" (EXPAND "lt_idx") (("5" (GRIND) (("5" (HIDE -2) (("5" (EXPAND "first" 2) (("5" (LIFT-IF) (("5" (CASE "NOT null?(pds_)") (("1" (ASSERT) (("1" (CASE "car(pds_)`1 < n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (LEMMA "last_first_ET") (("6" (ASSERT) (("6" (INST?) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) (("3" (LEMMA "last_first_ET") (("3" (ASSERT) (("3" (INST?) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|last_first_ET| FORMULA-DECL NIL |affine| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|first_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK) (|first_error_terms_recursive_def-1| |nil| 3621005274 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "pds_") (("2" (FLATTEN) (("2" (SKOLEM 1 "pd_") (("2" (SKEEP) (("2" (EXPAND "first_ET" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_ET" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(pd_,
                                                                     append_ol(first_ET(pds_, n),
                                                                               IF search_error_term_by_idx(pds_, n) = 0 THEN empty_ErrorTerms
                                                                               ELSE cons_ol((n, search_error_term_by_idx(pds_, n)),
                                                                                            empty_ErrorTerms)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(pd_,first_ET(pds_, n)),
                                                                               IF search_error_term_by_idx(pds_, n) = 0 THEN empty_ErrorTerms
                                                                               ELSE cons_ol((n, search_error_term_by_idx(pds_, n)),
                                                                                            empty_ErrorTerms)
                                                                               ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "pd_") (("1" (CASE "pd_`1 = n") (("1" (ASSERT) (("1" (CASE "first(pds_, n) = null") (("1" (REPLACES -1) (("1" (CASE "first(cons(pd_, pds_), n) = null") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(cons(pd_, pds_),n) = pd_`2") (("1" (REPLACES -1) (("1" (CASE "search_error_term_by_idx(pds_, n) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT pd_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "pd_ = (pd_`1,pd_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "pd_ = (pd_`1,pd_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (EXPAND "search_error_term_by_idx") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "pd_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null?(pds_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "pd_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (LEMMA "last_first_ET") (("2" (ASSERT) (("2" (INST?) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (GRIND) (("5" (TYPEPRED "pd_") (("5" (EXPAND "ordered_list?") (("5" (EXPAND "lt_idx") (("5" (GRIND) (("5" (HIDE -2) (("5" (EXPAND "first" 2) (("5" (LIFT-IF) (("5" (CASE "NOT null?(pds_)") (("1" (ASSERT) (("1" (CASE "car(pds_)`1 < n") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (LEMMA "last_first_ET") (("6" (ASSERT) (("6" (INST?) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) (("3" (LEMMA "last_first_ET") (("3" (ASSERT) (("3" (INST?) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) NIL NIL)) (|first_noises_recursive_def_TCC1| 0 (|first_noises_recursive_def_TCC1-2| "" 3789916485 ("" (TCC) NIL NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|first_noises_recursive_def| SUBTYPE "affine.empty_noise" "{ol2 | ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].appendable_ol?(affine.first_noises(affine.N, affine.n), ol2)}")) (|first_noises_recursive_def_TCC1-1| |nil| 3620558244 ("" (TCC)) NIL NIL (|first_noises_recursive_def| SUBTYPE "affine.empty_noise" "{ol2 | ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].appendable_ol?(affine.first_noises(affine.N, affine.n), ol2)}"))) (|first_noises_recursive_def_TCC2| 0 (|first_noises_recursive_def_TCC2-2| "" 3789916486 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (/= CONST-DECL "boolean" |notequal| NIL)) SHOSTAK (|first_noises_recursive_def| SUBTYPE "affine.get_noise_by_idx(affine.n, affine.N)" "nzEpsilon")) (|first_noises_recursive_def_TCC2-1| |nil| 3620558244 ("" (TCC)) NIL NIL (|first_noises_recursive_def| SUBTYPE "affine.get_noise_by_idx(affine.n, affine.N)" "nzEpsilon"))) (|first_noises_recursive_def_TCC3| 0 (|first_noises_recursive_def_TCC3-2| "" 3789916486 ("" (TCC) NIL NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|first_noises_recursive_def| SUBTYPE "affine.empty_noise" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.get_noise_by_idx(affine.n, affine.N)), list_adt[[nat, nzEpsilon]].car(ol)))}")) (|first_noises_recursive_def_TCC3-1| |nil| 3620579570 ("" (TCC)) NIL NIL (|first_noises_recursive_def| SUBTYPE "affine.empty_noise" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.get_noise_by_idx(affine.n, affine.N)), list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|first_noises_recursive_def_TCC4| 0 (|first_noises_recursive_def_TCC4-1| |nil| 3620579570 ("" (SKEEP) (("" (EXPAND "appendable_ol?") (("" (FLATTEN) (("" (HIDE 3) (("" (GRIND) (("" (USE "last_first_noises") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|last_first_noises| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|first_noises_recursive_def| SUBTYPE "ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].cons_ol((affine.n, affine.get_noise_by_idx(affine.n, affine.N)), affine.empty_noise)" "{ol2 | ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].appendable_ol?(affine.first_noises(affine.N, affine.n), ol2)}"))) (|first_noises_recursive_def| 0 (|first_noises_recursive_def-6| "" 3789916489 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "N_") (("2" (FLATTEN) (("2" (SKOLEM 1 "ep_") (("2" (SKEEP) (("2" (EXPAND "first_noises" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_noises" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(ep_,
                                                                     append_ol(first_noises(N_, n),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "ep_") (("1" (CASE "ep_`1 = n") (("1" (EXPAND "first_noises" 1 2) (("1" (CASE "first_noises(N_, n) = empty_noise") (("1" (REPLACES -1) (("1" (EXPAND "first" 1 1 :ASSERT? NONE) (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(n, cons_ol(ep_, N_)) = ep_`2") (("1" (CASE "get_noise_by_idx(n, N_) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT ep_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) (("1" (ASSERT :FLUSH? T) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "get_noise_by_idx" 1 :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (BETA) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -3 :ASSERT? NONE) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (ASSERT) (("2" (SPLIT -2) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first_noises") (("2" (EXPAND "first") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (HIDE 2) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (REVEAL 1) (("2" (REPLACES -2) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null_ol?(N_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ep_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (USE "last_first_noises") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (TYPEPRED "ep_") (("5" (EXPAND "ordered_list?") (("5" (FLATTEN) (("5" (CASE "N_ = null") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "lt_idx") (("2" (EXPAND "first_noises" 3) (("2" (EXPAND "first") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (USE "last_first_noises") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (CASE "last_ol(first_noises(N,n))`1 < n") (("1" (GRIND) NIL NIL) ("2" (USE "last_first_noises") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|last_first_noises| FORMULA-DECL NIL |affine| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)) SHOSTAK) (|first_noises_recursive_def-5| "" 3750581960 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "N_") (("2" (FLATTEN) (("2" (SKOLEM 1 "ep_") (("2" (SKEEP) (("2" (EXPAND "first_noises" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_noises" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(ep_,
                                                                     append_ol(first_noises(N_, n),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "ep_") (("1" (CASE "ep_`1 = n") (("1" (EXPAND "first_noises" 1 2) (("1" (CASE "first_noises(N_, n) = empty_noise") (("1" (REPLACES -1) (("1" (EXPAND "first" 1 1 :ASSERT? NONE) (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(n, cons_ol(ep_, N_)) = ep_`2") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, N_) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT ep_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) (("1" (ASSERT :FLUSH? T) (("1" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 2) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "get_noise_by_idx" 1 :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (BETA) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -3 :ASSERT? NONE) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (ASSERT) (("2" (SPLIT -2) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first_noises") (("2" (EXPAND "first") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (HIDE 2) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (REVEAL 1) (("2" (REPLACES -2) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null_ol?(N_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ep_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (USE "last_first_noises") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (TYPEPRED "ep_") (("5" (EXPAND "ordered_list?") (("5" (FLATTEN) (("5" (CASE "N_ = null") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "lt_idx") (("2" (EXPAND "first_noises" 3) (("2" (EXPAND "first") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (USE "last_first_noises") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (CASE "last_ol(first_noises(N,n))`1 < n") (("1" (GRIND) NIL NIL) ("2" (USE "last_first_noises") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|first_noises_recursive_def-4| "" 3629634143 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "N_") (("2" (FLATTEN) (("2" (SKOLEM 1 "ep_") (("2" (SKEEP) (("2" (EXPAND "first_noises" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_noises" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(ep_,
                                                                     append_ol(first_noises(N_, n),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)) =
                                                                     append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                                               IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                               ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                            empty_noise)
                                                                               ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "ep_") (("1" (CASE "ep_`1 = n") (("1" (EXPAND "first_noises" 1 2) (("1" (CASE "first_noises(N_, n) = empty_noise") (("1" (REPLACES -1) (("1" (EXPAND "first" 1 1 :ASSERT? NONE) (("1" (ASSERT) (("1" (CASE "get_noise_by_idx(n, cons_ol(ep_, N_)) = ep_`2") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, N_) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT ep_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "get_noise_by_idx" 1 :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (BETA) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "ordered_list?" -3 :ASSERT? NONE) (("1" (ASSERT) (("1" (SPLIT -3) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (REPLACES -2 :DIR RL) (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (ASSERT) (("2" (SPLIT -2) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (EXPAND "car_ol") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first_noises") (("2" (EXPAND "first") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (HIDE 2) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "lt_idx") (("2" (REVEAL 1) (("2" (REPLACES -2) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null_ol?(N_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ep_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (USE "last_first_noises") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (TYPEPRED "ep_") (("5" (EXPAND "ordered_list?") (("5" (FLATTEN) (("5" (CASE "N_ = null") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "lt_idx") (("2" (EXPAND "first_noises" 3) (("2" (EXPAND "first") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (USE "last_first_noises") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (CASE "last_ol(first_noises(N,n))`1 < n") (("1" (GRIND) NIL NIL) ("2" (USE "last_first_noises") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) NIL NIL) (|first_noises_recursive_def-3| "" 3629580724 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL) ("2" (SKOLEM 1 "N_") (("2" (FLATTEN) (("2" (SKOLEM 1 "ep_") (("2" (SKEEP) (("2" (EXPAND "first_noises" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_noises" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(ep_,
                                                          append_ol(first_noises(N_, n),
                                                                    IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                    ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                 empty_noise)
                                                                    ENDIF)) =
                                                          append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                                    IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                                    ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                                 empty_noise)
                                                                    ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "ep_") (("1" (CASE "ep_`1 = n") (("1" (EXPAND "first_noises" 1 2) (("1" (ASSERT) (("1" (CASE "first_noises(N_, n) = empty_noise") (("1" (REPLACES -1) (("1" (CASE "first[nzEpsilon](cons_ol(ep_, N_), n) = null") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, cons_ol(ep_, N_)) = ep_`2") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, N_) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT ep_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL) ("2" (GRIND) NIL))))))) ("2" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL) ("2" (GRIND) NIL))))))) ("2" (GRIND) (("2" (HIDE 2) (("2" (EXPAND "get_noise_by_idx") (("2" (GRIND) NIL))))))))))) ("2" (HIDE 2) (("2" (GRIND) NIL))))))) ("2" (HIDE 2) (("2" (GRIND) NIL))) ("3" (HIDE 2) (("3" (GRIND) NIL))))))) ("2" (HIDE 2) (("2" (EXPAND "first_noises") (("2" (EXPAND "first") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (EXPAND_OL) NIL) ("2" (FLATTEN) (("2" (HIDE 2) (("2" (EXPAND "ordered_list?" -2 :ASSERT? NONE) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (ASSERT) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (ASSERT) NIL) ("2" (EXPAND "lt_idx") (("2" (REVEAL 1) (("2" (REPLACES -2) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL))) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (CASE "ep_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL))) ("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL))) ("3" (HIDE 2) (("3" (CASE "null_ol?(N_)") (("1" (GRIND) NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ep_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (USE "last_first_noises") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL))) ("5" (HIDE 2) (("5" (TYPEPRED "ep_") (("5" (GRIND) (("5" (EXPAND "first" 2 1) (("5" (ASSERT) (("5" (LIFT-IF) (("5" (ASSERT) (("5" (ASSERT) (("5" (PROP) (("5" (ASSERT) NIL))))))))))))))))))) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (USE "last_first_noises") (("6" (GRIND) NIL))))))) ("7" (GRIND) NIL) ("8" (GRIND) NIL) ("9" (GRIND) NIL))))))))) ("2" (GRIND) NIL))))))))))))))))) ("3" (HIDE 2) (("3" (SKEEP) (("3" (CASE "last_ol(first_noises(N,n))`1 < n") (("1" (GRIND) NIL) ("2" (USE "last_first_noises") (("2" (GRIND) NIL))) ("3" (GRIND) NIL))))))) ("4" (GRIND) NIL) ("5" (GRIND) NIL) ("6" (GRIND) NIL)) NIL) NIL NIL) (|first_noises_recursive_def-2| "" 3620752169 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "N_") (("2" (FLATTEN) (("2" (SKOLEM 1 "ep_") (("2" (SKEEP) (("2" (EXPAND "first_noises" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_noises" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(ep_,
                                               append_ol(first_noises(N_, n),
                                                         IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                         ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                      empty_noise)
                                                         ENDIF)) =
                                               append_ol(cons_ol(ep_,first_noises(N_, n)),
                                                         IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                                         ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                                      empty_noise)
                                                         ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "ep_") (("1" (CASE "ep_`1 = n") (("1" (EXPAND "first_noises" 1 2) (("1" (ASSERT) (("1" (CASE "first_noises(N_, n) = null") (("1" (REPLACES -1) (("1" (CASE "first[nzEpsilon](cons(ep_, N_), n) = null") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, cons(ep_, N_)) = ep_`2") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, N_) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT ep_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (EXPAND "get_noise_by_idx") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first_noises") (("2" (EXPAND "first") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null?(N_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ep_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (USE "last_first_noises") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (TYPEPRED "ep_") (("5" (GRIND) (("5" (EXPAND "first" 2 1) (("5" (ASSERT) (("5" (LIFT-IF) (("5" (ASSERT) (("5" (ASSERT) (("5" (PROP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (USE "last_first_noises") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (CASE "last_ol(first_noises(N,n))`1 < n") (("1" (GRIND) NIL NIL) ("2" (USE "last_first_noises") (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) NIL SHOSTAK) (|first_noises_recursive_def-1| |nil| 3620558269 ("" (INDUCT "N" :NAME "ol_ind_sch[[nat,nzEpsilon],lt_idx[nzEpsilon]]") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 "N_") (("2" (FLATTEN) (("2" (SKOLEM 1 "ep_") (("2" (SKEEP) (("2" (EXPAND "first_noises" 1 1) (("2" (EXPAND "first" 1 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (INST -2 "n") (("1" (EXPAND "first_noises" -2 1) (("1" (REPLACES -2) (("1" (CASE "cons_ol(ep_,
                         append_ol(first_noises(N_, n),
                                   IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                   ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                empty_noise)
                                   ENDIF)) =
                         append_ol(cons_ol(ep_,first_noises(N_, n)),
                                   IF get_noise_by_idx(n, N_) = 0 THEN empty_noise
                                   ELSE cons_ol((n, get_noise_by_idx(n, N_)),
                                                empty_noise)
                                   ENDIF)") (("1" (REPLACES -1) (("1" (TYPEPRED "ep_") (("1" (CASE "ep_`1 = n") (("1" (EXPAND "first_noises" 1 2) (("1" (ASSERT) (("1" (CASE "first_noises(N_, n) = null") (("1" (REPLACES -1) (("1" (CASE "first[nzEpsilon](cons(ep_, N_), n) = null") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, cons(ep_, N_)) = ep_`2") (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(n, N_) = 0") (("1" (REPLACES -1) (("1" (CASE "NOT ep_`2 = 0") (("1" (ASSERT) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_=(ep_`1, ep_`2)") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) (("2" (HIDE 2) (("2" (EXPAND "get_noise_by_idx") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "first_noises") (("2" (EXPAND "first") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "ep_`1 < n") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE 2) (("3" (CASE "null?(N_)") (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (TYPEPRED "ep_") (("2" (EXPAND "appendable_ol?") (("2" (ASSERT) (("2" (PROP) (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol" 5 1) (("2" (HIDE 3 4) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (USE "last_first_noises") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT 1) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE 2) (("5" (TYPEPRED "ep_") (("5" (GRIND) (("5" (EXPAND "first" 2 1) (("5" (ASSERT) (("5" (LIFT-IF) (("5" (ASSERT) (("5" (ASSERT) (("5" (PROP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (FLATTEN) (("6" (USE "last_first_noises") (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("7" (GRIND) NIL NIL) ("8" (GRIND) NIL NIL) ("9" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (CASE "last_ol(first_noises(N,n))`1 < n") (("1" (GRIND) NIL NIL) ("2" (CASE "FORALL (Noise: Noise):

                    null?[[nat, nzEpsilon]](first_noises(Noise, n)) OR last_ol(first_noises(Noise, n))`1 < n") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (INDUCT "Noise") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (SKOLEM 1 ("n_" "N_")) (("3" (FLATTEN) (("3" (USE "ol_suffix[[nat, nzEpsilon], lt_idx[nzEpsilon]]") (("3" (ASSERT) (("3" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (EXPAND "last_ol" 1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (USE "Noise_as_list") (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (SKEEP) (("3" (USE "Noise_as_list") (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL) ("6" (GRIND) NIL NIL)) NIL) NIL NIL)) (|eval_pd_noise_incremental| 0 (|eval_pd_noise_incremental-3| "" 3789916492 ("" (SKEEP) (("" (REWRITES "first_noises_recursive_def") (("" (REWRITES "eval_pd_noise_noise_append") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("1" (INDUCT "pds1_1") (("1" (GRIND) NIL NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKOLEM 1 ("N1" "n1")) (("3" (PROP) (("1" (EXPAND "eval_pd_noise" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (INST?) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA "last_first_noises") (("2" (INST -1 "N" "n") (("2" (EXPAND "first_noises") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|first_noises_recursive_def| FORMULA-DECL NIL |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|last_first_noises| FORMULA-DECL NIL |affine| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|list_induction| FORMULA-DECL NIL |list_adt| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|eval_pd_noise_noise_append| FORMULA-DECL NIL |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|eval_pd_noise_incremental-2| "" 3620468671 ("" (SKEEP) (("" (REWRITES "first_noises_recursive_def") (("" (REWRITES "eval_pd_noise_noise_append") (("1" (ASSERT) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (GENERALIZE-SKOLEM-CONSTANTS) (("1" (INDUCT "pds1_1") (("1" (GRIND) NIL NIL) ("2" (PROP) (("2" (GRIND) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKOLEM 1 ("N1" "n1")) (("3" (PROP) (("1" (EXPAND "eval_pd_noise" 2) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (INST?) (("2" (ASSERT) (("2" (REPLACES -2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST?) (("3" (GRIND) NIL NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (GRIND) (("2" (LEMMA "last_first_noises") (("2" (INST -1 "N" "n") (("2" (EXPAND "first_noises") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|eval_pd_noise_incremental-1| |nil| 3620400909 ("" (SKEEP) (("" (EXPAND "eval_pd_noise" 1 1) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (PROP) (("1" (LEMMA "first_null_prop[Epsilon]") (("1" (INST? -1 ("m" "n")) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (GRIND) (("1" (USE "first_Noise_null_prop") (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN 1) (("2" (SPLIT 2) (("1" (PROP) (("1" (USE "eval_pd_noise_null_prop") (("1" (PROP) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN 1) (("2" (SPLIT 2) (("1" (PROP) (("1" (CASE "n > last_idx(N)") (("1" (USE "first_all_prop[Epsilon]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (USE "first_all_prop[Epsilon]") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (USE "get_noise_by_idx_zero_prop") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ">") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|partial_eval_pd_noise_upper_bound| 0 (|partial_eval_pd_noise_upper_bound-2| "" 3789916494 ("" (SKOLEM 1 ("N" "_" "pds")) (("" (INDUCT "n") (("1" (USE "first_noises_zero_prop") (("1" (REPLACES -1) (("1" (USE "first_zero_prop[nzBaseType]") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (USE "eval_pd_noise_incremental") (("2" (REPLACES -1) (("2" (CASE "abs(eval_pd_noise(pds, first_noises(N, j))) + abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))<=
                         sum_of_modules(first(pds, j)) + abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))") (("1" (CASE "abs(eval_pd_noise(pds, first_noises(N, j)) +
                             search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= abs(eval_pd_noise(pds, first_noises(N, j))) +
                             abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))") (("1" (HIDE -3) (("1" (CASE "sum_of_modules(first(pds, j)) +
                                  abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= sum_of_modules(first(pds, j+1))") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_error_terms_recursive_def") (("2" (EXPAND "first_ET") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) (("1" (USE "sum_of_modules_append") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "append_ol") (("2" (USE "sum_of_modules_append") (("1" (REPLACES -1) (("1" (CASE "abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= abs(search_error_term_by_idx(pds, j))") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "abs_mult") (("2" (REPLACES -1) (("2" (CASE "abs(get_noise_by_idx(j, N)) <= 1") (("1" (LEMMA "both_sides_times_pos_le1") (("1" (INST -1 "abs(search_error_term_by_idx(pds, j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "get_noise_by_idx(j, N)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|first_zero_prop| FORMULA-DECL NIL |indexed_list| |structures|) (|first_noises_zero_prop| FORMULA-DECL NIL |affine| NIL) (|eval_pd_noise_incremental| FORMULA-DECL NIL |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|first_ET| CONST-DECL "ErrorTerms" |affine| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|both_sides_times_pos_le1| FORMULA-DECL NIL |real_props| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (> CONST-DECL "bool" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|pds| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|sum_of_modules_append| FORMULA-DECL NIL |affine| NIL) (|first_error_terms_recursive_def| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK) (|partial_eval_pd_noise_upper_bound-1| |nil| 3620991149 ("" (SKOLEM 1 ("N" "_" "pds")) (("" (INDUCT "n") (("1" (USE "first_noises_zero_prop") (("1" (REPLACES -1) (("1" (USE "first_zero_prop[nzBaseType]") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (USE "eval_pd_noise_incremental") (("2" (REPLACES -1) (("2" (CASE "abs(eval_pd_noise(pds, first_noises(N, j))) + abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))<=
                         sum_of_modules(first(pds, j)) + abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))") (("1" (CASE "abs(eval_pd_noise(pds, first_noises(N, j)) +
                             search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= abs(eval_pd_noise(pds, first_noises(N, j))) +
                             abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N))") (("1" (HIDE -3) (("1" (CASE "sum_of_modules(first(pds, j)) +
                                  abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= sum_of_modules(first(pds, j+1))") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_error_terms_recursive_def") (("2" (EXPAND "first_ET") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) (("1" (USE "sum_of_modules_append") (("1" (GRIND) NIL NIL) ("2" (USE "first_is_ol[nzBaseType]") NIL NIL)) NIL)) NIL) ("2" (EXPAND "append_ol") (("2" (USE "sum_of_modules_append") (("1" (REPLACES -1) (("1" (CASE "abs(search_error_term_by_idx(pds, j) * get_noise_by_idx(j, N)) <= abs(search_error_term_by_idx(pds, j))") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "abs_mult") (("2" (REPLACES -1) (("2" (CASE "abs(get_noise_by_idx(j, N)) <= 1") (("1" (LEMMA "both_sides_times_pos_le1") (("1" (INST -1 "abs(search_error_term_by_idx(pds, j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "get_noise_by_idx(j, N)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (USE "first_is_ol[nzBaseType]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mult_ac_ac_TCC1| 0 (|mult_ac_ac_TCC1-1| |nil| 3619884927 ("" (SKEEP) (("" (EXPAND "appendable_ol?") (("" (FLATTEN) (("" (EXPAND "lt_idx") (("" (EXPAND "add_ET" 3) (("" (LIFT-IF) (("" (SPLIT 3) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "cons_ol") (("2" (EXPAND "first_ol") (("2" (TYPEPRED "newidx") (("2" (USE "mult_pd_pd_last_bound") (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (CASE "NOT null?[[nat, nzBaseType]](pd(Xa1)) AND
       NOT null?[[nat, nzBaseType]](pd(Xa2))") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND ">=") (("1" (HIDE-ALL-BUT (-1 -2 4)) (("1" (NAME-REPLACE "stopRW" "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|mult_pd_pd_last_bound| FORMULA-DECL NIL |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|next_idx_2| CONST-DECL "nat" |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL)) SHOSTAK (|mult_ac_ac| SUBTYPE "affine.add_ET(affine.newidx, number_fields.*(affine.sum_of_modules(pd(affine.Xa1)), affine.sum_of_modules(pd(affine.Xa2))), affine.empty_ErrorTerms)" "{ol2 | ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].appendable_ol?(affine.mult_pd_pd(cv(affine.Xa1), cv(affine.Xa2), pd(affine.Xa1), pd(affine.Xa2)), ol2)}"))) (|mul_noise_value_TCC1| 0 (|mul_noise_value_TCC1-2| "" 3789916496 ("" (TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL)) SHOSTAK (|mul_noise_value| SUBTYPE "affine.som_x_som" "nznum")) (|mul_noise_value_TCC1-1| |nil| 3620056359 ("" (TCC)) NIL NIL (|mul_noise_value| SUBTYPE "affine.som_x_som" "nznum"))) (|som_inc| 0 (|som_inc-2| "" 3789916497 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "first" 1 1) (("2" (CASE "x`1 < 1 + n") (("1" (ASSERT) (("1" (EXPAND "sum_of_modules" 1 1) (("1" (LIFT-IF) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (HIDE 1) (("2" (EXPAND "first" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "cons_ol") (("1" (EXPAND "sum_of_modules" 1 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x`1 = n") (("1" (HIDE -2 1) (("1" (CASE "first(ol, n) = null") (("1" (CASE "search_error_term_by_idx(ol, n) = 0") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (TYPEPRED "x::[nat,BaseType]") (("2" (EXPAND "ordered_list?") (("2" (EXPAND "lt_idx") (("2" (GRIND) (("2" (EXPAND "search_error_term_by_idx") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (TYPEPRED "x::[nat,BaseType]") (("2" (GRIND) (("2" (EXPAND "first") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL)) SHOSTAK) (|som_inc-1| |nil| 3620071050 ("" (SKOLEM 1 ("n" "_")) (("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType], lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "first" 1 1) (("2" (CASE "x`1 < 1 + n") (("1" (ASSERT) (("1" (EXPAND "sum_of_modules" 1 1) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (PROP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "cons_ol") (("2" (HIDE 1) (("2" (EXPAND "first" 1 2) (("2" (LIFT-IF) (("2" (PROP) (("1" (EXPAND "cons_ol") (("1" (EXPAND "sum_of_modules" 1 2) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "x`1 = n") (("1" (HIDE -2 1) (("1" (CASE "first(ol, n) = null") (("1" (CASE "search_error_term_by_idx(ol, n) = 0") (("1" (GRIND) NIL NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (TYPEPRED "x::[nat,BaseType]") (("2" (EXPAND "ordered_list?") (("2" (EXPAND "lt_idx") (("2" (GRIND) (("2" (EXPAND "search_error_term_by_idx") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (TYPEPRED "x::[nat,BaseType]") (("2" (GRIND) (("2" (EXPAND "first") (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|eval_pd_noise_inc_TCC1| 0 (|eval_pd_noise_inc_TCC1-1| |nil| 3620579570 ("" (SKEEP) (("" (USE "first_is_ol[nzEpsilon]") NIL NIL)) NIL) ((|first_is_ol| FORMULA-DECL NIL |indexed_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|eval_pd_noise_inc| SUBTYPE "indexed_list[nzEpsilon].first(affine.N, (number_fields.+)(affine.n, 1))" "Noise"))) (|eval_pd_noise_inc| 0 (|eval_pd_noise_inc-1| |nil| 3621087380 ("" (SKEEP) (("" (LEMMA "eval_pd_noise_incremental") (("" (INST -1 "N" "n" "mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2))") (("" (ASSERT) (("" (EXPAND "first_noises") (("" (REPLACES -1) (("" (ASSERT) (("" (USE "search_ET_in_mult_pd_pd") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|eval_pd_noise_incremental| FORMULA-DECL NIL |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|search_ET_in_mult_pd_pd| FORMULA-DECL NIL |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_ac_noise_inc| 0 (|eval_ac_noise_inc-1| |nil| 3620400423 ("" (SKEEP) (("" (EXPAND "eval_ac_noise") (("" (USE "eval_pd_noise_incremental") NIL NIL)) NIL)) NIL) ((|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|eval_pd_noise_incremental| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|eval_ac_noise_mult_inc| 0 (|eval_ac_noise_mult_inc-1| |nil| 3620400368 ("" (SKEEP) (("" (USE "eval_ac_noise_inc") (("" (REPLACES -1) (("" (USE "eval_ac_noise_inc") (("" (REPLACES -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|eval_ac_noise_inc| FORMULA-DECL NIL |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first_noises| CONST-DECL "Noise" |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|sum_of_modules_decomp| 0 (|sum_of_modules_decomp-1| |nil| 3620400247 ("" (SKEEP) (("" (USE "som_inc") (("" (REPLACES -1) (("" (USE "som_inc") (("" (REPLACES -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|som_inc| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|mul_ac_ac_noise_incremental_bound| 0 (|mul_ac_ac_noise_incremental_bound-2| "" 3789916516 ("" (INDUCT "n") (("1" (SKOLEM 1 ("N" "A" "B")) (("1" (REWRITES "first_zero_prop[[nzBaseType]]") (("1" (REWRITES "first_zero_prop[[nzBaseType]]") (("1" (REWRITES "first_noises_zero_prop") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKOLEM 1 ("N" "A" "B")) (("2" (INST -1 "N" "A" "B") (("2" (REWRITES "sum_of_modules_decomp") (("2" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                  eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                        + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                               + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                               + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                       <=
                                                       sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                               sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                               + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                               + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))") (("1" (HIDE -2) (("1" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                              eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                                          + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          <=
                                                                          sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                           sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                           + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                           + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                   IMPLIES
                                                                   abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                              eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                                          + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) * abs(get_noise_by_idx(j, N))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j)) * abs(get_noise_by_idx(j, N))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) * abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N))
                                                                          <=
                                                                          sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                           sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                           + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                           + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))") (("1" (ASSERT) (("1" (HIDE -2) (("1" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                                             eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                                             - cv(A) * cv(B))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * sum_of_modules(first(pd(A), j)) *
                                                                          abs(search_error_term_by_idx(pd(B), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * sum_of_modules(first(pd(B), j)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                          * abs(search_error_term_by_idx(pd(B), j))
                                                                         <=
                                                                         sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                          sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                  IMPLIES
                                                                  abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                                             eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                                             - cv(A) * cv(B))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(eval_pd_noise(pd(A),first_noises(N, j))) *
                                                                          abs(search_error_term_by_idx(pd(B), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(eval_pd_noise(pd(B),first_noises(N, j))) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                          * abs(search_error_term_by_idx(pd(B), j))
                                                                         <=
                                                                         sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                          sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))") (("1" (ASSERT) (("1" (HIDE -2) (("1" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                         eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                         - cv(A) * cv(B))
                                                     +
                                                     abs(eval_pd_noise(pd(A), first_noises(N, j))) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(B), j))
                                                     +
                                                     abs(eval_pd_noise(pd(B), first_noises(N, j))) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(A), j))
                                                     +
                                                     abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(A), j))
                                                      * abs(search_error_term_by_idx(pd(B), j))
                                                     <=
                                                     abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) +
                                                      sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                      + sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j))
                                                      + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                              IMPLIES
                                              abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                         eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                         - cv(A) * cv(B)
                                                     +
                                                     eval_pd_noise(pd(A), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(B), j)
                                                     +
                                                     eval_pd_noise(pd(B), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(A), j)
                                                     +
                                                     get_noise_by_idx(j, N) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(A), j)
                                                      * search_error_term_by_idx(pd(B), j))
                                                     <=
                                                     abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) +
                                                      sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                      + sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j))
                                                      + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))") (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "minus_add") (("1" (INST -1 "eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j))" "           eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))") (("1" (REPLACES -1) (("1" (LEMMA "identity_add") (("1" (INST -1 "           -eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))") (("1" (CASE "0 = - (search_error_term_by_idx(pd(A), j)*cv(B)+search_error_term_by_idx(pd(B), j)*cv(A)) * get_noise_by_idx(j, N) + search_error_term_by_idx(pd(A), j)*get_noise_by_idx(j, N)*cv(B) + search_error_term_by_idx(pd(B), j)*get_noise_by_idx(j, N)*cv(A)") (("1" (REPLACES -1) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "(-eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)) +
                                                    (-(search_error_term_by_idx(pd(A), j) * cv(B) +
                                                        search_error_term_by_idx(pd(B), j) * cv(A))
                                                      * get_noise_by_idx(j, N)
                                                      + search_error_term_by_idx(pd(A), j) * get_noise_by_idx(j, N) * cv(B)
                                                      + search_error_term_by_idx(pd(B), j) * get_noise_by_idx(j, N) * cv(A))) =
                                       - eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j+1))
                                       + search_error_term_by_idx(pd(A), j) * get_noise_by_idx(j, N) * cv(B)
                                       + search_error_term_by_idx(pd(B), j) * get_noise_by_idx(j, N) * cv(A)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j))
                                           + cv(A) * get_noise_by_idx(j, N) * search_error_term_by_idx(pd(B), j)
                                           + cv(B) * get_noise_by_idx(j, N) * search_error_term_by_idx(pd(A), j)
                                                      +
                                                      eval_pd_noise(pd(A), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(B), j)
                                                      +
                                                      eval_pd_noise(pd(B), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(A), j)
                                                      +
                                                      get_noise_by_idx(j, N) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(A), j)
                                                       * search_error_term_by_idx(pd(B), j)
                                           = eval_ac_noise(A, first_noises(N, 1 +j)) * eval_ac_noise(B, first_noises(N, 1+j))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "eval_ac_noise_mult_inc") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (USE "eval_pd_noise_inc") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("2" (CASE "FORALL(rA,rB,rC,rD,rE,rF:real):
                                                    abs(rA)
                                                           +
                                                           abs(rB) * abs(rC) *
                                                            abs(rD)
                                                           +
                                                           abs(rF) * abs(rC) *
                                                            abs(rE)
                                                           +
                                                           abs(rC) * abs(rC) *
                                                            abs(rE)
                                                            * abs(rD) >= abs( rA + rB * rC * rD + rF * rC * rE + rC * rC * rE * rD)") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND ">=") (("2" (USE "abs_mult") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC*rC" "rD") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC" "rC") (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (REPLACES -1 :DIR RL) (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC*rE" "rF") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC" "rE") (("2" (REPLACES -1 :DIR RL) (("2" (REPLACES -1 :DIR RL) (("2" (LEMMA "abs_mult") (("2" (INST -1 "rB*rC" "rD") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rB" "rC") (("2" (REPLACES -1) (("2" (REPLACES -1 :DIR RL) (("2" (USE "triangle") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("2" (ASSERT) (("2" (USE "partial_eval_pd_noise_upper_bound") (("2" (LEMMA "both_sides_times_pos_le1_imp") (("2" (INST -1 "abs(get_noise_by_idx(j, N)) * abs(search_error_term_by_idx(pd(B), j))" "abs(eval_pd_noise(pd(A), first_noises(N, j)))" "sum_of_modules(first(pd(A), j))") (("2" (ASSERT) (("2" (HIDE -2) (("2" (LEMMA "partial_eval_pd_noise_upper_bound") (("2" (INST? -1 ("pds" "pd(B)")) (("2" (LEMMA "both_sides_times_pos_le1_imp") (("2" (INST -1 "abs(get_noise_by_idx(j, N)) * abs(search_error_term_by_idx(pd(A), j))" "abs(eval_pd_noise(pd(B), first_noises(N, j)))" "sum_of_modules(first(pd(B), j))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("2" (CASE "abs(get_noise_by_idx(j, N)) <= 1") (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "abs(get_noise_by_idx(j, N)) *
                           (abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_is_ol[nzBaseType]") (("2" (LEMMA "sum_of_modules_nnreal") (("2" (INST -1 "first(pd(B), j)") (("2" (EXPAND ">=") (("2" (USE "pos_times_le") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "sum_of_modules_nnreal") (("2" (INST -1 "first(pd(A), j)") (("1" (EXPAND ">=") (("1" (USE "pos_times_le") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "first_is_ol[nzBaseType]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "get_noise_by_idx(j, N)") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITES "both_sides_plus_le1") (("2" (REWRITES "both_sides_plus_le1") (("2" (REWRITES "both_sides_plus_le1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|search_error_term_by_idx| DEF-DECL "BaseType" |affine| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|both_sides_times_pos_le1_imp| FORMULA-DECL NIL |extra_real_props| NIL) (|partial_eval_pd_noise_upper_bound| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|identity_add| FORMULA-DECL NIL |number_fields| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|eval_pd_noise_inc| FORMULA-DECL NIL |affine| NIL) (|eval_ac_noise_mult_inc| FORMULA-DECL NIL |affine| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_add| FORMULA-DECL NIL |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|triangle| FORMULA-DECL NIL |real_props| NIL) (|abs_mult| FORMULA-DECL NIL |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|first_is_ol| FORMULA-DECL NIL |indexed_list| |structures|) (|pos_times_le| FORMULA-DECL NIL |real_props| NIL) (|sum_of_modules_nnreal| JUDGEMENT-TCC NIL |affine| NIL) (A SKOLEM-CONST-DECL "AffineCombination" |affine| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (B SKOLEM-CONST-DECL "AffineCombination" |affine| NIL) (|both_sides_plus_le1| FORMULA-DECL NIL |real_props| NIL) (|sum_of_modules_decomp| FORMULA-DECL NIL |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|first_noises_zero_prop| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|first_zero_prop| FORMULA-DECL NIL |indexed_list| |structures|) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) SHOSTAK) (|mul_ac_ac_noise_incremental_bound-1| |nil| 3620382968 ("" (INDUCT "n") (("1" (SKOLEM 1 ("N" "A" "B")) (("1" (REWRITES "first_zero_prop[[nzBaseType]]") (("1" (REWRITES "first_zero_prop[[nzBaseType]]") (("1" (REWRITES "first_noises_zero_prop") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKOLEM 1 ("N" "A" "B")) (("2" (INST -1 "N" "A" "B") (("2" (REWRITES "sum_of_modules_decomp") (("2" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                  eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                        + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                               + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                               + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                       <=
                                                       sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                               sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                               + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                               + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))") (("1" (HIDE -2) (("1" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                              eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                                          + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          <=
                                                                          sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                           sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                           + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                           + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                   IMPLIES
                                                                   abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) - cv(A) * cv(B) -
                                                                              eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)))
                                                                          + sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) * abs(get_noise_by_idx(j, N))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j)) * abs(get_noise_by_idx(j, N))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) * abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N))
                                                                          <=
                                                                          sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                           sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                           + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                           + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))") (("1" (ASSERT) (("1" (HIDE -2) (("1" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                                             eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                                             - cv(A) * cv(B))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * sum_of_modules(first(pd(A), j)) *
                                                                          abs(search_error_term_by_idx(pd(B), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * sum_of_modules(first(pd(B), j)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                          * abs(search_error_term_by_idx(pd(B), j))
                                                                         <=
                                                                         sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                          sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                  IMPLIES
                                                                  abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                                             eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                                             - cv(A) * cv(B))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(eval_pd_noise(pd(A),first_noises(N, j))) *
                                                                          abs(search_error_term_by_idx(pd(B), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(eval_pd_noise(pd(B),first_noises(N, j))) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                         +
                                                                         abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                                          abs(search_error_term_by_idx(pd(A), j))
                                                                          * abs(search_error_term_by_idx(pd(B), j))
                                                                         <=
                                                                         sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j)) +
                                                                          sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                                          + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                                                          + abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))") (("1" (ASSERT) (("1" (HIDE -2) (("1" (CASE "abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                         eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                         - cv(A) * cv(B))
                                                     +
                                                     abs(eval_pd_noise(pd(A), first_noises(N, j))) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(B), j))
                                                     +
                                                     abs(eval_pd_noise(pd(B), first_noises(N, j))) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(A), j))
                                                     +
                                                     abs(get_noise_by_idx(j, N)) * abs(get_noise_by_idx(j, N)) *
                                                      abs(search_error_term_by_idx(pd(A), j))
                                                      * abs(search_error_term_by_idx(pd(B), j))
                                                     <=
                                                     abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) +
                                                      sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                      + sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j))
                                                      + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))
                                              IMPLIES
                                              abs(eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j)) -
                                                         eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))
                                                         - cv(A) * cv(B)
                                                     +
                                                     eval_pd_noise(pd(A), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(B), j)
                                                     +
                                                     eval_pd_noise(pd(B), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(A), j)
                                                     +
                                                     get_noise_by_idx(j, N) * get_noise_by_idx(j, N) *
                                                      search_error_term_by_idx(pd(A), j)
                                                      * search_error_term_by_idx(pd(B), j))
                                                     <=
                                                     abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)) +
                                                      sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))
                                                      + sum_of_modules(first(pd(A), j)) * sum_of_modules(first(pd(B), j))
                                                      + sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))") (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "minus_add") (("1" (INST -1 "eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j))" "           eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))") (("1" (REPLACES -1) (("1" (LEMMA "identity_add") (("1" (INST -1 "           -eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j))") (("1" (CASE "0 = - (search_error_term_by_idx(pd(A), j)*cv(B)+search_error_term_by_idx(pd(B), j)*cv(A)) * get_noise_by_idx(j, N) + search_error_term_by_idx(pd(A), j)*get_noise_by_idx(j, N)*cv(B) + search_error_term_by_idx(pd(B), j)*get_noise_by_idx(j, N)*cv(A)") (("1" (REPLACES -1) (("1" (REPLACES -1 :DIR RL) (("1" (CASE "(-eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j)) +
                                                    (-(search_error_term_by_idx(pd(A), j) * cv(B) +
                                                        search_error_term_by_idx(pd(B), j) * cv(A))
                                                      * get_noise_by_idx(j, N)
                                                      + search_error_term_by_idx(pd(A), j) * get_noise_by_idx(j, N) * cv(B)
                                                      + search_error_term_by_idx(pd(B), j) * get_noise_by_idx(j, N) * cv(A))) =
                                       - eval_pd_noise(mult_pd_pd(cv(A), cv(B), pd(A), pd(B)), first_noises(N, j+1))
                                       + search_error_term_by_idx(pd(A), j) * get_noise_by_idx(j, N) * cv(B)
                                       + search_error_term_by_idx(pd(B), j) * get_noise_by_idx(j, N) * cv(A)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "eval_ac_noise(A, first_noises(N, j)) * eval_ac_noise(B, first_noises(N, j))
                                           + cv(A) * get_noise_by_idx(j, N) * search_error_term_by_idx(pd(B), j)
                                           + cv(B) * get_noise_by_idx(j, N) * search_error_term_by_idx(pd(A), j)
                                                      +
                                                      eval_pd_noise(pd(A), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(B), j)
                                                      +
                                                      eval_pd_noise(pd(B), first_noises(N, j)) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(A), j)
                                                      +
                                                      get_noise_by_idx(j, N) * get_noise_by_idx(j, N) *
                                                       search_error_term_by_idx(pd(A), j)
                                                       * search_error_term_by_idx(pd(B), j)
                                           = eval_ac_noise(A, first_noises(N, 1 +j)) * eval_ac_noise(B, first_noises(N, 1+j))") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "eval_ac_noise_mult_inc") (("2" (REPLACES -1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (USE "eval_pd_noise_inc") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("2" (CASE "FORALL(rA,rB,rC,rD,rE,rF:real):
                                                    abs(rA)
                                                           +
                                                           abs(rB) * abs(rC) *
                                                            abs(rD)
                                                           +
                                                           abs(rF) * abs(rC) *
                                                            abs(rE)
                                                           +
                                                           abs(rC) * abs(rC) *
                                                            abs(rE)
                                                            * abs(rD) >= abs( rA + rB * rC * rD + rF * rC * rE + rC * rC * rE * rD)") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP) (("2" (EXPAND ">=") (("2" (USE "abs_mult") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC*rC" "rD") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC" "rC") (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (REPLACES -1) (("2" (REPLACES -1 :DIR RL) (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC*rE" "rF") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rC" "rE") (("2" (REPLACES -1 :DIR RL) (("2" (REPLACES -1 :DIR RL) (("2" (LEMMA "abs_mult") (("2" (INST -1 "rB*rC" "rD") (("2" (LEMMA "abs_mult") (("2" (INST -1 "rB" "rC") (("2" (REPLACES -1) (("2" (REPLACES -1 :DIR RL) (("2" (USE "triangle") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("2" (ASSERT) (("2" (USE "partial_eval_pd_noise_upper_bound") (("2" (LEMMA "both_sides_times_pos_le1_imp") (("2" (INST -1 "abs(get_noise_by_idx(j, N)) * abs(search_error_term_by_idx(pd(B), j))" "abs(eval_pd_noise(pd(A), first_noises(N, j)))" "sum_of_modules(first(pd(A), j))") (("2" (ASSERT) (("2" (HIDE -2) (("2" (LEMMA "partial_eval_pd_noise_upper_bound") (("2" (INST? -1 ("pds" "pd(B)")) (("2" (LEMMA "both_sides_times_pos_le1_imp") (("2" (INST -1 "abs(get_noise_by_idx(j, N)) * abs(search_error_term_by_idx(pd(A), j))" "abs(eval_pd_noise(pd(B), first_noises(N, j)))" "sum_of_modules(first(pd(B), j))") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (PROP) (("2" (CASE "abs(get_noise_by_idx(j, N)) <= 1") (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "abs(get_noise_by_idx(j, N)) *
                           (abs(search_error_term_by_idx(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j)))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "sum_of_modules(first(pd(A), j)) * abs(search_error_term_by_idx(pd(B), j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "both_sides_times_pos_le1_imp") (("1" (INST -1 "sum_of_modules(first(pd(B), j)) * abs(search_error_term_by_idx(pd(A), j))" "abs(get_noise_by_idx(j, N))" "1") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_is_ol[nzBaseType]") (("2" (LEMMA "sum_of_modules_nnreal") (("2" (INST -1 "first(pd(B), j)") (("2" (EXPAND ">=") (("2" (USE "pos_times_le") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "sum_of_modules_nnreal") (("2" (INST -1 "first(pd(A), j)") (("1" (EXPAND ">=") (("1" (USE "pos_times_le") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (USE "first_is_ol[nzBaseType]") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "get_noise_by_idx(j, N)") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITES "both_sides_plus_le1") (("2" (REWRITES "both_sides_plus_le1") (("2" (REWRITES "both_sides_plus_le1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|mul_noise_value_is_Epsilon| 0 (|mul_noise_value_is_Epsilon-3| "" 3620572796 ("" (SKEEP) (("" (EXPAND "mul_noise_value") (("" (LEMMA "mul_ac_ac_noise_incremental_bound") (("" (INST? -1 ("n" "max(last_idx(N),max(last_idx(pd(Xa1)),last_idx(pd(Xa2))))+1")) (("1" (INST -1 "N" "Xa1" "Xa2") (("1" (CASE "first_noises(N,
                                                              max(last_idx(N),
                                                                  max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = N") (("1" (REPLACES -1) (("1" (CASE "first(pd(Xa1),
                                                                      max(last_idx(N),
                                                                          max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa1)") (("1" (REPLACES -1) (("1" (CASE "first(pd(Xa2),
                                                                              max(last_idx(N),
                                                                                  max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa2)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "FORALL (x,y:real): abs(x) <= y  IMPLIES x >= -y") (("1" (INST?) (("1" (PROP) (("1" (HIDE -2) (("1" (HIDE 1) (("1" (EXPAND ">=") (("1" (USE "div_mult_pos_neg_le2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (HIDE 1) (("2" (CASE "FORALL (x,y:real): abs(x) <= y  IMPLIES x <= y") (("1" (INST?) (("1" (PROP) (("1" (HIDE 1) (("1" (USE "div_mult_pos_neg_le1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_all_prop[nzBaseType]") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_all_prop[nzBaseType]") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "first_noises") (("2" (USE "first_all_prop[nzEpsilon]") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mul_noise_value| CONST-DECL "real" |affine| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Xa2| SKOLEM-CONST-DECL "AffineCombination" |affine| NIL) (|Xa1| SKOLEM-CONST-DECL "AffineCombination" |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (N SKOLEM-CONST-DECL "Noise" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|div_mult_pos_neg_le1| FORMULA-DECL NIL |extra_real_props| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL) (|div_mult_pos_neg_le2| FORMULA-DECL NIL |extra_real_props| NIL) (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL) (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|first_all_prop| FORMULA-DECL NIL |indexed_list| |structures|) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|mul_ac_ac_noise_incremental_bound| FORMULA-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|mul_noise_value_is_Epsilon| SUBTYPE "affine.mul_noise_value(affine.Xa1, affine.Xa2, affine.N)" "Epsilon")) (|mul_noise_value_is_Epsilon-2| |nil| 3620148486 ("" (SKEEP) (("" (EXPAND "mul_noise_value") (("" (LEMMA "mul_ac_ac_noise_incremental_bound") (("" (INST? -1 ("n" "max(last_idx(N),max(last_idx(pd(Xa1)),last_idx(pd(Xa2))))+1")) (("1" (INST -1 "N" "Xa1" "Xa2") (("1" (CASE "first(N,
                                            max(last_idx(N),
                                                max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = N") (("1" (REPLACES -1) (("1" (CASE "first(pd(Xa1),
                                                max(last_idx(N),
                                                    max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa1)") (("1" (REPLACES -1) (("1" (CASE "first(pd(Xa2),
                                                    max(last_idx(N),
                                                        max(last_idx(pd(Xa1)), last_idx(pd(Xa2))))+1)  = pd(Xa2)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (PROP) (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (CASE "FORALL (x,y:real): abs(x) <= y  IMPLIES x >= -y") (("1" (INST?) (("1" (PROP) (("1" (HIDE -2) (("1" (HIDE 1) (("1" (EXPAND ">=") (("1" (USE "div_mult_pos_neg_le2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) (("2" (GROUND) (("2" (HIDE 1) (("2" (CASE "FORALL (x,y:real): abs(x) <= y  IMPLIES x <= y") (("1" (INST?) (("1" (PROP) (("1" (HIDE 1) (("1" (USE "div_mult_pos_neg_le1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_all_prop[real]") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_all_prop[real]") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (USE "first_all_prop[Epsilon]") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|mul_noise_value_is_Epsilon| SUBTYPE "affine.mul_noise_value(affine.Xa1, affine.Xa2, affine.N)" "Epsilon")) (|mul_noise_value_is_Epsilon-1| |nil| 3620056359 ("" (SKEEP) (("" (LEMMA "mul_noise_value_bounds") (("" (INST -1 "N" "Xa1" "Xa2") (("" (GRIND) (("1" (HIDE -2) (("1" (REWRITE "div_mult_pos_le1") NIL NIL)) NIL) ("2" (HIDE -1) (("2" (EXPAND ">=") (("2" (REWRITE "div_mult_pos_le2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|mul_noise_value_is_Epsilon| SUBTYPE "affine.mul_noise_value(affine.Xa1, affine.Xa2, affine.N)" "Epsilon"))) (|som_zero| 0 (|som_zero-1| |nil| 3621350166 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKOLEM 1 "x_") (("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|nonzero_abs_is_pos| APPLICATION-JUDGEMENT "{y: posreal | y >= x}" |real_defs| NIL) (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal" |real_types| NIL) (|abs| CONST-DECL "{n: nonneg_real | n >= m AND n >= -m}" |real_defs| NIL) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL)) SHOSTAK)) (|epn_aET__nnull_pds_TCC1| 0 (|epn_aET__nnull_pds_TCC1-2| "" 3789916523 ("" (TCC) NIL NIL) ((/= CONST-DECL "boolean" |notequal| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) SHOSTAK (|epn_aET__nnull_pds| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.x), list_adt[[nat, nzBaseType]].car(ol)))}")) (|epn_aET__nnull_pds_TCC1-1| |nil| 3621356082 ("" (TCC)) NIL NIL (|epn_aET__nnull_pds| SUBTYPE "affine.empty_ErrorTerms" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.n, affine.x), list_adt[[nat, nzBaseType]].car(ol)))}"))) (|epn_aET__nnull_pds| 0 (|epn_aET__nnull_pds-1| |nil| 3621360085 ("" (SKEEP) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "add_ET") (("1" (ASSERT) (("1" (EXPAND "null_ol?") (("1" (CASE "null?[[nat, nzBaseType]](pds)") (("1" (HIDE -2) (("1" (ASSERT) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (LEMMA "eval_pd_noise_append") (("1" (INST -1 "N" "cons_ol((n,x),null)" "pds") (("1" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|eval_pd_noise_append| FORMULA-DECL NIL |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|epn_mpp_null_pds1| 0 (|epn_mpp_null_pds1-2| "" 3789916526 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "mult_pd_pd" 1) (("" (EXPAND "null_ol") (("" (EXPAND "null_ol?") (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "pds!1=null") (("1" (HIDE -3) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (LEMMA "epn_aET__nnull_pds") (("2" (INST -1 "N!1" "car(pds!1)`1" "mult_pd_pd(x1, x2, null, cdr(pds!1))" "car(pds!1)`2 * x1") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2 * x1), null)") (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car(pds!1)`1, N!1) * (car(pds!1)`2 * x1) +
                              x1 * eval_pd_noise(cdr(pds!1), N!1) = x1 * (get_noise_by_idx(car(pds!1)`1, N!1) * car(pds!1)`2  +
                              eval_pd_noise(cdr(pds!1), N!1))") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (LEMMA "eval_pd_noise_append") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)" "cdr_ol(pds!1)") (("1" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "append_ol") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (CASE "cons((car(pds!1)`1, car(pds!1)`2), cdr(pds!1)) = pds!1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (USE "list_cons_eta[[nat,nzBaseType]]") (("2" (REPLACES -1 :DIR RL) (("2" (ASSERT) (("2" (CASE "(car(pds!1)`1, car(pds!1)`2) = car(pds!1)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol") (("2" (TYPEPRED "pds!1") (("2" (HIDE-ALL-BUT (2 -1 5 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "mult_pd_pd_preserves_order_2") (("1" (INST -1 "x1" "x2" "pds!1") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "pds!1") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|mult_pd_pd_preserves_order_2| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|eval_pd_noise_append| FORMULA-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pds!1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epn_aET__nnull_pds| FORMULA-DECL NIL |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|epn_mpp_null_pds1-1| |nil| 3621345925 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("1" (GENERALIZE "L" "L") (("1" (INDUCT "L" :NAME "NAT_induction") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "mult_pd_pd" 1) (("1" (EXPAND "null_ol") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "pds!1=null") (("1" (HIDE -3) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (LEMMA "epn_aET__nnull_pds") (("2" (INST -1 "N!1" "car(pds!1)`1" "mult_pd_pd(x1, x2, null, cdr(pds!1))" "car(pds!1)`2 * x1") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2 * x1), null)") (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car(pds!1)`1, N!1) * (car(pds!1)`2 * x1) +
                              x1 * eval_pd_noise(cdr(pds!1), N!1) = x1 * (get_noise_by_idx(car(pds!1)`1, N!1) * car(pds!1)`2  +
                              eval_pd_noise(cdr(pds!1), N!1))") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "eval_pd_noise_append") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)" "cdr_ol(pds!1)") (("1" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "append_ol") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (CASE "cons((car(pds!1)`1, car(pds!1)`2), cdr(pds!1)) = pds!1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (USE "list_cons_eta[[nat,nzBaseType]]") (("2" (REPLACES -1 :DIR RL) (("2" (ASSERT) (("2" (CASE "(car(pds!1)`1, car(pds!1)`2) = car(pds!1)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol") (("2" (TYPEPRED "pds!1") (("2" (HIDE-ALL-BUT (2 -1 5 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "mult_pd_pd_preserves_order_2") (("1" (INST -1 "x1" "x2" "pds!1") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "pds!1") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|epn_mpp_null_pds2| 0 (|epn_mpp_null_pds2-2| "" 3789916528 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "mult_pd_pd" 1) (("" (EXPAND "null_ol") (("" (EXPAND "null_ol?") (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "pds!1=null") (("1" (HIDE -3) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (LEMMA "epn_aET__nnull_pds") (("2" (INST -1 "N!1" "car(pds!1)`1" "mult_pd_pd(x1, x2,cdr(pds!1),null)" "car(pds!1)`2 * x2") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2 * x2), null)") (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car(pds!1)`1, N!1) * (car(pds!1)`2 * x2) +
                                                                            x2 * eval_pd_noise(cdr(pds!1), N!1) = x2 * (get_noise_by_idx(car(pds!1)`1, N!1) * car(pds!1)`2  +
                                                                            eval_pd_noise(cdr(pds!1), N!1))") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (LEMMA "eval_pd_noise_append") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)" "cdr_ol(pds!1)") (("1" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "append_ol") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (CASE "cons((car(pds!1)`1, car(pds!1)`2), cdr(pds!1)) = pds!1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (USE "list_cons_eta[[nat,nzBaseType]]") (("2" (REPLACES -1 :DIR RL) (("2" (ASSERT) (("2" (CASE "(car(pds!1)`1, car(pds!1)`2) = car(pds!1)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol") (("2" (TYPEPRED "pds!1") (("2" (HIDE-ALL-BUT (2 -1 5 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "mult_pd_pd_preserves_order_1") (("1" (INST -1 "x1" "x2" "pds!1") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "pds!1") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|mult_pd_pd_preserves_order_1| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|list_cons_eta| FORMULA-DECL NIL |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|eval_pd_noise_append| FORMULA-DECL NIL |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|pds!1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|epn_aET__nnull_pds| FORMULA-DECL NIL |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|epn_mpp_null_pds2-1| |nil| 3621359750 ("" (SKEEP) (("" (NAME "L" "length(pds)+length(N)") (("" (GENERALIZE "N" "N") (("" (GENERALIZE "pds" "pds") (("1" (GENERALIZE "L" "L") (("1" (INDUCT "L" :NAME "NAT_induction") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "mult_pd_pd" 1) (("1" (EXPAND "null_ol") (("1" (EXPAND "null_ol?") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE-REPLACE "pds!1=null") (("1" (HIDE -3) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (LEMMA "epn_aET__nnull_pds") (("2" (INST -1 "N!1" "car(pds!1)`1" "mult_pd_pd(x1, x2,cdr(pds!1),null)" "car(pds!1)`2 * x2") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2 * x2), null)") (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (REPLACES -1) (("1" (CASE "get_noise_by_idx(car(pds!1)`1, N!1) * (car(pds!1)`2 * x2) +
                                                                            x2 * eval_pd_noise(cdr(pds!1), N!1) = x2 * (get_noise_by_idx(car(pds!1)`1, N!1) * car(pds!1)`2  +
                                                                            eval_pd_noise(cdr(pds!1), N!1))") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "eval_pd_noise_append") (("1" (INST -1 "N!1" "cons_ol((car(pds!1)`1, car(pds!1)`2), null)" "cdr_ol(pds!1)") (("1" (SPLIT -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "append_ol") (("1" (EXPAND "append") (("1" (EXPAND "append") (("1" (CASE "cons((car(pds!1)`1, car(pds!1)`2), cdr(pds!1)) = pds!1") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 4)) (("2" (USE "list_cons_eta[[nat,nzBaseType]]") (("2" (REPLACES -1 :DIR RL) (("2" (ASSERT) (("2" (CASE "(car(pds!1)`1, car(pds!1)`2) = car(pds!1)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (EXPAND "lt_idx") (("2" (EXPAND "last_ol") (("2" (TYPEPRED "pds!1") (("2" (HIDE-ALL-BUT (2 -1 5 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 4)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "mult_pd_pd_preserves_order_1") (("1" (INST -1 "x1" "x2" "pds!1") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "/=") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds!1)" "N!1") (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N!1" "pds!1") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|epn_over_last_is_zero_TCC1| 0 (|epn_over_last_is_zero_TCC1-1| |nil| 3621707863 ("" (SUBTYPE-TCC) NIL NIL) ((|empty_noise| CONST-DECL "Noise" |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|)) NIL (|epn_over_last_is_zero| SUBTYPE "affine.empty_noise" "{ol | booleans.OR(list_adt[[nat, nzEpsilon]].null?(ol), indexed_list[nzEpsilon].lt_idx((affine.n, affine.nze), list_adt[[nat, nzEpsilon]].car(ol)))}"))) (|epn_over_last_is_zero| 0 (|epn_over_last_is_zero-1| |nil| 3621707863 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) NIL NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "eval_pd_noise" 1) (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (EXPAND "car_ol") (("2" (EXPAND "cdr_ol") (("2" (EXPAND "last_idx") (("2" (EXPAND "last_ol" -2) (("2" (LIFT-IF) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (CASE "x`1 < n") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1 2)) (("2" (TYPEPRED "x::[nat,nzBaseType]") (("2" (GRIND) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ((|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|epn_up_to_last_idx_pd_is_zero_TCC1| 0 (|epn_up_to_last_idx_pd_is_zero_TCC1-1| |nil| 3621710151 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|)) NIL (|epn_up_to_last_idx_pd_is_zero| SUBTYPE "(number_fields.+)(1, indexed_list[nzBaseType].last_idx(affine.pds))" "nat"))) (|epn_up_to_last_idx_pd_is_zero| 0 (|epn_up_to_last_idx_pd_is_zero-1| |nil| 3621710151 ("" (INDUCT "pds" :NAME "ol_ind_sch[[nat,nzBaseType],lt_idx[nzBaseType]]") (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "cdr_ol") (("2" (LEMMA "eval_pd_noise_rec_pds_def") (("2" (INST -1 "first_noises(N, 1 + last_idx(cons(x, ol)))" "cons(x, ol)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (CASE "null_ol?(ol)") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 2 1) (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" 2 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "gnbi_lt_first_idem") (("1" (INST -1 "N" "1+x`1" "x`1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "last_idx(ol) = last_idx(cons(x, ol))") (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "car_ol") (("1" (INST -1 "N") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (TYPEPRED "x::[nat,nzBaseType]") (("1" (USE "gnbi_lt_first_idem") (("1" (ASSERT) (("1" (EXPAND "ordered_list?") (("1" (EXPAND "null_ol?") (("1" (ASSERT) (("1" (EXPAND "lt_idx") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "last_idx" 1 2) (("2" (HIDE-ALL-BUT (1 2 3)) (("2" (EXPAND "last_idx") (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "last_ol" 2 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|ol| SKOLEM-CONST-DECL "ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]" |affine| NIL) (|x| SKOLEM-CONST-DECL "{x: [nat, nzBaseType] |
   ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]](cons(x, ol))}" |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gnbi_lt_first_idem| FORMULA-DECL NIL |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|ol_ind_sch| FORMULA-DECL NIL |ordered_list| |structures|) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) SHOSTAK)) (|epn_trim_noise| 0 (|epn_trim_noise-1| |nil| 3621769055 ("" (INDUCT "n") (("1" (SKEEP) (("1" (EXPAND "last_idx") (("1" (LIFT-IF) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (TYPEPRED "last_ol(pds)`1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "eval_pd_noise_rec_pds_def") (("2" (INST? -1 :WHERE 1) (("2" (REPLACES -1) (("2" (EXPAND_OL) (("2" (ASSERT) (("2" (USE "eval_pd_noise_rec_pds_def") (("2" (REPLACES -1) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "last_idx(pds) < j") (("1" (INST -2 "N" "pds") (("1" (ASSERT) (("1" (HIDE -3) (("1" (USE "first_noises_recursive_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_noise_append") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (REPLACES -2) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "eval_pd_noise") (("1" (EXPAND_OL) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (USE "epn_over_last_is_zero") (("1" (ASSERT) NIL NIL) ("2" (EXPAND "/=") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (LIFT-IF) (("2" (EXPAND "empty_noise") (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "lt_idx") (("2" (EXPAND "first_ol") (("2" (EXPAND "cons_ol") (("2" (USE "last_up_to_idx[nzEpsilon]") (("2" (EXPAND "first_noises") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL) ("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "last_idx(pds) = j") (("1" (HIDE -2) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (REPLACES -1 :DIR RL) (("1" (USE "epn_up_to_last_idx_pd_is_zero") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|first_noises_recursive_def| FORMULA-DECL NIL |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|eval_pd_noise_noise_append| FORMULA-DECL NIL |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (N SKOLEM-CONST-DECL "Noise" |affine| NIL) (|last_up_to_idx| FORMULA-DECL NIL |indexed_list| |structures|) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|epn_over_last_is_zero| FORMULA-DECL NIL |affine| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|epn_up_to_last_idx_pd_is_zero| FORMULA-DECL NIL |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|epn_mult_first| 0 (|epn_mult_first-1| |nil| 3621713355 ("" (SKOLEM 1 ("_" "_" "pds1_" "pds2_" "_" "_")) (("" (NAME "L" "length(pds1_) + length(pds2_)") (("" (GENERALIZE "pds1_" "pds1") (("" (GENERALIZE "pds2_" "pds2") (("" (GENERALIZE "L" "L") (("" (INDUCT "L" :NAME "NAT_induction") (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (EXPAND "mult_pd_pd" 1 1) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 1) (("1" (ASSERT) (("1" (EXPAND "null_ol") (("1" (HIDE -3) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (3 2 -5)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 1) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (HIDE -3) (("1" (USE "epn_trim_noise") (("1" (ASSERT) (("1" (EXPAND "last_idx" 1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "last_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (USE "olidx_car_last[nzBaseType]") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (1 -6 4 -1)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (REPLACES -1) (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (LEMMA "eval_pd_noise_rec_pds_def") (("1" (INST -1 "N" "cons_ol((car(pds2)`1, car(pds2)`2 * x1),
                           mult_pd_pd(x1, x2, pds1, cdr(pds2)))") (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (EXPAND "cdr_ol") (("1" (SPLIT -3) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (1 -5 5)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -5 5)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "lt_idx") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "/=") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mult_pd_pd" 2 2) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (INST -2 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (6 -4 5)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2 6)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (SPLIT -3) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (EXPAND "add_ET") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "empty_ErrorTerms") (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -5 4)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (SPLIT -3) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -4 5)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mult_pd_pd" 2 2) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -2 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (SPLIT -3) (("1" (REPLACES -1) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (EXPAND "add_ET") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (HIDE -3) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -4 5)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "car_ol") (("1" (EXPAND "cdr_ol") (("1" (INST -3 "j-2") (("1" (ASSERT) (("1" (INST -3 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (SPLIT -3) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -4 6)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mult_pd_pd" 2 2) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-2") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -2 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 1) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (HIDE -3) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "cons_ol") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (GRIND) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -4 6)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -3 "j-1") (("1" (ASSERT) (("1" (INST -3 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -3 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (SPLIT -3) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "gnbi_lt_first_idem") (("1" (GRIND) (("1" (HIDE-ALL-BUT (1 -4 7)) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "mult_pd_pd" 2 2) (("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "pds2" "cdr_ol(pds1)") (("1" (ASSERT) (("1" (INST -2 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (8 7 -3)) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (INST -2 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (HIDE-ALL-BUT (6 -4 4)) (("1" (USE "olidx_car_last[nzBaseType]") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "mult_pd_pd" 1) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (ASSERT) (("1" (EXPAND "empty_ErrorTerms") (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -4 6)) (("2" (GRIND) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "mult_pd_pd" 1 2) (("1" (ASSERT) (("1" (EXPAND "add_ET") (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (USE "eval_pd_noise_rec_pds_def") (("1" (REPLACES -1) (("1" (EXPAND "null_ol?") (("1" (EXPAND "cons_ol") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (INST -2 "j-1") (("1" (ASSERT) (("1" (INST -2 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (INST -2 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (SPLIT -2) (("1" (EXPAND "cdr_ol") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (USE "gnbi_lt_first_idem") (("1" (SPLIT -1) (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (1 -4 6)) (("2" (USE "olidx_car_last[nzBaseType]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -4 7)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -1 "j-1") (("1" (ASSERT) (("1" (INST -1 "cdr_ol(pds2)" "pds1") (("1" (ASSERT) (("1" (INST -1 "N" "n" "x1" "x2") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (REPLACES -1) (("1" (EXPAND "mult_pd_pd" 2 2) (("1" (EXPAND "add_ET") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -3 8)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|length_cdr_ol| FORMULA-DECL NIL |ordered_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|epn_trim_noise| FORMULA-DECL NIL |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|olidx_car_last| FORMULA-DECL NIL |indexed_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|x1| SKOLEM-CONST-DECL "BaseType" |affine| NIL) (|pds2| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|pds1| SKOLEM-CONST-DECL "ErrorTerms" |affine| NIL) (|x2| SKOLEM-CONST-DECL "BaseType" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|gnbi_lt_first_idem| FORMULA-DECL NIL |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|mpp_first_N| 0 (|mpp_first_N-1| |nil| 3621704720 ("" (SKEEP) (("" (EXPAND "mul_noise_value") (("" (LIFT-IF) (("" (SPLIT 1) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND ">=") (("2" (EXPAND "next_idx_2") (("2" (EXPAND "next_idx") (("2" (CASE "last_idx(pd(Xa1))< n AND last_idx(pd(Xa2)) < n") (("1" (HIDE -2) (("1" (FLATTEN) (("1" (CASE "eval_ac_noise(Xa1, first_noises(N, n)) = eval_ac_noise(Xa1, N)") (("1" (REPLACES -1) (("1" (CASE "eval_ac_noise(Xa2, first_noises(N, n)) = eval_ac_noise(Xa2, N)") (("1" (REPLACES -1) (("1" (ASSERT) (("1" (CASE "eval_pd_noise(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                                                   first_noises(N, n)) = eval_pd_noise(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                                                   N)") (("1" (REPLACES -1) NIL NIL) ("2" (HIDE-ALL-BUT (- 1)) (("2" (USE "epn_mult_first") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 1)) (("2" (EXPAND "eval_ac_noise") (("2" (USE "epn_trim_noise") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "eval_ac_noise") (("2" (USE "epn_trim_noise") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|mul_noise_value| CONST-DECL "real" |affine| NIL) (>= CONST-DECL "bool" |reals| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|epn_mult_first| FORMULA-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|epn_trim_noise| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|next_idx_2| CONST-DECL "nat" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|containment_mul| 0 (|containment_mul-4| "" 3743881257 ("" (SKEEP) (("" (EXPAND "mult_ac_ac" 1) (("" (EXPAND "eval_ac_noise" 1) (("" (ASSERT) (("" (REWRITES "eval_pd_noise_append") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "sum_of_modules(pd(Xa1)) = 0 OR
                                                        sum_of_modules(pd(Xa2)) = 0") (("1" (HIDE -2) (("1" (PROP) (("1" (USE "som_zero") (("1" (ASSERT) (("1" (LEMMA "epn_mpp_null_pds1") (("1" (INST -1 "N" "pd(Xa2)" "cv(Xa1)" "cv(Xa2)") (("1" (CASE "pd(Xa1)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (REPLACES -1) (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 1 1) (("1" (EXPAND "eval_ac_noise") (("1" (REPLACES -4 :DIR RL) (("1" (REPLACES -4 :DIR RL) (("1" (REVEAL -4) (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "som_zero") (("2" (ASSERT) (("2" (LEMMA "epn_mpp_null_pds2") (("2" (INST -1 "N" "pd(Xa1)" "cv(Xa1)" "cv(Xa2)") (("2" (CASE "pd(Xa2)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (REPLACES -1) (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 1 1) (("1" (EXPAND "eval_ac_noise") (("1" (REPLACES -4 :DIR RL) (("1" (REPLACES -4 :DIR RL) (("1" (REVEAL -4) (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (CASE "eval_pd_noise(cons((n,
                                              sum_of_modules(pd(Xa1)) *
                                               sum_of_modules(pd(Xa2))),
                                             null),
                           N) = mul_noise_value(Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                                        sum_of_modules(pd(Xa2))") (("1" (REPLACES -1) (("1" (HIDE -4) (("1" (EXPAND "mul_noise_value") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (USE "eval_pd_noise_rec_pds_def") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "mpp_first_N") (("1" (INST -1 "N" "Xa1" "Xa2" "n") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "/=") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "first_ol") (("2" (EXPAND "lt_idx") (("2" (USE "mult_pd_pd_last_bound") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (CASE "NOT null?[[nat, nzBaseType]](pd(Xa1)) AND
                                                   NOT null?[[nat, nzBaseType]](pd(Xa2))") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "next_idx_2") (("1" (EXPAND "next_idx") (("1" (EXPAND "last_idx") (("1" (HIDE-ALL-BUT (-1 -2 5)) (("1" (NAME-REPLACE "stopRW" "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mult_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_cv| FORMULA-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|mult_pd_pd_last_bound| FORMULA-DECL NIL |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}" |real_defs| NIL) (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|first_ol| CONST-DECL "T" |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|next_idx| CONST-DECL "nat" |affine| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|next_idx_2| CONST-DECL "nat" |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|mul_noise_value| CONST-DECL "real" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|epn_mpp_null_pds1| FORMULA-DECL NIL |affine| NIL) (|som_zero| FORMULA-DECL NIL |affine| NIL) (|epn_mpp_null_pds2| FORMULA-DECL NIL |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|mpp_first_N| FORMULA-DECL NIL |affine| NIL) (|Xa2| SKOLEM-CONST-DECL "AffineCombination" |affine| NIL) (|Xa1| SKOLEM-CONST-DECL "AffineCombination" |affine| NIL) (|eval_pd_noise_rec_pds_def| FORMULA-DECL NIL |affine| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|eval_pd_noise_append| FORMULA-DECL NIL |affine| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK) (|containment_mul-3| "" 3621347197 ("" (SKEEP) (("" (EXPAND "mult_ac_ac" 1) (("" (EXPAND "eval_ac_noise" 1) (("" (ASSERT) (("" (REWRITES "eval_pd_noise_append") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "sum_of_modules(pd(Xa1)) = 0 OR
                                             sum_of_modules(pd(Xa2)) = 0") (("1" (HIDE -2) (("1" (PROP) (("1" (USE "som_zero") (("1" (ASSERT) (("1" (LEMMA "epn_mpp_null_pds1") (("1" (INST -1 "N" "pd(Xa2)" "cv(Xa1)" "cv(Xa2)") (("1" (CASE "pd(Xa1)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (REPLACES -1) (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 1 1) (("1" (EXPAND "eval_ac_noise") (("1" (REPLACES -4 :DIR RL) (("1" (REPLACES -4 :DIR RL) (("1" (REVEAL -4) (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "som_zero") (("2" (ASSERT) (("2" (LEMMA "epn_mpp_null_pds2") (("2" (INST -1 "N" "pd(Xa1)" "cv(Xa1)" "cv(Xa2)") (("2" (CASE "pd(Xa2)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (REPLACES -1) (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 1 1) (("1" (EXPAND "eval_ac_noise") (("1" (REPLACES -4 :DIR RL) (("1" (REPLACES -4 :DIR RL) (("1" (REVEAL -4) (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "eval_pd_noise") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (CASE "eval_pd_noise(cons((n,
                                   sum_of_modules(pd(Xa1)) *
                                    sum_of_modules(pd(Xa2))),
                                  null),
                N) = mul_noise_value(Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                             sum_of_modules(pd(Xa2))") (("1" (REPLACES -1) (("1" (HIDE -4) (("1" (EXPAND "mul_noise_value") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (USE "eval_pd_noise_rec_pds_def") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (ASSERT) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "mpp_first_N") (("1" (INST -1 "N" "Xa1" "Xa2" "n") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT 1) (("3" (GRIND) (("3" (EXPAND "every") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "/=") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "first_ol") (("2" (EXPAND "lt_idx") (("2" (USE "mult_pd_pd_last_bound") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (CASE "NOT null?[[nat, nzBaseType]](pd(Xa1)) AND
                                        NOT null?[[nat, nzBaseType]](pd(Xa2))") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "next_idx_2") (("1" (EXPAND "next_idx") (("1" (EXPAND "last_idx") (("1" (HIDE-ALL-BUT (-1 -2 5)) (("1" (NAME-REPLACE "stopRW" "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|containment_mul-2| "" 3621267667 ("" (SKEEP) (("" (EXPAND "mult_ac_ac" 1) (("" (EXPAND "eval_ac_noise" 1) (("" (ASSERT) (("" (REWRITES "eval_pd_noise_append") (("1" (EXPAND "add_ET") (("1" (LIFT-IF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "sum_of_modules(pd(Xa1)) = 0 OR
 sum_of_modules(pd(Xa2)) = 0") (("1" (HIDE -2) (("1" (PROP) (("1" (USE "som_zero") (("1" (ASSERT) (("1" (LEMMA "epn_mpp_null_pds1") (("1" (INST -1 "N" "pd(Xa2)" "cv(Xa1)" "cv(Xa2)") (("1" (CASE "pd(Xa1)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (REPLACES -1) (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 1 1) (("1" (EXPAND "eval_ac_noise") (("1" (REPLACES -4 :DIR RL) (("1" (REPLACES -4 :DIR RL) (("1" (REVEAL -4) (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "eval_pd_noise") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "som_zero") (("2" (ASSERT) (("2" (LEMMA "epn_mpp_null_pds2") (("2" (INST -1 "N" "pd(Xa1)" "cv(Xa1)" "cv(Xa2)") (("2" (CASE "pd(Xa2)=null") (("1" (REPLACE -1 + :HIDE? T) (("1" (REPLACES -1) (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (EXPAND "eval_pd_noise" 1 1) (("1" (EXPAND "eval_ac_noise") (("1" (REPLACES -4 :DIR RL) (("1" (REPLACES -4 :DIR RL) (("1" (REVEAL -4) (("1" (REPLACE -1 + :HIDE? T) (("1" (EXPAND "eval_pd_noise") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "null_ol?") (("2" (EXPAND "cons_ol") (("2" (CASE "eval_pd_noise(cons((n,
                                  sum_of_modules(pd(Xa1)) *
                                   sum_of_modules(pd(Xa2))),
                                 null),
                            N) = mul_noise_value(Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                                   sum_of_modules(pd(Xa2))") (("1" (REPLACES -1) (("1" (HIDE -4) (("1" (EXPAND "mul_noise_value") (("1" (LIFT-IF) (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (USE "eval_pd_noise_rec_pds_def") (("1" (EXPAND "null_ol?") (("1" (EXPAND "cdr_ol") (("1" (EXPAND "car_ol") (("1" (EXPAND "eval_pd_noise" -1 2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "add_ET") (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "null_ol?") (("2" (EXPAND "empty_ErrorTerms") (("2" (EXPAND "cons_ol") (("2" (EXPAND "appendable_ol?") (("2" (FLATTEN) (("2" (EXPAND "first_ol") (("2" (EXPAND "lt_idx") (("2" (USE "mult_pd_pd_last_bound") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|containment_mul-1| |nil| 3619979990 ("" (SKEEP) (("" (EXPAND "mult_ac_ac" 1) (("" (EXPAND "eval_ac_noise" 1) (("" (ASSERT) (("" (REWRITES "eval_pd_noise_append") (("" (CASE "eval_pd_noise(cons((n,
                           sum_of_modules(pd(Xa1)) *
                            sum_of_modules(pd(Xa2))),
                          null),
                     N) = mul_noise_value(x1, x2, Xa1, Xa2, N) * sum_of_modules(pd(Xa1)) *
                            sum_of_modules(pd(Xa2))") (("1" (REPLACES -1) (("1" (HIDE -3) (("1" (EXPAND "mul_noise_value") (("1" (LIFT-IF) (("1" (PROP) (("1" (COMMENT "usar que si som_som es cero, todos los Xa1_i Xa2_i son cero") (("1" (POSTPONE) NIL ";;; usar que si som_som es cero, todos los Xa1_i Xa2_i son cero")) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|next_idx_mult_ac_ac_TCC1| 0 (|next_idx_mult_ac_ac_TCC1-1| |nil| 3628272610 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|next_idx_2| CONST-DECL "nat" |affine| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|next_idx_mult_ac_ac| SUBTYPE "affine.n" "{newidx: naturalnumbers.nat | reals.>=(newidx, affine.next_idx_2(pd(affine.Xa1), pd(affine.Xa2)))}"))) (|next_idx_mult_ac_ac| 0 (|next_idx_mult_ac_ac-1| |nil| 3629025760 ("" (SKEEP) (("" (EXPAND "mult_ac_ac") (("" (ASSERT) (("" (CASE "next_idx(append_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                         add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                                empty_ErrorTerms))) = max(next_idx(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2))), next_idx(add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                                empty_ErrorTerms)))") (("1" (REPLACES -1) (("1" (EXPAND "max") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE 1) (("2" (EXPAND "next_idx") (("2" (EXPAND "last_idx") (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "pd(Xa1) = empty_ErrorTerms") (("1" (CASE "pd(Xa2) = empty_ErrorTerms") (("1" (GRIND) NIL NIL) ("2" (REPLACE -1) (("2" (USE "mult_pd_pd_last_bound__null_nnull") (("2" (SPLIT -1) (("1" (TYPEPRED "n") (("1" (EXPAND ">=") (("1" (EXPAND "next_idx_2") (("1" (EXPAND "next_idx") (("1" (EXPAND "last_idx") (("1" (EXPAND "empty_ErrorTerms") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (EXPAND "null_ol?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "pd(Xa2) = empty_ErrorTerms") (("1" (REPLACE -1) (("1" (USE "mult_pd_pd_last_bound__nnull_null") (("1" (SPLIT -1) (("1" (TYPEPRED "n") (("1" (EXPAND ">=") (("1" (EXPAND "next_idx_2") (("1" (EXPAND "next_idx") (("1" (EXPAND "last_idx") (("1" (EXPAND_OL) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "mult_pd_pd_last_bound") (("2" (EXPAND_OL) (("2" (ASSERT) (("2" (TYPEPRED "n") (("2" (EXPAND ">=") (("2" (EXPAND "next_idx_2") (("2" (EXPAND "next_idx") (("2" (EXPAND "last_idx") (("2" (CASE "max(last_ol(Xa1`pd)`1, last_ol(Xa2`pd)`1) <= n-1") (("1" (HIDE -2) (("1" (NAME-REPLACE "A" "last_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))`1") (("1" (NAME-REPLACE "B" "max(last_ol(Xa1`pd)`1, last_ol(Xa2`pd)`1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "last_idx_append") (("2" (EXPAND "next_idx") (("2" (HIDE 2) (("2" (NAME-REPLACE "A" "last_idx(append_ol(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)),
                          add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                                 empty_ErrorTerms)))") (("2" (NAME-REPLACE "B" "last_idx(mult_pd_pd(cv(Xa1), cv(Xa2), pd(Xa1), pd(Xa2)))") (("2" (NAME-REPLACE "C" "last_idx(add_ET(n, sum_of_modules(pd(Xa1)) * sum_of_modules(pd(Xa2)),
                           empty_ErrorTerms))") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mult_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|nat_max| APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" |real_defs| NIL) (|nonneg_rat_max| APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" |real_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|append_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|next_idx_2| CONST-DECL "nat" |affine| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|max| CONST-DECL "{p: real | p >= m AND p >= n}" |real_defs| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|last_idx| CONST-DECL "int" |indexed_list| |structures|) (|last_ol| DEF-DECL "T" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_max| APPLICATION-JUDGEMENT "{k: int | i <= k AND j <= k}" |real_defs| NIL) (|rat_max| APPLICATION-JUDGEMENT "{s: rat | s >= q AND s >= r}" |real_defs| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|mult_pd_pd_last_bound__null_nnull| FORMULA-DECL NIL |affine| NIL) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|mult_pd_pd_last_bound| FORMULA-DECL NIL |affine| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (<= CONST-DECL "bool" |reals| NIL) (|posrat_max| APPLICATION-JUDGEMENT "{s: posrat | s >= q AND s >= r}" |real_defs| NIL) (|posint_max| APPLICATION-JUDGEMENT "{k: posint | i <= k AND j <= k}" |real_defs| NIL) (|mult_pd_pd_last_bound__nnull_null| FORMULA-DECL NIL |affine| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|last_idx_append| FORMULA-DECL NIL |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL)) SHOSTAK)) (|idxs_ac_mult_ac_ac| 0 (|idxs_ac_mult_ac_ac-1| |nil| 3628937568 ("" (SKEEP) (("" (EXPAND "mult_ac_ac") (("" (EXPAND "idxs_ac") (("" (ASSERT) (("" (USE "idxs_pd_append") (("" (REPLACES -1) (("" (USE "member_append_fi[nat]") (("" (ASSERT) (("" (HIDE -2) (("" (SPLIT -1) (("1" (NAME "L" "length(pd(Xa1))+length(pd(Xa2))") (("1" (NAME-REPLACE "pds1_" "pd(Xa1)") (("1" (NAME-REPLACE "pds2_" "pd(Xa2)") (("1" (GENERALIZE "cv(Xa1)" "cv1") (("1" (GENERALIZE "cv(Xa2)" "cv2") (("1" (GENERALIZE "pds1_" "pds1") (("1" (GENERALIZE "pds2_" "pds2") (("1" (GENERALIZE "L" "L") (("1" (INDUCT "L" :NAME "NAT_induction") (("1" (DEFTACTIC APPLYIH (NUM PDSN IH-FNUM HYP-FNUM LEN-FNUM MBR-FNUM NNL-FNUM) (SPREAD (INST IH-FNUM NUM) ((THEN (ASSERT) (INST? IH-FNUM :WHERE HYP-FNUM) (EXPAND "length" LEN-FNUM PDSN) (ASSERT) (HIDE-ALL-BUT (LIST NNL-FNUM MBR-FNUM IH-FNUM)) (GRIND)) (THEN (LET ((NEW-LEN (+ LEN-FNUM 1)) (NEW-NNL (IF (LISTP NNL-FNUM) (MAPCAR (LAMBDA (N) (+ N 1)) NNL-FNUM) (+ NNL-FNUM 1)))) (THEN (HIDE-ALL-BUT (LIST NEW-LEN 1 NEW-NNL)) (GRIND))))))) (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "mult_pd_pd" -3) (("1" (EXPAND_OL) (("1" (LIFT-IF -3) (("1" (SPLIT -3) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "add_ET") (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (APPLYIH "j-1" 2 -4 -2 -5 3 1) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND_OL) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (EXPAND_OL) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND_OL) (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (APPLYIH "j-1" 2 -4 -1 -5 5 3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (APPLYIH "j-1" 2 -3 -1 -4 6 4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (APPLYIH "j-1" 1 -4 -2 -5 2 1) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND_OL) (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (APPLYIH "j-1" 1 -4 -1 -5 4 3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (APPLYIH "j-1" 1 -3 -1 -4 5 4) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (EXPAND_OL) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (APPLYIH "j-2" (1 2) -4 -2 -5 (3 4) (1 2)) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND_OL) (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (APPLYIH "j-2" (1 2) -4 -1 -5 (5 6) (3 4)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (APPLYIH "j-2" (1 2) -3 -1 -4 (6 7) (4 5)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "add_ET") (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (FLATTEN) (("1" (APPLYIH "j-1" 1 -4 -2 -5 4 3) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND_OL) (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (APPLYIH "j-1" 1 -4 -1 -5 6 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (APPLYIH "j-1" 1 -3 -1 -4 7 6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "add_ET") (("2" (FLATTEN) (("2" (LIFT-IF -1) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (APPLYIH "j-1" 2 -3 -2 -4 6 3) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) (("2" (SPLIT -1) (("1" (GRIND) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "idxs_pd" -2) (("1" (EXPAND_OL) (("1" (EXPAND "member" -2) (("1" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (APPLYIH "j-1" 2 -3 -1 -4 8 5) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (APPLYIH "j-1" 2 -2 -1 -3 9 6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "add_ET") (("2" (LIFT-IF -1) (("2" (DEFTACTIC EXPAND_OLS NIL (EXPAND* "null_ol?" "car_ol" "cdr_ol" "cons_ol" "empty_ErrorTerms")) (("2" (EXPAND_OLS) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|mult_ac_ac| CONST-DECL "AffineCombination" |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|sum_of_modules_nnreal| EXPR-JUDGEMENT "nonneg_real" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|member| DEF-DECL "bool" |list_props| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|j| SKOLEM-CONST-DECL "nat" |affine| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|idxs_pd| DEF-DECL "list[nat]" |affine| NIL) (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|) (|idxs_pd_append| FORMULA-DECL NIL |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|sum_of_modules| DEF-DECL "BaseType" |affine| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|next_idx_2| CONST-DECL "nat" |affine| NIL) (|add_ET| CONST-DECL "ErrorTerms" |affine| NIL) (|appendable_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|mult_pd_pd| DEF-DECL "ErrorTerms" |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL)) SHOSTAK)) (|null_ol?_empty_noise| 0 (|null_ol?_empty_noise-1| |nil| 3621852500 ("" (GRIND) NIL NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL)) SHOSTAK)) (|var_ac_noise_unf3_TCC1| 0 (|var_ac_noise_unf3_TCC1-2| "" 3789916558 ("" (TCC) NIL NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|)) SHOSTAK (|var_ac_noise_unf3| SUBTYPE "affine.empty_noise" "{N | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), reals.<(affine.m, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1))}")) (|var_ac_noise_unf3_TCC1-1| |nil| 3621688552 ("" (TCC)) NIL NIL (|var_ac_noise_unf3| SUBTYPE "affine.empty_noise" "{N | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), reals.<(affine.m, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1))}"))) (|var_ac_noise_unf3| 0 (|var_ac_noise_unf3-1| |nil| 3621691473 ("" (SKEEP) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (CASE "null_ol?(N)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -2) (("1" (GRIND) NIL NIL) ("2" (GRIND) (("2" (EXPAND "eval_pd_noise") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|eval_pd_noise| DEF-DECL "real" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|add_N| CONST-DECL "Noise" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzreal_times_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|gnbi_extend_N_unf| 0 (|gnbi_extend_N_unf-1| |nil| 3621689436 ("" (SKEEP) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (REPLACES -1) (("1" (CASE "null_ol?(N)") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL) ("2" (ASSERT) (("2" (CASE "e=e2") (("1" (REPLACES -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|add_N| CONST-DECL "Noise" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|cdr_Noise_jdg| APPLICATION-JUDGEMENT "Noise" |affine| NIL) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|gnbi_extend_N_trivial| 0 (|gnbi_extend_N_trivial-1| |nil| 3621790164 ("" (SKEEP) (("" (GRIND) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|)) SHOSTAK)) (|first__extend_N_TCC1| 0 (|first__extend_N_TCC1-2| "" 3789916562 ("" (SKEEP) (("" (SPLIT -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND_OL) (("1" (EXPAND "first_noises") (("1" (EXPAND "first") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "car_up_to_idx[nzEpsilon]") (("2" (INST?) (("2" (INST -1 "n") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (EXPAND "first_noises") (("2" (ASSERT) (("2" (EXPAND "first") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|car_up_to_idx| FORMULA-DECL NIL |indexed_list| |structures|) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK (|first__extend_N| SUBTYPE "affine.first_noises(affine.N, affine.n)" "{N | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), reals.<(affine.m, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1))}")) (|first__extend_N_TCC1-1| |nil| 3621698687 ("" (SKEEP) (("" (SPLIT -1) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (EXPAND_OL) (("1" (EXPAND "first_noises") (("1" (EXPAND "first") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "car_up_to_idx[nzEpsilon]") (("2" (INST?) (("2" (INST -1 "n") (("2" (ASSERT) (("2" (EXPAND "null_ol?") (("2" (ASSERT) (("2" (EXPAND "first_noises") (("2" (ASSERT) (("2" (EXPAND "first") (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|first__extend_N| SUBTYPE "affine.first_noises(affine.N, affine.n)" "{N | booleans.OR(ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].null_ol?(affine.N), reals.<(affine.m, ordered_list[[nat, nzEpsilon], indexed_list[nzEpsilon].lt_idx].car_ol(affine.N)`1))}"))) (|first__extend_N| 0 (|first__extend_N-1| |nil| 3621792407 ("" (SKEEP) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "extend_N") (("1" (EXPAND "add_N") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (CASE "null_ol?(N)") (("1" (ASSERT) (("1" (EXPAND "first_noises") (("1" (EXPAND "first") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND_OL) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "first_noises" :ASSERT? NONE) (("2" (EXPAND "first" :ASSERT? NONE) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (EXPAND_OL) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-1 -4 -3)) (("1" (EXPAND "car_ol") (("1" (ABSTRACT-AND-THEN -1 1 (ASSERT)) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "first_noises" :ASSERT? NONE) (("1" (EXPAND "first" :ASSERT? NONE) (("1" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "first_noises" :ASSERT? NONE) (("2" (EXPAND "first" :ASSERT? NONE) (("2" (EXPAND_OL) (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "extend_N" 2 1 :ASSERT? NONE) (("2" (EXPAND "add_N" :ASSERT? NONE) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "first_noises" :ASSERT? NONE) (("1" (EXPAND "first" 1 1 :ASSERT? NONE) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "first" 1 1 :ASSERT? NONE) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "extend_N" :ASSERT? NONE) (("1" (EXPAND "add_N" :ASSERT? NONE) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (SPLIT -3) (("1" (EXPAND "extend_N" :ASSERT? NONE) (("1" (EXPAND "add_N" :ASSERT? NONE) (("1" (ASSERT) (("1" (EXPAND "first" 1 2 :ASSERT? NONE) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "extend_N" :ASSERT? NONE) (("2" (EXPAND "add_N" :ASSERT? NONE) (("2" (ASSERT) (("2" (EXPAND "first" 1 2 :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -2) (("1" (EXPAND_OL) NIL NIL) ("2" (EXPAND "first" 2 :ASSERT? NONE) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "extend_N" :ASSERT? NONE) (("2" (EXPAND "add_N" :ASSERT? NONE) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -2) (("1" (CASE "first_noises(N, n) = empty_noise") (("1" (REPLACES -1) (("1" (EXPAND "first_noises" :ASSERT? NONE) (("1" (EXPAND "first" :ASSERT? NONE) (("1" (EXPAND_OL) (("1" (EXPAND "extend_N" :ASSERT? NONE) (("1" (EXPAND "add_N" :ASSERT? NONE) (("1" (ASSERT) (("1" (EXPAND "first" :ASSERT? NONE) (("1" (ASSERT) (("1" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (EXPAND "first_noises" :ASSERT? NONE) (("2" (EXPAND "first" :ASSERT? NONE) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND_OL) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND_OL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (EXPAND "extend_N" :ASSERT? NONE) (("2" (EXPAND "add_N" :ASSERT? NONE) (("2" (EXPAND "first_noises" 2 1 :ASSERT? NONE) (("2" (EXPAND "first" 2 1 :ASSERT? NONE) (("2" (EXPAND_OL) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (CASE "first(N, n)=empty_noise") (("1" (REPLACES -1) (("1" (EXPAND_OL) NIL NIL)) NIL) ("2" (EXPAND "first_noises" :ASSERT? NONE) (("2" (EXPAND_OL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "first_noises" :ASSERT? NONE) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "first_noises" :ASSERT? NONE) (("2" (EXPAND "first" 3 :ASSERT? NONE) (("2" (LIFT-IF 3) (("2" (ASSERT) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (EXPAND "first" 2 :ASSERT? NONE) (("1" (LIFT-IF 2) (("1" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND_OL) NIL NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|prefixes| CONST-DECL "bool" |more_list_props| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|first_noises| CONST-DECL "Noise" |affine| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|first| DEF-DECL "(prefixes(l))" |indexed_list| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) SHOSTAK)) (|Half_pd_TCC1| 0 (|Half_pd_TCC1-1| |nil| 3627238844 ("" (SKEEP) (("" (EXPAND "null_ol?") (("" (EXPAND "empty_ErrorTerms") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|Half_pd| SUBTYPE "affine.empty_ErrorTerms" "{pd_: affine.ErrorTerms | booleans.OR(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].null_ol?(pd_), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].null_ol?(affine.pds)), ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(pd_)`1 = ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(affine.pds)`1)))}"))) (|Half_pd_TCC2| 0 (|Half_pd_TCC2-1| |nil| 3628356478 ("" (SKEEP*) (("" (EXPAND "lt_idx") (("" (REPLACES -) (("" (EXPAND "cdr_ol") (("" (EXPAND "car_ol") (("" (EXPAND "null_ol?") (("" (TYPEPRED "v(cdr(pds))") (("" (EXPAND "null_ol?") (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "car_ol") (("" (REPLACES -2) (("" (TYPEPRED "pds") (("" (EXPAND "ordered_list?" -1) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|cdr_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|list| TYPE-DECL NIL |list_adt| NIL) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|Half_pd| SUBTYPE "affine.Half_pd(affine.tail)" "{ol | booleans.OR(list_adt[[nat, nzBaseType]].null?(ol), indexed_list[nzBaseType].lt_idx((affine.head`1, number_fields./(affine.head`2, 2)), list_adt[[nat, nzBaseType]].car(ol)))}"))) (|Half_pd_TCC3| 0 (|Half_pd_TCC3-1| |nil| 3628356478 ("" (SKEEP*) (("" (REPLACES -) (("" (EXPAND "null_ol?") (("" (EXPAND "car_ol") (("" (EXPAND "cons_ol") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|Half_pd| SUBTYPE "ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].cons_ol((affine.head`1, number_fields./(affine.head`2, 2)), affine.Half_pd(affine.tail))" "{pd_: affine.ErrorTerms | booleans.OR(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].null_ol?(pd_), (booleans.AND((booleans.NOT)(ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].null_ol?(affine.pds)), ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(pd_)`1 = ordered_list[[nat, nzBaseType], indexed_list[nzBaseType].lt_idx].car_ol(affine.pds)`1)))}"))))
