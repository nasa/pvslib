(boolexpr_lfcmrs (BNOT_preservation_TCC1 0 (BNOT_preservation_TCC1-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BNOT_preservation subtype "boolexpr_lfcmrs.f_ctxt1" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0))"))) (BNOT_preservation_TCC2 0 (BNOT_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BNOT_preservation subtype "boolexpr_lfcmrs.g_ctxt1" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0))"))) (BAND_preservation_TCC1 0 (BAND_preservation_TCC1-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BAND_preservation subtype "boolexpr_lfcmrs.f_ctxt1" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop1(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0))"))) (BAND_preservation_TCC2 0 (BAND_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BAND_preservation subtype "boolexpr_lfcmrs.f_ctxt2" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop2(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt1))"))) (BAND_preservation_TCC3 0 (BAND_preservation_TCC3-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BAND_preservation subtype "boolexpr_lfcmrs.g_ctxt1" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop1(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0))"))) (BAND_preservation_TCC4 0 (BAND_preservation_TCC4-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BAND_preservation subtype "boolexpr_lfcmrs.g_ctxt2" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop2(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt1))"))) (BLETIN_RealExpr_preservation_TCC1 0 (BLETIN_RealExpr_preservation_TCC1-1 nil 3638124390 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (BLETIN_RealExpr_preservation subtype "boolexpr_lfcmrs.blet" "(interval_expr.realexpr?)"))) (BLETIN_RealExpr_preservation_TCC2 0 (BLETIN_RealExpr_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BLETIN_RealExpr_preservation subtype "boolexpr_lfcmrs.f_ctxtbin" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bin(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_BLETIN_RealExpr_ini(IntervalExpr_adt.blet(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0)))"))) (BLETIN_RealExpr_preservation_TCC3 0 (BLETIN_RealExpr_preservation_TCC3-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (BLETIN_RealExpr_preservation subtype "boolexpr_lfcmrs.bexpr" "{b_: (IntervalExpr_adt.bletin?) | interval_expr.realexpr?(IntervalExpr_adt.blet(b_))}"))) (BLETIN_RealExpr_preservation_TCC4 0 (BLETIN_RealExpr_preservation_TCC4-1 nil 3640346450 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BLETIN_RealExpr_preservation subtype "boolexpr_lfcmrs.g_ctxtbin" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bin(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_BLETIN_RealExpr_ini(IntervalExpr_adt.blet(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0)))"))) (BLETIN_RealExpr_ini_pre_preservation_TCC1 0 (BLETIN_RealExpr_ini_pre_preservation_TCC1-1 nil 3638349243 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith)) nil (BLETIN_RealExpr_ini_pre_preservation subtype "boolexpr_lfcmrs.blet" "(interval_expr.realexpr?)"))) (BLETIN_BoolExpr_preservation_TCC1 0 (BLETIN_BoolExpr_preservation_TCC1-1 nil 3638124390 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BLETIN_BoolExpr_preservation subtype "boolexpr_lfcmrs.f_ctxt1" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.blet(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0))"))) (BLETIN_BoolExpr_preservation_TCC2 0 (BLETIN_BoolExpr_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BLETIN_BoolExpr_preservation subtype "boolexpr_lfcmrs.f_ctxt2" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bin(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_BLETIN_BoolExpr_merge1(boolexpr_lfcmrs.f_ctxt0, boolexpr_lfcmrs.f_ctxt1)))"))) (BLETIN_BoolExpr_preservation_TCC3 0 (BLETIN_BoolExpr_preservation_TCC3-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (boolexpr? const-decl "bool" interval_expr interval_arith)) nil (BLETIN_BoolExpr_preservation subtype "boolexpr_lfcmrs.bexpr" "{b_: (IntervalExpr_adt.bletin?) | interval_expr.boolexpr?(IntervalExpr_adt.blet(b_))}"))) (BLETIN_BoolExpr_preservation_TCC4 0 (BLETIN_BoolExpr_preservation_TCC4-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BLETIN_BoolExpr_preservation subtype "boolexpr_lfcmrs.g_ctxt1" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.blet(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0))"))) (BLETIN_BoolExpr_preservation_TCC5 0 (BLETIN_BoolExpr_preservation_TCC5-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BLETIN_BoolExpr_preservation subtype "boolexpr_lfcmrs.g_ctxt2" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bin(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_BLETIN_BoolExpr_merge1(boolexpr_lfcmrs.g_ctxt0, boolexpr_lfcmrs.g_ctxt1)))"))) (BITE_preservation_TCC1 0 (BITE_preservation_TCC1-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BITE_preservation subtype "boolexpr_lfcmrs.f_ctxt1" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bif(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0))"))) (BITE_preservation_TCC2 0 (BITE_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BITE_preservation subtype "boolexpr_lfcmrs.f_ctxt2" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bthen(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_BITE_merge1(boolexpr_lfcmrs.f_ctxt0, boolexpr_lfcmrs.f_ctxt1)))"))) (BITE_preservation_TCC3 0 (BITE_preservation_TCC3-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BITE_preservation subtype "boolexpr_lfcmrs.f_ctxt3" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.belse(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_BITE_merge2(boolexpr_lfcmrs.f_ctxt0, boolexpr_lfcmrs.f_ctxt1, boolexpr_lfcmrs.f_ctxt2)))"))) (BITE_preservation_TCC4 0 (BITE_preservation_TCC4-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BITE_preservation subtype "boolexpr_lfcmrs.g_ctxt1" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bif(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0))"))) (BITE_preservation_TCC5 0 (BITE_preservation_TCC5-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BITE_preservation subtype "boolexpr_lfcmrs.g_ctxt2" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bthen(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_BITE_merge1(boolexpr_lfcmrs.g_ctxt0, boolexpr_lfcmrs.g_ctxt1)))"))) (BITE_preservation_TCC6 0 (BITE_preservation_TCC6-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BITE_preservation subtype "boolexpr_lfcmrs.g_ctxt3" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.belse(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_BITE_merge2(boolexpr_lfcmrs.g_ctxt0, boolexpr_lfcmrs.g_ctxt1, boolexpr_lfcmrs.g_ctxt2)))"))) (BOR_preservation_TCC1 0 (BOR_preservation_TCC1-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BOR_preservation subtype "boolexpr_lfcmrs.f_ctxt1" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop1(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0))"))) (BOR_preservation_TCC2 0 (BOR_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BOR_preservation subtype "boolexpr_lfcmrs.f_ctxt2" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop2(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt1))"))) (BOR_preservation_TCC3 0 (BOR_preservation_TCC3-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BOR_preservation subtype "boolexpr_lfcmrs.g_ctxt1" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop1(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0))"))) (BOR_preservation_TCC4 0 (BOR_preservation_TCC4-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BOR_preservation subtype "boolexpr_lfcmrs.g_ctxt2" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop2(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt1))"))) (BIMPLIES_preservation_TCC1 0 (BIMPLIES_preservation_TCC1-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BIMPLIES_preservation subtype "boolexpr_lfcmrs.f_ctxt1" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop1(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt0))"))) (BIMPLIES_preservation_TCC2 0 (BIMPLIES_preservation_TCC2-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BIMPLIES_preservation subtype "boolexpr_lfcmrs.f_ctxt2" "(boolexpr_lfcmrs.f_post(IntervalExpr_adt.bop2(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.f_ctxt1))"))) (BIMPLIES_preservation_TCC3 0 (BIMPLIES_preservation_TCC3-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BIMPLIES_preservation subtype "boolexpr_lfcmrs.g_ctxt1" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop1(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt0))"))) (BIMPLIES_preservation_TCC4 0 (BIMPLIES_preservation_TCC4-1 nil 3640345206 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith)) nil (BIMPLIES_preservation subtype "boolexpr_lfcmrs.g_ctxt2" "(boolexpr_lfcmrs.g_post(IntervalExpr_adt.bop2(boolexpr_lfcmrs.bexpr), boolexpr_lfcmrs.g_ctxt1))"))) (f_BLETIN_RealExpr_TCC1 0 (f_BLETIN_RealExpr_TCC1-1 nil 3789916243 ("" (skeep) (("" (typepred "t`1") (("" (propax) nil nil)) nil)) nil) ((f_Ctxt formal-type-decl nil boolexpr_lfcmrs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) nil (f_BLETIN_RealExpr subtype "IntervalExpr_adt.blet(t`1)" "(interval_expr.realexpr?)"))) (f_BLETIN_BoolExpr_TCC1 0 (f_BLETIN_BoolExpr_TCC1-1 nil 3640532803 ("" (skeep*) (("" (typepred "t`1") (("" (expand "boolexpr?") (("" (assert) nil nil)) nil)) nil)) nil) ((f_Ctxt formal-type-decl nil boolexpr_lfcmrs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (boolexpr? const-decl "bool" interval_expr interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (f_BLETIN_BoolExpr subtype "IntervalExpr_adt.blet(t`1)" "BoolExpr"))) (g_BLETIN_RealExpr_TCC1 0 (g_BLETIN_RealExpr_TCC1-2 nil 3792238275 ("" (skeep*) (("" (typepred "t`1") (("" (propax) nil nil)) nil)) nil) ((g_Ctxt formal-type-decl nil boolexpr_lfcmrs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (g_BLETIN_RealExpr subtype "IntervalExpr_adt.blet(t`1)" "(interval_expr.realexpr?)")) (g_BLETIN_RealExpr_TCC1-1 nil 3789916243 ("" (subtype-tcc) nil nil) nil nil (g_BLETIN_RealExpr subtype "IntervalExpr_adt.blet(t`1)" "(interval_expr.realexpr?)"))) (g_BLETIN_BoolExpr_TCC1 0 (g_BLETIN_BoolExpr_TCC1-1 nil 3640532803 ("" (skeep*) (("" (typepred "t`1") (("" (expand "boolexpr?") (("" (assert) nil nil)) nil)) nil)) nil) ((g_Ctxt formal-type-decl nil boolexpr_lfcmrs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (boolexpr? const-decl "bool" interval_expr interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (TRUE const-decl "bool" booleans nil)) nil (g_BLETIN_BoolExpr subtype "IntervalExpr_adt.blet(t`1)" "BoolExpr"))) (preservation_property 0 (preservation_property-4 "" 3789918462 ("" (deftactic base_case (lemma-name) (then (skeep*) (hide -1) (expand "F") (lemma lemma-name) (assert) (inst?) (assert))) (("" (induct "bexpr") (("1" (typepred "bexpr!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (assert) nil nil) ("14" (base_case "BCONST_preservation") nil nil) ("15" (base_case "BCONST_preservation") nil nil) ("16" (skeep*) (("16" (hide -2) (("16" (split -1) (("1" (inst?) (("1" (assert) (("1" (lemma "BNOT_preservation") (("1" (assert) (("1" (expand "F" 1) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BNOT1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("17" (skeep*) (("17" (expand "F" 1) (("17" (hide -3) (("17" (split -1) (("1" (split -2) (("1" (lemma "BAND_preservation") (("1" (beta) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BAND2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BAND1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("18" (skeep*) (("18" (expand "F" 1) (("18" (hide -3) (("18" (split -1) (("1" (split -2) (("1" (lemma "BOR_preservation") (("1" (beta) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BOR2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BOR1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("19" (skeep*) (("19" (expand "F" 1) (("19" (hide -3) (("19" (split -1) (("1" (split -2) (("1" (lemma "BIMPLIES_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BIMPLIES2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BIMPLIES1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("20" (base_case "BREL_preservation") nil nil) ("21" (base_case "BINCLUDES_preservation") nil nil) ("22" (skeep*) (("22" (split -1) (("1" (split -2) (("1" (split -3) (("1" (hide -4) (("1" (expand "F" 1) (("1" (lemma "BITE_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (split 1) (("1" (inst? -3 :where 1) (("1" (assert) nil nil)) nil) ("2" (inst? -2 :where 1) (("2" (assert) (("2" (hide 1) (("2" (use "BITE_merge1_preservation") (("2" (assert) (("2" (hide 2) (("2" (inst? -2 :where 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst? -1 :where 1) (("3" (assert) (("3" (hide 1) (("3" (use "BITE_merge2_preservation") (("3" (assert) (("3" (hide 2) (("3" (split 1) (("1" (inst? -2 :where 1) (("1" (assert) nil nil)) nil) ("2" (inst? -1 :where 1) (("2" (assert) (("2" (hide 1) (("2" (use "BITE_merge1_preservation") (("2" (assert) (("2" (hide 2) (("2" (inst? -1 :where 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BITE3_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BITE2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BITE1_var") (("2" (propax) nil nil)) nil)) nil)) nil) ("23" (skolem 1 ("blet" "bin")) (("23" (flatten) (("23" (split -2) (("1" (case "realexpr?(blet)") (("1" (hide -4) (("1" (hide -3) (("1" (skeep* 1) (("1" (expand "F" 1) (("1" (assert) (("1" (name-replace "F_g" "boolexpr_lfcs
                       [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BOR, g_BIMPLIES, g_BREL, g_BINCLUDES,
                        g_BITE_merge1, g_BITE_merge2, g_BITE, g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                        g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (name-replace "F_f" "boolexpr_lfcs
                       [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BOR, f_BIMPLIES, f_BREL, f_BINCLUDES,
                        f_BITE_merge1, f_BITE_merge2, f_BITE, f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                        f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_RealExpr_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (hide 1) (("1" (with-tccs (use "BLETIN_RealExpr_ini_pre_preservation")) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -2) (("1" (hide -3) (("1" (skeep* 2) (("1" (expand "F" 2) (("1" (assert) (("1" (name-replace "F_f" "boolexpr_lfcs
                         [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BOR, f_BIMPLIES, f_BREL, f_BINCLUDES,
                          f_BITE_merge1, f_BITE_merge2, f_BITE, f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                          f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (name-replace "F_g" "boolexpr_lfcs
                         [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BOR, g_BIMPLIES, g_BREL, g_BINCLUDES,
                          g_BITE_merge1, g_BITE_merge2, g_BITE, g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                          g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_BoolExpr_preservation") (("1" (assert) (("1" (inst -1 "f_ctxt_0" "F_f(blet)(f_ctxt_0)" "F_f(bin)(f_BLETIN_BoolExpr_merge1(f_ctxt_0, F_f(blet)(f_ctxt_0)))" "g_ctxt_0" "F_g(blet)(g_ctxt_0)" "F_g(bin)(g_BLETIN_BoolExpr_merge1(g_ctxt_0, F_g(blet)(g_ctxt_0)))" "blet" "bin") (("1" (assert) (("1" (hide 2 3) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -2 :where 1) (("1" (split -2) (("1" (assert) nil nil) ("2" (hide 2) (("2" (use "BLETIN_BoolExpr_merge_pre_preservation") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (ground) nil nil)) nil)) nil)) nil) ("2" (typepred "bin") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("24" (assert) nil nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (OR const-decl "[bool, bool -> bool]" booleans nil) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (f_Ctxt formal-type-decl nil boolexpr_lfcmrs nil) (g_Ctxt formal-type-decl nil boolexpr_lfcmrs nil) (p formal-const-decl "[f_Ctxt, g_Ctxt -> bool]" boolexpr_lfcmrs nil) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (f_post formal-const-decl "[BoolExpr, f_Ctxt -> [f_Ctxt -> bool]]" boolexpr_lfcmrs nil) (f_BCONST formal-const-decl "[bcon: (bconst?), c0: f_Ctxt -> (f_post(bcon, c0))]" boolexpr_lfcmrs nil) (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt interval_arith) (f_BNOT formal-const-decl "[bnot: (bnot?), c0: f_Ctxt ->
   [c1: (f_post(bop(bnot), c0)) -> (f_post(bnot, c0))]]" boolexpr_lfcmrs nil) (bop1 shared-adt-accessor-decl "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" IntervalExpr_adt interval_arith) (bop2 shared-adt-accessor-decl "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" IntervalExpr_adt interval_arith) (f_BAND formal-const-decl "[band: (band?), c0: f_Ctxt ->
   [c1: (f_post(bop1(band), c0)), (f_post(bop2(band), c1)) ->
      (f_post(band, c0))]]" boolexpr_lfcmrs nil) (f_BOR formal-const-decl "[bor: (bor?), c0: f_Ctxt ->
   [c1: (f_post(bop1(bor), c0)), (f_post(bop2(bor), c1)) ->
      (f_post(bor, c0))]]" boolexpr_lfcmrs nil) (f_BIMPLIES formal-const-decl "[bimp: (bimplies?), c0: f_Ctxt ->
   [c1: (f_post(bop1(bimp), c0)), (f_post(bop2(bimp), c1)) ->
      (f_post(bimp, c0))]]" boolexpr_lfcmrs nil) (f_BREL formal-const-decl "[brel: (brel?), c0: f_Ctxt -> (f_post(brel, c0))]" boolexpr_lfcmrs nil) (f_BINCLUDES formal-const-decl "[binc: (bincludes?), c0: f_Ctxt -> (f_post(binc, c0))]" boolexpr_lfcmrs nil) (f_BITE_merge1 formal-const-decl "[f_Ctxt, f_Ctxt -> f_Ctxt]" boolexpr_lfcmrs nil) (f_BITE_merge2 formal-const-decl "[f_Ctxt, f_Ctxt, f_Ctxt -> f_Ctxt]" boolexpr_lfcmrs nil) (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt interval_arith) (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt interval_arith) (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt interval_arith) (f_BITE formal-const-decl "[bite: (bite?), c0: f_Ctxt ->
   [c1: (f_post(bif(bite), c0)),
    c2: (f_post(bthen(bite), f_BITE_merge1(c0, c1))),
    (f_post(belse(bite), f_BITE_merge2(c0, c1, c2))) ->
      (f_post(bite, c0))]]" boolexpr_lfcmrs nil) (realexpr? const-decl "bool" interval_expr interval_arith) (f_BLETIN_RealExpr_ini formal-const-decl "[(realexpr?), f_Ctxt -> f_Ctxt]" boolexpr_lfcmrs nil) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt interval_arith) (f_BLETIN_RealExpr formal-const-decl "[bli: {b_: (bletin?) | realexpr?(blet(b_))}, c0: f_Ctxt ->
   [(f_post(bin(bli), f_BLETIN_RealExpr_ini(blet(bli), c0))) ->
      (f_post(bli, c0))]]" boolexpr_lfcmrs nil) (f_BLETIN_BoolExpr_merge1 formal-const-decl "[f_Ctxt, f_Ctxt -> f_Ctxt]" boolexpr_lfcmrs nil) (boolexpr? const-decl "bool" interval_expr interval_arith) (f_BLETIN_BoolExpr formal-const-decl "[bli: {b_: (bletin?) | boolexpr?(blet(b_))}, c0: f_Ctxt ->
   [c1: (f_post(blet(bli), c0)),
    (f_post(bin(bli), f_BLETIN_BoolExpr_merge1(c0, c1))) ->
      (f_post(bli, c0))]]" boolexpr_lfcmrs nil) (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil) (g_post formal-const-decl "[BoolExpr, g_Ctxt -> [g_Ctxt -> bool]]" boolexpr_lfcmrs nil) (g_BCONST formal-const-decl "[bcon: (bconst?), c0: g_Ctxt -> (g_post(bcon, c0))]" boolexpr_lfcmrs nil) (g_BNOT formal-const-decl "[bnot: (bnot?), c0: g_Ctxt ->
   [c1: (g_post(bop(bnot), c0)) -> (g_post(bnot, c0))]]" boolexpr_lfcmrs nil) (g_BAND formal-const-decl "[band: (band?), c0: g_Ctxt ->
   [c1: (g_post(bop1(band), c0)), (g_post(bop2(band), c1)) ->
      (g_post(band, c0))]]" boolexpr_lfcmrs nil) (g_BOR formal-const-decl "[bor: (bor?), c0: g_Ctxt ->
   [c1: (g_post(bop1(bor), c0)), (g_post(bop2(bor), c1)) ->
      (g_post(bor, c0))]]" boolexpr_lfcmrs nil) (g_BIMPLIES formal-const-decl "[bimp: (bimplies?), c0: g_Ctxt ->
   [c1: (g_post(bop1(bimp), c0)), (g_post(bop2(bimp), c1)) ->
      (g_post(bimp, c0))]]" boolexpr_lfcmrs nil) (g_BREL formal-const-decl "[brel: (brel?), c0: g_Ctxt -> (g_post(brel, c0))]" boolexpr_lfcmrs nil) (g_BINCLUDES formal-const-decl "[binc: (bincludes?), c0: g_Ctxt -> (g_post(binc, c0))]" boolexpr_lfcmrs nil) (g_BITE_merge1 formal-const-decl "[g_Ctxt, g_Ctxt -> g_Ctxt]" boolexpr_lfcmrs nil) (g_BITE_merge2 formal-const-decl "[g_Ctxt, g_Ctxt, g_Ctxt -> g_Ctxt]" boolexpr_lfcmrs nil) (g_BITE formal-const-decl "[bite: (bite?), c0: g_Ctxt ->
   [c1: (g_post(bif(bite), c0)),
    c2: (g_post(bthen(bite), g_BITE_merge1(c0, c1))),
    (g_post(belse(bite), g_BITE_merge2(c0, c1, c2))) ->
      (g_post(bite, c0))]]" boolexpr_lfcmrs nil) (g_BLETIN_RealExpr_ini formal-const-decl "[(realexpr?), g_Ctxt -> g_Ctxt]" boolexpr_lfcmrs nil) (g_BLETIN_RealExpr formal-const-decl "[bli: {b_: (bletin?) | realexpr?(blet(b_))}, c0: g_Ctxt ->
   [(g_post(bin(bli), g_BLETIN_RealExpr_ini(blet(bli), c0))) ->
      (g_post(bli, c0))]]" boolexpr_lfcmrs nil) (g_BLETIN_BoolExpr_merge1 formal-const-decl "[g_Ctxt, g_Ctxt -> g_Ctxt]" boolexpr_lfcmrs nil) (g_BLETIN_BoolExpr formal-const-decl "[bli: {b_: (bletin?) | boolexpr?(blet(b_))}, c0: g_Ctxt ->
   [c1: (g_post(blet(bli), c0)),
    (g_post(bin(bli), g_BLETIN_BoolExpr_merge1(c0, c1))) ->
      (g_post(bli, c0))]]" boolexpr_lfcmrs nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt interval_arith) (NOT const-decl "[bool -> bool]" booleans nil) (BCONST_preservation formula-decl nil boolexpr_lfcmrs nil) (BNOT_preservation formula-decl nil boolexpr_lfcmrs nil) (BAND_preservation formula-decl nil boolexpr_lfcmrs nil) (BOR_preservation formula-decl nil boolexpr_lfcmrs nil) (BIMPLIES_preservation formula-decl nil boolexpr_lfcmrs nil) (BREL_preservation formula-decl nil boolexpr_lfcmrs nil) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number nonempty-type-decl nil numbers nil) (BINCLUDES_preservation formula-decl nil boolexpr_lfcmrs nil) (Interval type-eq-decl nil interval interval_arith) (BITE_merge1_preservation formula-decl nil boolexpr_lfcmrs nil) (BITE_merge2_preservation formula-decl nil boolexpr_lfcmrs nil) (BITE_preservation formula-decl nil boolexpr_lfcmrs nil) (BLETIN_RealExpr_preservation formula-decl nil boolexpr_lfcmrs nil) (blet skolem-const-decl "IntervalExpr" boolexpr_lfcmrs nil) (id const-decl "(bijective?[T, T])" identity nil) (bijective? const-decl "bool" functions nil) (BLETIN_RealExpr_ini_pre_preservation formula-decl nil boolexpr_lfcmrs nil) (BLETIN_BoolExpr_preservation formula-decl nil boolexpr_lfcmrs nil) (BLETIN_BoolExpr_merge_pre_preservation formula-decl nil boolexpr_lfcmrs nil) (TRUE const-decl "bool" booleans nil) (= const-decl "[T, T -> boolean]" equalities nil) (bool nonempty-type-eq-decl nil booleans nil) (boolean nonempty-type-decl nil booleans nil)) shostak) (preservation_property-3 "" 3639755200 ("" (deftactic base_case (lemma-name) (then (skeep*) (hide -1) (expand "F") (lemma lemma-name) (assert) (inst?) (assert))) (("" (induct "bexpr") (("1" (typepred "bexpr!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (assert) nil nil) ("14" (base_case "BCONST_preservation") nil nil) ("15" (base_case "BCONST_preservation") nil nil) ("16" (skeep*) (("16" (hide -2) (("16" (split -1) (("1" (inst?) (("1" (assert) (("1" (lemma "BNOT_preservation") (("1" (assert) (("1" (expand "F" 1) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BNOT1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("17" (skeep*) (("17" (expand "F" 1) (("17" (hide -3) (("17" (split -1) (("1" (split -2) (("1" (lemma "BAND_preservation") (("1" (beta) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BAND2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BAND1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("18" (skeep*) (("18" (expand "F" 1) (("18" (hide -3) (("18" (split -1) (("1" (split -2) (("1" (lemma "BOR_preservation") (("1" (beta) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BOR2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BOR1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("19" (skeep*) (("19" (expand "F" 1) (("19" (hide -3) (("19" (split -1) (("1" (split -2) (("1" (lemma "BIMPLIES_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BIMPLIES2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BIMPLIES1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("20" (base_case "BREL_preservation") nil nil) ("21" (base_case "BINCLUDES_preservation") nil nil) ("22" (skeep*) (("22" (split -1) (("1" (split -2) (("1" (split -3) (("1" (hide -4) (("1" (expand "F" 1) (("1" (lemma "BITE_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (split 1) (("1" (inst? -3 :where 1) (("1" (assert) nil nil)) nil) ("2" (inst? -2 :where 1) (("2" (assert) (("2" (hide 1) (("2" (use "BITE_merge1_preservation") (("2" (assert) (("2" (hide 2) (("2" (inst? -2 :where 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst? -1 :where 1) (("3" (assert) (("3" (hide 1) (("3" (use "BITE_merge2_preservation") (("3" (assert) (("3" (hide 2) (("3" (split 1) (("1" (inst? -2 :where 1) (("1" (assert) nil nil)) nil) ("2" (inst? -1 :where 1) (("2" (assert) (("2" (hide 1) (("2" (use "BITE_merge1_preservation") (("2" (assert) (("2" (hide 2) (("2" (inst? -1 :where 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BITE3_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BITE2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BITE1_var") (("2" (propax) nil nil)) nil)) nil)) nil) ("23" (skolem 1 ("blet" "bin")) (("23" (flatten) (("23" (split -2) (("1" (case "realexpr?(blet)") (("1" (hide -4) (("1" (hide -3) (("1" (skeep* 1) (("1" (expand "F" 1) (("1" (assert) (("1" (name-replace "F_g" "boolexpr_lfcs
                       [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BOR, g_BIMPLIES, g_BREL, g_BINCLUDES,
                        g_BITE_merge1, g_BITE_merge2, g_BITE, g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                        g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (name-replace "F_f" "boolexpr_lfcs
                       [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BOR, f_BIMPLIES, f_BREL, f_BINCLUDES,
                        f_BITE_merge1, f_BITE_merge2, f_BITE, f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                        f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_RealExpr_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (hide 1) (("1" (with-tccs (use "BLETIN_RealExpr_ini_pre_preservation")) (("1" (assert) nil nil) ("2" (expand "realexpr?") (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (flatten) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -2) (("1" (hide -3) (("1" (skeep* 2) (("1" (expand "F" 2) (("1" (assert) (("1" (name-replace "F_f" "boolexpr_lfcs
                         [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BOR, f_BIMPLIES, f_BREL, f_BINCLUDES,
                          f_BITE_merge1, f_BITE_merge2, f_BITE, f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                          f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (name-replace "F_g" "boolexpr_lfcs
                         [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BOR, g_BIMPLIES, g_BREL, g_BINCLUDES,
                          g_BITE_merge1, g_BITE_merge2, g_BITE, g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                          g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_BoolExpr_preservation") (("1" (assert) (("1" (inst -1 "f_ctxt_0" "F_f(blet)(f_ctxt_0)" "F_f(bin)(f_BLETIN_BoolExpr_merge1(f_ctxt_0, F_f(blet)(f_ctxt_0)))" "g_ctxt_0" "F_g(blet)(g_ctxt_0)" "F_g(bin)(g_BLETIN_BoolExpr_merge1(g_ctxt_0, F_g(blet)(g_ctxt_0)))" "blet" "bin") (("1" (assert) (("1" (hide 2 3) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -2 :where 1) (("1" (split -2) (("1" (assert) nil nil) ("2" (hide 2) (("2" (use "BLETIN_BoolExpr_merge_pre_preservation") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (ground) nil nil)) nil)) nil)) nil) ("2" (typepred "bin") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("24" (assert) nil nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (bop adt-accessor-decl "[(bnot?) -> BoolExpr]" IntervalExpr_adt interval_arith) (bop1 shared-adt-accessor-decl "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" IntervalExpr_adt interval_arith) (bop2 shared-adt-accessor-decl "[{x: IntervalExpr | bimplies?(x) OR bor?(x) OR band?(x)} -> BoolExpr]" IntervalExpr_adt interval_arith) (bif adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt interval_arith) (bthen adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt interval_arith) (belse adt-accessor-decl "[(bite?) -> BoolExpr]" IntervalExpr_adt interval_arith) (realexpr? const-decl "bool" interval_expr interval_arith) (blet adt-accessor-decl "[(bletin?) -> IntervalExpr]" IntervalExpr_adt interval_arith) (bin adt-accessor-decl "[(bletin?) -> BoolExpr]" IntervalExpr_adt interval_arith) (boolexpr? const-decl "bool" interval_expr interval_arith) (F def-decl "(post(bexpr, ctxt0))" boolexpr_lfcs nil) (IntervalExpr_induction formula-decl nil IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (Interval type-eq-decl nil interval interval_arith)) nil) (preservation_property-2 "" 3639333668 ("" (deftactic base_case (lemma-name) (then (skeep*) (hide -1) (expand "F") (lemma lemma-name) (assert) (inst?) (assert))) (("" (induct "bexpr") (("1" (typepred "bexpr!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (assert) nil nil) ("14" (base_case "BCONST_preservation") nil nil) ("15" (skeep*) (("15" (hide -2) (("15" (split -1) (("1" (inst?) (("1" (assert) (("1" (lemma "BNOT_preservation") (("1" (assert) (("1" (expand "F" 1) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BNOT1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("16" (skeep*) (("16" (expand "F" 1) (("16" (hide -3) (("16" (split -1) (("1" (split -2) (("1" (lemma "BAND_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BAND2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BAND1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (base_case "BREL_preservation") nil nil) ("20" (base_case "BINCLUDES_preservation") nil nil) ("21" (postpone) nil nil) ("22" (skolem 1 ("blet" "bin")) (("22" (flatten) (("22" (split -2) (("1" (case "realexpr?(blet)") (("1" (hide -4) (("1" (hide -3) (("1" (skeep* 1) (("1" (expand "F" 1) (("1" (assert) (("1" (name-replace "F_g" "boolexpr_lfcs
                    [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BREL, g_BINCLUDES,
                     g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                     g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (name-replace "F_f" "boolexpr_lfcs
                    [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BREL, f_BINCLUDES,
                     f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                     f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_RealExpr_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (hide 1) (("1" (use "BLETIN_RealExpr_ini_pre_preservation") (("1" (assert) nil nil) ("2" (expand "realexpr?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -2) (("1" (hide -3) (("1" (skeep* 2) (("1" (expand "F" 2) (("1" (assert) (("1" (name-replace "F_f" "boolexpr_lfcs
                             [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BREL,
                              f_BINCLUDES, f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                              f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (name-replace "F_g" "boolexpr_lfcs
                             [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BREL,
                              g_BINCLUDES, g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                              g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_BoolExpr_preservation") (("1" (assert) (("1" (inst -1 "f_ctxt_0" "F_f(blet)(f_ctxt_0)" "F_f(bin)(f_BLETIN_BoolExpr_merge1(f_ctxt_0, F_f(blet)(f_ctxt_0)))" "g_ctxt_0" "F_g(blet)(g_ctxt_0)" "F_g(bin)(g_BLETIN_BoolExpr_merge1(g_ctxt_0, F_g(blet)(g_ctxt_0)))" "blet" "bin") (("1" (assert) (("1" (hide 2 3) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -2 :where 1) (("1" (split -2) (("1" (assert) nil nil) ("2" (hide 2) (("2" (use "BLETIN_BoolExpr_merge_pre_preservation") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (ground) nil nil)) nil)) nil)) nil) ("2" (typepred "bin") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak) (preservation_property-1 nil 3637671513 ("" (deftactic base_case (lemma-name) (then (skeep*) (hide -1) (expand "F") (lemma lemma-name) (assert) (inst?) (assert))) (("" (induct "bexpr") (("1" (typepred "bexpr!1") (("1" (assert) nil nil)) nil) ("2" (assert) nil nil) ("3" (assert) nil nil) ("4" (assert) nil nil) ("5" (assert) nil nil) ("6" (assert) nil nil) ("7" (assert) nil nil) ("8" (assert) nil nil) ("9" (assert) nil nil) ("10" (assert) nil nil) ("11" (assert) nil nil) ("12" (assert) nil nil) ("13" (assert) nil nil) ("14" (base_case "BCONST_preservation") nil nil) ("15" (skeep*) (("15" (hide -2) (("15" (split -1) (("1" (inst?) (("1" (assert) (("1" (lemma "BNOT_preservation") (("1" (assert) (("1" (expand "F" 1) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide-all-but (-2 1)) (("1" (use "pre_preservation_property") (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BNOT1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil) ("16" (skeep*) (("16" (expand "F" 1) (("16" (hide -3) (("16" (split -1) (("1" (split -2) (("1" (lemma "BAND_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (assert) (("1" (inst? -1 :where 1) (("1" (use "pre_preservation_property") (("1" (assert) (("1" (assert) (("1" (lemma "pre_preservation_property") (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (typepred "BAND2_var") (("2" (propax) nil nil)) nil)) nil) ("2" (typepred "BAND1_var") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil) ("17" (postpone) nil nil) ("18" (postpone) nil nil) ("19" (base_case "BREL_preservation") nil nil) ("20" (base_case "BINCLUDES_preservation") nil nil) ("21" (postpone) nil nil) ("22" (skolem 1 ("blet" "bin")) (("22" (flatten) (("22" (split -2) (("1" (case "realexpr?(blet)") (("1" (hide -4) (("1" (hide -3) (("1" (skeep* 1) (("1" (expand "F" 1) (("1" (assert) (("1" (name-replace "F_g" "boolexpr_lfcs
            [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BREL, g_BINCLUDES,
             g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
             g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (name-replace "F_f" "boolexpr_lfcs
            [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BREL, f_BINCLUDES,
             f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
             f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_RealExpr_preservation") (("1" (assert) (("1" (inst? -1 :where 1) (("1" (assert) (("1" (hide 2) (("1" (inst? -2 :where 1) (("1" (assert) (("1" (hide 1) (("1" (use "BLETIN_RealExpr_ini_pre_preservation") (("1" (assert) nil nil) ("2" (expand "realexpr?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "realexpr?") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split -2) (("1" (hide -3) (("1" (skeep* 2) (("1" (expand "F" 2) (("1" (assert) (("1" (name-replace "F_f" "boolexpr_lfcs
                   [f_Ctxt, f_post, f_BCONST, f_BNOT, f_BAND, f_BREL,
                    f_BINCLUDES, f_BLETIN_RealExpr_ini, f_BLETIN_RealExpr,
                    f_BLETIN_BoolExpr_merge1, f_BLETIN_BoolExpr].F") (("1" (name-replace "F_g" "boolexpr_lfcs
                   [g_Ctxt, g_post, g_BCONST, g_BNOT, g_BAND, g_BREL,
                    g_BINCLUDES, g_BLETIN_RealExpr_ini, g_BLETIN_RealExpr,
                    g_BLETIN_BoolExpr_merge1, g_BLETIN_BoolExpr].F") (("1" (lemma "BLETIN_BoolExpr_preservation") (("1" (assert) (("1" (inst -1 "f_ctxt_0" "F_f(blet)(f_ctxt_0)" "F_f(bin)(f_BLETIN_BoolExpr_merge1(f_ctxt_0, F_f(blet)(f_ctxt_0)))" "g_ctxt_0" "F_g(blet)(g_ctxt_0)" "F_g(bin)(g_BLETIN_BoolExpr_merge1(g_ctxt_0, F_g(blet)(g_ctxt_0)))" "blet" "bin") (("1" (assert) (("1" (split 1) (("1" (lemma "pre_preservation_property") (("1" (hide 2 3) (("1" (expand "F_f" 1) (("1" (expand "F_g" 1) (("1" (inst? -1 :where 1) (("1" (assert) nil nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst? -1 :where 1) (("2" (assert) nil nil)) nil) ("3" (hide 2 3) (("3" (lemma "pre_preservation_property") (("3" (expand "F_f" 1) (("3" (expand "F_g" 1) (("3" (inst? -1 :where 1) (("3" (assert) (("3" (hide 2) (("3" (case "p_pre(F_f(blet)(f_ctxt_0), F_g(blet)(g_ctxt_0))") (("1" (hide-all-but (1 -1 -4)) (("1" (expand ("F_f" "F_g")) (("1" (use "BLETIN_BoolExpr_merge_pre_preservation") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (hide 2) (("2" (expand ("F_g" "F_f") 1) (("2" (lemma "pre_preservation_property") (("2" (inst? -1 :where 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("4" (inst -2 "f_BLETIN_BoolExpr_merge1(f_ctxt_0, F_f(blet)(f_ctxt_0))" "g_BLETIN_BoolExpr_merge1(g_ctxt_0, F_g(blet)(g_ctxt_0))") (("4" (assert) (("4" (case "p_pre(F_f(blet)(f_ctxt_0), F_g(blet)(g_ctxt_0))") (("1" (hide-all-but (-1 -3 3)) (("1" (use "BLETIN_BoolExpr_merge_pre_preservation") (("1" (assert) nil nil)) nil)) nil) ("2" (lemma "pre_preservation_property") (("2" (expand ("F_g" "F_f") 1) (("2" (inst? -1 :where 1) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (grind) nil nil)) nil)) nil) ("2" (typepred "bin") (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ((IntervalExpr type-decl nil IntervalExpr_adt interval_arith) (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (band? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bor? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (brel? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bite? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (BoolExpr type-eq-decl nil IntervalExpr_adt interval_arith) (IntervalExpr_induction formula-decl nil IntervalExpr_adt interval_arith) (RealExpr type-eq-decl nil IntervalExpr_adt interval_arith) (letin? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (fun? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (div? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (pow? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sq? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (mult? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (sub? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (neg? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (abs? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (add? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (const? adt-recognizer-decl "[IntervalExpr -> boolean]" IntervalExpr_adt interval_arith) (RealOrder type-eq-decl nil real_orders reals) (realorder? const-decl "bool" real_orders reals) (Interval type-eq-decl nil interval interval_arith)) shostak)))
