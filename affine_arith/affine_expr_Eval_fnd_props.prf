(|affine_expr_Eval_fnd_props| (|cp_box_vs_expansion__TCC1| 0 (|cp_box_vs_expansion__TCC1-1| |nil| 3646560460 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (>= CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|)) NIL (|cp_box_vs_expansion_| SUBTYPE "affine_expr_Eval_fnd_props.nextfreeidx" "nat"))) (|cp_box_vs_expansion__TCC2| 0 (|cp_box_vs_expansion__TCC2-1| |nil| 3646560460 ("" (SUBTYPE-TCC) NIL NIL) ((|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (>= CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|cp_box_vs_expansion_| SUBTYPE "affine_expr_Eval_fnd_props.added_idx" "upfrom((number_fields.+)(1, affine_box.last_idx_in_box(affine_expr_Eval_fnd_props.box)))"))) (|cp_box_vs_expansion__TCC3| 0 (|cp_box_vs_expansion__TCC3-2| |nil| 3646582424 ("" (SKEEP*) (("" (TYPEPRED "cache") (("" (USE "correct_cache?_alt_def") (("" (REPLACE -1 :HIDE? T) (("" (USE "correct_cache?_alt_def") (("" (REPLACE -1 :HIDE? T) (("" (LEMMA "every_implies[CacheData]") (("" (INST? -1 :WHERE 1) (("" (INST? -1 :WHERE -2) (("" (ASSERT) (("" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|CacheData_correct?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData_correct?_inclusion| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|every_implies| FORMULA-DECL NIL |more_list_props| |structures|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|correct_cache?_alt_def| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL)) NIL (|cp_box_vs_expansion_| SUBTYPE "affine_expr_Eval_fnd_props.cache" "(affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_expr_Eval_fnd_props.box, (: affine_expr_Eval_fnd_props.I :))))")) (|cp_box_vs_expansion__TCC3-1| |nil| 3646560460 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cp_box_vs_expansion_| SUBTYPE "affine_expr_Eval_fnd_props.cache" "(affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_expr_Eval_fnd_props.box, (: affine_expr_Eval_fnd_props.I :))))"))) (|cp_box_vs_expansion_| 0 (|cp_box_vs_expansion_-2| "" 3883668156 ("" (SKEEP*) (("" (LABEL "iacniig" -3) (("" (HIDE "iacniig") (("" (LABEL "vrcib" -3) (("" (HIDE "vrcib") (("" (LABEL "nicniig" -3) (("" (HIDE "nicniig") (("" (TYPEPRED "x") (("" (SKOLEM -1 "e") (("" (NAME "e_" "IF SingInterval?(I) THEN 0 ELSE e ENDIF") (("" (INST 1 "e_") (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box_compatible?" 1) (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (CASE "i<length(box)") (("1" (CASE "nth(append(box, (: I :)), i) = nth(box, i)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "eval_upd_no_idxs_ac") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (USE "gnbi_upd_2") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box_compatible?" -5) (("1" (INST -5 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "idxs_ac_var_ac") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL :HIDE? T) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (CASE "i=length(box)") (("1" (REPLACE -1 :HIDE? T) (("1" (HIDE -1 1) (("1" (CASE "nth(append(box, (: I :)), length(box)) = nth((: I :), length(box) - length(box))") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (EXPAND "nth" 1) (("1" (USE "eval_var_ac") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "gnbi_upd") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (USE "length_append[Interval]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "compatible_pairs_on?" 1) (("2" (SKOLEM 1 "i") (("2" (SKOLEM 1 "n") (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "i") (("2" (INST -4 "n") (("1" (EXPAND "eval_ACExpr_Env") (("1" (USE "eval_vs_idempotence") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (FLATTEN) (("1" (USE "eval_upd_no_idxs_ac") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "varidx_powvar(nth(cache, i)`1) < length(box)") (("1" (ASSERT) (("1" (EXPAND "nth_ac") (("1" (CASE "nth(append(box, (: I :)), varidx_powvar(nth(cache, i)`1)) =
                              nth(box, varidx_powvar(nth(cache, i)`1))") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "pow_var_compatible?" 1) (("1" (FLATTEN) (("1" (EXPAND "pow_var_compatible?" -9) (("1" (ASSERT) (("1" (SKOLEM 1 "i_") (("1" (INST -9 "i_") (("1" (USE "gnbi_upd_2") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (USE "gnbi_upd_2") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "var_ac" 1) (("1" (ASSERT) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "nth" -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "nicniig") (("2" (EXPAND "new_idxs_cache_not_in_idx_gap") (("2" (INST "nicniig" "i") (("2" (INST "nicniig" "i_") (("2" (SPLIT "nicniig") (("1" (TYPEPRED "added_idx") (("1" (EXPAND "last_idx_in_box") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i_") (("2" (USE "cache_powvar_correct") (("2" (EXPAND "CacheData_correct?") (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "k" "varidx_powvar(nth(cache, i)`1)") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "vrcib") (("2" (EXPAND "varidxs_re_cache_in_box") (("2" (EXPAND "varidx_powvar") (("2" (INST "vrcib" "i") (("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "iacniig") (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (INST "iacniig" "i") (("2" (INST? "iacniig" :WHERE -2) (("2" (ASSERT) (("2" (TYPEPRED "added_idx") (("2" (EXPAND "last_idx_in_box") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL "vrcib") (("2" (EXPAND "varidxs_re_cache_in_box") (("2" (INST "vrcib" "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cp_box_vs_expansion_-1| |nil| 3646568610 ("" (SKEEP*) (("" (LABEL "iacniig" -3) (("" (HIDE "iacniig") (("" (LABEL "vrcib" -3) (("" (HIDE VRCIB) (("" (LABEL NICNIIG -3) (("" (HIDE NICNIIG) (("" (TYPEPRED "x") (("" (SKOLEM -1 "e") (("" (NAME "e_" "IF SingInterval?(I) THEN 0 ELSE e ENDIF") (("" (INST 1 "e_") (("1" (ASSERT) (("1" (SPLIT 1) (("1" (EXPAND "vars_in_box_compatible?" 1) (("1" (SKOLEM 1 "i") (("1" (TYPEPRED "i") (("1" (CASE "i<length(box)") (("1" (CASE "nth(append(box, (: I :)), i) = nth(box, i)") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "eval_upd_no_idxs_ac") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (USE "gnbi_upd_2") (("1" (ASSERT) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "vars_in_box_compatible?" -5) (("1" (INST -5 "i") NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (USE "idxs_ac_var_ac") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -3 :DIR RL :HIDE? T) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -1)) (("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL) ("2" (CASE "i=length(box)") (("1" (REPLACE -1 :HIDE? T) (("1" (HIDE -1 1) (("1" (CASE "nth(append(box, (: I :)), length(box)) = nth((: I :), length(box) - length(box))") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (EXPAND "nth" 1) (("1" (USE "eval_var_ac") (("1" (REPLACE -1 :HIDE? T) (("1" (USE "gnbi_upd") (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :DIR RL :HIDE? T) (("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (ASSERT) (("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (USE "length_append[Interval]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "compatible_pairs_on?" 1) (("2" (SKOLEM 1 "i") (("2" (SKOLEM 1 "n") (("2" (EXPAND "compatible_pairs_on?" -4) (("2" (INST -4 "i") (("2" (INST -4 "n") (("1" (EXPAND "eval_ACExpr_Env") (("1" (USE "eval_vs_idempotence") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (FLATTEN) (("1" (USE "eval_upd_no_idxs_ac") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (ASSERT) (("1" (FLATTEN) (("1" (CASE "varidx_powvar(nth(cache, i)`1) < length(box)") (("1" (ASSERT) (("1" (EXPAND "nth_ac") (("1" (CASE "nth(append(box, (: I :)), varidx_powvar(nth(cache, i)`1)) =
                              nth(box, varidx_powvar(nth(cache, i)`1))") (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "pow_var_compatible?" 1) (("1" (FLATTEN) (("1" (EXPAND "pow_var_compatible?" -9) (("1" (ASSERT) (("1" (SKOLEM 1 "i_") (("1" (INST -9 "i_") (("1" (USE "gnbi_upd_2") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (USE "gnbi_upd_2") (("1" (ASSERT) (("1" (HIDE 2) (("1" (EXPAND "var_ac" 1) (("1" (ASSERT) (("1" (LIFT-IF -1) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "cons_ol") (("1" (EXPAND "nth" -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL NICNIIG) (("2" (EXPAND "new_idxs_cache_not_in_idx_gap") (("2" (INST NICNIIG I) (("2" (INST NICNIIG I_) (("2" (SPLIT NICNIIG) (("1" (TYPEPRED "added_idx") (("1" (EXPAND "last_idx_in_box") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "i_") (("2" (USE "cache_powvar_correct") (("2" (EXPAND "CacheData_correct?") (("2" (FLATTEN) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "k" "varidx_powvar(nth(cache, i)`1)") (("2" (HIDE-ALL-BUT (-1 1)) (("2" (USE "more_list_props[Interval].nth_append") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL VRCIB) (("2" (EXPAND "varidxs_re_cache_in_box") (("2" (EXPAND "varidx_powvar") (("2" (INST VRCIB I) (("2" (INST?) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL IACNIIG) (("2" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("2" (INST IACNIIG I) (("2" (INST? IACNIIG :WHERE -2) (("2" (ASSERT) (("2" (TYPEPRED "added_idx") (("2" (EXPAND "last_idx_in_box") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL VRCIB) (("2" (EXPAND "varidxs_re_cache_in_box") (("2" (INST VRCIB I) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "n") (("2" (USE "length_append[Interval]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|opn| ADT-ACCESSOR-DECL "[(pow?) -> nat]" |IntervalExpr_adt| |interval_arith|) (|nzBaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ac_proj_pd| FORMULA-DECL NIL |affine| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData_correct?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_ac| CONST-DECL "AffineCombination" |affine_pow| NIL) (|cache_powvar_correct| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|i| SKOLEM-CONST-DECL "below(length(cache))" |affine_expr_Eval_fnd_props| NIL) (|cache| SKOLEM-CONST-DECL "{cache: (correct_cache?(box)) | idxs_bounded(nextfreeidx)(cache)}" |affine_expr_Eval_fnd_props| NIL) (|nextfreeidx| SKOLEM-CONST-DECL "upfrom(added_idx)" |affine_expr_Eval_fnd_props| NIL) (|added_idx| SKOLEM-CONST-DECL "above(1 + last_idx_in_box(box))" |affine_expr_Eval_fnd_props| NIL) (|eval| DEF-DECL "real" |interval_expr| |interval_arith|) (|op| SHARED-ADT-ACCESSOR-DECL "[{x: IntervalExpr |
         bincludes?(x) OR fun?(x) OR pow?(x) OR sq?(x) OR neg?(x)
     OR abs?(x)} ->
   RealExpr]" |IntervalExpr_adt| |interval_arith|) (|bincludes?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (|eval_vs_idempotence| FORMULA-DECL NIL |interval_expr| |interval_arith|) (|n| SKOLEM-CONST-DECL "upfrom(length(append(box, (: I :))))" |affine_expr_Eval_fnd_props| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|gnbi_upd| FORMULA-DECL NIL |affine| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (> CONST-DECL "bool" |reals| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL) (|eval_var_ac| FORMULA-DECL NIL |affine| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|eval_upd_no_idxs_ac| FORMULA-DECL NIL |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|box| SKOLEM-CONST-DECL "Box" |affine_expr_Eval_fnd_props| NIL) (I SKOLEM-CONST-DECL "Interval" |affine_expr_Eval_fnd_props| NIL) (|i| SKOLEM-CONST-DECL "below(length(append(box, (: I :))))" |affine_expr_Eval_fnd_props| NIL) (|idxs_ac_var_ac| FORMULA-DECL NIL |affine| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|gnbi_upd_2| FORMULA-DECL NIL |affine| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|e_| SKOLEM-CONST-DECL "real" |affine_expr_Eval_fnd_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) SHOSTAK)) (|cp_box_vs_cache_expansion_TCC1| 0 (|cp_box_vs_cache_expansion_TCC1-1| |nil| 3646560460 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (>= CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|strict_order?| CONST-DECL "bool" |orders| NIL) (|transitive?| CONST-DECL "bool" |relations| NIL) (|irreflexive?| CONST-DECL "bool" |relations| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|strict_total_order_restrict| APPLICATION-JUDGEMENT "(strict_total_order?[S])" |restrict_order_props| NIL)) NIL (|cp_box_vs_cache_expansion| ASSUMING "structures@ordered_list[nat, restrict[[real, real], [nat, nat], bool].restrict(reals.<)].ordered_list" "order: ASSUMPTION orders[ordered_list.T].strict_order?(ordered_list.<)"))) (|cp_box_vs_cache_expansion_TCC2| 0 (|cp_box_vs_cache_expansion_TCC2-1| |nil| 3646560460 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (>= CONST-DECL "bool" |reals| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|next_idx| CONST-DECL "nat" |affine| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (<= CONST-DECL "bool" |reals| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|Add| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|[\|\|]| CONST-DECL "Interval" |interval| |interval_arith|) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)) NIL (|cp_box_vs_cache_expansion| SUBTYPE "affine_expr_Eval_fnd_props.added_idx" "upfrom((number_fields.+)(1, affine_box.last_idx_in_box(affine_expr_Eval_fnd_props.box)))"))) (|cp_box_vs_cache_expansion_TCC3| 0 (|cp_box_vs_cache_expansion_TCC3-1| |nil| 3646560460 ("" (SKEEP*) (("" (TYPEPRED "cache") (("" (USE "correct_cache?_alt_def") (("" (REPLACE -1 :HIDE? T) (("" (USE "correct_cache?_alt_def") (("" (REPLACE -1 :HIDE? T) (("" (EXPAND "every" 1) (("" (SPLIT 1) (("1" (EXPAND "CacheData_correct?") (("1" (EXPAND "powvar?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (LEMMA "every_implies[CacheData]") (("2" (INST? -1 :WHERE 1) (("2" (INST? -1 :WHERE -2) (("2" (ASSERT) (("2" (USE "CacheData_correct?_inclusion") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|list| TYPE-DECL NIL |list_adt| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (< CONST-DECL "bool" |reals| NIL) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (> CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|CacheData_correct?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|CacheData_correct?_inclusion| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|every_implies| FORMULA-DECL NIL |more_list_props| |structures|) (|append| DEF-DECL "list[T]" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (VARIDX ADT-CONSTRUCTOR-DECL "[nat -> (varidx?)]" |IntervalExpr_adt| |interval_arith|) (|length| DEF-DECL "nat" |list_props| NIL) (|correct_cache?_alt_def| FORMULA-DECL NIL |affine_expr_Eval_fnd| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL)) NIL (|cp_box_vs_cache_expansion| SUBTYPE "list_adt[CacheData].cons((IntervalExpr_adt.VARIDX(list_props[Interval].length(affine_expr_Eval_fnd_props.box)), affine_expr_Eval_fnd_props.ac, affine_expr_Eval_fnd_props.nw_idxs), affine_expr_Eval_fnd_props.cache)" "(affine_expr_Eval_fnd.correct_cache?(list_props[Interval].append(affine_expr_Eval_fnd_props.box, (: affine_expr_Eval_fnd_props.I :))))"))) (|cp_box_vs_cache_expansion| 0 (|cp_box_vs_cache_expansion-1| |nil| 3646560498 ("" (ASSERT) (("" (SKEEP*) (("" (NAME-REPLACE "ac" "nth(cache, ac_idx)`2") (("" (EXPAND "compatible_pairs?") (("" (USE "cp_box_vs_expansion_") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST 1 "upd_noise(N, length(box), e)") (("1" (ASSERT) (("1" (EXPAND "compatible_pairs_on?" 1) (("1" (SKEEP 1) (("1" (CASE "i=0") (("1" (REPLACES -1) (("1" (SKEEP 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "powvar?" 1) (("1" (EXPAND "eval_ACExpr_Env") (("1" (EXPAND "eval" 1 1) (("1" (USE "eval_upd_no_idxs_ac") (("1" (ASSERT) (("1" (EXPAND "idxs_ac_cache_not_in_idx_gap") (("1" (EXPAND "ac") (("1" (INST -7 "ac_idx") (("1" (INST -7 "length(box)") (("1" (ASSERT) (("1" (TYPEPRED "added_idx") (("1" (EXPAND "last_idx_in_box") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (EXPAND "compatible_pairs_on?" -2) (("2" (INST -2 "i-1") (("2" (TYPEPRED "i") (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (NAME-REPLACE "I" "eval_by_intervals(ac)") (("2" (EXPAND "eval_ACExpr_Env") (("2" (NAME-REPLACE "x" "eval(re, vs, n)") (("2" (CASE "x ## I") (("1" (USE "  containment_var") (("1" (ASSERT) (("1" (SKEEP -1) (("1" (INST 1 "e") (("1" (USE "eval_var_ac") (("1" (REPLACE -1 -2 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "x") (("2" (EXPAND "I") (("2" (USE "containment_interval") (("2" (ASSERT) (("2" (HIDE 2) (("2" (EXPAND "containment") (("2" (INST 1 "N") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|null_is_noise| NAME-JUDGEMENT "Noise" |affine| NIL) (|null_is_ErrorTerms| NAME-JUDGEMENT "ErrorTerms" |affine| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|compatible_pairs?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|##| CONST-DECL "bool" |interval| |interval_arith|) (|get_noise_by_idx| DEF-DECL "Epsilon" |affine| NIL) (I SKOLEM-CONST-DECL "ProperInterval" |affine_expr_Eval_fnd_props| NIL) (|cons_ol| CONST-DECL "ordered_list" |ordered_list| |structures|) (|add_N| CONST-DECL "Noise" |affine| NIL) (|empty_ErrorTerms| CONST-DECL "ErrorTerms" |affine| NIL) (|{\|\|}| CONST-DECL "AffineCombination" |affine| NIL) (|var_ac| CONST-DECL "AffineCombination" |affine| NIL) (|eval_ac_noise| CONST-DECL "real" |affine| NIL) (|SingInterval?| CONST-DECL "bool" |affine| NIL) (|vars_in_box_compatible?| CONST-DECL "bool" |affine_box| NIL) (|varidx_powvar| CONST-DECL "nat" |affine_expr| NIL) (|nth_ac| CONST-DECL "AffineCombination" |affine_box| NIL) (|expt| DEF-DECL "real" |exponentiation| NIL) (^ CONST-DECL "real" |exponentiation| NIL) (|pow_var_compatible?| CONST-DECL "bool" |affine_pow| NIL) (|idxs_ac| CONST-DECL "list[nat]" |affine| NIL) (|subterm| ADT-DEF-DECL "boolean" |IntervalExpr_adt| |interval_arith|) (|varidxs_re_cache_in_box| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|new_idxs_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|le_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|extend_N| CONST-DECL "Noise" |affine| NIL) (|empty_noise| CONST-DECL "Noise" |affine| NIL) (|eval_var_ac| FORMULA-DECL NIL |affine| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|containment_var| FORMULA-DECL NIL |affine| NIL) (|x| SKOLEM-CONST-DECL "real" |affine_expr_Eval_fnd_props| NIL) (|containment_interval| FORMULA-DECL NIL |affine| NIL) (|containment| CONST-DECL "bool" |affine| NIL) (|Env| TYPE-EQ-DECL NIL |box| |interval_arith|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|null_ol?| CONST-DECL "bool" |ordered_list| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|car_ol| CONST-DECL "T" |ordered_list| |structures|) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|upd_noise| DEF-DECL "{N_: Noise |
   (null_ol?(N) IMPLIES (null_ol?(N_) OR car_ol(N_)`1 = n)) AND
    (NOT null_ol?(N) IMPLIES
      null_ol?(N_) OR
       ((n < car_ol(N)`1 AND car_ol(N_)`1 = n) OR
         (n > car_ol(N)`1 AND car_ol(N_)`1 = car_ol(N)`1) OR
          car_ol(N_)`1 >= min(car_ol(N)`1, n)))}" |affine| NIL) (|compatible_pairs_on?| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (VARIDX ADT-CONSTRUCTOR-DECL "[nat -> (varidx?)]" |IntervalExpr_adt| |interval_arith|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|powvar?| CONST-DECL "bool" |affine_expr| NIL) (|eval| DEF-DECL "real" |interval_expr| |interval_arith|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|gt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|idxs_ac_cache_not_in_idx_gap| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|eval_upd_no_idxs_ac| FORMULA-DECL NIL |affine| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lt_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|ge_realorder| NAME-JUDGEMENT "RealOrder" |real_orders| |reals|) (|i| SKOLEM-CONST-DECL "below(length(cons((VARIDX(length(box)), ac, nw_idxs), cache)))" |affine_expr_Eval_fnd_props| NIL) (|cache| SKOLEM-CONST-DECL "{cache: (correct_cache?(box)) | idxs_bounded(nextfreeidx)(cache)}" |affine_expr_Eval_fnd_props| NIL) (|nextfreeidx| SKOLEM-CONST-DECL "upfrom(added_idx)" |affine_expr_Eval_fnd_props| NIL) (|added_idx| SKOLEM-CONST-DECL "above(1 + last_idx_in_box(box))" |affine_expr_Eval_fnd_props| NIL) (|nw_idxs| SKOLEM-CONST-DECL "ordered_list[nat, restrict[[real, real], [nat, nat], bool](<)]" |affine_expr_Eval_fnd_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|n| SKOLEM-CONST-DECL "upfrom(length(box))" |affine_expr_Eval_fnd_props| NIL) (|box| SKOLEM-CONST-DECL "Box" |affine_expr_Eval_fnd_props| NIL) (|vs| SKOLEM-CONST-DECL "Env" |affine_expr_Eval_fnd_props| NIL) (|re| SKOLEM-CONST-DECL "RealExpr" |affine_expr_Eval_fnd_props| NIL) (|eval_ACExpr_Env| CONST-DECL "BaseType" |affine_expr| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|ac| SKOLEM-CONST-DECL "AffineCombination" |affine_expr_Eval_fnd_props| NIL) (|eval_by_intervals| CONST-DECL "ProperInterval" |affine| NIL) (|ProperInterval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|Proper?| CONST-DECL "bool" |interval| |interval_arith|) (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL) (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|Env| TYPE-EQ-DECL NIL |affine_box| NIL) (<= CONST-DECL "bool" |reals| NIL) (|Epsilon| TYPE-EQ-DECL NIL |affine| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nzEpsilon| TYPE-EQ-DECL NIL |affine| NIL) (|lt_idx| CONST-DECL "bool" |indexed_list| |structures|) (|Noise| TYPE-EQ-DECL NIL |affine| NIL) (|cp_box_vs_expansion_| FORMULA-DECL NIL |affine_expr_Eval_fnd_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|above| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|last_idx_in_box| CONST-DECL "upfrom(-1)" |affine_box| NIL) (|upfrom| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (> CONST-DECL "bool" |reals| NIL) (|idxs_bounded| CONST-DECL "bool" |affine_expr_Eval_fnd| NIL) (|correct_cache?| DEF-DECL "bool" |affine_expr_Eval_fnd| NIL) (|Box| TYPE-EQ-DECL NIL |box| |interval_arith|) (|Interval| TYPE-EQ-DECL NIL |interval| |interval_arith|) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|CacheData| TYPE-EQ-DECL NIL |affine_expr_Eval_fnd| NIL) (|ordered_list| TYPE-EQ-DECL NIL |ordered_list| |structures|) (|ordered_list?| DEF-DECL "bool" |ordered_list| |structures|) (< CONST-DECL "bool" |reals| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|RealExpr| TYPE-EQ-DECL NIL |IntervalExpr_adt| |interval_arith|) (|fun4?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|letin?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun2?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|fun?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|div?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|pow?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sq?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|mult?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|sub?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|neg?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|abs?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|add?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|varidx?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (|const?| ADT-RECOGNIZER-DECL "[IntervalExpr -> boolean]" |IntervalExpr_adt| |interval_arith|) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|IntervalExpr| TYPE-DECL NIL |IntervalExpr_adt| |interval_arith|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|AffineCombination| TYPE-EQ-DECL NIL |affine| NIL) (|ErrorTerms| TYPE-EQ-DECL NIL |affine| NIL) (|BaseType| TYPE-EQ-DECL NIL |affine| NIL)) SHOSTAK)))
