(|mappings| (|reachable_TCC1| 0 (|reachable_TCC1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (TYPEPRED "vert(G!1)") (("" (LEMMA "finite_subset[T]") (("" (INST -1 "vert(G!1)" "{y: T |
                vert(G!1)(y) AND
                 (EXISTS (w: Seq[T](G!1)): walk_from?[T](G!1, w, x!1, y))}") (("" (BDDSIMP) (("" (HIDE 2) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)) NIL (|reachable| SUBTYPE "{y: mappings.T | booleans.AND(vert(mappings.G)(y), EXISTS (w: walks[mappings.T].Seq(mappings.G)): walks[mappings.T].walk_from?(mappings.G, w, mappings.x, y))}" "finite_set[T]"))) (|reachable_subset| 0 (|reachable_subset-1| |nil| 3318087528 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL)) NIL)) (|path_reach1| 0 (|path_reach1-3| "" 3790105537 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "path_connected?" -1) (("1" (SKOSIMP*) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "empty?" 1) (("1" (SKOSIMP*) (("1" (INST 1 "x!1") (("1" (EXPAND "member" -1) (("1" (EXPAND "reachable" 1) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF) (("2" (SPLIT) (("1" (BDDSIMP) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST -3 "x!1" "x!2") (("2" (SKOSIMP*) (("2" (INST 1 "w!1") (("2" (EXPAND "walk_from?" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "path_connected?") (("2" (SKOSIMP*) (("2" (SPLIT) (("1" (EXPAND "empty?") (("1" (EXPAND "empty?") (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "reachable") (("2" (TYPEPRED "y!1") (("2" (TYPEPRED "x!2") (("2" (LEMMA "extensionality_postulate[T,bool]") (("2" (INST -1 "({y: T |          vert(G!1)(y) AND           (EXISTS (w: Seq(G!1)):walk_from?(G!1, w, x!1, y))})" "vert(G!1)") (("2" (FLATTEN) (("2" (BDDSIMP -2 -6) (("1" (HIDE -2) (("1" (HIDE -5) (("1" (INST-CP -1 "x!2") (("1" (BDDSIMP -2 -3) (("1" (SKOLEM! -1) (("1" (INST -2 "y!1") (("1" (BETA -2) (("1" (BDDSIMP) (("1" (SKOLEM! -2) (("1" (LEMMA "walk?_reverse") (("1" (INST-CP -1 "G!1" "x!1" "y!1" "w!2") (("1" (INST -1 "G!1" "x!1" "x!2" "w!1") (("1" (BDDSIMP) (("1" (HIDE -1 -3) (("1" (SKOLEM!) (("1" (SKOLEM! -2) (("1" (LEMMA "walk_merge") (("1" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("1" (BDDSIMP) (("1" (HIDE -1 -2) (("1" (EXPAND "walk_from?" -1) (("1" (ASSERT) (("1" (SKOLEM! -1) (("1" (EXPAND "walk?" -1) (("1" (EXPAND "finseq_appl") (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "walk?" 1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|x!2| SKOLEM-CONST-DECL "T" |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|walk?_reverse| FORMULA-DECL NIL |walks| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|walk_merge| FORMULA-DECL NIL |walks| NIL) (|extensionality_postulate| FORMULA-DECL NIL |functions| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) SHOSTAK) (|path_reach1-2| "Valid3.2" 3318377422 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "path_connected?" -1) (("1" (SKOSIMP*) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "empty?" 1) (("1" (SKOSIMP*) (("1" (INST 1 "x!1") (("1" (EXPAND "member" -1) (("1" (EXPAND "reachable" 1) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF) (("2" (SPLIT) (("1" (BDDSIMP) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST -3 "x!1" "x!2") (("2" (SKOSIMP*) (("2" (INST 1 "w!1") (("1" (EXPAND "walk_from?" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "path_connected?") (("2" (SKOSIMP*) (("2" (SPLIT) (("1" (EXPAND "empty?") (("1" (EXPAND "empty?") (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "reachable") (("2" (TYPEPRED "y!1") (("2" (TYPEPRED "x!2") (("2" (LEMMA "extensionality_postulate[T,bool]") (("2" (INST -1 "({y: T |          vert(G!1)(y) AND           (EXISTS (w: Seq(G!1)):walk_from?(G!1, w, x!1, y))})" "vert(G!1)") (("2" (FLATTEN) (("2" (BDDSIMP -2 -6) (("1" (HIDE -2) (("1" (HIDE -5) (("1" (INST-CP -1 "x!2") (("1" (BDDSIMP -2 -3) (("1" (SKOLEM! -1) (("1" (INST -2 "y!1") (("1" (BETA -2) (("1" (BDDSIMP) (("1" (SKOLEM! -2) (("1" (LEMMA "walk?_reverse") (("1" (INST-CP -1 "G!1" "x!1" "y!1" "w!2") (("1" (INST -1 "G!1" "x!1" "x!2" "w!1") (("1" (BDDSIMP) (("1" (HIDE -1 -3) (("1" (SKOLEM!) (("1" (SKOLEM! -2) (("1" (LEMMA "walk_merge") (("1" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("1" (BDDSIMP) (("1" (HIDE -1 -2) (("1" (EXPAND "walk_from?" -1) (("1" (ASSERT) (("1" (SKOLEM! -1) (("1" (EXPAND "walk?" -1) (("1" (EXPAND "finseq_appl") (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "walk?" 1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|path_reach1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "path_connected?" -1) (("1" (SKOSIMP*) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "empty?" 1) (("1" (SKOSIMP*) (("1" (INST 1 "x!1") (("1" (EXPAND "member" -1) (("1" (EXPAND "reachable" 1) (("1" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF) (("2" (SPLIT) (("1" (BDDSIMP) NIL NIL) ("2" (FLATTEN) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (INST -3 "x!1" "x!2") (("2" (SKOSIMP*) (("2" (INST 1 "w!1") (("1" (EXPAND "walk_from?" 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "path_connected?") (("2" (SKOSIMP*) (("2" (SPLIT) (("1" (EXPAND "empty?") (("1" (EXPAND "empty?") (("1" (INST -1 "x!1") (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "reachable") (("2" (TYPEPRED "y!1") (("2" (TYPEPRED "x!2") (("2" (LEMMA "extensionality_postulate[T,bool]") (("2" (INST -1 "({y: T |          vert(G!1)(y) AND           (EXISTS (w: Seq(G!1)):walk_from?(G!1, w, x!1, y))})" "vert(G!1)") (("2" (FLATTEN) (("2" (BDDSIMP -2 -6) (("1" (HIDE -2) (("1" (HIDE -5) (("1" (INST-CP -1 "x!2") (("1" (BDDSIMP -2 -3) (("1" (BETA -1) (("1" (BDDSIMP) (("1" (SKOLEM! -1) (("1" (INST -3 "y!1") (("1" (BETA -3) (("1" (BDDSIMP -3) (("1" (SKOLEM! -1) (("1" (LEMMA "walk?_reverse") (("1" (INST-CP -1 "G!1" "x!1" "y!1" "w!2") (("1" (INST -1 "G!1" "x!1" "x!2" "w!1") (("1" (BDDSIMP) (("1" (HIDE -1 -3) (("1" (SKOLEM!) (("1" (SKOLEM! -2) (("1" (LEMMA "walk_merge") (("1" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("1" (BDDSIMP) (("1" (HIDE -1 -2) (("1" (EXPAND "walk_from?" -1) (("1" (ASSERT) (("1" (SKOLEM! -1) (("1" (EXPAND "walk?" -1) (("1" (EXPAND "finseq_appl") (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "walk?" 1) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|path_reach2| 0 (|path_reach2-2| "" 3790105538 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "path_connected?" -1) (("1" (SKOSIMP*) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "member" 1) (("1" (SKOSIMP*) (("1" (EXPAND "reachable" 1) (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (IFF 1) (("1" (SPLIT) (("1" (BDDSIMP) NIL NIL) ("2" (BDDSIMP) (("2" (INST -4 "x!2" "x!3") (("2" (EXPAND "walk_from?" +) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "path_reach1") (("2" (INST -1 "G!1") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (COPY 2) (("2" (EXPAND "path_connected?" 1) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "empty?" 2) (("2" (EXPAND "empty?" 2) (("2" (HIDE 1) (("2" (SKOSIMP*) (("2" (EXPAND "member" -) (("2" (INST -2 "x!1") (("2" (BDDSIMP) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|x!3| SKOLEM-CONST-DECL "T" |mappings| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|path_reach1| FORMULA-DECL NIL |mappings| NIL)) SHOSTAK) (|path_reach2-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "path_connected?" -1) (("1" (SKOSIMP*) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "member" 1) (("1" (SKOSIMP*) (("1" (EXPAND "reachable" 1) (("1" (SPLIT) (("1" (SKOSIMP*) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (IFF 1) (("1" (SPLIT) (("1" (BDDSIMP) NIL NIL) ("2" (BDDSIMP) (("2" (INST -4 "x!2" "x!3") (("2" (EXPAND "walk_from?" +) (("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk?" -2) (("2" (FLATTEN) (("2" (EXPAND "verts_in?" -2) (("2" (INST -2 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "path_reach1") (("2" (INST -1 "G!1") (("2" (FLATTEN) (("2" (HIDE -1) (("2" (COPY 2) (("2" (EXPAND "path_connected?" 1) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "empty?" 2) (("2" (EXPAND "empty?" 2) (("2" (HIDE 1) (("2" (SKOSIMP*) (("2" (EXPAND "member" -) (("2" (INST -2 "x!1") (("2" (BDDSIMP) (("2" (INST 1 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|reachable_conn| 0 (|reachable_conn-2| "V3.2 ran" 3319386050 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path[T]") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#length := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-8 1)) (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT (-1 -2 1)) NIL NIL)) NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND "^" -4 1) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|conn_eq_path| FORMULA-DECL NIL |graph_connected| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|walk_merge| FORMULA-DECL NIL |walks| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|x!1| SKOLEM-CONST-DECL "(vert(G!1))" |mappings| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|p!2| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(p!1))" |mappings| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|walk?_caret| FORMULA-DECL NIL |walks| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|p!2| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|p!2| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |mappings| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?_reverse| FORMULA-DECL NIL |walks| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|reachable_conn-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#l := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -8 -9 -10 -11 -13) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (ASSERT (-6 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT (-1 -2 1)) NIL NIL)) NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND "^" -4 1) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|sub_tree_k| 0 (|sub_tree_k-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (INST -1 "size(G!1)-size(H!1)" "H!1" "G!1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "subgraph_smaller") (("2" (INST -1 "G!1" "H!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subgraph_smaller| FORMULA-DECL NIL |subgraphs| NIL)) NIL)) (|sub_tree_0| 0 (|sub_tree_0-4| "trial" 3393153877 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2 3) (("1" (IFF) (("1" (SPLIT) (("1" (EXPAND "subgraph?" -) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (EXPAND "subset?" -) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "member" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_connected[T].conn_eq_path") (("2" (INST -1 "H!1") (("2" (FLATTEN) (("2" (IFF -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (BDDSIMP) (("2" (HIDE -1) (("2" (LEMMA "tree_paths[T].tree_one_path") (("2" (LEMMA "path?_subgraph[T]") (("2" (TYPEPRED "x!1") (("2" (SKOSIMP*) (("2" (NAME "pp" "(# length:= 2, seq:= (LAMBDA (ii:below(2)): IF ii=0 THEN x!2 ELSE y!1 ENDIF) #)") (("2" (CASE "path_from?(G!1,pp,x!2,y!1)") (("1" (HIDE -2) (("1" (EXPAND "path_connected?" -5) (("1" (FLATTEN) (("1" (INST -5 "x!2" "y!1") (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST -1 "H!1" "x!2" "y!1" "w!1") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?" -3) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (COPY -5) (("1" (COPY -7) (("1" (EXPAND "path_from?" (-7 -8)) (("1" (EXPAND "from?" (-7 -8)) (("1" (FLATTEN) (("1" (INST -14 "G!1" "H!1" "p!1") (("1" (BDDSIMP) (("1" (INST -16 "G!1" "pp" "p!1" "x!2" "y!1") (("1" (CASE "path_from?(H!1, p!1, x!2, y!1) AND path?(G!1,p!1) IMPLIES path_from?(G!1, p!1, x!2, y!1)") (("1" (BDDSIMP) (("1" (REPLACE -18 -9 RL) (("1" (EXPAND "path?" -9) (("1" (FLATTEN) (("1" (HIDE (-1 -2 -3 -4 -6 -7 -10)) (("1" (HIDE (-4 -5 -6 -11 -13 -14)) (("1" (EXPAND "walk?" -3) (("1" (FLATTEN) (("1" (INST -4 "0") (("1" (CASE "length(pp)=2") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (REVEAL -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 -6 -7) (("2" (HIDE -1 -2 -3 -4 -5 -6 -9 -10 -11 -12) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 -6 4) (("2" (EXPAND "subgraph?" -3) (("2" (INSTALL-REWRITES "finite_sets") (("2" (FLATTEN) (("2" (EXPAND "size" -5) (("2" (ASSERT) (("2" (CASE "vert(G!1)(y!1)") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].card_diff_subset") (("1" (INST -1 "vert(H!1)" "vert(G!1)") (("1" (EXPAND "subset?" -1) (("1" (EXPAND "member" -1) (("1" (BDDSIMP) (("1" (EXPAND "difference" -2) (("1" (REPLACE -7 -2) (("1" (CASE "card(vert(G!1))=card[T](vert(G!1))") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "{x: T | vert(G!1)(x) AND NOT vert(H!1)(x)}") (("1" (FLATTEN) (("1" (HIDE -1 -10) (("1" (BDDSIMP) (("1" (HIDE -1 -4) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_difference[T]") (("2" (INST -1 "vert(G!1)" "vert(H!1)") (("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 2 3 4) (("2" (AUTO-REWRITE-DEFS :ALWAYS? T) (("2" (EXPAND "is_finite") (("2" (SKOSIMP*) (("2" (INST + "N!1" "f!1") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (EXPAND "subset?" -1) (("2" (EXPAND "member" -1) (("2" (BDDSIMP) (("2" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (ASSERT) (("1" (REPLACE -1 -4) (("1" (REPLACE -1 -4 RL) (("1" (REPLACE -2 -4 RL) (("1" (REPLACE -9 -4) (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (CASE "edges(G!1)(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -2) (("1" (INST -1 "y!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT -6 -) (("1" (HIDE-ALL-BUT 1 +) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -3 -4 -6 4) (("3" (EXPAND "size" -4) (("3" (LEMMA "finite_sets[T].card_diff_subset") (("3" (INST -1 "vert(H!1)" "vert(G!1)") (("3" (EXPAND "subset?" -1) (("3" (EXPAND "member" -1) (("3" (BDDSIMP) (("1" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -7 -3) (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "x!2") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (CASE "edges(G!1)(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -2) (("1" (INST -1 "x!2") (("1" (EXPAND "member" 1) (("1" (HIDE (-2 -3 -4 -5 -7 -8 -9)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 -7 -8 -9) (("2" (EXPAND "path_from?" 1) (("2" (EXPAND "path?" 1) (("2" (EXPAND "from?" 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "verts_in?" +) (("2" (EXPAND "finseq_appl") (("2" (CASE "edges(G!1)(x!1)") (("1" (BDDSIMP) (("1" (GRIND) (("1" (CASE "length(pp)=2") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (HIDE -2 -3 -4 -5 2 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -4 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (HIDE -2 -3 -4 2 3) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (HIDE -3 -4 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("4" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (HIDE -4 3) (("1" (EXPAND "edge?" 1) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (CASE "n!1=0") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (REPLACE -4 1) (("1" (BETA 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 2 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -4) (("1" (INST-CP -1 "x!2") (("1" (INST -1 "y!1") (("1" (SKOSIMP*) (("1" (HIDE -6 3) (("1" (TYPEPRED "i!1") (("1" (REPLACE -4 -1) (("1" (REPLACE -5 1) (("1" (CASE "i!1=0 OR i!1=1") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (HIDE -6 -7) (("1" (BETA) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (HIDE -6 -7) (("2" (BETA) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (HIDE -3 -4 -5 -6 -7 -8 2 3) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SPLIT) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vert(H!1)=vert(G!1)") (("1" (PROPAX) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -4) (("2" (EXPAND "size") (("2" (EXPAND "subgraph?" -) (("2" (FLATTEN) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (BDDSIMP -1 -2) (("1" (HIDE -2 -3) (("1" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (ASSERT -3 -4) (("1" (REPLACE -4 -3) (("1" (ASSERT -3) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (INST -1 "x!1") (("1" (EXPAND "member" 2) (("1" (EXPAND "difference" 2) (("1" (COPY 2) (("1" (DELETE 3) (("1" (EXPAND "member" 1) (("1" (REVEAL -4) (("1" (EXPAND "subset?" -1) (("1" (INST -1 "x!1") (("1" (EXPAND "member" -1) (("1" (HIDE -2 -3 -4) (("1" (HIDE -2) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|path?_subgraph| FORMULA-DECL NIL |subgraph_paths| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|x!2| SKOLEM-CONST-DECL "T" |mappings| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|y!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|walk_to_path_from| FORMULA-DECL NIL |path_ops| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |graph_deg_sum| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|empty_card| FORMULA-DECL NIL |finite_sets| NIL) (|finite_difference| JUDGEMENT-TCC NIL |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|even?| CONST-DECL "bool" |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|tree_one_path| FORMULA-DECL NIL |tree_paths| NIL) (|conn_eq_path| FORMULA-DECL NIL |graph_connected| NIL)) NIL) (|sub_tree_0-3| "trial" 3319141305 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2 3) (("1" (IFF) (("1" (SPLIT) (("1" (EXPAND "subgraph?" -) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (EXPAND "subset?" -) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "member" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_connected[T].conn_eq_path") (("2" (INST -1 "H!1") (("2" (FLATTEN) (("2" (IFF -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (BDDSIMP) (("2" (HIDE -1) (("2" (LEMMA "tree_paths[T].tree_one_path") (("2" (LEMMA "meng_scaff_defs[T].path?_subgraph") (("2" (TYPEPRED "x!1") (("2" (SKOSIMP*) (("2" (NAME "pp" "(# l:= 2, seq:= (LAMBDA (ii:below(2)): IF ii=0 THEN x!2 ELSE y!1 ENDIF) #)") (("2" (CASE "path_from?(G!1,pp,x!2,y!1)") (("1" (HIDE -2) (("1" (EXPAND "path_connected?" -5) (("1" (FLATTEN) (("1" (INST -5 "x!2" "y!1") (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST -1 "H!1" "x!2" "y!1" "w!1") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?" -3) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (COPY -5) (("1" (COPY -7) (("1" (EXPAND "path_from?" (-7 -8)) (("1" (EXPAND "from?" (-7 -8)) (("1" (FLATTEN) (("1" (INST -14 "G!1" "H!1" "p!1") (("1" (BDDSIMP) (("1" (INST -16 "G!1" "pp" "p!1" "x!2" "y!1") (("1" (CASE "path_from?(H!1, p!1, x!2, y!1) AND path?(G!1,p!1) IMPLIES path_from?(G!1, p!1, x!2, y!1)") (("1" (BDDSIMP) (("1" (REPLACE -18 -9 RL) (("1" (EXPAND "path?" -9) (("1" (FLATTEN) (("1" (HIDE (-1 -2 -3 -4 -6 -7 -10)) (("1" (HIDE (-4 -5 -6 -11 -13 -14)) (("1" (EXPAND "walk?" -3) (("1" (FLATTEN) (("1" (INST -4 "0") (("1" (CASE "length(pp)=2") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (REVEAL -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 -6 -7) (("2" (HIDE -1 -2 -3 -4 -5 -6 -9 -10 -11 -12) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-11 -12) -) (("2" (GRIND) (("1" (GRIND) (("1" (REVEAL -21) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -21) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -21) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (REVEAL -3) (("1" (HIDE-ALL-BUT (-1) -) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "pp") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "pp") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 -6 4) (("2" (EXPAND "subgraph?" -3) (("2" (INSTALL-REWRITES "finite_sets") (("2" (FLATTEN) (("2" (EXPAND "size" -5) (("2" (ASSERT) (("2" (CASE "vert(G!1)(y!1)") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].card_diff_subset") (("1" (INST -1 "vert(H!1)" "vert(G!1)") (("1" (EXPAND "subset?" -1) (("1" (EXPAND "member" -1) (("1" (BDDSIMP) (("1" (EXPAND "difference" -2) (("1" (REPLACE -7 -2) (("1" (CASE "card(vert(G!1))=card[T](vert(G!1))") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "{x: T | vert(G!1)(x) AND NOT vert(H!1)(x)}") (("1" (FLATTEN) (("1" (HIDE -1 -10) (("1" (BDDSIMP) (("1" (HIDE -1 -4) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_difference[T]") (("2" (INST -1 "vert(G!1)" "vert(H!1)") (("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 2 3 4) (("2" (AUTO-REWRITE-DEFS :ALWAYS? T) (("2" (EXPAND "is_finite") (("2" (SKOSIMP*) (("2" (INST + "N!1" "f!1") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (EXPAND "subset?" -1) (("2" (EXPAND "member" -1) (("2" (BDDSIMP) (("2" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (ASSERT) (("1" (REPLACE -1 -4) (("1" (REPLACE -1 -4 RL) (("1" (REPLACE -2 -4 RL) (("1" (REPLACE -9 -4) (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (CASE "edges(G!1)(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -2) (("1" (INST -1 "y!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT -6 -) (("1" (HIDE-ALL-BUT 1 +) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -3 -4 -6 4) (("3" (EXPAND "size" -4) (("3" (LEMMA "finite_sets[T].card_diff_subset") (("3" (INST -1 "vert(H!1)" "vert(G!1)") (("3" (EXPAND "subset?" -1) (("3" (EXPAND "member" -1) (("3" (BDDSIMP) (("1" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -7 -3) (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "x!2") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (CASE "edges(G!1)(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -2) (("1" (INST -1 "x!2") (("1" (EXPAND "member" 1) (("1" (HIDE (-2 -3 -4 -5 -7 -8 -9)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 -7 -8 -9) (("2" (EXPAND "path_from?" 1) (("2" (EXPAND "path?" 1) (("2" (EXPAND "from?" 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "verts_in?" +) (("2" (CASE "edges(G!1)(x!1)") (("1" (BDDSIMP) (("1" (GRIND) (("1" (CASE "length(pp)=2") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (HIDE -2 -3 -4 -5 2 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -4 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (HIDE -2 -3 -4 2 3) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (HIDE -3 -4 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("4" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (HIDE -4 3) (("1" (EXPAND "edge?" 1) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (CASE "n!1=0") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (REPLACE -4 1) (("1" (BETA 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 2 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -4) (("1" (INST-CP -1 "x!2") (("1" (INST -1 "y!1") (("1" (SKOSIMP*) (("1" (HIDE -6 3) (("1" (TYPEPRED "i!1") (("1" (REPLACE -4 -1) (("1" (REPLACE -5 1) (("1" (CASE "i!1=0 OR i!1=1") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (HIDE -6 -7) (("1" (BETA) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (HIDE -6 -7) (("2" (BETA) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (HIDE -3 -4 -5 -6 -7 -8 2 3) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SPLIT) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT -1 -) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1 -) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT -1 -) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vert(H!1)=vert(G!1)") (("1" (PROPAX) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -4) (("2" (EXPAND "size") (("2" (EXPAND "subgraph?" -) (("2" (FLATTEN) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (BDDSIMP -1 -2) (("1" (HIDE -2 -3) (("1" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (ASSERT -3 -4) (("1" (REPLACE -4 -3) (("1" (ASSERT -3) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (INST -1 "x!1") (("1" (EXPAND "member" 2) (("1" (EXPAND "difference" 2) (("1" (COPY 2) (("1" (DELETE 3) (("1" (EXPAND "member" 1) (("1" (REVEAL -4) (("1" (EXPAND "subset?" -1) (("1" (INST -1 "x!1") (("1" (EXPAND "member" -1) (("1" (HIDE -2 -3 -4) (("1" (HIDE -2) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|sub_tree_0-2| "trial" 3319140197 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2 3) (("1" (IFF) (("1" (SPLIT) (("1" (EXPAND "subgraph?" -) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (EXPAND "subset?" -) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "member" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_connected[T].conn_eq_path") (("2" (INST -1 "H!1") (("2" (FLATTEN) (("2" (IFF -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (BDDSIMP) (("2" (HIDE -1) (("2" (LEMMA "tree_paths[T].tree_one_path") (("2" (LEMMA "meng_scaff_defs[T].path?_subgraph") (("2" (TYPEPRED "x!1") (("2" (SKOSIMP*) (("2" (NAME "pp" "(# l:= 2, seq:= (LAMBDA (ii:below(2)): IF ii=0 THEN x!2 ELSE y!1 ENDIF) #)") (("2" (CASE "path_from?(G!1,pp,x!2,y!1)") (("1" (HIDE -2) (("1" (EXPAND "path_connected?" -5) (("1" (FLATTEN) (("1" (INST -5 "x!2" "y!1") (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST -1 "H!1" "x!2" "y!1" "w!1") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?" -3) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (COPY -5) (("1" (COPY -7) (("1" (EXPAND "path_from?" (-7 -8)) (("1" (EXPAND "from?" (-7 -8)) (("1" (FLATTEN) (("1" (INST -14 "G!1" "H!1" "p!1") (("1" (BDDSIMP) (("1" (INST -16 "G!1" "pp" "p!1" "x!2" "y!1") (("1" (CASE "path_from?(H!1, p!1, x!2, y!1) AND path?(G!1,p!1) IMPLIES path_from?(G!1, p!1, x!2, y!1)") (("1" (BDDSIMP) (("1" (REPLACE -18 -9 RL) (("1" (EXPAND "path?" -9) (("1" (FLATTEN) (("1" (HIDE (-1 -2 -3 -4 -6 -7 -10)) (("1" (HIDE (-4 -5 -6 -11 -13 -14)) (("1" (EXPAND "walk?" -3) (("1" (FLATTEN) (("1" (INST -4 "0") (("1" (EXPAND "finseq_appl") (("1" (CASE "length(pp)=2") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (REVEAL -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 -6 -7) (("2" (HIDE -1 -2 -3 -4 -5 -6 -9 -10 -11 -12) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-11 -12) -) (("2" (GRIND) (("1" (GRIND) (("1" (REVEAL -21) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -21) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -21) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (REVEAL -3) (("1" (HIDE-ALL-BUT (-1) -) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "pp") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "pp") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 -6 4) (("2" (EXPAND "subgraph?" -3) (("2" (INSTALL-REWRITES "finite_sets") (("2" (FLATTEN) (("2" (EXPAND "size" -5) (("2" (ASSERT) (("2" (CASE "vert(G!1)(y!1)") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].card_diff_subset") (("1" (INST -1 "vert(H!1)" "vert(G!1)") (("1" (EXPAND "subset?" -1) (("1" (EXPAND "member" -1) (("1" (BDDSIMP) (("1" (EXPAND "difference" -2) (("1" (REPLACE -7 -2) (("1" (CASE "card(vert(G!1))=card[T](vert(G!1))") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "{x: T | vert(G!1)(x) AND NOT vert(H!1)(x)}") (("1" (FLATTEN) (("1" (HIDE -1 -10) (("1" (BDDSIMP) (("1" (HIDE -1 -4) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_difference[T]") (("2" (INST -1 "vert(G!1)" "vert(H!1)") (("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|sub_tree_0-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2 3) (("1" (IFF) (("1" (SPLIT) (("1" (EXPAND "subgraph?" -) (("1" (FLATTEN) (("1" (HIDE -3) (("1" (EXPAND "subset?" -) (("1" (INST -3 "x!1") (("1" (ASSERT) (("1" (EXPAND "member" -) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_connected[T].conn_eq_path") (("2" (INST -1 "H!1") (("2" (FLATTEN) (("2" (IFF -1) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (BDDSIMP) (("2" (HIDE -1) (("2" (LEMMA "tree_paths[T].tree_one_path") (("2" (LEMMA "meng_scaff_defs[T].path?_subgraph") (("2" (TYPEPRED "x!1") (("2" (SKOSIMP*) (("2" (NAME "pp" "(# l:= 2, seq:= (LAMBDA (ii:below(2)): IF ii=0 THEN x!2 ELSE y!1 ENDIF) #)") (("2" (CASE "path_from?(G!1,pp,x!2,y!1)") (("1" (HIDE -2) (("1" (EXPAND "path_connected?" -5) (("1" (FLATTEN) (("1" (INST -5 "x!2" "y!1") (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST -1 "H!1" "x!2" "y!1" "w!1") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?" -3) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (COPY -5) (("1" (COPY -7) (("1" (EXPAND "path_from?" (-7 -8)) (("1" (EXPAND "from?" (-7 -8)) (("1" (FLATTEN) (("1" (INST -14 "G!1" "H!1" "p!1") (("1" (BDDSIMP) (("1" (INST -16 "G!1" "pp" "p!1" "x!2" "y!1") (("1" (CASE "path_from?(H!1, p!1, x!2, y!1) AND path?(G!1,p!1) IMPLIES path_from?(G!1, p!1, x!2, y!1)") (("1" (BDDSIMP) (("1" (REPLACE -18 -9 RL) (("1" (EXPAND "path?" -9) (("1" (FLATTEN) (("1" (HIDE (-1 -2 -3 -4 -6 -7 -10)) (("1" (HIDE (-4 -5 -6 -11 -13 -14)) (("1" (EXPAND "walk?" -3) (("1" (FLATTEN) (("1" (INST -4 "0") (("1" (EXPAND "finseq_appl") (("1" (CASE "length(pp)=2") (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (REVEAL -19) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 -6 -7) (("2" (HIDE -1 -2 -3 -4 -5 -6 -9 -10 -11 -12) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-11 -12) -) (("2" (GRIND) (("1" (GRIND) (("1" (REVEAL -21) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -21) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -21) (("3" (ASSERT) NIL NIL)) NIL) ("4" (REVEAL -21) (("4" (ASSERT) NIL NIL)) NIL) ("5" (REVEAL -21) (("5" (ASSERT) NIL NIL)) NIL) ("6" (REVEAL -21) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -3 -4 -6 4) (("2" (EXPAND "subgraph?" -3) (("2" (INSTALL-REWRITES "finite_sets") (("2" (FLATTEN) (("2" (EXPAND "size" -5) (("2" (ASSERT) (("2" (CASE "vert(G!1)(y!1)") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].card_diff_subset") (("1" (INST -1 "vert(H!1)" "vert(G!1)") (("1" (EXPAND "subset?" -1) (("1" (EXPAND "member" -1) (("1" (BDDSIMP) (("1" (EXPAND "difference" -2) (("1" (REPLACE -7 -2) (("1" (CASE "card(vert(G!1))=card[T](vert(G!1))") (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "{x: T | vert(G!1)(x) AND NOT vert(H!1)(x)}") (("1" (FLATTEN) (("1" (HIDE -1 -10) (("1" (BDDSIMP) (("1" (HIDE -1 -4) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_sets_def[T].finite_difference") (("2" (INST -1 "vert(G!1)" "vert(H!1)") (("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (EXPAND "subset?" -1) (("2" (EXPAND "member" -1) (("2" (BDDSIMP) (("2" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (ASSERT) (("1" (REPLACE -1 -4) (("1" (REPLACE -1 -4 RL) (("1" (REPLACE -2 -4 RL) (("1" (REPLACE -9 -4) (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "y!1") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (CASE "edges(G!1)(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -2) (("1" (INST -1 "y!1") (("1" (ASSERT) (("1" (HIDE-ALL-BUT -6 -) (("1" (HIDE-ALL-BUT 1 +) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -3 -4 -6 4) (("3" (EXPAND "size" -4) (("3" (LEMMA "finite_sets[T].card_diff_subset") (("3" (INST -1 "vert(H!1)" "vert(G!1)") (("3" (EXPAND "subset?" -1) (("3" (EXPAND "member" -1) (("3" (BDDSIMP) (("1" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (ASSERT) (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (REPLACE -7 -3) (("1" (ASSERT) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "x!2") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (CASE "edges(G!1)(x!1)") (("1" (ASSERT) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -2) (("1" (INST -1 "x!2") (("1" (EXPAND "member" 1) (("1" (HIDE (-2 -3 -4 -5 -7 -8 -9)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 -7 -8 -9) (("2" (EXPAND "path_from?" 1) (("2" (EXPAND "path?" 1) (("2" (EXPAND "from?" 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?" +) (("2" (CASE "edges(G!1)(x!1)") (("1" (BDDSIMP) (("1" (GRIND) (("1" (CASE "length(pp)=2") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (HIDE -2 -3 -4 -5 2 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2 -4 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (HIDE -2 -3 -4 2 3) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (HIDE -3 -4 3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("4" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (HIDE -4 3) (("1" (EXPAND "edge?" 1) (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (TYPEPRED "n!1") (("1" (CASE "n!1=0") (("1" (REPLACE -1 1) (("1" (ASSERT) (("1" (REPLACE -4 1) (("1" (BETA 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3 -4 -6 2 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (CASE "seq(pp)=(LAMBDA (ii: below(2)): IF ii = 0 THEN x!2 ELSE y!1 ENDIF)") (("1" (CASE "length(pp)=2") (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!1") (("1" (BDDSIMP -1 -4) (("1" (INST-CP -1 "x!2") (("1" (INST -1 "y!1") (("1" (SKOSIMP*) (("1" (HIDE -6 3) (("1" (TYPEPRED "i!1") (("1" (REPLACE -4 -1) (("1" (REPLACE -5 1) (("1" (CASE "i!1=0 OR i!1=1") (("1" (SPLIT) (("1" (REPLACE -1 1) (("1" (HIDE -6 -7) (("1" (BETA) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (HIDE -6 -7) (("2" (BETA) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (HIDE -3 -4 -5 -6 -7 -8 2 3) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -3 2 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SPLIT) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT -1 -) (("3" (GRIND) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT -1 -) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT -1 -) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "vert(H!1)=vert(G!1)") (("1" (PROPAX) NIL NIL) ("2" (HIDE 2 3) (("2" (HIDE -1 -4) (("2" (EXPAND "size") (("2" (EXPAND "subgraph?" -) (("2" (FLATTEN) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (BDDSIMP -1 -2) (("1" (HIDE -2 -3) (("1" (CASE "card[T](vert(H!1))=card(vert(H!1))") (("1" (CASE "card[T](vert(G!1))=card(vert(G!1))") (("1" (REPLACE -1 -3 RL) (("1" (REPLACE -2 -3 RL) (("1" (ASSERT -3 -4) (("1" (REPLACE -4 -3) (("1" (ASSERT -3) (("1" (LEMMA "finite_sets[T].empty_card") (("1" (INST -1 "difference(vert(G!1), vert(H!1))") (("1" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (INST -1 "x!1") (("1" (EXPAND "member" 2) (("1" (EXPAND "difference" 2) (("1" (COPY 2) (("1" (DELETE 3) (("1" (EXPAND "member" 1) (("1" (REVEAL -4) (("1" (EXPAND "subset?" -1) (("1" (INST -1 "x!1") (("1" (EXPAND "member" -1) (("1" (HIDE -2 -3 -4) (("1" (HIDE -2) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|sub_tree_k_lemm| 0 (|sub_tree_k_lemm-1| |nil| 3767624944 ("" (INDUCT "k" 1 "nat_induction") (("1" (LEMMA "sub_tree_0") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (BDDSIMP) (("1" (REPLACE -4 -1 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "j!1") (("2" (EXPAND "size" -6) (("2" (LEMMA "finite_sets[T].card_diff_subset") (("2" (INST -1 "vert(H!1)" "vert(G!1)") (("2" (EXPAND "subgraph?" -4) (("2" (BDDSIMP) (("2" (REPLACE -8 -2) (("2" (ASSERT -2) (("2" (LEMMA "finite_sets[T].nonempty_card") (("2" (INST -1 "difference(vert(G!1), vert(H!1))") (("2" (BDDSIMP) (("1" (EXPAND "nonempty?" -1) (("1" (EXPAND "empty?" 1) (("1" (SKOSIMP*) (("1" (EXPAND "member" -) (("1" (HIDE -2) (("1" (EXPAND "difference" -1) (("1" (EXPAND "member" -) (("1" (BDDSIMP) (("1" (LEMMA "graph_conn_piece[T].connected_not_empty") (("1" (INST -1 "H!1") (("1" (BDDSIMP) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "empty?" 1) (("1" (EXPAND "member" +) (("1" (SKOSIMP*) (("1" (HIDE -5 -10) (("1" (EXPAND "subset?" -4) (("1" (INST -4 "x!2") (("1" (EXPAND "member" -) (("1" (BDDSIMP) (("1" (LEMMA "graph_path_conn[T].tree_has_walk") (("1" (INST -1 "G!1" "x!2" "x!1") (("1" (CASE "x!2 /= x!1") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "subtrees[T].walk_acr") (("1" (INST -1 "G!1" "H!1" "length(w!1)-1" "w!1") (("1" (ASSERT -1) (("1" (EXPAND "walk_from?" -5) (("1" (BDDSIMP) (("1" (REPLACE -6 -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "j!2") (("2" (TYPEPRED "w!1") (("2" (ASSERT -3) (("2" (NAME "H!2" "(H!1 WITH [vert := add(seq(w!1)(j!2),vert(H!1))]) WITH [edges := add(dbl[T](seq(w!1)(j!2 -1),seq(w!1)(j!2)),edges(H!1))]") (("1" (CASE "vert(H!2)=add(seq(w!1)(j!2), vert(H!1))") (("1" (HIDE -3) (("1" (LEMMA "finite_sets[T].card_add") (("1" (INST -1 "vert(H!1)" "seq(w!1)(j!2)") (("1" (ASSERT) (("1" (CASE "size(H!2)=card(vert(H!2))") (("1" (REVEAL -8) (("1" (CASE "card[T](vert(H!1))=size(H!1)") (("1" (CASE "card[T](vert(G!1))=size(G!1)") (("1" (HIDE -1 -2 -4 -5) (("1" (NAME "ee" "dbl[T](seq(w!1)(j!2 - 1), seq(w!1)(j!2))") (("1" (CASE "H!1 = del_vert(H!2,seq(w!1)(j!2))") (("1" (CASE "deg(seq(w!1)(j!2),H!2)=1") (("1" (LEMMA "graph_complected[T].conn_del_vert") (("1" (INST -1 "H!2") (("1" (BDDSIMP) (("1" (INST -20 "H!2" "G!1") (("1" (LEMMA "size_del_vert") (("1" (INST -1 "H!2" "seq(w!1)(j!2)") (("1" (REPLACE -4 -1 RL) (("1" (REVEAL -5) (("1" (CASE "subgraph?(H!2,G!1)") (("1" (LEMMA "trees[T].del_tree_all") (("1" (INST -1 "H!2" "seq(w!1)(j!2)") (("1" (BDDSIMP) (("1" (REPLACE -8 -3 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 -13 -14) -) (("2" (INSTALL-REWRITES "graphs") (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -15) (("3" (HIDE-ALL-BUT (-1 -4 -5 -10 -13 -14 -15 -17 -18 -19 -20 -22) -) (("3" (HIDE 1 6) (("3" (INSTALL-REWRITES "graphs") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (REVEAL -12) (("2" (HIDE -4 -5 -6 -7 -9 -10 -13 -17 -22 -25 5) (("2" (INSTALL-REWRITES "walks") (("2" (EXPAND "subgraph?" 1) (("2" (EXPAND "subset?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "member") (("1" (REPLACE -7 -4 RL) (("1" (HIDE -7) (("1" (EXPAND "add") (("1" (EXPAND "member") (("1" (INST -16 "x!3") (("1" (BDDSIMP) (("1" (EXPAND "walk?") (("1" (BDDSIMP) (("1" (INST -4 "j!2-1") (("1" (ASSERT (-4 -9)) (("1" (REPLACE -5 -4 LR) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("2" (HIDE -4 -17) (("2" (EXPAND "verts_in?") (("2" (INST -3 "j!2") (("2" (SKOSIMP*) (("2" (INST -1 "x!3") (("2" (EXPAND "member") (("2" (BDDSIMP) (("2" (REPLACE -6 -3 RL) (("2" (HIDE -6) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 -7 -11) -) (("2" (HIDE 5) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(j!2)") (("1" (REPLACE -6 1 RL) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -5 -) (("2" (EXPAND "add" -) (("2" (REPLACE -1 1) (("2" (BETA 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "deg" 1) (("2" (LEMMA "finite_sets[doubletons[T].doubleton].card_one") (("2" (INST -1 "incident_edges(seq(w!1)(j!2), H!2)") (("2" (BDDSIMP) (("2" (HIDE 1) (("2" (INST 1 "ee") (("1" (HIDE -3 -10 -15 -18 5) (("1" (EXPAND "incident_edges" 1) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (REPLACE -2 1 RL) (("1" (REPLACE -4 1 RL) (("1" (HIDE -4 -5 -15) (("1" (INSTALL-REWRITES "graphs") (("1" (CASE "x!3=ee") (("1" (REPLACE -3 1 LR) (("1" (REPLACE -1 1 LR) (("1" (BETA 1) (("1" (EXPAND "singleton") (("1" (EXPAND "add") (("1" (REPLACE -3 1 RL) (("1" (EXPAND "dbl" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "singleton(dbl[T](seq(w!1)(j!2 - 1), seq(w!1)(j!2)))(x!3)") (("1" (EXPAND "extend") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "extend") (("2" (ASSERT) (("2" (FLATTEN) (("2" (REPLACE -3) (("2" (ASSERT) (("2" (EXPAND "remove") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (1 -2)) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -6 -7 -8) -) (("2" (HIDE 3 4 5) (("2" (INSTALL-REWRITES "graphs") (("2" (ASSERT) (("2" (GRIND) (("2" (REPLACE -2 1 RL) (("2" (GRIND) (("2" (HIDE -1 -2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (APPLY-EXTENSIONALITY 1) (("1" (HIDE 2) (("1" (IFF 1) (("1" (BDDSIMP) (("1" (TYPEPRED "H!1") (("1" (INST -1 "x!3") (("1" (BDDSIMP) (("1" (INST -2 "seq(w!1)(j!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1) (("2" (LEMMA "sets_lemmas[T].remove_add_member") (("2" (INST -1 "vert(H!1)" "seq(w!1)(j!2)") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "edges(H!1)") (("3" (EXPAND "is_finite") (("3" (SKOSIMP*) (("3" (INST + "N!1" "f!1") (("1" (SKOSIMP*) (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (GROUND) (("1" (TYPEPRED "H!1") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "seq(w!1)(j!2)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "dbl") (("2" (REPLACE -1 + RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "size") (("2" (PROPAX) NIL NIL)) NIL) ("3" (REPLACE -3 1 RL) (("3" (HIDE-ALL-BUT (-15) -) (("3" (HIDE 3 5) (("3" (TYPEPRED "H!1") (("3" (SKOSIMP*) (("3" (INST-CP -1 "e!1") (("3" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BETA -3) (("1" (BETA 1) (("1" (BDDSIMP) (("1" (EXPAND "add") (("1" (EXPAND "member") (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (BETA -2) (("2" (EXPAND "add") (("2" (EXPAND "member") (("2" (BDDSIMP) (("2" (REVEAL -7) (("2" (GRIND) (("2" (EXPAND "dbl") (("2" (REPLACE -2 -3 RL) (("2" (BETA -3) (("2" (HIDE -2) (("2" (BDDSIMP) (("1" (REPLACE -2 -1 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -7 -12 -15 -16 3 5) (("2" (REPLACE -1 1 RL) (("2" (EXPAND "add") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP*) (("2" (EXPAND "add" -1) (("2" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T :DIR RL) (("1" (EXPAND "dbl") (("1" (SPLIT -1) (("1" (REPLACE -1 :HIDE? T) (("1" (EXPAND "add") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 :HIDE? T) (("2" (EXPAND "add") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (TYPEPRED "H!1") (("2" (INST? -1) (("2" (ASSERT) (("2" (EXPAND "add") (("2" (FLATTEN) (("2" (EXPAND "member") (("2" (INST? -1 :WHERE +) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "seq(w!1)(j!2 - 1)" " seq(w!1)(j!2)") (("3" (FLATTEN) (("3" (REPLACE -1 -6 LR) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -4 -7 RL) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (EXPAND "member" -1) (("2" (INST -1 "x!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3) -) (("2" (HIDE 1 3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |graph_deg_sum| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_conn_piece| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|tree_has_walk| FORMULA-DECL NIL |graph_path_conn| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|Graph| TYPE-EQ-DECL NIL |graphs| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |graph_deg_sum| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[T]" |graph_deg_sum| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|ee| SKOLEM-CONST-DECL "finite_set[T]" |mappings| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL) (|conn_del_vert| FORMULA-DECL NIL |graph_complected| NIL) (|size_del_vert| FORMULA-DECL NIL |graph_ops| NIL) (|del_tree_all| FORMULA-DECL NIL |trees| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (H!2 SKOLEM-CONST-DECL "pregraph[T]" |mappings| NIL) (|w!1| SKOLEM-CONST-DECL "Walk[T](G!1)" |mappings| NIL) (|j!2| SKOLEM-CONST-DECL "posnat" |mappings| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|remove_add_member| FORMULA-DECL NIL |sets_lemmas| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (|card_add| FORMULA-DECL NIL |finite_sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk_acr| FORMULA-DECL NIL |subtrees| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|sub_tree_0| FORMULA-DECL NIL |mappings| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|connected?| DEF-DECL "bool" |graph_conn_defs| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|sub_tree_all| 0 (|sub_tree_all-1| |nil| 3318087528 ("" (LEMMA "sub_tree_k") (("" (LEMMA "sub_tree_k_lemm") (("" (BDDSIMP) (("" (ASSERT) (("" (HIDE -1) (("" (SKOSIMP*) (("" (INST -1 "H!1" "G!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|sub_tree_k_lemm| FORMULA-DECL NIL |mappings| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|sub_tree_k| FORMULA-DECL NIL |mappings| NIL)) NIL)) (|path_reach4| 0 (|path_reach4-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path[T]") (("" (INST? -1) (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE -2) (("" (LEMMA "sub_tree_all") (("" (INST -1 "G!1" "del_edge(G!1, e!1)") (("" (BDDSIMP) (("1" (LEMMA "del_edge_num") (("1" (INST? -1) (("1" (LIFT-IF) (("1" (BDDSIMP) (("1" (LEMMA "vert_del_edge") (("1" (INST? -1) (("1" (HIDE -5) (("1" (LEMMA "tree_edge_card") (("1" (INST-CP -1 "G!1") (("1" (INST -1 "del_edge(G!1, e!1)") (("1" (BDDSIMP) (("1" (INSTALL-REWRITES "graph_ops") (("1" (HIDE -1 -3) (("1" (CASE "size(del_edge(G!1, e!1)) = size(G!1)") (("1" (EXPAND "num_edges") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|conn_eq_path| FORMULA-DECL NIL |graph_connected| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|del_edge_num| FORMULA-DECL NIL |graph_ops| NIL) (|vert_del_edge| FORMULA-DECL NIL |graph_ops| NIL) (|num_edges| CONST-DECL "nat" |graph_ops| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|tree_edge_card| FORMULA-DECL NIL |trees| NIL) (|sub_tree_all| FORMULA-DECL NIL |mappings| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|size_subgraph_path_TCC1| 0 (|size_subgraph_path_TCC1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "path?") (("" (FLATTEN) NIL NIL)) NIL)) NIL) ((|path?| CONST-DECL "bool" |paths| NIL)) NIL (|size_subgraph_path| SUBTYPE "mappings.p" "Walk[mappings.T](mappings.G)"))) (|size_subgraph_path| 0 (|size_subgraph_path-2| |nil| 3560636549 ("" (SKOSIMP*) (("" (EXPAND "G_from") (("" (EXPAND "size") (("" (EXPAND "verts_of") (("" (EXPAND "finseq_appl") (("" (EXPAND "path?") (("" (FLATTEN) (("" (HIDE -1) (("" (EXPAND "finseq_appl") (("" (NAME "foot" "{t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t}") (("" (LEMMA "seq_pigeon[T,foot].seq_pigeon_lem") (("1" (INST -1 "p!1") (("1" (EXPAND "finseq_appl") (("1" (BDDSIMP (-1 -3)) (("1" (CASE "card(foot) <= length(p!1)") (("1" (ASSERT (-1 -3)) (("1" (REPLACE -4 1 LR) (("1" (ASSERT (-1 -3 1)) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (GRIND) (("2" (INSTALL-REWRITES "walks[T]") (("2" (TYPEPRED "p!1") (("2" (LEMMA "finite_sets_card_eq[T,T].card_injection") (("2" (INST -1 "{t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t}" "length(p!1)") (("1" (BDDSIMP) (("1" (INST 1 "LAMBDA (t:({t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t})):choose(({k:below(length(p!1)) | seq(p!1)(k)=t}))") (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (HIDE 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST 1 "length(p!1)" "LAMBDA (t:({t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t})):choose(({k: below(length(p!1)) | seq(p!1)(k)=t}))") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1 2) (("2" (BETA 1) (("2" (INST 1 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE -1 2) (("2" (EXPAND "is_finite") (("2" (INST 1 "length(p!1)" "LAMBDA (t:({t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t})):choose(({k: below(length(p!1)) | seq(p!1)(k)=t}))") (("1" (GRIND) NIL NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (TYPEPRED "t!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|foot| SKOLEM-CONST-DECL "[T -> boolean]" |mappings| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|choose| CONST-DECL "(p)" |sets| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|card_injection| FORMULA-DECL NIL |finite_sets_card_eq| |finite_sets|) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (<= CONST-DECL "bool" |reals| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|seq_pigeon_lem| FORMULA-DECL NIL |seq_pigeon| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|size| CONST-DECL "nat" |graphs| NIL)) NIL) (|size_subgraph_path-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "G_from") (("" (EXPAND "size") (("" (EXPAND "verts_of") (("" (EXPAND "finseq_appl") (("" (EXPAND "path?") (("" (FLATTEN) (("" (HIDE -1) (("" (EXPAND "finseq_appl") (("" (NAME "foot" "{t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t}") (("" (LEMMA "seq_pidgeon[T,foot].seq_pigeon_lem") (("1" (INST -1 "p!1") (("1" (EXPAND "finseq_appl") (("1" (BDDSIMP (-1 -3)) (("1" (CASE "card(foot) <= length(p!1)") (("1" (ASSERT (-1 -3)) (("1" (REPLACE -4 1 LR) (("1" (ASSERT (-1 -3 1)) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1) (("2" (GRIND) (("2" (INSTALL-REWRITES "walks[T]") (("2" (TYPEPRED "p!1") (("2" (LEMMA "finite_sets_card_eq[T,T].card_injection") (("2" (INST -1 "{t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t}" "length(p!1)") (("1" (BDDSIMP) (("1" (INST 1 "LAMBDA (t:({t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t})):choose(({k:below(length(p!1)) | seq(p!1)(k)=t}))") (("1" (EXPAND "injective?") (("1" (SKOSIMP*) (("1" (HIDE 2) (("1" (GRIND) (("1" (LEMMA "epsilon_ax[below(length(p!1))]") (("1" (INST-CP -1 "LAMBDA (k:below(length(p!1))):seq(p!1)(k) = x1!1") (("1" (BDDSIMP) (("1" (INST -1 "LAMBDA (k:below(length(p!1))):seq(p!1)(k) = x2!1") (("1" (BDDSIMP) (("1" (REPLACE -3 -2 LR) (("1" (REPLACE -2 -1 LR) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x2!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x1!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST 1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INST 1 "length(p!1)" "LAMBDA (t:({t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t})):choose(({k: below(length(p!1)) | seq(p!1)(k)=t}))") (("1" (GRIND) (("1" (LEMMA "epsilon_ax[below(length(p!1))]") (("1" (INST-CP -1 "LAMBDA (k:below(length(p!1))):seq(p!1)(k) = x1!1") (("1" (BDDSIMP) (("1" (INST -1 "LAMBDA (k:below(length(p!1))):seq(p!1)(k) = x2!1") (("1" (BDDSIMP) (("1" (REPLACE -7 -2 LR) (("1" (REPLACE -2 -1 LR) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x2!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x1!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "t!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (REPLACE -1 1 RL) (("2" (HIDE -1 2) (("2" (BETA 1) (("2" (INST 1 "x1!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (HIDE -1 2) (("2" (EXPAND "is_finite") (("2" (INST 1 "length(p!1)" "LAMBDA (t:({t: T | EXISTS (i: below(length(p!1))): seq(p!1)(i) = t})):choose(({k: below(length(p!1)) | seq(p!1)(k)=t}))") (("1" (GRIND) (("1" (LEMMA "epsilon_ax[below(length(p!1))]") (("1" (INST-CP -1 "LAMBDA (k:below(length(p!1))):seq(p!1)(k) = x1!1") (("1" (BDDSIMP) (("1" (INST -1 "LAMBDA (k:below(length(p!1))):seq(p!1)(k) = x2!1") (("1" (BDDSIMP) (("1" (REPLACE -7 -2 LR) (("1" (REPLACE -2 -1 LR) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x2!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x1!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "0") NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (TYPEPRED "t!1") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|path_gap| 0 (|path_gap-3| "rework3.2" 3319055263 ("" (SKOSIMP*) (("" (LEMMA "path_ops[T].walk_to_path_from") (("" (INST -1 "del_edge(G!1, e!1)" "x!1" "y!1" "w!1") (("" (BDDSIMP (-1 -6)) (("" (SKOSIMP*) (("" (LEMMA "walks[T].edge_to_walk") (("" (INST -1 "G!1" "x!1" "y!1") (("" (BDDSIMP) (("1" (HIDE -2) (("1" (CASE "path_from?(G!1,gen_seq2(G!1, x!1, y!1),x!1,y!1)") (("1" (CASE "path_from?(G!1, p!1, x!1, y!1)") (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "G!1" "p!1" "gen_seq2(G!1, x!1, y!1)" "x!1" "y!1") (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (EXPAND "path_from?" -7) (("1" (FLATTEN) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -3 -4 -6 -8 -9) (("1" (REPLACE -3 -4) (("1" (HIDE -2 -3) (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -3 "0") (("1" (BDDSIMP) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "edge?") (("1" (EXPAND "del_edge") (("1" (EXPAND "remove") (("1" (BDDSIMP) (("1" (EXPAND "member") (("1" (GRIND) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (GRIND) (("1" (TYPEPRED "G!1") (("1" (INSTALL-REWRITES "graphs") (("1" (LEMMA "edge_has_2_verts") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4) (("2" (INSTALL-REWRITES "paths[T]") (("2" (EXPAND "path_from?") (("2" (BDDSIMP) (("2" (EXPAND "path?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (INST -5 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "graph_ops[T].del_edge_lem2") (("1" (INST -1 "G!1" "e!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -6)) (("1" (INST -4 "n!1" "n!1+1") (("1" (ASSERT -4) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(1 + n!1)") (("2" (ASSERT -2) (("2" (LEMMA "graph_ops[T].del_edge_lem2") (("2" (INST -1 "G!1" "e!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP -1 -7) (("1" (INST -4 "n!1" "n!1+1") (("1" (ASSERT -4) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("2" (INST -3 "n!1" "n!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -3 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (INST? -1) (("2" (REPLACE -1 -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3) (("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3) (("2" (GRIND) (("2" (LEMMA "edge_has_2_verts") (("2" (INST?) (("2" (INST -1 "e!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|walk_to_path_from| FORMULA-DECL NIL |path_ops| NIL) (|edge_to_walk| FORMULA-DECL NIL |walks| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|vert_del_edge| FORMULA-DECL NIL |graph_ops| NIL) (|del_edge_lem2| FORMULA-DECL NIL |graph_ops| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |mappings| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|tree_one_path| FORMULA-DECL NIL |tree_paths| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edge_has_2_verts| FORMULA-DECL NIL |graphs| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|edg| CONST-DECL "doubleton[T]" |graphs| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL) (|path_gap-2| "rework3.2" 3319054652 ("" (SKOSIMP*) (("" (LEMMA "path_ops[T].walk_to_path_from") (("" (INST -1 "del_edge(G!1, e!1)" "x!1" "y!1" "w!1") (("" (BDDSIMP (-1 -6)) (("" (SKOSIMP*) (("" (LEMMA "walks[T].edge_to_walk") (("" (INST -1 "G!1" "x!1" "y!1") (("" (BDDSIMP) (("1" (HIDE -2) (("1" (CASE "path_from?(G!1,gen_seq2(G!1, x!1, y!1),x!1,y!1)") (("1" (CASE "path_from?(G!1, p!1, x!1, y!1)") (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "G!1" "p!1" "gen_seq2(G!1, x!1, y!1)" "x!1" "y!1") (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (EXPAND "path_from?" -7) (("1" (FLATTEN) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -3 -4 -6 -8 -9) (("1" (REPLACE -3 -4) (("1" (HIDE -2 -3) (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -3 "0") (("1" (BDDSIMP) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "edge?") (("1" (EXPAND "del_edge") (("1" (EXPAND "remove") (("1" (BDDSIMP) (("1" (EXPAND "member") (("1" (GRIND) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (GRIND) (("1" (TYPEPRED "G!1") (("1" (INSTALL-REWRITES "graphs") (("1" (LEMMA "edge_has_2_verts") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4) (("2" (INSTALL-REWRITES "paths[T]") (("2" (EXPAND "path_from?") (("2" (BDDSIMP) (("2" (EXPAND "path?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (INST -5 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "graph_ops[T].del_edge_lem2") (("1" (INST -1 "G!1" "e!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -6)) (("1" (INST -4 "n!1" "n!1+1") (("1" (ASSERT -4) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(1 + n!1)") (("2" (ASSERT -2) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -3 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (INST? -1) (("2" (REPLACE -1 -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3) (("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3) (("2" (GRIND) (("2" (POSTPONE) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|path_gap-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (LEMMA "path_ops[T].walk_to_path_from") (("" (INST -1 "del_edge(G!1, e!1)" "x!1" "y!1" "w!1") (("" (BDDSIMP (-1 -6)) (("" (SKOSIMP*) (("" (LEMMA "walks[T].edge_to_walk") (("" (INST -1 "G!1" "x!1" "y!1") (("" (BDDSIMP) (("1" (HIDE -2) (("1" (CASE "path_from?(G!1,gen_seq2(G!1, x!1, y!1),x!1,y!1)") (("1" (CASE "path_from?(G!1, p!1, x!1, y!1)") (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "G!1" "p!1" "gen_seq2(G!1, x!1, y!1)" "x!1" "y!1") (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (EXPAND "path_from?" -7) (("1" (FLATTEN) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -3 -4 -6 -8 -9) (("1" (REPLACE -3 -4) (("1" (HIDE -2 -3) (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -3 "0") (("1" (BDDSIMP) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "edge?") (("1" (EXPAND "del_edge") (("1" (EXPAND "remove") (("1" (BDDSIMP) (("1" (EXPAND "member") (("1" (GRIND) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (LEMMA "graphs[T].edge_has_2_verts") (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "y!1") (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "G!1") (("3" (INST? -1) (("3" (BDDSIMP) (("3" (INST -2 "x!1") (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4) (("2" (INSTALL-REWRITES "paths[T]") (("2" (EXPAND "path_from?") (("2" (BDDSIMP) (("2" (EXPAND "path?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (INST -5 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "graph_ops[T].del_edge_lem2") (("1" (INST -1 "G!1" "e!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -6)) (("1" (INST -4 "n!1" "n!1+1") (("1" (ASSERT -4) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(1 + n!1)") (("1" (INST -2 "n!1" "n!1+1") (("1" (ASSERT -2) (("1" (PROP) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -3 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (INST? -1) (("2" (REPLACE -1 -4) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -3) (("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "G!1") (("3" (INST? -1) (("3" (BDDSIMP) (("3" (INST -2 "y!1") (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "G!1") (("4" (INST? -1) (("4" (BDDSIMP) (("4" (INST -2 "x!1") (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3) (("2" (GRIND) (("2" (LEMMA "graphs[T].edge_has_2_verts") (("2" (INST -1 "e!1" "x!1" "y!1") (("2" (ASSERT) (("2" (REPLACE -1 -2) (("2" (LEMMA "doubletons[T].dbl_comm") (("2" (INST? -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|set_card_less| 0 (|set_card_less-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (LEMMA "finite_sets[T].card_diff_subset") (("" (INST? -1) (("" (BDDSIMP) (("" (LEMMA "finite_sets[T].nonempty_card") (("" (INST -1 "difference(B!1,A!1)") (("" (FLATTEN) (("" (HIDE -2) (("" (EXPAND "nonempty?" -1) (("" (BDDSIMP) (("1" (EXPAND "empty?" -1) (("1" (INST -1 "x!1") (("1" (EXPAND "member" 1) (("1" (EXPAND "difference" 1) (("1" (EXPAND "member" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|card_diff_subset| FORMULA-DECL NIL |finite_sets| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |graph_deg_sum| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|conn_compon| 0 (|conn_compon-4| "Partial" 3330872246 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
                                   incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[doubletons[T].doubleton]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL NIL)) NIL) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (GRIND) (("1" (TYPEPRED "G!1") (("1" (INST -1 "dbl[T](seq(w!1)(i!1 - 1), seq(w!1)(i!1))") (("1" (BDDSIMP) (("1" (INST -2 "seq(w!1)(i!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (TYPEPRED "x!1") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL NIL)) NIL) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[doubletons[T].doubleton]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|reachable_conn| FORMULA-DECL NIL |mappings| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(add1[T](w!1, x!3)))" |mappings| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|edge_has_2_verts| FORMULA-DECL NIL |graphs| NIL) (|walk?_add1| FORMULA-DECL NIL |walks| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|add1| CONST-DECL "prewalk" |walks| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](G!1)" |mappings| NIL) (|x!3| SKOLEM-CONST-DECL "T" |mappings| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL) (|conn_compon-3| "Partial" 3318967846 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
                          incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[grlib@doubletons[T].doubleton]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL NIL)) NIL) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (GRIND) (("1" (TYPEPRED "G!1") (("1" (INST -1 "dbl[T](seq(w!1)(i!1 - 1), seq(w!1)(i!1))
") (("1" (BDDSIMP) (("1" (INST -2 "seq(w!1)(i!1)") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (TYPEPRED "x!1") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL NIL)) NIL) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[grlib@doubletons[T].doubleton]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|conn_compon-2| |nil| 3318965285 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
                 incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[grlib@doubletons[T].doubleton]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL))) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL))))))))))))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL))))) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL))))))))))) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL))))))))))) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL))) ("3" (HIDE -3 -9 2) (("3" (GRIND) NIL))))))) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (HIDE -2 -3 -4 -5 -6 -7) (("1" (TYPEPRED "G!1") (("1" (INST -1 "dbl[T](seq(w!1)(i!1 - 1), seq(w!1)(i!1))") (("1" (BDDSIMP) (("1" (INST -1 "seq(add1[T](w!1, x!3))(i!1)") (("1" (ASSERT) (("1" (EXPAND "add1") (("1" (ASSERT) (("1" (HIDE -2 3) (("1" (GRIND) NIL))))))))))) ("2" (HIDE 3) (("2" (GRIND) NIL))))) ("2" (INST 1 "seq(w!1)(i!1 - 1)" "seq(w!1)(i!1)") (("1" (BDDSIMP) (("1" (PROPAX) NIL) ("2" (EXPAND "edge?") (("2" (ASSERT) NIL))))) ("2" (ASSERT) NIL) ("3" (ASSERT) (("3" (REVEAL -1) (("3" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (HIDE -4 -6) (("1" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))) ("3" (ASSERT) NIL) ("4" (ASSERT) (("4" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (HIDE -5) (("1" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) NIL))) ("2" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL))))))))))))))))))) ("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (TYPEPRED "x!1") (("2" (ASSERT) (("2" (EXPAND "reachable") (("2" (ASSERT) (("2" (EXPAND "subgraph") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL))))))))))))))) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL))) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[grlib@doubletons[T].doubleton]") (("1" (ASSERT) (("1" (GRIND) NIL))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL)))))))))))))))))))))))) NIL) NIL NIL) (|conn_compon-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
        incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[doubleton[T]]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL NIL)) NIL) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -3 -9 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (HIDE -2 -3 -4 -5 -6 -7) (("1" (TYPEPRED "G!1") (("1" (INST -1 "dbl[T](seq(w!1)(i!1 - 1), seq(w!1)(i!1))") (("1" (BDDSIMP) (("1" (INST -1 "seq(add1[T](w!1, x!3))(i!1)") (("1" (ASSERT) (("1" (EXPAND "add1") (("1" (ASSERT) (("1" (HIDE -2 3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(i!1 - 1)" "seq(w!1)(i!1)") (("1" (BDDSIMP) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "edge?") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) (("3" (REVEAL -1) (("3" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (HIDE -4 -6) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) (("4" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (HIDE -5) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (ASSERT) (("2" (EXPAND "reachable") (("2" (ASSERT) (("2" (EXPAND "subgraph") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL NIL)) NIL) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|Bush_less| 0 (|Bush_less-6| "" 3884727311 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (LEMMA "set_card_less") (("" (INST -1 "v!1" "vert(Bush(Tr!1, z!1, f!1))" "vert(Bush(Tr!1, v!1, e!1))") (("" (BDDSIMP) (("1" (HIDE 1) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (HIDE -1) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "path?_gen_seq2") (("1" (INST -1 "Tr!1" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "f!1") (("1" (BDDSIMP (-1 -5)) (("1" (INST-CP -2 "z!1") (("1" (INST -2 "v!1") (("1" (BDDSIMP (-2 -11)) (("1" (BDDSIMP (-4 -8)) (("1" (BDDSIMP (-2 -4 -7)) (("1" (HIDE -9) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "Tr!1" "p!1" "gen_seq2(Tr!1, z!1, v!1)" "z!1" "v!1") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (SKOLEM! -1) (("1" (SKOLEM! -11) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -13) (("1" (REPLACE -5 -12) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (BDDSIMP) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (HIDE -5 -12) (("1" (EXPAND "gen_seq2") (("1" (HIDE -1 -2 -3 -4 -12 -13) (("1" (INSTALL-REWRITES "graph_ops[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -6 1 2) (("1" (GRIND) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (REVEAL -2) (("1" (REVEAL 2) (("1" (HIDE -2 -3 -6 -7) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5 -6 -7 -9 -10) (("2" (EXPAND "path_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4 -10) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP) (("3" (EXPAND "path?" 1) (("3" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST? -10) (("1" (INST -10 "j!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -10) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -10 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "del_edge_lem2") (("1" (INST -1 "Tr!1" "f!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -11)) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) (("1" (REVEAL -13) (("1" (TYPEPRED "n!1") (("1" (REVEAL -2) (("1" (INST -3 "n!1" "n!1+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -3 -4 -5 -6 -7 2) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("1" (INST -1 "n!1" "n!1+1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -9 -10) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "f!1") (("2" (EXPAND "verts_in?") (("2" (INST -9 "i!1") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "edge?") (("2" (BDDSIMP) (("1" (HIDE -8) (("1" (SKOLEM! -7) (("1" (FLATTEN) (("1" (HIDE -8) (("1" (HIDE -6) (("1" (HIDE -7) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (REPLACE -6 -3) (("1" (REPLACE -6 -4) (("1" (REPLACE -6 -5) (("1" (HIDE -6) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (CASE "v!1=z!1") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -6 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Bush") (("2" (EXPAND "subgraph") (("2" (EXPAND "reachable") (("2" (BDDSIMP) (("1" (INST 1 "gen_seq1(del_edge(Tr!1, e!1),v!1)") (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (LEMMA "gen_seq1_is_walk") (("1" (INST -1 "del_edge(Tr!1, e!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2) (("1" (TYPEPRED "v!1") (("1" (LEMMA "vert_del_edge") (("1" (INST -1 "Tr!1" "e!1") (("1" (REPLACE -1 -2 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "subset?") (("3" (SKOSIMP*) (("3" (EXPAND "member") (("3" (EXPAND "Bush" 1) (("3" (EXPAND "subgraph") (("3" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (BDDSIMP) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOLEM! -3) (("1" (INST 1 "rev(add1(rev(w!1),v!1))") (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk_from?" 1) (("1" (BDDSIMP) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "add1(rev(w!1), v!1)") (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "del_edge(Tr!1, e!1)" "rev(w!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2 3) (("1" (LEMMA "del_edge_lem3") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "rev") (("1" (REPLACE -4 1) (("1" (INST -1 "Tr!1" "e!1" "dbl[T](z!1,v!1)") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (SKOLEM! -1) (("1" (FLATTEN) (("1" (CASE " f!1 = dbl[T](z!1,v!1)") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (HIDE -1 -2 -4 -5 -7 -9 -10 -11 -12 -13 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 3) (("2" (GRIND) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 -6) -) (("3" (HIDE 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -6 -7 -8 -9 3) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (HIDE -1 -2) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "x!2" "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "z!1" "v!1") (("2" (ASSERT 1) (("2" (HIDE -4 -5 -6 1) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -4 -3 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (TYPEPRED "Tr!1") (("2" (INST -1 "f!1") (("2" (BDDSIMP) (("2" (INST -2 "v!1") (("2" (BDDSIMP) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w!1") (("3" (CASE "walk?(del_edge(Tr!1, e!1), w!1)") (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "w!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND "walk?" 1) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "del_edge_lem3") (("1" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem3") (("2" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (TYPEPRED "v!1") (("1" (TYPEPRED "z!1") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "f!1" "v!1" "z!1") (("1" (BDDSIMP (-1 -7 -22)) (("1" (REPLACE -14 -6 RL) (("1" (TYPEPRED "Tr!1") (("1" (LEMMA "path_gap") (("1" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1)" "z!1" "v!1") (("1" (BDDSIMP -1) (("1" (ASSERT -1) (("1" (REPLACE -17 -9 LR) (("1" (REPLACE -1 -9 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 -9 -15 -21 -23 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1" "w!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 2) (("2" (HIDE -1 -2 -3 -6 7- -8 -10 -13 -15) (("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (LEMMA "path_gap") (("2" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1+1)" "z!1" "v!1") (("2" (TYPEPRED "Tr!1") (("2" (HIDE -1) (("2" (REVEAL -1 -2 -4 -9) (("2" (HIDE -4) (("2" (HIDE -7) (("2" (REVEAL -8) (("2" (BDDSIMP) (("1" (REPLACE -6 -9 RL) (("1" (REPLACE -9 -11 RL) (("1" (REPLACE -11 1 RL) (("1" (HIDE-ALL-BUT -2 -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1+1" "w!1") (("2" (STOP-REWRITE) (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (TYPEPRED "n!1") (("2" (HIDE-ALL-BUT (-1 -14 1)) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -5 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (HIDE -4 -5 -6 -7 2) (("2" (TYPEPRED "e!1") (("2" (SKOSIMP*) (("2" (LEMMA "edge_has_2_verts") (("2" (LEMMA "dbl_eq") (("2" (INST -1 "seq(w!1)(n!1)" "x!2" "y!1" "seq(w!1)(1 + n!1)") (("2" (REPLACE -6 -3 RL) (("2" (ASSERT) (("2" (REPLACE -5 -1 RL) (("2" (BDDSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "n!1") (("3" (HIDE -4 -5 -6 -8 2) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (INST -9 "n!1") (("2" (ASSERT (-4 -9)) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (INST -2 "Tr!1" "f!1") (("2" (REPLACE -1 1) (("2" (REPLACE -2 -4 LR) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT 1) (("1" (TYPEPRED "i!1") (("1" (BDDSIMP) (("1" (INST -6 "i!1-1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Bush_less-5| "try" 3767624185 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (LEMMA "set_card_less") (("" (INST -1 "v!1" "vert(Bush(Tr!1, z!1, f!1))" "vert(Bush(Tr!1, v!1, e!1))") (("" (BDDSIMP) (("1" (HIDE 1) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (HIDE -1) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "path?_gen_seq2") (("1" (INST -1 "Tr!1" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "f!1") (("1" (BDDSIMP (-1 -5)) (("1" (INST-CP -2 "z!1") (("1" (INST -2 "v!1") (("1" (BDDSIMP (-2 -11)) (("1" (BDDSIMP (-4 -8)) (("1" (BDDSIMP (-2 -4 -7)) (("1" (HIDE -9) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "Tr!1" "p!1" "gen_seq2(Tr!1, z!1, v!1)" "z!1" "v!1") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (SKOLEM! -1) (("1" (SKOLEM! -11) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -13) (("1" (REPLACE -5 -12) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (BDDSIMP) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (HIDE -5 -12) (("1" (EXPAND "gen_seq2") (("1" (HIDE -1 -2 -3 -4 -12 -13) (("1" (INSTALL-REWRITES "graph_ops[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -6 1 2) (("1" (GRIND) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (REVEAL -2) (("1" (REVEAL 2) (("1" (HIDE -2 -3 -6 -7) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5 -6 -7 -9 -10) (("2" (EXPAND "path_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4 -10) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP) (("3" (EXPAND "path?" 1) (("3" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST? -10) (("1" (INST -10 "j!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -10) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -10 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "del_edge_lem2") (("1" (INST -1 "Tr!1" "f!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -11)) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) (("1" (REVEAL -13) (("1" (TYPEPRED "n!1") (("1" (REVEAL -2) (("1" (INST -3 "n!1" "n!1+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -3 -4 -5 -6 -7 2) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("1" (INST -1 "n!1" "n!1+1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -9 -10) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "f!1") (("2" (EXPAND "verts_in?") (("2" (INST -9 "i!1") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "edge?") (("2" (BDDSIMP) (("1" (HIDE -8) (("1" (SKOLEM! -7) (("1" (FLATTEN) (("1" (HIDE -8) (("1" (HIDE -6) (("1" (HIDE -7) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (REPLACE -6 -3) (("1" (REPLACE -6 -4) (("1" (REPLACE -6 -5) (("1" (HIDE -6) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (CASE "v!1=z!1") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -6 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Bush") (("2" (EXPAND "subgraph") (("2" (EXPAND "reachable") (("2" (BDDSIMP) (("1" (INST 1 "gen_seq1(del_edge(Tr!1, e!1),v!1)") (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (LEMMA "gen_seq1_is_walk") (("1" (INST -1 "del_edge(Tr!1, e!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2) (("1" (TYPEPRED "v!1") (("1" (LEMMA "vert_del_edge") (("1" (INST -1 "Tr!1" "e!1") (("1" (REPLACE -1 -2 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "subset?") (("3" (SKOSIMP*) (("3" (EXPAND "member") (("3" (EXPAND "Bush" 1) (("3" (EXPAND "subgraph") (("3" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (BDDSIMP) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOLEM! -3) (("1" (INST 1 "rev(add1(rev(w!1),v!1))") (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk_from?" 1) (("1" (BDDSIMP) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "add1(rev(w!1), v!1)") (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "del_edge(Tr!1, e!1)" "rev(w!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2 3) (("1" (LEMMA "del_edge_lem3") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "rev") (("1" (REPLACE -4 1) (("1" (INST -1 "Tr!1" "e!1" "dbl[T](z!1,v!1)") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (SKOLEM! -1) (("1" (FLATTEN) (("1" (CASE " f!1 = dbl[T](z!1,v!1)") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (HIDE -1 -2 -4 -5 -7 -9 -10 -11 -12 -13 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 3) (("2" (GRIND) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 -6) -) (("3" (HIDE 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -6 -7 -8 -9 3) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (HIDE -1 -2) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "x!2" "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "z!1" "v!1") (("2" (ASSERT 1) (("2" (HIDE -4 -5 -6 1) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -4 -3 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (TYPEPRED "Tr!1") (("2" (INST -1 "f!1") (("2" (BDDSIMP) (("2" (INST -2 "v!1") (("2" (BDDSIMP) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w!1") (("3" (CASE "walk?(del_edge(Tr!1, e!1), w!1)") (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "w!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND "walk?" 1) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "del_edge_lem3") (("1" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem3") (("2" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (TYPEPRED "v!1") (("1" (TYPEPRED "z!1") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "f!1" "v!1" "z!1") (("1" (BDDSIMP (-1 -7 -22)) (("1" (REPLACE -14 -6 RL) (("1" (TYPEPRED "Tr!1") (("1" (LEMMA "path_gap") (("1" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1)" "z!1" "v!1") (("1" (BDDSIMP -1) (("1" (ASSERT -1) (("1" (REPLACE -17 -9 LR) (("1" (REPLACE -1 -9 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 -9 -15 -21 -23 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1" "w!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 2) (("2" (HIDE -1 -2 -3 -6 7- -8 -10 -13 -15) (("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (LEMMA "path_gap") (("2" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1+1)" "z!1" "v!1") (("2" (TYPEPRED "Tr!1") (("2" (HIDE -1) (("2" (REVEAL -1 -2 -4 -9) (("2" (HIDE -4) (("2" (HIDE -7) (("2" (REVEAL -8) (("2" (BDDSIMP) (("1" (REPLACE -6 -9 RL) (("1" (REPLACE -9 -11 RL) (("1" (REPLACE -11 1 RL) (("1" (HIDE-ALL-BUT -2 -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1+1" "w!1") (("2" (STOP-REWRITE) (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND MIN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND MIN) (("2" (TYPEPRED N!1) (("2" (HIDE-ALL-BUT (-1 -14 1)) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -5 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (HIDE -4 -5 -6 -7 2) (("2" (TYPEPRED "e!1") (("2" (SKOSIMP*) (("2" (LEMMA "edge_has_2_verts") (("2" (LEMMA "dbl_eq") (("2" (INST -1 "seq(w!1)(n!1)" "x!2" "y!1" "seq(w!1)(1 + n!1)") (("2" (REPLACE -6 -3 RL) (("2" (ASSERT) (("2" (REPLACE -5 -1 RL) (("2" (BDDSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "n!1") (("3" (HIDE -4 -5 -6 -8 2) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (INST -9 "n!1") (("2" (ASSERT (-4 -9)) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (INST -2 "Tr!1" "f!1") (("2" (REPLACE -1 1) (("2" (REPLACE -2 -4 LR) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT 1) (("1" (TYPEPRED "i!1") (("1" (BDDSIMP) (("1" (INST -6 "i!1-1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|size| CONST-DECL "nat" |graphs| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|Bush| CONST-DECL "Subgraph(Tr)" |mappings| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|i!1| SKOLEM-CONST-DECL "below(1 + length(w!1))" |mappings| NIL) (|walk?_add1| FORMULA-DECL NIL |walks| NIL) (|del_edge_lem3| FORMULA-DECL NIL |graph_ops| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |mappings| NIL) (|dbl_eq| FORMULA-DECL NIL |doubletons| |structures|) (|path_gap| FORMULA-DECL NIL |mappings| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|walk?_caret| FORMULA-DECL NIL |walks| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|edge_has_2_verts| FORMULA-DECL NIL |graphs| NIL) (|walk?_rev| FORMULA-DECL NIL |walks| NIL) (|add1| CONST-DECL "prewalk" |walks| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|z!1| SKOLEM-CONST-DECL "(vert(Tr!1))" |mappings| NIL) (|f!1| SKOLEM-CONST-DECL "(incident_edges(z!1, Tr!1))" |mappings| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](del_edge(Tr!1, f!1))" |mappings| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|e!1| SKOLEM-CONST-DECL "(incident_edges(v!1, Tr!1))" |mappings| NIL) (|v!1| SKOLEM-CONST-DECL "(vert(Tr!1))" |mappings| NIL) (|Tr!1| SKOLEM-CONST-DECL "Tree[T]" |mappings| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks| NIL) (|gen_seq1_is_walk| FORMULA-DECL NIL |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|walk_to_path_from| FORMULA-DECL NIL |path_ops| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|tree_one_path| FORMULA-DECL NIL |tree_paths| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|vert_del_edge| FORMULA-DECL NIL |graph_ops| NIL) (|del_edge_lem2| FORMULA-DECL NIL |graph_ops| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |mappings| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks| NIL) (|dbl_comm| FORMULA-DECL NIL |doubletons| |structures|) (|path?_gen_seq2| FORMULA-DECL NIL |paths| NIL) (|edge_to_walk| FORMULA-DECL NIL |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|set_card_less| FORMULA-DECL NIL |mappings| NIL)) NIL) (|Bush_less-4| "try" 3767623997 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (LEMMA "set_card_less") (("" (INST -1 "v!1" "vert(Bush(Tr!1, z!1, f!1))" "vert(Bush(Tr!1, v!1, e!1))") (("" (BDDSIMP) (("1" (HIDE 1) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (HIDE -1) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "path?_gen_seq2") (("1" (INST -1 "Tr!1" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "f!1") (("1" (BDDSIMP (-1 -5)) (("1" (INST-CP -2 "z!1") (("1" (INST -2 "v!1") (("1" (BDDSIMP (-2 -11)) (("1" (BDDSIMP (-4 -8)) (("1" (BDDSIMP (-2 -4 -7)) (("1" (HIDE -9) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "Tr!1" "p!1" "gen_seq2(Tr!1, z!1, v!1)" "z!1" "v!1") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (SKOLEM! -1) (("1" (SKOLEM! -11) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -13) (("1" (REPLACE -5 -12) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (BDDSIMP) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (HIDE -5 -12) (("1" (EXPAND "gen_seq2") (("1" (HIDE -1 -2 -3 -4 -12 -13) (("1" (INSTALL-REWRITES "graph_ops[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -6 1 2) (("1" (GRIND) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (REVEAL -2) (("1" (REVEAL 2) (("1" (HIDE -2 -3 -6 -7) (("1" (GRIND) NIL))))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT NIL -) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (HIDE -1 -5 -6 -7 -9 -10) (("2" (EXPAND "path_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL))))))) ("3" (HIDE -1 -4 -10) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP) (("3" (EXPAND "path?" 1) (("3" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST? -10) (("1" (INST -10 "j!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -10) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -10 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "del_edge_lem2") (("1" (INST -1 "Tr!1" "f!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -11)) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) (("1" (REVEAL -13) (("1" (TYPEPRED "n!1") (("1" (REVEAL -2) (("1" (INST -3 "n!1" "n!1+1") (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) (("2" (HIDE -3 -4 -5 -6 -7 2) (("2" (BDDSIMP) NIL))))))) ("2" (REVEAL -3) (("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("1" (INST -1 "n!1" "n!1+1") (("1" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL) ("4" (ASSERT) NIL))) ("2" (ASSERT) NIL))) ("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -9 -10) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "f!1") (("2" (EXPAND "verts_in?") (("2" (INST -9 "i!1") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "edge?") (("2" (BDDSIMP) (("1" (HIDE -8) (("1" (SKOLEM! -7) (("1" (FLATTEN) (("1" (HIDE -8) (("1" (HIDE -6) (("1" (HIDE -7) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (REPLACE -6 -3) (("1" (REPLACE -6 -4) (("1" (REPLACE -6 -5) (("1" (HIDE -6) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (CASE "v!1=z!1") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL))) ("2" (HIDE -1) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST? -1) (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))))))))))) ("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -6 1) (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Bush") (("2" (EXPAND "subgraph") (("2" (EXPAND "reachable") (("2" (BDDSIMP) (("1" (INST 1 "gen_seq1(del_edge(Tr!1, e!1),v!1)") (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (LEMMA "gen_seq1_is_walk") (("1" (INST -1 "del_edge(Tr!1, e!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2) (("1" (TYPEPRED "v!1") (("1" (LEMMA "vert_del_edge") (("1" (INST -1 "Tr!1" "e!1") (("1" (REPLACE -1 -2 RL) (("1" (PROPAX) NIL))))))))))))))))) ("2" (GRIND) NIL) ("3" (GRIND) NIL))))) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL))))))))))) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL))))))))))))))))))))) ("3" (HIDE 2) (("3" (EXPAND "subset?") (("3" (SKOSIMP*) (("3" (EXPAND "member") (("3" (EXPAND "Bush" 1) (("3" (EXPAND "subgraph") (("3" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (BDDSIMP) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOLEM! -3) (("1" (INST 1 "rev(add1(rev(w!1),v!1))") (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk_from?" 1) (("1" (BDDSIMP) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "add1(rev(w!1), v!1)") (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "del_edge(Tr!1, e!1)" "rev(w!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2 3) (("1" (LEMMA "del_edge_lem3") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "rev") (("1" (REPLACE -4 1) (("1" (INST -1 "Tr!1" "e!1" "dbl[T](z!1,v!1)") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (SKOLEM! -1) (("1" (FLATTEN) (("1" (CASE " f!1 = dbl[T](z!1,v!1)") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (HIDE -1 -2 -4 -5 -7 -9 -10 -11 -12 -13 1) (("1" (GRIND) NIL))) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 3) (("2" (GRIND) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL))))))))) ("3" (HIDE-ALL-BUT (-4 -6) -) (("3" (HIDE 3) (("3" (GRIND) NIL))))))))))))) ("2" (HIDE -2 -4 -6 -7 -8 -9 3) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (HIDE -1 -2) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "x!2" "y!1") NIL))))))))))))))))))))))))))) ("2" (INST 1 "z!1" "v!1") (("2" (ASSERT 1) (("2" (HIDE -4 -5 -6 1) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -4 -3 RL) (("2" (PROPAX) NIL))))))))))))))))))))))))))))) ("2" (TYPEPRED "f!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (TYPEPRED "Tr!1") (("2" (INST -1 "f!1") (("2" (BDDSIMP) (("2" (INST -2 "v!1") (("2" (BDDSIMP) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 1) (("2" (PROPAX) NIL))))))))))))))))))))))) ("3" (TYPEPRED "w!1") (("3" (CASE "walk?(del_edge(Tr!1, e!1), w!1)") (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "w!1") (("1" (BDDSIMP) NIL))))) ("2" (HIDE 2 3 4) (("2" (EXPAND "walk?" 1) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "del_edge_lem3") (("1" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (BDDSIMP) NIL))))))))))))) ("2" (LEMMA "del_edge_lem3") (("2" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (TYPEPRED "v!1") (("1" (TYPEPRED "z!1") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "f!1" "v!1" "z!1") (("1" (BDDSIMP (-1 -7 -22)) (("1" (REPLACE -14 -6 RL) (("1" (TYPEPRED "Tr!1") (("1" (LEMMA "path_gap") (("1" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1)" "z!1" "v!1") (("1" (BDDSIMP -1) (("1" (ASSERT -1 -9 -17 2) (("1" (REPLACE -17 -9 LR) (("1" (REPLACE -1 -9 RL) (("1" (PROPAX) NIL))))))) ("2" (HIDE -1 -2 -6 -9 -15 -21 -23 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1" "w!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (TYPEPRED "n!1") (("2" (ASSERT) NIL))))))))) ("2" (REVEAL 2) (("2" (HIDE -1 -2 -3 -6 7- -8 -10 -13 -15) (("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (LEMMA "path_gap") (("2" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1+1)" "z!1" "v!1") (("2" (TYPEPRED "Tr!1") (("2" (HIDE -1) (("2" (REVEAL -1 -2 -4 -9) (("2" (HIDE -4) (("2" (HIDE -7) (("2" (REVEAL -8) (("2" (BDDSIMP) (("1" (REPLACE -6 -9 RL) (("1" (REPLACE -9 -11 RL) (("1" (REPLACE -11 1 RL) (("1" (HIDE-ALL-BUT -2 -) (("1" (GRIND) NIL))))))))) ("2" (LEMMA "walk?_caret") (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1+1" "w!1") (("2" (STOP-REWRITE) (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND MIN) (("1" (ASSERT) NIL))))))))) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL))))))))))))))))))))))))))))))))))) ("3" (EXPAND "^") (("3" (PROPAX) NIL))))))))))) ("3" (PROPAX) NIL) ("4" (PROPAX) NIL) ("5" (PROPAX) NIL) ("6" (PROPAX) NIL))) ("2" (EXPAND "^") (("2" (EXPAND MIN) (("2" (TYPEPRED N!1) (("2" (HIDE-ALL-BUT (-1 -14 1)) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT -5 -) (("2" (GRIND) NIL))))))))))))))))))))))))))))))) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (HIDE -4 -5 -6 -7 2) (("2" (TYPEPRED "e!1") (("2" (SKOSIMP*) (("2" (LEMMA "edge_has_2_verts") (("2" (LEMMA "dbl_eq") (("2" (INST -1 "seq(w!1)(n!1)" "x!2" "y!1" "seq(w!1)(1 + n!1)") (("2" (REPLACE -6 -3 RL) (("2" (ASSERT) (("2" (REPLACE -5 -1 RL) (("2" (BDDSIMP) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("3" (TYPEPRED "n!1") (("3" (HIDE -4 -5 -6 -8 2) (("3" (ASSERT) (("3" (GRIND) NIL))))))))) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (INST -9 "n!1") (("2" (ASSERT (-4 -9)) (("2" (PROP) NIL))))))))))))))))))))) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (INST -2 "Tr!1" "f!1") (("2" (REPLACE -1 1) (("2" (REPLACE -2 -4 LR) (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (ASSERT) NIL))) ("3" (ASSERT) NIL))))))) ("2" (ASSERT) (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT 1) (("1" (TYPEPRED "i!1") (("1" (BDDSIMP) (("1" (INST -6 "i!1-1") (("1" (GRIND) NIL))))))))))))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL))))))))) ("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL))))))))))))))))) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) NIL))))))))) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) NIL)))))))))))))))))))))))))))))) NIL) NIL NIL) (|Bush_less-3| "try" 3559564791 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (LEMMA "set_card_less") (("" (INST -1 "v!1" "vert(Bush(Tr!1, z!1, f!1))" "vert(Bush(Tr!1, v!1, e!1))") (("" (BDDSIMP) (("1" (HIDE 1) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (HIDE -1) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "path?_gen_seq2") (("1" (INST -1 "Tr!1" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "f!1") (("1" (BDDSIMP (-1 -5)) (("1" (INST-CP -2 "z!1") (("1" (INST -2 "v!1") (("1" (BDDSIMP (-2 -11)) (("1" (BDDSIMP (-4 -8)) (("1" (BDDSIMP (-2 -4 -7)) (("1" (HIDE -9) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "Tr!1" "p!1" "gen_seq2(Tr!1, z!1, v!1)" "z!1" "v!1") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (SKOLEM! -1) (("1" (SKOLEM! -11) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -13) (("1" (REPLACE -5 -12) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (BDDSIMP) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (HIDE -5 -12) (("1" (EXPAND "gen_seq2") (("1" (HIDE -1 -2 -3 -4 -12 -13) (("1" (INSTALL-REWRITES "graph_ops[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -6 1 2) (("1" (GRIND) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (REVEAL -2) (("1" (REVEAL 2) (("1" (HIDE -2 -3 -6 -7) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5 -6 -7 -9 -10) (("2" (EXPAND "path_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4 -10) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP) (("3" (EXPAND "path?" 1) (("3" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST? -10) (("1" (INST -10 "j!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -10) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -10 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "del_edge_lem2") (("1" (INST -1 "Tr!1" "f!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -11)) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) (("1" (REVEAL -13) (("1" (TYPEPRED "n!1") (("1" (REVEAL -2) (("1" (INST -3 "n!1" "n!1+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -3 -4 -5 -6 -7 2) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("1" (INST -1 "n!1" "n!1+1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -9 -10) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "f!1") (("2" (EXPAND "verts_in?") (("2" (INST -9 "i!1") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "edge?") (("2" (BDDSIMP) (("1" (HIDE -8) (("1" (SKOLEM! -7) (("1" (FLATTEN) (("1" (HIDE -8) (("1" (HIDE -6) (("1" (HIDE -7) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (REPLACE -6 -3) (("1" (REPLACE -6 -4) (("1" (REPLACE -6 -5) (("1" (HIDE -6) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (CASE "v!1=z!1") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -6 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Bush") (("2" (EXPAND "subgraph") (("2" (EXPAND "reachable") (("2" (BDDSIMP) (("1" (INST 1 "gen_seq1(del_edge(Tr!1, e!1),v!1)") (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (LEMMA "gen_seq1_is_walk") (("1" (INST -1 "del_edge(Tr!1, e!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2) (("1" (TYPEPRED "v!1") (("1" (LEMMA "vert_del_edge") (("1" (INST -1 "Tr!1" "e!1") (("1" (REPLACE -1 -2 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "subset?") (("3" (SKOSIMP*) (("3" (EXPAND "member") (("3" (EXPAND "Bush" 1) (("3" (EXPAND "subgraph") (("3" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (BDDSIMP) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOLEM! -3) (("1" (INST 1 "rev(add1(rev(w!1),v!1))") (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk_from?" 1) (("1" (BDDSIMP) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "add1(rev(w!1), v!1)") (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "del_edge(Tr!1, e!1)" "rev(w!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2 3) (("1" (LEMMA "del_edge_lem3") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "rev") (("1" (REPLACE -4 1) (("1" (INST -1 "Tr!1" "e!1" "dbl[T](z!1,v!1)") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (SKOLEM! -1) (("1" (FLATTEN) (("1" (CASE " f!1 = dbl[T](z!1,v!1)") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (HIDE -1 -2 -4 -5 -7 -9 -10 -11 -12 -13 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 3) (("2" (GRIND) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 -6) -) (("3" (HIDE 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -6 -7 -8 -9 3) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (HIDE -1 -2) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "x!2" "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "z!1" "v!1") (("2" (ASSERT 1) (("2" (HIDE -4 -5 -6 1) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -4 -3 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (TYPEPRED "Tr!1") (("2" (INST -1 "f!1") (("2" (BDDSIMP) (("2" (INST -2 "v!1") (("2" (BDDSIMP) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w!1") (("3" (CASE "walk?(del_edge(Tr!1, e!1), w!1)") (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "w!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND "walk?" 1) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "del_edge_lem3") (("1" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem3") (("2" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (TYPEPRED "v!1") (("1" (TYPEPRED "z!1") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "f!1" "v!1" "z!1") (("1" (BDDSIMP (-1 -7 -22)) (("1" (REPLACE -14 -6 RL) (("1" (TYPEPRED "Tr!1") (("1" (LEMMA "path_gap") (("1" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1)" "z!1" "v!1") (("1" (BDDSIMP -1 -3 -11 -4 -5) (("1" (ASSERT -1 -9 -17 2) (("1" (REPLACE -17 -9 LR) (("1" (REPLACE -1 -9 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 -9 -15 -21 -23 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1" "w!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 2) (("2" (HIDE -1 -2 -3 -6 7- -8 -10 -13 -15) (("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (LEMMA "path_gap") (("2" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1+1)" "z!1" "v!1") (("2" (TYPEPRED "Tr!1") (("2" (HIDE -1) (("2" (REVEAL -1 -2 -4 -9) (("2" (HIDE -4) (("2" (HIDE -7) (("2" (REVEAL -8) (("2" (BDDSIMP) (("1" (REPLACE -6 -9 RL) (("1" (REPLACE -9 -11 RL) (("1" (REPLACE -11 1 RL) (("1" (HIDE-ALL-BUT -2 -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1+1" "w!1") (("2" (STOP-REWRITE) (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (EXPAND MIN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND MIN) (("2" (TYPEPRED N!1) (("2" (HIDE-ALL-BUT (-1 -14 1)) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -5 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (HIDE -4 -5 -6 -7 2) (("2" (TYPEPRED "e!1") (("2" (SKOSIMP*) (("2" (LEMMA "edge_has_2_verts") (("2" (LEMMA "dbl_eq") (("2" (INST -1 "seq(w!1)(n!1)" "x!2" "y!1" "seq(w!1)(1 + n!1)") (("2" (REPLACE -6 -3 RL) (("2" (ASSERT) (("2" (REPLACE -5 -1 RL) (("2" (BDDSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "n!1") (("3" (HIDE -4 -5 -6 -8 2) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (INST -9 "n!1") (("2" (ASSERT (-4 -9)) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (INST -2 "Tr!1" "f!1") (("2" (REPLACE -1 1) (("2" (REPLACE -2 -4 LR) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT 1) (("1" (TYPEPRED "i!1") (("1" (BDDSIMP) (("1" (INST -6 "i!1-1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|Bush_less-2| "try" 3318786685 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (LEMMA "set_card_less") (("" (INST -1 "v!1" "vert(Bush(Tr!1, z!1, f!1))" "vert(Bush(Tr!1, v!1, e!1))") (("" (BDDSIMP) (("1" (HIDE 1) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (HIDE -1) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "path?_gen_seq2") (("1" (INST -1 "Tr!1" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "f!1") (("1" (BDDSIMP (-1 -5)) (("1" (INST-CP -2 "z!1") (("1" (INST -2 "v!1") (("1" (BDDSIMP (-2 -11)) (("1" (BDDSIMP (-4 -8)) (("1" (BDDSIMP (-2 -4 -7)) (("1" (HIDE -9) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "Tr!1" "p!1" "gen_seq2(Tr!1, z!1, v!1)" "z!1" "v!1") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (SKOLEM! -1) (("1" (SKOLEM! -11) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -13) (("1" (REPLACE -5 -12) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (BDDSIMP) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (HIDE -5 -12) (("1" (EXPAND "gen_seq2") (("1" (HIDE -1 -2 -3 -4 -12 -13) (("1" (INSTALL-REWRITES "graph_ops[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -6 1 2) (("1" (GRIND) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (REVEAL -2) (("1" (REVEAL 2) (("1" (HIDE -2 -3 -6 -7) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5 -6 -7 -9 -10) (("2" (EXPAND "path_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4 -10) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP) (("3" (EXPAND "path?" 1) (("3" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST? -10) (("1" (INST -10 "j!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -10) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -10 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "del_edge_lem2") (("1" (INST -1 "Tr!1" "f!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -11)) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) (("1" (REVEAL -13) (("1" (TYPEPRED "n!1") (("1" (REVEAL -2) (("1" (INST -3 "n!1" "n!1+1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -3 -4 -5 -6 -7 2) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("1" (INST -1 "n!1" "n!1+1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -9 -10) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "f!1") (("2" (EXPAND "verts_in?") (("2" (INST -9 "i!1") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "edge?") (("2" (BDDSIMP) (("1" (HIDE -8) (("1" (SKOLEM! -7) (("1" (FLATTEN) (("1" (HIDE -8) (("1" (HIDE -6) (("1" (HIDE -7) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (REPLACE -6 -3) (("1" (REPLACE -6 -4) (("1" (REPLACE -6 -5) (("1" (HIDE -6) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (CASE "v!1=z!1") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -6 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE 2) (("2" (EXPAND "Bush") (("2" (EXPAND "subgraph") (("2" (EXPAND "reachable") (("2" (BDDSIMP) (("1" (INST 1 "gen_seq1(del_edge(Tr!1, e!1),v!1)") (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (LEMMA "gen_seq1_is_walk") (("1" (INST -1 "del_edge(Tr!1, e!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2) (("1" (TYPEPRED "v!1") (("1" (LEMMA "vert_del_edge") (("1" (INST -1 "Tr!1" "e!1") (("1" (REPLACE -1 -2 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "subset?") (("3" (SKOSIMP*) (("3" (EXPAND "member") (("3" (EXPAND "Bush" 1) (("3" (EXPAND "subgraph") (("3" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (BDDSIMP) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOLEM! -3) (("1" (INST 1 "rev(add1(rev(w!1),v!1))") (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk_from?" 1) (("1" (BDDSIMP) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "add1(rev(w!1), v!1)") (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "del_edge(Tr!1, e!1)" "rev(w!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2 3) (("1" (LEMMA "del_edge_lem3") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "rev") (("1" (REPLACE -4 1) (("1" (INST -1 "Tr!1" "e!1" "dbl[T](z!1,v!1)") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (SKOLEM! -1) (("1" (FLATTEN) (("1" (CASE " f!1 = dbl[T](z!1,v!1)") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (HIDE -1 -2 -4 -5 -7 -9 -10 -11 -12 -13 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 3) (("2" (GRIND) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 -6) -) (("3" (HIDE 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -6 -7 -8 -9 3) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (HIDE -1 -2) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "x!2" "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "z!1" "v!1") (("2" (ASSERT 1) (("2" (HIDE -4 -5 -6 1) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -4 -3 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (TYPEPRED "Tr!1") (("2" (INST -1 "f!1") (("2" (BDDSIMP) (("2" (INST -2 "v!1") (("2" (BDDSIMP) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w!1") (("3" (CASE "walk?(del_edge(Tr!1, e!1), w!1)") (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "w!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND "walk?" 1) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "del_edge_lem3") (("1" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem3") (("2" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (TYPEPRED "v!1") (("1" (TYPEPRED "z!1") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "f!1" "v!1" "z!1") (("1" (BDDSIMP (-1 -7 -22)) (("1" (REPLACE -14 -6 RL) (("1" (TYPEPRED "Tr!1") (("1" (LEMMA "path_gap") (("1" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1)" "z!1" "v!1") (("1" (BDDSIMP -1 -3 -11 -4 -5) (("1" (ASSERT -1 -9 -17 2) (("1" (REPLACE -17 -9 LR) (("1" (REPLACE -1 -9 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -6 -9 -15 -21 -23 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1" "w!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 2) (("2" (HIDE -1 -2 -3 -6 7- -8 -10 -13 -15) (("2" (GRIND) (("2" (TYPEPRED "w!1") (("2" (LEMMA "path_gap") (("2" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1+1)" "z!1" "v!1") (("2" (TYPEPRED "Tr!1") (("2" (HIDE -1) (("2" (REVEAL -1 -2 -4 -9) (("2" (HIDE -4) (("2" (HIDE -7) (("2" (REVEAL -8) (("2" (BDDSIMP) (("1" (REPLACE -6 -9 RL) (("1" (REPLACE -9 -11 RL) (("1" (REPLACE -11 1 RL) (("1" (HIDE-ALL-BUT -2 -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1+1" "w!1") (("2" (STOP-REWRITE) (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL) ("4" (PROPAX) NIL NIL) ("5" (PROPAX) NIL NIL) ("6" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "^") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -5 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (HIDE -4 -5 -6 -7 2) (("2" (TYPEPRED "e!1") (("2" (SKOSIMP*) (("2" (LEMMA "edge_has_2_verts") (("2" (LEMMA "dbl_eq") (("2" (INST -1 "seq(w!1)(n!1)" "x!2" "y!1" "seq(w!1)(1 + n!1)") (("2" (REPLACE -6 -3 RL) (("2" (ASSERT) (("2" (REPLACE -5 -1 RL) (("2" (BDDSIMP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "n!1") (("3" (HIDE -4 -5 -6 -8 2) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("2" (TYPEPRED "w!1") (("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (INST -9 "n!1") (("2" (ASSERT (-4 -9)) (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (INST -2 "Tr!1" "f!1") (("2" (REPLACE -1 1) (("2" (REPLACE -2 -4 LR) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT 1) (("1" (TYPEPRED "i!1") (("1" (BDDSIMP) (("1" (INST -6 "i!1-1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|Bush_less-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (LEMMA "set_card_less") (("" (INST -1 "v!1" "vert(Bush(Tr!1, z!1, f!1))" "vert(Bush(Tr!1, v!1, e!1))") (("" (BDDSIMP) (("1" (HIDE 1) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (HIDE -1) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "path?_gen_seq2") (("1" (INST -1 "Tr!1" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "f!1") (("1" (BDDSIMP (-1 -5)) (("1" (INST-CP -2 "z!1") (("1" (INST -2 "v!1") (("1" (BDDSIMP (-2 -11)) (("1" (BDDSIMP (-4 -8)) (("1" (BDDSIMP (-2 -4 -7)) (("1" (HIDE -9) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (INST -1 "Tr!1" "p!1" "gen_seq2(Tr!1, z!1, v!1)" "z!1" "v!1") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (SKOLEM! -1) (("1" (SKOLEM! -11) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -13) (("1" (REPLACE -5 -12) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -13 "0") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (HIDE -5 -12) (("1" (EXPAND "gen_seq2") (("1" (HIDE -1 -2 -3 -4 -12 -13) (("1" (INSTALL-REWRITES "graph_ops[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (HIDE -6 1 2) (("1" (GRIND) (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T) (("1" (REVEAL -2) (("1" (REVEAL 2) (("1" (HIDE -2 -3 -6 -7) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5 -6 -7 -9 -10) (("2" (EXPAND "path_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -4 -10) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP) (("3" (EXPAND "path?" 1) (("3" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (INST? -10) (("1" (INST -10 "j!1") (("1" (EXPAND "finseq_appl") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -10) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -10 "n!1") (("1" (BDDSIMP) (("1" (LEMMA "del_edge_lem2") (("1" (INST -1 "Tr!1" "f!1" "dbl[T](seq(p!1)(n!1), seq(p!1)(1 + n!1))") (("1" (BDDSIMP (-1 -11)) (("1" (HIDE-ALL-BUT -1 -) (("1" (GRIND) (("1" (REVEAL -13) (("1" (TYPEPRED "n!1") (("1" (REVEAL -2) (("1" (INST -3 "n!1" "n!1+1") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 -6 -7 2) (("2" (ASSERT) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST 1 "seq(p!1)(n!1)" "seq(p!1)(n!1+1)") (("1" (EXPAND "finseq_appl") (("1" (INST -1 "n!1" "n!1+1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -9 -10) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "f!1") (("2" (EXPAND "verts_in?") (("2" (INST -9 "i!1") (("2" (REPLACE -1 1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "edge?") (("2" (BDDSIMP) (("1" (HIDE -8) (("1" (SKOLEM! -7) (("1" (FLATTEN) (("1" (HIDE -8) (("1" (HIDE -6) (("1" (HIDE -7) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (REPLACE -6 -3) (("1" (REPLACE -6 -4) (("1" (EXPAND "dbl[T]" (-3 -4)) (("1" (REPLACE -6 -5) (("1" (HIDE -6) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (CASE "v!1=z!1") (("1" (REPLACE -1 -2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST? -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -6 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "Bush") (("2" (EXPAND "subgraph") (("2" (EXPAND "reachable") (("2" (BDDSIMP) (("1" (INST 1 "gen_seq1(del_edge(Tr!1, e!1),v!1)") (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (LEMMA "gen_seq1_is_walk") (("1" (INST -1 "del_edge(Tr!1, e!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2) (("1" (TYPEPRED "v!1") (("1" (LEMMA "vert_del_edge") (("1" (INST -1 "Tr!1" "e!1") (("1" (REPLACE -1 -2 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v!1") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND "subset?") (("3" (SKOSIMP*) (("3" (EXPAND "member") (("3" (EXPAND "Bush" 1) (("3" (EXPAND "subgraph") (("3" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (BDDSIMP) (("1" (EXPAND "Bush") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "reachable") (("1" (FLATTEN) (("1" (SKOLEM! -3) (("1" (INST 1 "rev(add1(rev(w!1),v!1))") (("1" (INSTALL-REWRITES "walks[T]") (("1" (EXPAND "walk_from?" 1) (("1" (BDDSIMP) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "add1(rev(w!1), v!1)") (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "del_edge(Tr!1, e!1)" "rev(w!1)" "v!1") (("1" (BDDSIMP) (("1" (HIDE 2 3) (("1" (LEMMA "del_edge_lem3") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "rev") (("1" (REPLACE -4 1) (("1" (INST -1 "Tr!1" "e!1" "dbl[T](z!1,v!1)") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (SKOLEM! -1) (("1" (FLATTEN) (("1" (CASE " f!1 = dbl[T](z!1,v!1)") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (HIDE -1 -2 -4 -5 -7 -9 -10 -11 -12 -13 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 3) (("2" (GRIND) (("2" (REPLACE -1 2 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-4 -6) -) (("3" (HIDE 3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -4 -6 -7 -8 -9 3) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (HIDE -1 -2) (("2" (GRIND) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "x!2" "y!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "z!1" "v!1") (("2" (ASSERT 1) (("2" (HIDE -4 -5 -6 1) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (REPLACE -4 -3 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "f!1") (("2" (EXPAND "incident_edges") (("2" (FLATTEN) (("2" (TYPEPRED "Tr!1") (("2" (INST -1 "f!1") (("2" (BDDSIMP) (("2" (INST -2 "v!1") (("2" (BDDSIMP) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "w!1") (("3" (CASE "walk?(del_edge(Tr!1, e!1), w!1)") (("1" (LEMMA "walk?_rev") (("1" (INST -1 "del_edge(Tr!1, e!1)" "w!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (HIDE 2 3 4) (("2" (EXPAND "walk?" 1) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (LEMMA "del_edge_lem3") (("1" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem3") (("2" (INST -1 "Tr!1" "e!1" "dbl[T](seq(w!1)(n!1), seq(w!1)(1 + n!1))") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (TYPEPRED "v!1") (("1" (TYPEPRED "z!1") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "f!1" "v!1" "z!1") (("1" (BDDSIMP (-1 -7 -22)) (("1" (REPLACE -14 -6 RL) (("1" (EXPAND "dbl[T]" -6) (("1" (BDDSIMP -6) (("1" (LEMMA "path_gap") (("1" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1)" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (BDDSIMP (-2 -3 -5 -6 -11)) (("1" (HIDE -1 -2 -6 -9 -11 -12 -13 -15 -17 -20 -21 -22 -24) (("1" (BDDSIMP) (("1" (EXPAND "edge?") (("1" (BDDSIMP) (("1" (REVEAL -8) (("1" (REVEAL -3) (("1" (INST -1 "e!1") (("1" (BDDSIMP (-1 -8)) (("1" (EXPAND "walk?") (("1" (INST -13 "n!1") (("1" (BDDSIMP (-11 -13)) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (TYPEPRED "e!1") (("2" (EXPAND "incident_edges") (("2" (BDDSIMP) (("2" (REPLACE -7 -3 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "e!1") (("3" (EXPAND "incident_edges") (("3" (FLATTEN) (("3" (REPLACE -6 -3 RL) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (HIDE -9 -11 -16) (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1" "w!1") (("2" (TYPEPRED "n!1") (("2" (BDDSIMP (-1 -2 -16 -23)) (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (EXPAND "^" 1) (("1" (REPLACE -10 1 LR) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT (-3 1)) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -11 -) (("2" (GRIND) NIL NIL)) NIL) ("3" (ASSERT (-15 1)) NIL NIL)) NIL)) NIL) ("2" (LEMMA "path_gap") (("2" (INST -1 "Tr!1" "f!1" "w!1^(0,n!1+1)" "z!1" "v!1") (("1" (TYPEPRED "Tr!1") (("1" (BDDSIMP (-2 -3 -5 -6 -11)) (("1" (HIDE -1 -2 -6 -9 -11 -12 -13 -15 -17 -20 -21 -22 -24) (("1" (EXPAND "walk?") (("1" (TYPEPRED "f!1") (("1" (EXPAND "incident_edges") (("1" (SKOSIMP*) (("1" (HIDE -3) (("1" (LEMMA "edge_has_2_verts") (("1" (TYPEPRED "e!1") (("1" (EXPAND "incident_edges") (("1" (FLATTEN) (("1" (REPLACE -9 -3 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk?_caret") (("2" (HIDE -9 -11 -16) (("2" (INST -1 "del_edge(Tr!1, f!1)" "0" "n!1+1" "w!1") (("2" (TYPEPRED "n!1") (("2" (BDDSIMP (-1 -2 -16 -23)) (("1" (EXPAND "walk_from?") (("1" (BDDSIMP) (("1" (ASSERT (-3 1)) NIL NIL) ("2" (EXPAND "^" 1) (("2" (ASSERT (-10 1)) NIL NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -3) -) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-16) -) (("2" (GRIND) NIL NIL)) NIL) ("3" (ASSERT (-15 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5) -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("1" (BDDSIMP) (("1" (TYPEPRED "e!1") (("1" (LEMMA "edge_has_2_verts") (("1" (SKOSIMP*) (("1" (LEMMA "dbl_eq") (("1" (INST -1 "seq(w!1)(n!1)" "x!2" "y!1" "seq(w!1)(1 + n!1)") (("1" (REPLACE -6 -3 RL) (("1" (BDDSIMP -1 -3) (("1" (ASSERT (-1 -2 -6 1)) NIL NIL) ("2" (ASSERT (-1 -2 -6 1)) NIL NIL) ("3" (ASSERT (-2 1)) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (EXPAND "walk_from?") (("3" (FLATTEN) (("3" (EXPAND "walk?") (("3" (INST -8 "n!1") (("3" (EXPAND "finseq_appl") (("3" (BDDSIMP (-1 -8)) (("3" (HIDE -4 2) (("3" (ASSERT) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(n!1)" "seq(w!1)(1 + n!1)") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (INST -9 "n!1") (("1" (BDDSIMP (-2 -9)) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "edge?") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (INST -2 "i!1") (("2" (LEMMA "vert_del_edge") (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (INST -2 "Tr!1" "f!1") (("2" (REPLACE -2 -4) (("2" (REPLACE -1 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (ASSERT 1) (("1" (TYPEPRED "i!1") (("1" (BDDSIMP) (("1" (ASSERT -2) (("1" (INST -6 "i!1-1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) (("2" (LEMMA "vert_del_edge") (("2" (INST -1 "Tr!1" "e!1") (("2" (REPLACE -1 -2 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Bush") (("2" (EXPAND "reachable") (("2" (EXPAND "subgraph") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|Fox_TCC1| 0 (|Fox_TCC1-1| |nil| 3318087528 ("" (ASSERT) NIL NIL) NIL NIL (|Fox| SUBTYPE "0" "below[length(w)]"))) (|Fox_TCC2| 0 (|Fox_TCC2-2| "" 3790105561 ("" (ASSERT) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|Fox| SUBTYPE "(number_fields.-)(length(mappings.w), 1)" "below[length(w)]")) (|Fox_TCC2-1| |nil| 3318087528 ("" (ASSERT) (("" (INSTALL-REWRITES "paths[T]") (("" (ASSERT) (("" (SKOSIMP*) (("" (INST -1 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|Fox| SUBTYPE "(number_fields.-)(length(mappings.w), 1)" "below[length(w)]"))) (|Fox_TCC3| 0 (|Fox_TCC3-1| |nil| 3318087528 ("" (ASSERT) (("" (SKOSIMP*) (("" (EXPAND "path?") (("" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ((|path?| CONST-DECL "bool" |paths| NIL)) NIL (|Fox| SUBTYPE "mappings.w" "Walk[mappings.T](mappings.Tr)"))) (|Fox_TCC4| 0 (|Fox_TCC4-1| |nil| 3318087528 ("" (INSTALL-REWRITES "paths[T]") (("" (ASSERT) (("" (SKOSIMP*) (("" (ASSERT) (("" (INST - "length(w!1)-1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|Fox| SUBTYPE "finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 1))" "(vert(mappings.Tr))"))) (|Fox_TCC5| 0 (|Fox_TCC5-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (INSTALL-REWRITES "paths[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL)) NIL (|Fox| SUBTYPE "(number_fields.-)(length(mappings.w), 2)" "below[length(w)]"))) (|Fox_TCC6| 0 (|Fox_TCC6-2| "" 3804635444 ("" (EXPAND "finseq_appl") (("" (ASSERT) (("" (SKOSIMP*) (("" (ASSERT) (("" (BDDSIMP) (("1" (INSTALL-REWRITES "paths") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (INST -2 "length(w!1)-2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(length(w!1) - 2)" "seq(w!1)(length(w!1) - 1)") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("2" (INST - "length(w!1)-2" "length(w!1)-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|Fox| SUBTYPE "doubletons[mappings.T].dbl(finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 2)), finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 1)))" "(graph_deg[mappings.T].incident_edges(finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 1)), mappings.Tr))")) (|Fox_TCC6-1| |nil| 3318087528 ("" (EXPAND "finseq_appl") (("" (ASSERT) (("" (SKOSIMP*) (("" (ASSERT) (("" (BDDSIMP) (("1" (INSTALL-REWRITES "paths") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (INST -5 "length(w!1)-2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(length(w!1) - 2)" "seq(w!1)(length(w!1) - 1)") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("2" (INST -5 "length(w!1)-2" "length(w!1)-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|Fox| SUBTYPE "doubletons[mappings.T].dbl(finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 2)), finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 1)))" "(graph_deg[mappings.T].incident_edges(finite_sequences[mappings.T].finseq_appl(mappings.w)((number_fields.-)(length(mappings.w), 1)), mappings.Tr))"))) (|short_hound| 0 (|short_hound-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "from?") (("" (FLATTEN) (("" (REPLACE -4 -3 LR) (("" (ASSERT -3) (("" (REPLACE -3 -2 LR) (("" (EXPAND "fixed?") (("" (SKOSIMP*) (("" (INST -5 "x!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "w!1") (("2" (HIDE -3 -4 2) (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (HIDE -3) (("2" (REVEAL (-2 -3)) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -4 "0") (("2" (REPLACE -2 -4 LR) (("2" (REPLACE -1 -4 LR) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|Tr!1| SKOLEM-CONST-DECL "Tree[T]" |mappings| NIL) (|x!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|fixed?| CONST-DECL "bool" |mappings| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)) NIL)) (|back_hound_TCC1| 0 (|back_hound_TCC1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|back_hound| SUBTYPE "1" "below[length(w)]"))) (|back_hound_TCC2| 0 (|back_hound_TCC2-2| "" 3790105562 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "path?") (("" (FLATTEN) (("" (EXPAND "walk?") (("" (FLATTEN) (("" (HIDE -2 -3 -4) (("" (INSTALL-REWRITES "walks[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) SHOSTAK (|back_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 2)" "below[length(w)]")) (|back_hound_TCC2-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "path?") (("" (FLATTEN) (("" (EXPAND "walk?") (("" (FLATTEN) (("" (HIDE -2 -3 -4) (("" (INSTALL-REWRITES "walks[T]") (("" (ASSERT) (("" (INST -1 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|back_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 2)" "below[length(w)]"))) (|back_hound| 0 (|back_hound-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (REPLACE -2 -3 LR) (("" (ASSERT -3) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "from?") (("" (FLATTEN) (("" (REPLACE -4 -3 LR) (("" (ASSERT) (("" (REPLACE -2 -3 RL) (("" (EXPAND "fixed?") (("" (FLATTEN) (("" (INST 1 "seq(w!1)(1)" "seq(w!1)(0)") (("1" (ASSERT) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT -1 -) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (FLATTEN) (("1" (INST -2 "0") (("1" (TYPEPRED "w!1") (("1" (REVEAL -5) (("1" (ASSERT (-1 -4)) (("1" (ASSERT) (("1" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (GRIND) (("2" (REWRITE "dbl_comm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (BDDSIMP) (("2" (INST -2 "0") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) (("3" (BDDSIMP) (("3" (INST -1 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|fixed?| CONST-DECL "bool" |mappings| NIL) (|w!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|Tr!1| SKOLEM-CONST-DECL "Tree[T]" |mappings| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|dbl_comm| FORMULA-DECL NIL |doubletons| |structures|) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL)) NIL)) (|stuck_hound_TCC1| 0 (|stuck_hound_TCC1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|stuck_hound| SUBTYPE "1" "below[length(w)]"))) (|stuck_hound_TCC2| 0 (|stuck_hound_TCC2-2| "" 3790105563 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "path?") (("" (FLATTEN) (("" (EXPAND "walk?") (("" (FLATTEN) (("" (HIDE -2 -3 -4) (("" (INSTALL-REWRITES "walks[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|stuck_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 1)" "below[length(w)]")) (|stuck_hound_TCC2-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "path?") (("" (FLATTEN) (("" (EXPAND "walk?") (("" (FLATTEN) (("" (HIDE -2 -3 -4) (("" (INSTALL-REWRITES "walks[T]") (("" (ASSERT) (("" (INST -1 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|stuck_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 1)" "below[length(w)]"))) (|stuck_hound_TCC3| 0 (|stuck_hound_TCC3-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|stuck_hound| SUBTYPE "(number_fields.-)(length(mappings.p), 2)" "below[length(p)]"))) (|stuck_hound_TCC4| 0 (|stuck_hound_TCC4-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|stuck_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 2)" "below[length(w)]"))) (|stuck_hound| 0 (|stuck_hound-2| "V3.2" 3318774746 ("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (INST 1 "w!1^(1,length(w!1)-1)") (("1" (BDDSIMP) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "path_from?_caret") (("2" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "x!1" "phi!1(x!1)") (("2" (ASSERT) (("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "length(w!1)=2") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (HIDE -3) (("1" (INST -10 "seq(w!1)(1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST -3 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (EXPAND "path?") (("3" (FLATTEN) (("3" (EXPAND "from?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (EXPAND "walk?") (("3" (FLATTEN) (("3" (EXPAND "verts_in?") (("3" (INST -1 "0") (("3" (REPLACE -4 -1 LR) (("3" (HIDE -2 -3) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "path_from?_caret") (("4" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "x!1" "phi!1(x!1)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|premap| TYPE-EQ-DECL NIL |mappings| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|map| TYPE-EQ-DECL NIL |mappings| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|Tr!1| SKOLEM-CONST-DECL "Tree[T]" |mappings| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|fixed?| CONST-DECL "bool" |mappings| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?_caret| FORMULA-DECL NIL |paths| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|w!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)) SHOSTAK) (|stuck_hound-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (INST 1 "w!1^(1,length(w!1)-1)") (("1" (BDDSIMP) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LEMMA "path_from?_caret") (("2" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "x!1" "phi!1(x!1)") (("2" (ASSERT) (("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (HIDE -2) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (FLATTEN) (("2" (CASE "length(w!1)=2") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (INST -10 "seq(w!1)(1)") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (INST -3 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (EXPAND "path?") (("3" (FLATTEN) (("3" (EXPAND "from?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (EXPAND "walk?") (("3" (FLATTEN) (("3" (EXPAND "verts_in?") (("3" (INST -1 "0") (("3" (REPLACE -4 -1 LR) (("3" (HIDE -2 -3) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "path_from?_caret") (("4" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "x!1" "phi!1(x!1)") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|whole_hound_TCC1| 0 (|whole_hound_TCC1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|whole_hound| SUBTYPE "1" "below[length(w)]"))) (|whole_hound_TCC2| 0 (|whole_hound_TCC2-2| "" 3790105565 ("" (SKOSIMP*) (("" (INSTALL-REWRITES "paths[T]") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL)) SHOSTAK (|whole_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 2)" "below[length(w)]")) (|whole_hound_TCC2-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (INSTALL-REWRITES "paths[T]") (("" (ASSERT) (("" (FLATTEN) (("" (INST -1 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|whole_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 2)" "below[length(w)]"))) (|whole_hound_TCC3| 0 (|whole_hound_TCC3-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|whole_hound| SUBTYPE "(number_fields.-)(length(mappings.p), 2)" "below[length(p)]"))) (|whole_hound_TCC4| 0 (|whole_hound_TCC4-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|whole_hound| SUBTYPE "(number_fields.-)(length(mappings.w), 3)" "below[length(w)]"))) (|whole_hound| 0 (|whole_hound-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (INST 1 "w!1^(1,length(w!1)-2)") (("1" (BDDSIMP) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "path_from?_caret") (("2" (INST -1 "Tr!1" "1" "length(w!1)-2" "w!1" "x!1" "phi!1(x!1)") (("1" (ASSERT) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (LEMMA "path?_caret") (("3" (INST -1 "Tr!1" "1" "length(w!1)-2" "w!1") (("1" (ASSERT) (("1" (HIDE -1 -2) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|w!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|path?_caret| FORMULA-DECL NIL |paths| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|path_from?_caret| FORMULA-DECL NIL |paths| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|map| TYPE-EQ-DECL NIL |mappings| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|premap| TYPE-EQ-DECL NIL |mappings| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL)) (|fixed_fox| 0 (|fixed_fox-3| |nil| 3318761250 ("" (SKOSIMP*) (("" (TYPEPRED "Tr!1") (("" (LEMMA "tree_nonempty") (("" (INST? -1) (("" (BDDSIMP) (("" (EXPAND "empty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (LEMMA "graph_path_conn[T].tree_has_walk") (("" (INST? -1) (("" (INST -1 "phi!1(x!1)") (("" (BDDSIMP) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "G_from(Tr!1,p!1)" "_") (("1" (INST 1 "Bush(Tr!1,p!1(length(p!1)-1),dbl(p!1(length(p!1)-2),p!1(length(p!1)-1)))") (("1" (EXPAND "Fox") (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (INSTALL-REWRITES "walks") (("1" (HIDE -1 -2 -6) (("1" (HIDE -2 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -1 -2 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_from_l") (("2" (HIDE -2) (("2" (INST -1 "p!1" "x!1" "phi!1(x!1)") (("2" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (EXPAND "fixed?") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST -2 "x!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 3) (("3" (INSTALL-REWRITES "paths") (("3" (ASSERT) (("3" (ASSERT) (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -3 -5 2) (("3" (INSTALL-REWRITES "paths") (("3" (EXPAND "path_from?") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (HIDE -3 -5) (("1" (INSTALL-REWRITES "paths") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (INST -4 "length(p!1) - 2") (("1" (ASSERT -4) NIL NIL) ("2" (LEMMA "walk_from_l") (("2" (INST -1 "p!1" "x!1" "phi!1(x!1)") (("2" (HIDE -2 -3 -4 -5) (("2" (INST -5 "x!1") (("2" (HIDE 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 2) (("2" (GRIND) (("1" (REVEAL -2) (("1" (EXPAND "path_from?") (("1" (EXPAND "path?") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (INST -2 "length(p!1)-2" "length(p!1)-1") (("1" (ASSERT) NIL NIL) ("2" (REVEAL 2) (("2" (LEMMA "walk_from_l") (("2" (INST? -1) (("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("1" (INST -3 "x!1") (("1" (HIDE -4 -5 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (INST? -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 2) (("2" (LEMMA "walk_from_l") (("2" (INST? -1) (("2" (INST -1 "x!1" "phi!1(x!1)") (("2" (REVEAL -4) (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("1" (INST -4 "x!1") (("1" (ASSERT) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (INST? -3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_from_l") (("3" (INST? -1) (("3" (INST -1 "x!1" "phi!1(x!1)") (("3" (HIDE -2) (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (EXPAND "fixed?") (("3" (BDDSIMP) (("1" (INST? -7) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -1) (("4" (EXPAND "path_from?") (("4" (EXPAND "path?") (("4" (FLATTEN) (("4" (HIDE -2) (("4" (EXPAND "walk?") (("4" (FLATTEN) (("4" (HIDE -2) (("4" (EXPAND "verts_in?") (("4" (INST -1 "length(p!1)-1") (("4" (ASSERT) (("4" (EXPAND "finseq_appl") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("2" (INST -4 "x!1") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "phi!1") (("3" (HIDE -2 2 3) (("3" (ASSERT) (("3" (INST -1 "x!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|tree_has_walk| FORMULA-DECL NIL |graph_path_conn| NIL) (|premap| TYPE-EQ-DECL NIL |mappings| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|map| TYPE-EQ-DECL NIL |mappings| NIL) (|walk_to_path_from| FORMULA-DECL NIL |path_ops| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|Bush| CONST-DECL "Subgraph(Tr)" |mappings| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|fixed?| CONST-DECL "bool" |mappings| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk_from_l| FORMULA-DECL NIL |path_circ| NIL) (|Fox| CONST-DECL "bool" |mappings| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|x!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|Tr!1| SKOLEM-CONST-DECL "Tree[T]" |mappings| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|tree_nonempty| FORMULA-DECL NIL |trees| NIL)) NIL) (|fixed_fox-2| |nil| 3318761111 ("" (SKOSIMP*) (("" (TYPEPRED "Tr!1") (("" (LEMMA "tree_nonempty") (("" (INST? -1) (("" (BDDSIMP) (("" (EXPAND "empty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (LEMMA "graph_path_conn[T].tree_has_walk") (("" (INST? -1) (("" (INST -1 "phi!1(x!1)") (("" (BDDSIMP) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "G_from(Tr!1,p!1)" "_") (("1" (INST 1 "Bush(Tr!1,p!1(length(p!1)-1),dbl(p!1(length(p!1)-2),p!1(length(p!1)-1)))") (("1" (EXPAND "Fox") (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (INSTALL-REWRITES "walks") (("1" (HIDE -1 -2 -6) (("1" (HIDE -2 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -1 -2 RL) (("1" (ASSERT) NIL))))))))))))))))))) ("2" (LEMMA "walk_from_l") (("2" (HIDE -2) (("2" (INST -1 "p!1" "x!1" "phi!1(x!1)") (("2" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (EXPAND "fixed?") (("2" (SKOSIMP*) (("2" (ASSERT) (("2" (INST -2 "x!1") (("2" (ASSERT) NIL))))))))))) ("3" (HIDE -2 -3 -4 3) (("3" (INSTALL-REWRITES "paths") (("3" (ASSERT) (("3" (ASSERT) (("3" (BDDSIMP) NIL))))))))))))))))) ("3" (HIDE -1 -3 -5 2) (("3" (INSTALL-REWRITES "paths") (("3" (EXPAND "path_from?") (("3" (PROP) NIL))))))))))))))) ("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (HIDE -3 -5) (("1" (INSTALL-REWRITES "paths") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (INST -4 "length(p!1) - 2") (("1" (ASSERT -4) NIL) ("2" (LEMMA "walk_from_l") (("2" (INST -1 "p!1" "x!1" "phi!1(x!1)") (("2" (HIDE -2 -3 -4 -5) (("2" (INST -5 "x!1") (("2" (HIDE 4) (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 2) (("2" (GRIND) (("1" (REVEAL -2) (("1" (EXPAND "path_from?") (("1" (EXPAND "path?") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (INST -2 "length(p!1)-2" "length(p!1)-1") (("1" (ASSERT) NIL) ("2" (REVEAL 2) (("2" (LEMMA "walk_from_l") (("2" (INST? -1) (("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("1" (INST -3 "x!1") (("1" (HIDE -4 -5 1) (("1" (ASSERT) NIL))))) ("2" (INST? -2) NIL))))))))))))))))))))))) ("2" (REVEAL 2) (("2" (LEMMA "walk_from_l") (("2" (INST? -1) (("2" (INST -1 "x!1" "phi!1(x!1)") (("1" (REVEAL -4) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "fixed?") (("1" (BDDSIMP) (("1" (INST -4 "x!1") (("1" (ASSERT) NIL))) ("2" (INST? -3) NIL))))))))))) ("2" (TYPEPRED "p!1") (("2" (REVEAL -4) (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "path?") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST -1 "0") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))) ("3" (LEMMA "walk_from_l") (("3" (INST? -1) (("3" (INST -1 "x!1" "phi!1(x!1)") (("3" (HIDE -2) (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (EXPAND "fixed?") (("3" (BDDSIMP) (("1" (INST? -7) (("1" (ASSERT) NIL))) ("2" (INST? -6) NIL))))))))))))))))) ("4" (HIDE -1) (("4" (EXPAND "path_from?") (("4" (EXPAND "path?") (("4" (FLATTEN) (("4" (HIDE -2) (("4" (EXPAND "walk?") (("4" (FLATTEN) (("4" (HIDE -2) (("4" (EXPAND "verts_in?") (("4" (INST -1 "length(p!1)-1") (("4" (ASSERT) (("4" (EXPAND "finseq_appl") (("4" (PROPAX) NIL))))))))))))))))))))))))))) ("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (FLATTEN) NIL))))))))))))))))) ("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("2" (INST -4 "x!1") NIL))))) ("3" (TYPEPRED "phi!1") (("3" (HIDE -2 2 3) (("3" (ASSERT) NIL)))))))))))))))))))))))))))))) NIL) NIL NIL) (|fixed_fox-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (TYPEPRED "Tr!1") (("" (LEMMA "tree_nonempty") (("" (INST? -1) (("" (BDDSIMP) (("" (EXPAND "empty?") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (SKOSIMP*) (("" (LEMMA "graph_path_conn[T].tree_has_walk") (("" (INST? -1) (("" (INST -1 "phi!1(x!1)") (("" (BDDSIMP) (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "G_from(Tr!1,p!1)" "_") (("1" (INST 1 "Bush(Tr!1,p!1(length(p!1)-1),dbl(p!1(length(p!1)-2),p!1(length(p!1)-1)))") (("1" (EXPAND "Fox") (("1" (INST 1 "p!1") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (INSTALL-REWRITES "walks") (("1" (HIDE -1 -2 -6) (("1" (HIDE -2 2) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACE -1 -2 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_from_l") (("2" (HIDE -2) (("2" (INST -1 "p!1" "x!1" "phi!1(x!1)") (("2" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (EXPAND "fixed?") (("2" (SKOSIMP*) (("2" (INST! -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 3) (("3" (INSTALL-REWRITES "paths") (("3" (ASSERT) (("3" (ASSERT) (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -3 -5 2) (("3" (INSTALL-REWRITES "paths") (("3" (EXPAND "path_from?") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (HIDE -3 -5) (("1" (INSTALL-REWRITES "paths") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (INST -4 "length(p!1) - 2") (("1" (ASSERT -4) NIL NIL) ("2" (LEMMA "walk_from_l") (("2" (INST -1 "p!1" "x!1" "phi!1(x!1)") (("2" (HIDE -2 -3 -4 -5) (("2" (INST -5 "x!1") (("2" (HIDE 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT NIL -) (("2" (HIDE 2) (("2" (GRIND) (("1" (REVEAL -2) (("1" (EXPAND "path_from?") (("1" (EXPAND "path?") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (INST -2 "length(p!1)-2" "length(p!1)-1") (("1" (ASSERT) NIL NIL) ("2" (REVEAL 2) (("2" (LEMMA "walk_from_l") (("2" (INST? -1) (("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("1" (INST -3 "x!1") (("1" (HIDE -4 -5 1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST? -2) (("2" (HIDE -3 2 3 4) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (FLATTEN) (("2" (INST -3 "0") (("2" (REPLACE -1 -3) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL 2) (("2" (LEMMA "walk_from_l") (("2" (INST? -1) (("2" (INST -1 "x!1" "phi!1(x!1)") (("2" (REVEAL -4) (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("1" (INST -4 "x!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (INST? -3) (("2" (EXPAND "from?") (("2" (EXPAND "path?") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST -1 "0") (("2" (FLATTEN) (("2" (REPLACE -2 -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "p!1") (("3" (HIDE -4 -6) (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (HIDE -2) (("3" (EXPAND "from?") (("3" (EXPAND "path?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (EXPAND "fixed?") (("3" (FLATTEN) (("3" (INST -7 "x!1") (("3" (FLATTEN) (("3" (CASE "length(p!1)=1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "finseq_appl") (("4" (EXPAND "path_from?") (("4" (EXPAND "path?") (("4" (EXPAND "finseq_appl") (("4" (FLATTEN) (("4" (EXPAND "walk?") (("4" (FLATTEN) (("4" (EXPAND "verts_in?") (("4" (INST -2 "length(p!1)-1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (EXPAND "path?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "fixed?") (("2" (BDDSIMP) (("2" (INST -4 "x!1") NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "phi!1") (("3" (HIDE -2 2 3) (("3" (ASSERT) (("3" (INST -1 "x!1") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|small_fox| 0 (|small_fox-3| "" 3790105597 ("" (SKOSIMP*) (("" (EXPAND "Fox" -1) (("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (CASE "phi!1(w!1(1))=w!1(length(w!1)-1)") (("1" (LEMMA "stuck_hound") (("1" (EXPAND "finseq_appl") (("1" (INST -1 "w!1" "seq(w!1)(0)" "Tr!1" "phi!1") (("1" (EXPAND "path_from?") (("1" (REPLACE -5 -1) (("1" (BDDSIMP (-1 -3 -4)) (("1" (SKOSIMP*) (("1" (INST 1 "G_from(Tr!1,p!1)" "H!1") (("1" (BDDSIMP) (("1" (HIDE -6) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (BDDSIMP (-2 -3)) (("1" (INST -3 "Tr!1" "p!1") (("1" (BDDSIMP (-5 -3)) (("1" (EXPAND "lsth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (EXPAND "finseq_appl") (("2" (INST 2 "p!1") (("2" (TYPEPRED "p!1") (("2" (HIDE -7) (("2" (HIDE -7) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (COPY -5) (("2" (COPY -7) (("2" (REPLACE -2 -1 RL) (("2" (REPLACE -8 -10 RL) (("2" (CASE "length(p!1)=1") (("1" (REPLACE -1 -2 LR) (("1" (ASSERT -2) (("1" (HIDE 2) (("1" (EXPAND "fixed?") (("1" (SKOSIMP*) (("1" (INST -11 "seq(p!1)(0)") (("1" (ASSERT (-2 -11)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 -7) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p!1)>1") (("1" (CASE "phi!1(seq(p!1)(0))=seq(p!1)(length(p!1) - 1)") (("1" (REPLACE -12 -15 RL) (("1" (REVEAL -1) (("1" (REPLACE -1 -16 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT (-2 1)) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-3) -) (("2" (HIDE 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3) -) (("2" (HIDE 2) (("2" (EXPAND "path?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (-1 -2) -) (("3" (HIDE 2 3) (("3" (ASSERT) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (CASE "phi!1(w!1`seq(1)) = w!1`seq(length(w!1) - 2)") (("1" (CASE "length(w!1)=2") (("1" (LEMMA "back_hound") (("1" (INST -1 "w!1" "seq(w!1)(0)" "Tr!1" "phi!1") (("1" (EXPAND "path_from?") (("1" (EXPAND "finseq_appl") (("1" (BDDSIMP) (("1" (HIDE -6 -7 2 4) (("1" (ASSERT) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "whole_hound") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "w!1" "w!1`seq(0)" "Tr!1" "phi!1") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "p!1") (("1" (INST 3 "G_from(Tr!1,p!1)" "Bush(Tr!1, seq(w!1)(length(w!1) - 2), dbl(seq(w!1)(length(w!1) - 3), seq(w!1)(length(w!1) - 2)))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (HIDE -7) (("1" (INST -1 "Tr!1" "p!1") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (BDDSIMP (-1 -2 -5 -8)) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (EXPAND "finseq_appl") (("2" (INST 3 "p!1") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (CASE "length(p!1)=1") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -5 -6 RL) (("1" (REPLACE -1 -6 RL) (("1" (ASSERT -6) (("1" (HIDE -8 -13 3) (("1" (EXPAND "fixed?") (("1" (FLATTEN) (("1" (INST -12 "seq(p!1)(0)") (("1" (ASSERT (-6 -12)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p!1)>1") (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (REPLACE -3 -6) (("1" (REPLACE -6 4 RL) (("1" (REPLACE -8 4 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 4 LR) (("2" (ASSERT (-6 4)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 4 5 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "size_subgraph_path") (("3" (INST-CP -1 "Tr!1" "w!1") (("3" (INST -1 "Tr!1" "p!1") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP (-1 -2 -5 -8)) (("3" (REPLACE -11 4 LR) (("3" (REPLACE -4 4 LR) (("3" (REPLACE -2 4 LR) (("3" (EXPAND "lsth") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (CASE "length(p!1)=1") (("1" (HIDE -10 4) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -1 -6 LR) (("1" (ASSERT -6) (("1" (REPLACE -5 -6 RL) (("1" (EXPAND "fixed?") (("1" (SKOSIMP*) (("1" (INST -12 "seq(p!1)(0)") (("1" (ASSERT (-6 -12)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 -7 1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-7 1 2)) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-6 -7 1 2)) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT (-7 1 2)) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "path_from?") (("6" (EXPAND "path?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (REPLACE -4 1 LR) (("3" (HIDE -1 -4 -5 -6 3 4 5) (("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "path?_gen_seq2") (("2" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (NAME "qq" "walks[T].gen_seq2(Tr!1, phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (CASE "qq=gen_seq2(Tr!1, phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (REPLACE -1 -3 RL) (("1" (HIDE -1 -2) (("1" (EXPAND "path?" -2) (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -3 "0") (("1" (ASSERT (-3 -5)) (("1" (COPY 2) (("1" (REPLACE -6 1 RL) (("1" (TYPEPRED "phi!1") (("1" (LEMMA "edge?_comm") (("1" (INST -1 "Tr!1" "seq(w!1)(1)" "seq(w!1)(0)") (("1" (BDDSIMP (-1 -5)) (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "dbl[T](phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (BDDSIMP (-1 -4)) (("1" (INST-CP -1 "phi!1(seq(w!1)(1))") (("1" (INST -1 "phi!1(seq(w!1)(0))") (("1" (BDDSIMP -1) (("1" (BDDSIMP -2) (("1" (INST 4 "G_from(Tr!1,trunc1(w!1^(1,length(w!1)-1)) o rev(qq))" "Bush(Tr!1, phi!1(seq(w!1)(1)),dbl[T](phi!1(seq(w!1)(0)),phi!1(seq(w!1)(1))))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (HIDE 4) (("1" (BDDSIMP) (("1" (LEMMA " Bush_less") (("1" (INST -1 "Tr!1" "seq(w!1)(length(w!1)-1)" "phi!1(seq(w!1)(1))" "dbl[T](seq(w!1)(length(w!1) - 2), seq(w!1)(length(w!1) - 1))" "dbl[T](phi!1(seq(w!1)(0)), phi!1(seq(w!1)(1)))") (("1" (BDDSIMP) (("1" (HIDE -5 -6 -9 -10 -13 -14 4 5) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -9 -12 -13 5 6) (("2" (ASSERT) NIL NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (REPLACE -12 1 RL) (("3" (HIDE-ALL-BUT (-11 1)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "size_subgraph_path") (("2" (INST-CP -1 "Tr!1" "w!1") (("2" (REVEAL -4) (("2" (EXPAND "path?" -3) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "walk?") (("2" (BDDSIMP (-1 -3 -11 -12)) (("1" (INST -5 "Tr!1" "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (BDDSIMP -5) (("1" (REPLACE -1 4 LR) (("1" (REPLACE -16 -3 RL) (("1" (REPLACE -3 4 LR) (("1" (HIDE-ALL-BUT (-8 -14) -) (("1" (HIDE 1 2 3 5) (("1" (REVEAL -20) (("1" (INSTALL-REWRITES "path_circ[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "path?(Tr!1,w!1)") (("1" (LEMMA "path_from?_caret") (("1" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "seq(w!1)(0)" "seq(w!1)(length(w!1)-1)") (("1" (ASSERT (-1 -15)) (("1" (EXPAND "path_from?") (("1" (BDDSIMP (-1 -2)) (("1" (HIDE (-18 -19 5 6)) (("1" (LEMMA "add1_rev") (("1" (INST -1 "Tr!1" "w!1^(1,length(w!1)-1)" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP -1) (("1" (LEMMA "path?_add1") (("1" (INST -1 "Tr!1" "w!1 ^ (1, length(w!1) - 1)" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP (-1 -4 -10)) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (LEMMA "path_from?_caret") (("1" (INST -1 "Tr!1" "i!1+1" "length(w!1)-1" "w!1" "seq(w!1)(0)" "seq(w!1)(length(w!1)-1)") (("1" (ASSERT -1) (("1" (EXPAND "path_from?" -1 1) (("1" (EXPAND "from?" -1 1) (("1" (BDDSIMP (-1 -6)) (("1" (LEMMA "cycl_red_compos") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "two_walks") (("1" (INST -2 "Tr!1" "w!1^(1+i!1,length(w!1)-1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (INST -1 "Tr!1" "w!1^(1+i!1,length(w!1)-1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (LEMMA "tree_no_circuits") (("1" (INST -1 "Tr!1" "trunc1(w!1 ^ (1 + i!1, length(w!1) - 1)) o rev(qq)") (("1" (EXPAND "circuit?" -1) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1+i!1,length(w!1)-1)" "qq") (("1" (BDDSIMP 1) (("1" (HIDE 2) (("1" (HIDE -19 -20 -21) (("1" (HIDE -9 -11) (("1" (HIDE -1 -3) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "edge?" -11) (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (REVEAL -21) (("1" (HIDE-ALL-BUT (-1 -6 -7) -) (("1" (EXPAND "from?") (("1" (EXPAND "gen_seq2") (("1" (HIDE 1) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (REPLACE -1 1 LR) (("1" (BETA) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -5 -6 -7 -11 -12 -15 -16) -) (("2" (HIDE 1) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -9 -) (("3" (HIDE-ALL-BUT 2 +) (("3" (INSTALL-REWRITES "walks[T]") (("3" (EXPAND "path?") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT -2 -) (("4" (HIDE-ALL-BUT 2 +) (("4" (EXPAND "path?") (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT -11 -) (("5" (HIDE 1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (HIDE -6 1 3) (("2" (BDDSIMP) (("1" (REVEAL -18) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1) (("1" (EXPAND "gen_seq2") (("1" (HIDE -2 -3 -8 -14 -16 -17) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (TYPEPRED "i!1") (("1" (EXPAND "^") (("1" (HIDE-ALL-BUT (-1 -2) -) (("1" (AUTO-REWRITE-DEFS :ALWAYS? T) (("1" (ASSERT) (("1" (REVEAL -3 -13) (("1" (REPLACE -2 -4 LR) (("1" (REVEAL -11) (("1" (INST -1 "2+i!1" "length(w!1)-1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "^" -1) (("2" (EXPAND* "min" "empty_seq") (("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (EXPAND "min" -1) (("2" (ASSERT (-1 -2)) (("2" (REVEAL -18) (("2" (REPLACE -1 -3 LR) (("2" (EXPAND "gen_seq2" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -18) (("3" (EXPAND "path_from?" 1) (("3" (REPLACE -1 1 LR) (("3" (HIDE-ALL-BUT (-2 -19) -) (("3" (EXPAND "gen_seq2") (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" -5) (("4" (REPLACE -5 -2 LR) (("4" (REPLACE -19 -2 RL) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3) (("2" (BDDSIMP) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1+i!1,length(w!1)-1)" "qq") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-3 -21) -) (("1" (HIDE 2) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -18) (("2" (HIDE-ALL-BUT (-1 -19) -) (("2" (REPLACE -1 1 LR) (("2" (REVEAL -15) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (REVEAL -13) (("2" (PROP) (("2" (INSTALL-REWRITES "walks[T]") (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -4 1 RL) (("3" (REPLACE -19 1 LR) (("3" (HIDE-ALL-BUT (-3 -12 -18) -) (("3" (HIDE 2 3) (("3" (EXPAND "^") (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (TYPEPRED "i!1") (("3" (EXPAND "^" -1) (("3" (GRIND) (("1" (REVEAL -15) (("1" (INST -1 "1+i!1+n!1" "2+i!1+n!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -33) (("2" (INST -1 "1+i!1+n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REVEAL -1) (("3" (INST -1 "1+i!1+i!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (EXPAND* "min" "empty_seq") (("4" (TYPEPRED "i!1") (("4" (EXPAND "^" -1) (("4" (ASSERT) (("4" (CASE "i!1=length(w!1)-2") (("1" (REPLACE -1 -6 LR) (("1" (EXPAND "^" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -17) (("2" (HIDE-ALL-BUT (-1 -19) -) (("2" (HIDE 2) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-9 -21) -) (("3" (HIDE 2) (("3" (EXPAND "^") (("3" (TYPEPRED "i!1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (CASE "i!1=length(w!1)-2") (("1" (REVEAL -7) (("1" (REPLACE -2 -1 LR) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -18) -) (("2" (REVEAL -26) (("2" (REVEAL -15) (("2" (CASE-REPLACE "seq(w!1 ^ (1, length(w!1) - 1))(length(w!1 ^ (1, length(w!1) - 1)) - 1)=seq(w!1)(length(w!1) - 1)") (("1" (REPLACE -5 -4 LR) (("1" (REPLACE -2 -4 RL) (("1" (REPLACE -3 -4 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 2) (("3" (EXPAND "^") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (-2 -9 -10 -13 -18) -) (("3" (HIDE 2) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -9 -10 -13 -18) -) (("3" (HIDE 2) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (REVEAL -10) (("2" (EXPAND "edge?") (("2" (COPY -1) (("2" (INST -2 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -7 -8 -9 -16 -17) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -2 -3 -7 -8 -9 -16 -17) -) (("3" (HIDE 2) (("3" (ASSERT) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND* "^" "min") (("3" (EXPAND "from?") (("3" (EXPAND "edge?") (("3" (LEMMA "path_from_l") (("3" (EXPAND "path_from?") (("3" (INST -1 "Tr!1" "(# length := length(w!1) - 1, 
      seq := LAMBDA (x: below[min(length(w!1) - 1, w!1`length - 1)]): seq(w!1)(1 + x) #)" "seq(w!1)(1)" "seq(w!1)(length(w!1)-1)") (("1" (BDDSIMP) (("1" (HIDE -1 -3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2) (("2" (REVEAL -21 1) (("2" (CASE "length(w!1)=2") (("1" (REPLACE -1 1 LR) (("1" (REPLACE -2 1 LR) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "trunc1") (("1" (EXPAND "path?") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (GRIND) (("1" (NAME "phx" "phi!1(seq(w!1)(1))") (("1" (REPLACE -1 1 LR) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1 -2 -4 2) (("1" (HIDE -6) (("1" (HIDE -2) (("1" (REVEAL -15) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (TYPEPRED "x!1") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 -11 -13 -14 -15 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (INST -2 "i!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -14) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (HIDE -3 -9 -11 -12 -15 -16 -17 2 6 7) (("2" (INSTALL-REWRITES "paths[T]") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("2" (HIDE -5) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (INST 4 "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (EXPAND "finseq_appl") (("1" (REVEAL -5) (("1" (HIDE -5 -7 -8 -9 -11 -14 -15 5) (("1" (INSTALL-REWRITES "walks[T]") (("1" (BDDSIMP) (("1" (CASE "length(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))=length(w!1)") (("1" (REPLACE -1 4 LR) (("1" (CASE " seq(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))(length(w!1) - 1)=phi!1(seq(w!1)(1))") (("1" (REPLACE -1 4 LR) (("1" (CASE " seq(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))(length(w!1) - 2)=phi!1(seq(w!1)(0))") (("1" (REPLACE -1 4 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 5) (("2" (REPLACE -1 1 LR) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REPLACE -2 1 LR) (("2" (HIDE -2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 4 LR) (("2" (HIDE -1 -4) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -1 4 LR) (("3" (HIDE -1 -4) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "path?_gen_seq2") (("4" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("4" (BDDSIMP (-1 -3 -4 -5)) (("1" (REVEAL -5 -6 -13) (("1" (CASE "path?(Tr!1,w!1)") (("1" (LEMMA "path?_caret") (("1" (INST -1 "Tr!1" "1" "length(w!1) - 1" "w!1") (("1" (STOP-REWRITE) (("1" (ASSERT (-1 -2 -11)) (("1" (LEMMA "add1_rev") (("1" (INST -1 "Tr!1" "w!1^(1,length(w!1)-1)" " phi!1(seq(w!1)(1))") (("1" (BDDSIMP) (("1" (CASE "phi!1(seq(w!1)(0))=seq(w!1 ^ (1, length(w!1) - 1))(length(w!1 ^ (1, length(w!1) - 1)) - 1)") (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -12 -2 RL) (("1" (COPY 4) (("1" (REPLACE -2 1 RL) (("1" (LEMMA "path?_add1") (("1" (HIDE -2 -3) (("1" (INST -1 "Tr!1" "w!1 ^ (1, length(w!1) - 1)" "phi!1(seq(w!1)(1))") (("1" (REVEAL -2) (("1" (REPLACE -1 -2 RL) (("1" (BDDSIMP (-2 -3 -8 -10)) (("1" (HIDE -8 -9) (("1" (HIDE -11 -12) (("1" (EXPAND "verts_of") (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "^" -3) (("1" (REVEAL -7) (("1" (INST -1 "Tr!1" "1+i!1" "length(w!1)-1" "w!1") (("1" (TYPEPRED "i!1") (("1" (EXPAND "^" -1) (("1" (EXPAND "min") (("1" (ASSERT (-1 -2 -8)) (("1" (LEMMA "tree_one_path") (("1" (INST -1 "Tr!1" "w!1 ^ (1 + i!1, length(w!1) - 1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (REVEAL -9) (("1" (HIDE -5 -9) (("1" (INSTALL-REWRITES "walks[T]") (("1" (STOP-REWRITE) (("1" (ASSERT (-)) (("1" (BDDSIMP) (("1" (HIDE-ALL-BUT (-2 -3 -12 -13 -14) -) (("1" (HIDE 1 5) (("1" (REPLACE -3 -1 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (EXPAND "from?") (("2" (REPLACE -11 1 LR) (("2" (ASSERT) (("2" (HIDE -1 -3 -6 -7 -8 -10 -11 2 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (EXPAND "from?") (("3" (HIDE -1 -3 -6 -7 -8 -10 -11 2 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "edge?_comm") (("3" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (HIDE -2 -5 -6 -7 -8 -9 -11 -12) (("3" (HIDE 2 6) (("3" (EXPAND "path?") (("3" (BDDSIMP) (("3" (EXPAND "finseq_appl") (("3" (EXPAND "gen_seq2") (("3" (EXPAND "walk?") (("3" (EXPAND "finseq_appl") (("3" (BDDSIMP) (("3" (HIDE -2) (("3" (INST -2 "0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND "min" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 5 LR) (("1" (EXPAND "^" 5) (("1" (EXPAND "min" 5) (("1" (EXPAND "trunc1" 5) (("1" (EXPAND "^" 5) (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (REVEAL -7) (("1" (BDDSIMP (-1 -2)) (("1" (HIDE-ALL-BUT (-2 -3) -) (("1" (INSTALL-REWRITES "paths[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (EXPAND "min" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (HIDE-ALL-BUT (-9 -13) -) (("2" (HIDE 5) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -11) (("2" (HIDE-ALL-BUT (-1 -2 -8 -12) -) (("2" (ASSERT) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -6)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (HIDE-ALL-BUT (-1 -2 -3 -12) -) (("2" (HIDE 5) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND "min" 1) (("3" (HIDE -13 -14) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (REVEAL 1) (("1" (INST 1 "rev(qq)") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP (-1 -10)) (("1" (BDDSIMP) (("1" (HIDE -6 -7 -8 -9 -10 -11 -12 -13 6) (("1" (HIDE -1 -2) (("1" (REVEAL -18) (("1" (REPLACE -1 1 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "^" "min") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (HIDE-ALL-BUT (-3 -14) -) (("2" (HIDE 6) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -8) (("3" (REPLACE -1 1 LR) (("3" (HIDE -2 -3 -8 -10 -11 -13 -14 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REVEAL -8) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -2 -3 -7 -8 -9 -10 -11 -12 -13 -14 2 6) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 -7 -8 -9 -10 -11 -12 2 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("3" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("4" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (EXPAND "incident_edges") (("1" (LEMMA "edge?_comm") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP (-1 -6)) (("1" (INSTALL-REWRITES "walks[T]") (("1" (HIDE -5 -6 -7 -8 -9 -11 -14 -15 5) (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incident_edges") (("2" (BDDSIMP) (("1" (HIDE-ALL-BUT (-1 -2 -10 -11) -) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (REPLACE -12 4 RL) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (BDDSIMP) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "seq(w!1)(1)" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1,length(w!1)-1)" "qq") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "trunc1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (REVEAL -6) (("2" (HIDE -4 -5 -7 -8 -10 -12 -15 -16 2 6) (("2" (EXPAND "walk_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -1 1 LR) (("2" (BDDSIMP) (("1" (HIDE -1) (("1" (EXPAND "gen_seq2") (("1" (ASSERT) (("1" (GRIND) (("1" (REPLACE -10 1 RL) (("1" (REVEAL -6) (("1" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -9 1 RL) (("2" (REVEAL -6) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -15) (("3" (HIDE -1 2) (("3" (REPLACE -8 3 RL) (("3" (REVEAL 1) (("3" (REPLACE -8 1 RL) (("3" (REVEAL -6) (("3" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("3" (EXPAND "edge?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "walk_from?") (("3" (BDDSIMP) (("1" (REVEAL -5) (("1" (HIDE -4 -5 -7 -8 -9 -13 -14 -15 2 6) (("1" (EXPAND "walk?") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (EXPAND "^") (("1" (INST -1 "1+n!1") (("1" (ASSERT (-1 -2)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (REVEAL -2) (("2" (ASSERT) (("2" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 2 6) (("2" (ASSERT) (("2" (EXPAND* "^" "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 2 6) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (EXPAND "min" 1) (("4" (CASE "length(w!1)=2") (("1" (REPLACE -1 2 LR) (("1" (ASSERT 2) (("1" (EXPAND* "^" "min") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP (-1 -10)) (("1" (HIDE-ALL-BUT (-2 -14) -1) (("1" (HIDE-ALL-BUT (-1 -2) -) (("1" (HIDE 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-11 1 2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -5 -7 -8 -13 -14 3 6) (("2" (EXPAND "gen_seq2") (("2" (EXPAND "rev") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min") (("2" (EXPAND "o") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (GRIND) (("1" (REPLACE -9 1 RL) (("1" (REVEAL -5) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (INST -1 "1+n!1" "2+n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "n!1=length(w!1)-3") (("1" (REPLACE -1 -5 LR) (("1" (ASSERT) (("1" (REVEAL -1) (("1" (INST -1 "length(w!1)-2" "length(w!1)-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (REVEAL -11) (("4" (INST -1 "1+n!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (CASE "n!1=length(w!1)-3") (("1" (REPLACE -1 3 LR) (("1" (ASSERT) (("1" (REVEAL -11) (("1" (INST -1 "length(w!1)-2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("6" (REPLACE -8 3 RL) (("6" (REVEAL -5) (("6" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("6" (EXPAND "edge?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (REVEAL -2) (("7" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 5) (("3" (REVEAL -13) (("3" (REPLACE -1 1 LR) (("3" (EXPAND "rev") (("3" (EXPAND "o") (("3" (EXPAND* "^" "min") (("3" (EXPAND "trunc1") (("3" (EXPAND* "^" "min") (("3" (EXPAND "gen_seq2") (("3" (HIDE -1) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -3 -4 -6 -7 -8 -10 -12 -13 6) (("4" (REVEAL -13) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -5) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (EXPAND "min" 1) (("4" (CASE "length(w!1)=2") (("1" (REVEAL 1) (("1" (INST 1 "G_from(Tr!1,rev(qq))" "Bush(Tr!1, phi!1(seq(w!1)(1)),dbl[T](phi!1(seq(w!1)(0)),phi!1(seq(w!1)(1))))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "Bush_less") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))" "dbl[T](seq(w!1)(length(w!1) - 2), seq(w!1)(length(w!1) - 1))" "dbl[T](phi!1(seq(w!1)(0)), phi!1(seq(w!1)(1)))") (("1" (BDDSIMP) (("1" (INSTALL-REWRITES "doubletons[T]") (("1" (HIDE -6 -7 -8 -9 -10 -11 -12 -15 -16 1 2 7) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (INSTALL-REWRITES "doubletons[T]") (("3" (ASSERT 1) NIL NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "graphs[T]") (("2" (ASSERT 1) (("2" (ASSERT (-4 1)) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (INST -9 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (BDDSIMP) (("2" (REVEAL -7) (("2" (INST -1 "length(w!1)-2") (("2" (EXPAND "edge?") (("2" (HIDE -7 -8 -11 -14 -17 -19 -20 2 3 8) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "size_subgraph_path") (("2" (INST-CP -1 "Tr!1" "w!1") (("2" (INST -1 "Tr!1" "rev(qq)") (("2" (LEMMA "path?_rev") (("2" (INST -1 "Tr!1" "qq") (("2" (BDDSIMP -1 -8) (("1" (BDDSIMP (-1 -2)) (("1" (CASE "path?(Tr!1,w!1)") (("1" (BDDSIMP (-1 -4)) (("1" (CASE "length(rev(qq))=2") (("1" (REPLACE -6 -3 LR) (("1" (REPLACE -1 -5 LR) (("1" (REPLACE -19 -3 RL) (("1" (ASSERT (-3 -5 2)) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -7) (("2" (REPLACE -1 1 LR) (("2" (HIDE-ALL-BUT -17 -) (("2" (HIDE 8) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-13 -14 -15) -) (("2" (REVEAL -21) (("2" (HIDE 8) (("2" (INSTALL-REWRITES "paths[T]") (("2" (HIDE 2 3) (("2" (ASSERT) (("2" (BDDSIMP) (("2" (REVEAL -7) (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "lsth") (("2" (PROP) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (BDDSIMP (-2 -3)) (("1" (INST -3 "Tr!1" "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (CASE "path?(Tr!1, qq)") (("1" (BDDSIMP (-1 -2)) (("1" (BDDSIMP (-2 -5)) (("1" (REPLACE -2 + LR) (("1" (REPLACE -17 + LR) (("1" (REPLACE -4 + LR) (("1" (REPLACE -5 (1 2) LR) (("1" (REVEAL -7) (("1" (HIDE-ALL-BUT (-1 -6) -) (("1" (HIDE 4 5 6 7 8) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -5 -6 -15) -) (("2" (HIDE 2 3 9) (("2" (REVEAL -20) (("2" (INSTALL-REWRITES "paths[T]") (("2" (REPLACE -1 1 LR) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GRIND) (("2" (REPLACE -6 3 RL) (("2" (REVEAL -6 -8) (("2" (INST -2 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -2)) (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -7 -10 -13) -) (("2" (HIDE 2 3 9) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (GRIND) (("1" (CASE "i!1=1") (("1" (CASE "j!1=0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "i!1=0") (("1" (CASE "j!1=1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) (("2" (REVEAL -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -5 -7 -13 -14 1 2 8) (("2" (INST -6 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-5 -6)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "Fox") (("3" (EXPAND "finseq_appl") (("3" (INST 1 "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP -1 -10) (("1" (BDDSIMP) (("1" (REVEAL -6) (("1" (REPLACE -1 1 LR) (("1" (HIDE -2 -7 -9 -10 -11 -13 -16 -17 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -14 1 2 3 4 5)) (("2" (REVEAL -18) (("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -6) (("3" (REPLACE -1 1 LR) (("3" (HIDE -1 -2 -7 -9 -10 -11 -14 -16 -17 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-9) -) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -8 "seq(w!1)(1)" "seq(w!1)(0)") (("4" (BDDSIMP (-6 -8)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (HIDE -5 -7 -8 -9 -13 -14 -15 6) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (REVEAL -3) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incident_edges") (("2" (HIDE -4 -7 -10 -13 -14 7) (("2" (HIDE -4) (("2" (INSTALL-REWRITES "graphs[T]") (("2" (ASSERT) (("2" (INST -5 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (BDDSIMP) (("1" (REPLACE -5 4 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (HIDE -4 -5 -7 -8 -9 -14 -15 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("4" (HIDE -5 -7 -8 -10 -13 -14 7) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -5) (("3" (REVEAL -5) (("3" (SPLIT) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1 -2 -7 -9 -10 -11 -13 -16 -17 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -2 -7 -9 -10 -11 -13 -16 -17 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) (("2" (REVEAL -4) (("2" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "doubletons[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "doubletons[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (INSTALL-REWRITES "doubletons[T]") (("2" (HIDE-ALL-BUT (-9) -) (("2" (HIDE 5 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -5 -6 4 5) (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (BDDSIMP) (("2" (INST -1 "length(w!1)-1") (("2" (REPLACE -5 -1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "phi!1") (("3" (INST -1 "seq(w!1)(1)") (("3" (TYPEPRED "w!1") (("3" (HIDE -3 -4 -8 -9 4 5) (("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) (("3" (BDDSIMP) (("3" (INST -2 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|Fox| CONST-DECL "bool" |mappings| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|path?_gen_seq2| FORMULA-DECL NIL |paths| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|edge?_comm| FORMULA-DECL NIL |graphs| NIL) (|phi!1| SKOLEM-CONST-DECL "map(Tr!1, Tr!1)" |mappings| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|qq| SKOLEM-CONST-DECL "Seq[T](Tr!1)" |mappings| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|path?_caret| FORMULA-DECL NIL |paths| NIL) (|tree_one_path| FORMULA-DECL NIL |tree_paths| NIL) (|path?_rev| FORMULA-DECL NIL |paths| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|path_from?_caret| FORMULA-DECL NIL |paths| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|add1_rev| FORMULA-DECL NIL |path_circ| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|tree_no_circuits| FORMULA-DECL NIL |tree_circ| NIL) (<= CONST-DECL "bool" |reals| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|circuit?| CONST-DECL "bool" |circuits| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|walk_concat| FORMULA-DECL NIL |walks| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(w!1 ^ (1, length(w!1) - 1)))" |mappings| NIL) (|two_walks| FORMULA-DECL NIL |path_circ| NIL) (|cycl_red_compos| FORMULA-DECL NIL |path_circ| NIL) (|path?_add1| FORMULA-DECL NIL |paths| NIL) (|path_from_l| FORMULA-DECL NIL |paths| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nzint_min| APPLICATION-JUDGEMENT "{k: nzint | k <= i AND k <= j}" |real_defs| NIL) (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|Bush_less| FORMULA-DECL NIL |mappings| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (|walk?_rev| FORMULA-DECL NIL |walks| NIL) (|dbl_comm| FORMULA-DECL NIL |doubletons| |structures|) (|back_hound| FORMULA-DECL NIL |mappings| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|Bush| CONST-DECL "Subgraph(Tr)" |mappings| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|w!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|whole_hound| FORMULA-DECL NIL |mappings| NIL) (|stuck_hound| FORMULA-DECL NIL |mappings| NIL) (|size_subgraph_path| FORMULA-DECL NIL |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|lsth| CONST-DECL "bool" |graph_pair| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|fixed?| CONST-DECL "bool" |mappings| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|Tr!1| SKOLEM-CONST-DECL "Tree[T]" |mappings| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|map| TYPE-EQ-DECL NIL |mappings| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|premap| TYPE-EQ-DECL NIL |mappings| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|small_fox-2| "Works3.2" 3318096529 ("" (SKOSIMP*) (("" (EXPAND "Fox" -1) (("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (CASE "phi!1(w!1(1))=w!1(length(w!1)-1)") (("1" (LEMMA "stuck_hound") (("1" (EXPAND "finseq_appl") (("1" (INST -1 "w!1" "seq(w!1)(0)" "Tr!1" "phi!1") (("1" (EXPAND "path_from?") (("1" (REPLACE -5 -1) (("1" (BDDSIMP (-1 -3 -4)) (("1" (SKOSIMP*) (("1" (INST 1 "G_from(Tr!1,p!1)" "H!1") (("1" (BDDSIMP) (("1" (HIDE -6) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (BDDSIMP (-2 -3)) (("1" (INST -3 "Tr!1" "p!1") (("1" (BDDSIMP (-5 -3)) (("1" (EXPAND "lsth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (EXPAND "finseq_appl") (("2" (INST 2 "p!1") (("2" (TYPEPRED "p!1") (("2" (HIDE -7) (("2" (HIDE -7) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (COPY -5) (("2" (COPY -7) (("2" (REPLACE -2 -1 RL) (("2" (REPLACE -8 -10 RL) (("2" (CASE "length(p!1)=1") (("1" (REPLACE -1 -2 LR) (("1" (ASSERT -2) (("1" (HIDE 2) (("1" (EXPAND "fixed?") (("1" (SKOSIMP*) (("1" (INST -11 "seq(p!1)(0)") (("1" (ASSERT (-2 -11)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 -7) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p!1)>1") (("1" (CASE "phi!1(seq(p!1)(0))=seq(p!1)(length(p!1) - 1)") (("1" (REPLACE -12 -15 RL) (("1" (REVEAL -1) (("1" (REPLACE -1 -16 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT (-2 1)) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-3) -) (("2" (HIDE 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3) -) (("2" (HIDE 2) (("2" (EXPAND "path?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (-1 -2) -) (("3" (HIDE 2 3) (("3" (ASSERT) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (CASE "phi!1(w!1`seq(1)) = w!1`seq(length(w!1) - 2)") (("1" (CASE "length(w!1)=2") (("1" (LEMMA "back_hound") (("1" (INST -1 "w!1" "seq(w!1)(0)" "Tr!1" "phi!1") (("1" (EXPAND "path_from?") (("1" (EXPAND "finseq_appl") (("1" (BDDSIMP) (("1" (HIDE -6 -7 2 4) (("1" (ASSERT) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "whole_hound") (("2" (EXPAND "finseq_appl") (("2" (INST -1 "w!1" "w!1`seq(0)" "Tr!1" "phi!1") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "p!1") (("1" (INST 3 "G_from(Tr!1,p!1)" "Bush(Tr!1, seq(w!1)(length(w!1) - 2), dbl(seq(w!1)(length(w!1) - 3), seq(w!1)(length(w!1) - 2)))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (HIDE -7) (("1" (INST -1 "Tr!1" "p!1") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (BDDSIMP (-1 -2 -5 -8)) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (EXPAND "finseq_appl") (("2" (INST 3 "p!1") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (CASE "length(p!1)=1") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -5 -6 RL) (("1" (REPLACE -1 -6 RL) (("1" (ASSERT -6) (("1" (HIDE -8 -13 3) (("1" (EXPAND "fixed?") (("1" (FLATTEN) (("1" (INST -12 "seq(p!1)(0)") (("1" (ASSERT (-6 -12)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p!1)>1") (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (REPLACE -3 -6) (("1" (REPLACE -6 4 RL) (("1" (REPLACE -8 4 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 4 LR) (("2" (ASSERT (-6 4)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 4 5 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "size_subgraph_path") (("3" (INST-CP -1 "Tr!1" "w!1") (("3" (INST -1 "Tr!1" "p!1") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP (-1 -2 -5 -8)) (("3" (REPLACE -11 4 LR) (("3" (REPLACE -4 4 LR) (("3" (REPLACE -2 4 LR) (("3" (EXPAND "lsth") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (CASE "length(p!1)=1") (("1" (HIDE -10 4) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -1 -6 LR) (("1" (ASSERT -6) (("1" (REPLACE -5 -6 RL) (("1" (EXPAND "fixed?") (("1" (SKOSIMP*) (("1" (INST -12 "seq(p!1)(0)") (("1" (ASSERT (-6 -12)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 -7 1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-7 1 2)) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-6 -7 1 2)) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT (-7 1 2)) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "path_from?") (("6" (EXPAND "path?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (REPLACE -4 1 LR) (("3" (HIDE -1 -4 -5 -6 3 4 5) (("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "path?_gen_seq2") (("2" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (NAME "qq" "walks[T].gen_seq2(Tr!1, phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (CASE "qq=gen_seq2(Tr!1, phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (REPLACE -1 -3 RL) (("1" (HIDE -1 -2) (("1" (EXPAND "path?" -2) (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -3 "0") (("1" (ASSERT (-3 -5)) (("1" (COPY 2) (("1" (REPLACE -6 1 RL) (("1" (TYPEPRED "phi!1") (("1" (LEMMA "edge?_comm") (("1" (INST -1 "Tr!1" "seq(w!1)(1)" "seq(w!1)(0)") (("1" (BDDSIMP (-1 -5)) (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "dbl[T](phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (BDDSIMP (-1 -4)) (("1" (INST-CP -1 "phi!1(seq(w!1)(1))") (("1" (INST -1 "phi!1(seq(w!1)(0))") (("1" (BDDSIMP -1) (("1" (BDDSIMP -2) (("1" (INST 4 "G_from(Tr!1,trunc1(w!1^(1,length(w!1)-1)) o rev(qq))" "Bush(Tr!1, phi!1(seq(w!1)(1)),dbl[T](phi!1(seq(w!1)(0)),phi!1(seq(w!1)(1))))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (HIDE 4) (("1" (BDDSIMP) (("1" (LEMMA " Bush_less") (("1" (INST -1 "Tr!1" "seq(w!1)(length(w!1)-1)" "phi!1(seq(w!1)(1))" "dbl[T](seq(w!1)(length(w!1) - 2), seq(w!1)(length(w!1) - 1))" "dbl[T](phi!1(seq(w!1)(0)), phi!1(seq(w!1)(1)))") (("1" (BDDSIMP) (("1" (HIDE -5 -6 -9 -10 -13 -14 4 5) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -9 -12 -13 5 6) (("2" (ASSERT) NIL NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (REPLACE -12 1 RL) (("3" (HIDE-ALL-BUT (-11 1)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "size_subgraph_path") (("2" (INST-CP -1 "Tr!1" "w!1") (("2" (REVEAL -4) (("2" (EXPAND "path?" -3) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "walk?") (("2" (BDDSIMP (-1 -3 -11 -12)) (("1" (INST -5 "Tr!1" "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (BDDSIMP -5) (("1" (REPLACE -1 4 LR) (("1" (REPLACE -16 -3 RL) (("1" (REPLACE -3 4 LR) (("1" (HIDE-ALL-BUT (-8 -14) -) (("1" (HIDE 1 2 3 5) (("1" (REVEAL -20) (("1" (INSTALL-REWRITES "path_circ[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "path?(Tr!1,w!1)") (("1" (LEMMA "path_from?_caret") (("1" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "seq(w!1)(0)" "seq(w!1)(length(w!1)-1)") (("1" (ASSERT (-1 -15)) (("1" (EXPAND "path_from?") (("1" (BDDSIMP (-1 -2)) (("1" (HIDE (-18 -19 5 6)) (("1" (LEMMA "add1_rev") (("1" (INST -1 "Tr!1" "w!1^(1,length(w!1)-1)" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP -1) (("1" (LEMMA "path?_add1") (("1" (INST -1 "Tr!1" "w!1 ^ (1, length(w!1) - 1)" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP (-1 -4 -10)) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (LEMMA "path_from?_caret") (("1" (INST -1 "Tr!1" "i!1+1" "length(w!1)-1" "w!1" "seq(w!1)(0)" "seq(w!1)(length(w!1)-1)") (("1" (ASSERT -1) (("1" (EXPAND "path_from?" -1 1) (("1" (EXPAND "from?" -1 1) (("1" (BDDSIMP (-1 -6)) (("1" (LEMMA "cycl_red_compos") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "two_walks") (("1" (INST -2 "Tr!1" "w!1^(1+i!1,length(w!1)-1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (INST -1 "Tr!1" "w!1^(1+i!1,length(w!1)-1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (LEMMA "tree_no_circuits") (("1" (INST -1 "Tr!1" "trunc1(w!1 ^ (1 + i!1, length(w!1) - 1)) o rev(qq)") (("1" (EXPAND "circuit?" -1) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1+i!1,length(w!1)-1)" "qq") (("1" (BDDSIMP 1) (("1" (HIDE 2) (("1" (HIDE -19 -20 -21) (("1" (HIDE -9 -11) (("1" (HIDE -1 -3) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "edge?" -11) (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (REVEAL -21) (("1" (HIDE-ALL-BUT (-1 -6 -7) -) (("1" (EXPAND "from?") (("1" (EXPAND "gen_seq2") (("1" (HIDE 1) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (REPLACE -1 1 LR) (("1" (BETA) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -5 -6 -7 -11 -12 -15 -16) -) (("2" (HIDE 1) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -9 -) (("3" (HIDE-ALL-BUT 2 +) (("3" (INSTALL-REWRITES "walks[T]") (("3" (EXPAND "path?") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT -2 -) (("4" (HIDE-ALL-BUT 2 +) (("4" (EXPAND "path?") (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT -11 -) (("5" (HIDE 1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (HIDE -6 1 3) (("2" (BDDSIMP) (("1" (REVEAL -18) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1) (("1" (EXPAND "gen_seq2") (("1" (HIDE -2 -3 -8 -14 -16 -17) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (TYPEPRED "i!1") (("1" (EXPAND "^") (("1" (HIDE-ALL-BUT (-1 -2) -) (("1" (AUTO-REWRITE-DEFS :ALWAYS? T) (("1" (ASSERT) (("1" (REVEAL -3 -13) (("1" (REPLACE -2 -4 LR) (("1" (REVEAL -11) (("1" (INST -1 "2+i!1" "length(w!1)-1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "^" -1) (("2" (EXPAND* "min" "empty_seq") (("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (EXPAND "min" -1) (("2" (ASSERT (-1 -2)) (("2" (REVEAL -18) (("2" (REPLACE -1 -3 LR) (("2" (EXPAND "gen_seq2" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -18) (("3" (EXPAND "path_from?" 1) (("3" (REPLACE -1 1 LR) (("3" (HIDE-ALL-BUT (-2 -19) -) (("3" (EXPAND "gen_seq2") (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" -5) (("4" (REPLACE -5 -2 LR) (("4" (REPLACE -19 -2 RL) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3) (("2" (BDDSIMP) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1+i!1,length(w!1)-1)" "qq") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-3 -21) -) (("1" (HIDE 2) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -18) (("2" (HIDE-ALL-BUT (-1 -19) -) (("2" (REPLACE -1 1 LR) (("2" (REVEAL -15) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (REVEAL -13) (("2" (PROP) (("2" (INSTALL-REWRITES "walks[T]") (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -4 1 RL) (("3" (REPLACE -19 1 LR) (("3" (HIDE-ALL-BUT (-3 -12 -18) -) (("3" (HIDE 2 3) (("3" (EXPAND "^") (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (TYPEPRED "i!1") (("3" (EXPAND "^" -1) (("3" (GRIND) (("1" (REVEAL -15) (("1" (INST -1 "1+i!1+n!1" "2+i!1+n!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -33) (("2" (INST -1 "1+i!1+n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REVEAL -1) (("3" (INST -1 "1+i!1+i!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (EXPAND* "min" "empty_seq") (("4" (TYPEPRED "i!1") (("4" (EXPAND "^" -1) (("4" (ASSERT) (("4" (CASE "i!1=length(w!1)-2") (("1" (REPLACE -1 -6 LR) (("1" (EXPAND "^" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -17) (("2" (HIDE-ALL-BUT (-1 -19) -) (("2" (HIDE 2) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-9 -21) -) (("3" (HIDE 2) (("3" (EXPAND "^") (("3" (TYPEPRED "i!1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (CASE "i!1=length(w!1)-2") (("1" (REVEAL -7) (("1" (REPLACE -2 -1 LR) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -18) -) (("2" (REVEAL -26) (("2" (REVEAL -15) (("2" (CASE-REPLACE "seq(w!1 ^ (1, length(w!1) - 1))(length(w!1 ^ (1, length(w!1) - 1)) - 1)=seq(w!1)(length(w!1) - 1)") (("1" (REPLACE -5 -4 LR) (("1" (REPLACE -2 -4 RL) (("1" (REPLACE -3 -4 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 2) (("3" (EXPAND "^") (("3" (ASSERT) (("3" (HIDE-ALL-BUT (-2 -9 -10 -13 -18) -) (("3" (HIDE 2) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -9 -10 -13 -18) -) (("3" (HIDE 2) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (REVEAL -10) (("2" (EXPAND "edge?") (("2" (COPY -1) (("2" (INST -2 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -7 -8 -9 -16 -17) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -2 -3 -7 -8 -9 -16 -17) -) (("3" (HIDE 2) (("3" (ASSERT) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND* "^" "min") (("3" (EXPAND "from?") (("3" (EXPAND "edge?") (("3" (LEMMA "path_from_l") (("3" (EXPAND "path_from?") (("3" (INST -1 "Tr!1" "(# length := length(w!1) - 1, 
      seq := LAMBDA (x: below[min(length(w!1) - 1, w!1`length - 1)]): seq(w!1)(1 + x) #)" "seq(w!1)(1)" "seq(w!1)(length(w!1)-1)") (("1" (BDDSIMP) (("1" (HIDE -1 -3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2) (("2" (REVEAL -21 1) (("2" (CASE "length(w!1)=2") (("1" (REPLACE -1 1 LR) (("1" (REPLACE -2 1 LR) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "trunc1") (("1" (EXPAND "path?") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) (("1" (GRIND) (("1" (NAME "phx" "phi!1(seq(w!1)(1))") (("1" (REPLACE -1 1 LR) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1 -2 -4 2) (("1" (HIDE -6) (("1" (HIDE -2) (("1" (REVEAL -15) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKOSIMP) (("2" (TYPEPRED "x!1") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 -11 -13 -14 -15 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (INST -2 "i!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -14) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (HIDE -3 -9 -11 -12 -15 -16 -17 2 6 7) (("2" (INSTALL-REWRITES "paths[T]") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("2" (HIDE -5) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (INST 4 "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (EXPAND "finseq_appl") (("1" (REVEAL -5) (("1" (HIDE -5 -7 -8 -9 -11 -14 -15 5) (("1" (INSTALL-REWRITES "walks[T]") (("1" (BDDSIMP) (("1" (CASE "length(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))=length(w!1)") (("1" (REPLACE -1 4 LR) (("1" (CASE " seq(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))(length(w!1) - 1)=phi!1(seq(w!1)(1))") (("1" (REPLACE -1 4 LR) (("1" (CASE " seq(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))(length(w!1) - 2)=phi!1(seq(w!1)(0))") (("1" (REPLACE -1 4 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 5) (("2" (REPLACE -1 1 LR) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REPLACE -2 1 LR) (("2" (HIDE -2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 4 LR) (("2" (HIDE -1 -4) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -1 4 LR) (("3" (HIDE -1 -4) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "path?_gen_seq2") (("4" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("4" (BDDSIMP (-1 -3 -4 -5)) (("1" (REVEAL -5 -6 -13) (("1" (CASE "path?(Tr!1,w!1)") (("1" (LEMMA "path?_caret") (("1" (INST -1 "Tr!1" "1" "length(w!1) - 1" "w!1") (("1" (STOP-REWRITE) (("1" (ASSERT (-1 -2 -11)) (("1" (LEMMA "add1_rev") (("1" (INST -1 "Tr!1" "w!1^(1,length(w!1)-1)" " phi!1(seq(w!1)(1))") (("1" (BDDSIMP) (("1" (CASE "phi!1(seq(w!1)(0))=seq(w!1 ^ (1, length(w!1) - 1))(length(w!1 ^ (1, length(w!1) - 1)) - 1)") (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -12 -2 RL) (("1" (COPY 4) (("1" (REPLACE -2 1 RL) (("1" (LEMMA "path?_add1") (("1" (HIDE -2 -3) (("1" (INST -1 "Tr!1" "w!1 ^ (1, length(w!1) - 1)" "phi!1(seq(w!1)(1))") (("1" (REVEAL -2) (("1" (REPLACE -1 -2 RL) (("1" (BDDSIMP (-2 -3 -8 -10)) (("1" (HIDE -8 -9) (("1" (HIDE -11 -12) (("1" (EXPAND "verts_of") (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "^" -3) (("1" (REVEAL -7) (("1" (INST -1 "Tr!1" "1+i!1" "length(w!1)-1" "w!1") (("1" (TYPEPRED "i!1") (("1" (EXPAND "^" -1) (("1" (EXPAND "min") (("1" (ASSERT (-1 -2 -8)) (("1" (LEMMA "tree_one_path") (("1" (INST -1 "Tr!1" "w!1 ^ (1 + i!1, length(w!1) - 1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (REVEAL -9) (("1" (HIDE -5 -9) (("1" (INSTALL-REWRITES "walks[T]") (("1" (STOP-REWRITE) (("1" (ASSERT (-)) (("1" (BDDSIMP) (("1" (HIDE-ALL-BUT (-2 -3 -12 -13 -14) -) (("1" (HIDE 1 5) (("1" (REPLACE -3 -1 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (EXPAND "from?") (("2" (REPLACE -11 1 LR) (("2" (ASSERT) (("2" (HIDE -1 -3 -6 -7 -8 -10 -11 2 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (EXPAND "from?") (("3" (HIDE -1 -3 -6 -7 -8 -10 -11 2 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "edge?_comm") (("3" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (HIDE -2 -5 -6 -7 -8 -9 -11 -12) (("3" (HIDE 2 6) (("3" (EXPAND "path?") (("3" (BDDSIMP) (("3" (EXPAND "finseq_appl") (("3" (EXPAND "gen_seq2") (("3" (EXPAND "walk?") (("3" (EXPAND "finseq_appl") (("3" (BDDSIMP) (("3" (HIDE -2) (("3" (INST -2 "0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND "min" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 5 LR) (("1" (EXPAND "^" 5) (("1" (EXPAND "min" 5) (("1" (EXPAND "trunc1" 5) (("1" (EXPAND "^" 5) (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (REVEAL -7) (("1" (BDDSIMP (-1 -2)) (("1" (HIDE-ALL-BUT (-2 -3) -) (("1" (INSTALL-REWRITES "paths[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (EXPAND "min" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (HIDE-ALL-BUT (-9 -13) -) (("2" (HIDE 5) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -11) (("2" (HIDE-ALL-BUT (-1 -2 -8 -12) -) (("2" (ASSERT) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -6)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (HIDE-ALL-BUT (-1 -2 -3 -12) -) (("2" (HIDE 5) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND "min" 1) (("3" (HIDE -13 -14) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (REVEAL 1) (("1" (INST 1 "rev(qq)") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP (-1 -10)) (("1" (BDDSIMP) (("1" (HIDE -6 -7 -8 -9 -10 -11 -12 -13 6) (("1" (HIDE -1 -2) (("1" (REVEAL -18) (("1" (REPLACE -1 1 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND* "^" "min") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (HIDE-ALL-BUT (-3 -14) -) (("2" (HIDE 6) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -8) (("3" (REPLACE -1 1 LR) (("3" (HIDE -2 -3 -8 -10 -11 -13 -14 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REVEAL -8) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -2 -3 -7 -8 -9 -10 -11 -12 -13 -14 2 6) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 -7 -8 -9 -10 -11 -12 2 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("3" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("4" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (EXPAND "incident_edges") (("1" (LEMMA "edge?_comm") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP (-1 -6)) (("1" (INSTALL-REWRITES "walks[T]") (("1" (HIDE -5 -6 -7 -8 -9 -11 -14 -15 5) (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incident_edges") (("2" (BDDSIMP) (("1" (HIDE-ALL-BUT (-1 -2 -10 -11) -) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (REPLACE -12 4 RL) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (BDDSIMP) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "seq(w!1)(1)" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1,length(w!1)-1)" "qq") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "trunc1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (REVEAL -6) (("2" (HIDE -4 -5 -7 -8 -10 -12 -15 -16 2 6) (("2" (EXPAND "walk_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -1 1 LR) (("2" (BDDSIMP) (("1" (HIDE -1) (("1" (EXPAND "gen_seq2") (("1" (ASSERT) (("1" (GRIND) (("1" (REPLACE -10 1 RL) (("1" (REVEAL -6) (("1" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -9 1 RL) (("2" (REVEAL -6) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -15) (("3" (HIDE -1 2) (("3" (REPLACE -8 3 RL) (("3" (REVEAL 1) (("3" (REPLACE -8 1 RL) (("3" (REVEAL -6) (("3" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("3" (EXPAND "edge?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "walk_from?") (("3" (BDDSIMP) (("1" (REVEAL -5) (("1" (HIDE -4 -5 -7 -8 -9 -13 -14 -15 2 6) (("1" (EXPAND "walk?") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (EXPAND "^") (("1" (INST -1 "1+n!1") (("1" (ASSERT (-1 -2)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (REVEAL -2) (("2" (ASSERT) (("2" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 2 6) (("2" (ASSERT) (("2" (EXPAND* "^" "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 2 6) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (EXPAND "min" 1) (("4" (CASE "length(w!1)=2") (("1" (REPLACE -1 2 LR) (("1" (ASSERT 2) (("1" (EXPAND* "^" "min") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP (-1 -10)) (("1" (HIDE-ALL-BUT (-2 -14) -1) (("1" (HIDE-ALL-BUT (-1 -2) -) (("1" (HIDE 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-11 1 2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -5 -7 -8 -13 -14 3 6) (("2" (EXPAND "gen_seq2") (("2" (EXPAND "rev") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min") (("2" (EXPAND "o") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (GRIND) (("1" (REPLACE -9 1 RL) (("1" (REVEAL -5) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (INST -1 "1+n!1" "2+n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "n!1=length(w!1)-3") (("1" (REPLACE -1 -5 LR) (("1" (ASSERT) (("1" (REVEAL -1) (("1" (INST -1 "length(w!1)-2" "length(w!1)-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (REVEAL -11) (("4" (INST -1 "1+n!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (CASE "n!1=length(w!1)-3") (("1" (REPLACE -1 3 LR) (("1" (ASSERT) (("1" (REVEAL -11) (("1" (INST -1 "length(w!1)-2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("6" (REPLACE -8 3 RL) (("6" (REVEAL -5) (("6" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("6" (EXPAND "edge?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (REVEAL -2) (("7" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 5) (("3" (REVEAL -13) (("3" (REPLACE -1 1 LR) (("3" (EXPAND "rev") (("3" (EXPAND "o") (("3" (EXPAND* "^" "min") (("3" (EXPAND "trunc1") (("3" (EXPAND* "^" "min") (("3" (EXPAND "gen_seq2") (("3" (HIDE -1) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -3 -4 -6 -7 -8 -10 -12 -13 6) (("4" (REVEAL -13) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -5) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (EXPAND "min" 1) (("4" (CASE "length(w!1)=2") (("1" (REVEAL 1) (("1" (INST 1 "G_from(Tr!1,rev(qq))" "Bush(Tr!1, phi!1(seq(w!1)(1)),dbl[T](phi!1(seq(w!1)(0)),phi!1(seq(w!1)(1))))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "Bush_less") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))" "dbl[T](seq(w!1)(length(w!1) - 2), seq(w!1)(length(w!1) - 1))" "dbl[T](phi!1(seq(w!1)(0)), phi!1(seq(w!1)(1)))") (("1" (BDDSIMP) (("1" (INSTALL-REWRITES "doubletons[T]") (("1" (HIDE -6 -7 -8 -9 -10 -11 -12 -15 -16 1 2 7) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (INSTALL-REWRITES "doubletons[T]") (("3" (ASSERT 1) NIL NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "graphs[T]") (("2" (ASSERT 1) (("2" (ASSERT (-4 1)) (("2" (LEMMA "dbl_comm") (("2" (INST -1 "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (INST -9 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (BDDSIMP) (("2" (REVEAL -7) (("2" (INST -1 "length(w!1)-2") (("2" (EXPAND "edge?") (("2" (HIDE -7 -8 -11 -14 -17 -19 -20 2 3 8) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "size_subgraph_path") (("2" (INST-CP -1 "Tr!1" "w!1") (("2" (INST -1 "Tr!1" "rev(qq)") (("2" (LEMMA "path?_rev") (("2" (INST -1 "Tr!1" "qq") (("2" (BDDSIMP -1 -8) (("1" (BDDSIMP (-1 -2)) (("1" (CASE "path?(Tr!1,w!1)") (("1" (BDDSIMP (-1 -4)) (("1" (CASE "length(rev(qq))=2") (("1" (REPLACE -6 -3 LR) (("1" (REPLACE -1 -5 LR) (("1" (REPLACE -19 -3 RL) (("1" (ASSERT (-3 -5 2)) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -7) (("2" (REPLACE -1 1 LR) (("2" (HIDE-ALL-BUT -17 -) (("2" (HIDE 8) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-13 -14 -15) -) (("2" (REVEAL -21) (("2" (HIDE 8) (("2" (INSTALL-REWRITES "paths[T]") (("2" (HIDE 2 3) (("2" (ASSERT) (("2" (BDDSIMP) (("2" (REVEAL -7) (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "lsth") (("2" (PROP) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (BDDSIMP (-2 -3)) (("1" (INST -3 "Tr!1" "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (CASE "path?(Tr!1, qq)") (("1" (BDDSIMP (-1 -2)) (("1" (BDDSIMP (-2 -5)) (("1" (REPLACE -2 + LR) (("1" (REPLACE -17 + LR) (("1" (REPLACE -4 + LR) (("1" (REPLACE -5 (1 2) LR) (("1" (REVEAL -7) (("1" (HIDE-ALL-BUT (-1 -6) -) (("1" (HIDE 4 5 6 7 8) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -5 -6 -15) -) (("2" (HIDE 2 3 9) (("2" (REVEAL -20) (("2" (INSTALL-REWRITES "paths[T]") (("2" (REPLACE -1 1 LR) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GRIND) (("2" (REPLACE -6 3 RL) (("2" (ASSERT) (("2" (REVEAL -6 -8) (("2" (INST -2 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -2)) (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -7 -10 -13) -) (("2" (HIDE 2 3 9) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (GRIND) (("1" (CASE "i!1=1") (("1" (CASE "j!1=0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "i!1=0") (("1" (CASE "j!1=1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) (("2" (REVEAL -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -5 -7 -13 -14 1 2 8) (("2" (INST -6 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-5 -6)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "Fox") (("3" (EXPAND "finseq_appl") (("3" (INST 1 "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP -1 -10) (("1" (BDDSIMP) (("1" (REVEAL -6) (("1" (REPLACE -1 1 LR) (("1" (HIDE -2 -7 -9 -10 -11 -13 -16 -17 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -14 1 2 3 4 5)) (("2" (REVEAL -18) (("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -6) (("3" (REPLACE -1 1 LR) (("3" (HIDE -1 -2 -7 -9 -10 -11 -14 -16 -17 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-9) -) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -8 "seq(w!1)(1)" "seq(w!1)(0)") (("4" (BDDSIMP (-6 -8)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (HIDE -5 -7 -8 -9 -13 -14 -15 6) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (REVEAL -3) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incident_edges") (("2" (HIDE -4 -7 -10 -13 -14 7) (("2" (HIDE -4) (("2" (INSTALL-REWRITES "graphs[T]") (("2" (ASSERT) (("2" (INST -5 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (BDDSIMP) (("1" (REPLACE -5 4 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (HIDE -4 -5 -7 -8 -9 -14 -15 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("4" (HIDE -5 -7 -8 -10 -13 -14 7) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -5) (("3" (REVEAL -5) (("3" (SPLIT) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1 -2 -7 -9 -10 -11 -13 -16 -17 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -2 -7 -9 -10 -11 -13 -16 -17 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) (("2" (REVEAL -4) (("2" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "doubletons[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "doubletons[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (INSTALL-REWRITES "doubletons[T]") (("2" (HIDE-ALL-BUT (-9) -) (("2" (HIDE 5 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -5 -6 4 5) (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (BDDSIMP) (("2" (INST -1 "length(w!1)-1") (("2" (REPLACE -5 -1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "phi!1") (("3" (INST -1 "seq(w!1)(1)") (("3" (TYPEPRED "w!1") (("3" (HIDE -3 -4 -8 -9 4 5) (("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) (("3" (BDDSIMP) (("3" (INST -2 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|small_fox-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "Fox" -1) (("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (CASE "phi!1(w!1(1))=w!1(length(w!1)-1)") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "stuck_hound") (("1" (INST -1 "w!1" "seq(w!1)(0)" "Tr!1" "phi!1") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "path_from?") (("1" (REPLACE -5 -1) (("1" (BDDSIMP (-1 -3 -4)) (("1" (SKOSIMP*) (("1" (INST 1 "G_from(Tr!1,p!1)" "H!1") (("1" (BDDSIMP) (("1" (HIDE -6) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (BDDSIMP (-2 -3)) (("1" (INST -3 "Tr!1" "p!1") (("1" (BDDSIMP (-5 -3)) (("1" (EXPAND "lsth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (INST 2 "p!1") (("2" (TYPEPRED "p!1") (("2" (HIDE -7) (("2" (EXPAND "finseq_appl") (("2" (HIDE -7) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (COPY -5) (("2" (COPY -7) (("2" (REPLACE -2 -1 RL) (("2" (REPLACE -8 -10 RL) (("2" (CASE "length(p!1)=1") (("1" (REPLACE -1 -2 LR) (("1" (ASSERT -2) (("1" (HIDE 2) (("1" (EXPAND "fixed?") (("1" (SKOSIMP*) (("1" (INST -11 "seq(p!1)(0)") (("1" (ASSERT (-2 -11)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 -7) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p!1)>1") (("1" (CASE "phi!1(seq(p!1)(0))=seq(p!1)(length(p!1) - 1)") (("1" (REPLACE -12 -15 RL) (("1" (REVEAL -1) (("1" (REPLACE -1 -16 RL) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT (-2 1)) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-3) -) (("2" (HIDE 3 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3) -) (("2" (HIDE 2) (("2" (EXPAND "path?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (HIDE-ALL-BUT (-1 -2) -) (("3" (HIDE 2 3) (("3" (ASSERT) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "phi!1(finseq_appl(w!1)(1)) = finseq_appl(w!1)(length(w!1) - 2)") (("1" (CASE "length(w!1)=2") (("1" (LEMMA "back_hound") (("1" (INST -1 "w!1" "seq(w!1)(0)" "Tr!1" "phi!1") (("1" (EXPAND "path_from?") (("1" (BDDSIMP) (("1" (HIDE -6 -7 2 4) (("1" (ASSERT) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "whole_hound") (("2" (INST -1 "w!1" "finseq_appl(w!1)(0)" "Tr!1" "phi!1") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "p!1") (("1" (INST 3 "G_from(Tr!1,p!1)" "Bush(Tr!1, seq(w!1)(length(w!1) - 2), dbl(seq(w!1)(length(w!1) - 3), seq(w!1)(length(w!1) - 2)))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (HIDE -7) (("1" (INST -1 "Tr!1" "p!1") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (BDDSIMP (-1 -2 -5 -8)) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (INST 3 "p!1") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (CASE "length(p!1)=1") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -5 -6 RL) (("1" (REPLACE -1 -6 RL) (("1" (ASSERT -6) (("1" (HIDE -8 -13 3) (("1" (EXPAND "fixed?") (("1" (FLATTEN) (("1" (INST -12 "seq(p!1)(0)") (("1" (ASSERT (-6 -12)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (EXPAND "path?") (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(p!1)>1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (REPLACE -3 -6) (("1" (REPLACE -6 4 RL) (("1" (REPLACE -8 4 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -5 4 LR) (("2" (ASSERT (-6 4)) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -1 -) (("2" (HIDE 4 5 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "size_subgraph_path") (("3" (INST-CP -1 "Tr!1" "w!1") (("3" (INST -1 "Tr!1" "p!1") (("3" (EXPAND "path_from?") (("3" (FLATTEN) (("3" (BDDSIMP (-1 -2 -5 -8)) (("3" (REPLACE -11 4 LR) (("3" (REPLACE -4 4 LR) (("3" (REPLACE -2 4 LR) (("3" (EXPAND "lsth") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (CASE "length(p!1)=1") (("1" (HIDE -10 4) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -1 -6 LR) (("1" (ASSERT -6) (("1" (REPLACE -5 -6 RL) (("1" (EXPAND "fixed?") (("1" (SKOSIMP*) (("1" (INST -12 "seq(p!1)(0)") (("1" (ASSERT (-6 -12)) NIL NIL) ("2" (HIDE-ALL-BUT (-1 -4 1)) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-6 -7 1 2)) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT (-7 1 2)) (("3" (ASSERT) NIL NIL)) NIL) ("4" (HIDE-ALL-BUT (-6 -7 1 2)) (("4" (GRIND) NIL NIL)) NIL) ("5" (HIDE-ALL-BUT (-7 1 2)) (("5" (ASSERT) NIL NIL)) NIL) ("6" (EXPAND "path_from?") (("6" (EXPAND "path?") (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (EXPAND "finseq_appl") (("3" (REPLACE -4 1 LR) (("3" (HIDE -1 -4 -5 -6 3 4 5) (("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "path?_gen_seq2") (("2" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (NAME "qq" "walks[T].gen_seq2(Tr!1, phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (CASE "qq=gen_seq2(Tr!1, phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (REPLACE -1 -3 RL) (("1" (HIDE -1 -2) (("1" (EXPAND "path?" -2) (("1" (FLATTEN) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST -3 "0") (("1" (ASSERT (-3 -5)) (("1" (COPY 2) (("1" (REPLACE -6 1 RL) (("1" (TYPEPRED "phi!1") (("1" (LEMMA "edge?_comm") (("1" (INST -1 "Tr!1" "seq(w!1)(1)" "seq(w!1)(0)") (("1" (BDDSIMP (-1 -5)) (("1" (TYPEPRED "Tr!1") (("1" (INST -1 "dbl[T](phi!1(seq(w!1)(1)), phi!1(seq(w!1)(0)))") (("1" (BDDSIMP (-1 -4)) (("1" (INST-CP -1 "phi!1(seq(w!1)(1))") (("1" (INST -1 "phi!1(seq(w!1)(0))") (("1" (BDDSIMP -1) (("1" (BDDSIMP -2) (("1" (INST 4 "G_from(Tr!1,trunc1(w!1^(1,length(w!1)-1)) o rev(qq))" "Bush(Tr!1, phi!1(seq(w!1)(1)),dbl[T](phi!1(seq(w!1)(0)),phi!1(seq(w!1)(1))))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (HIDE 4) (("1" (BDDSIMP) (("1" (LEMMA " Bush_less") (("1" (INST -1 "Tr!1" "seq(w!1)(length(w!1)-1)" "phi!1(seq(w!1)(1))" "dbl[T](seq(w!1)(length(w!1) - 2), seq(w!1)(length(w!1) - 1))" "dbl[T](phi!1(seq(w!1)(0)), phi!1(seq(w!1)(1)))") (("1" (BDDSIMP) (("1" (HIDE -5 -6 -9 -10 -13 -14 4 5) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -9 -12 -13 5 6) (("2" (ASSERT) NIL NIL)) NIL) ("3" (INSTALL-REWRITES "walks[T]") (("3" (REPLACE -12 1 RL) (("3" (HIDE-ALL-BUT (-11 1)) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (REVEAL -7) (("2" (HIDE-ALL-BUT (-1 -2 -3 -4 -11 1 2 3 4)) (("2" (HIDE -1) (("2" (REVEAL -8) (("2" (SPLIT) (("1" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("1" (GRIND) NIL NIL)) NIL) ("2" (INST -2 "0") (("2" (GRIND) (("2" (REVEAL -5) (("2" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-3 -11 1)) (("3" (GRIND) (("1" (REVEAL -18) (("1" (INST -1 "length(w!1)-2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -10) (("2" (INST -1 "length(w!1)-2" "length(w!1)-1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT (-3 -11 1)) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "size_subgraph_path") (("2" (INST-CP -1 "Tr!1" "w!1") (("2" (REVEAL -4) (("2" (EXPAND "path?" -3) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "walk?") (("2" (BDDSIMP (-1 -3 -11 -12)) (("1" (INST -5 "Tr!1" "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (BDDSIMP -5) (("1" (REPLACE -1 4 LR) (("1" (REPLACE -16 -3 RL) (("1" (REPLACE -3 4 LR) (("1" (HIDE-ALL-BUT (-8 -14) -) (("1" (HIDE 1 2 3 5) (("1" (REVEAL -20) (("1" (INSTALL-REWRITES "path_circ[T]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "path?(Tr!1,w!1)") (("1" (LEMMA "path_from?_caret") (("1" (INST -1 "Tr!1" "1" "length(w!1)-1" "w!1" "seq(w!1)(0)" "seq(w!1)(length(w!1)-1)") (("1" (ASSERT (-1 -15)) (("1" (EXPAND "path_from?") (("1" (BDDSIMP (-1 -2)) (("1" (HIDE (-18 -19 5 6)) (("1" (LEMMA "add1_rev") (("1" (INST -1 "Tr!1" "w!1^(1,length(w!1)-1)" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP -1) (("1" (LEMMA "path?_add1") (("1" (INST -1 "Tr!1" "w!1 ^ (1, length(w!1) - 1)" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP (-1 -4 -10)) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (LEMMA "path_from?_caret") (("1" (INST -1 "Tr!1" "i!1+1" "length(w!1)-1" "w!1" "seq(w!1)(0)" "seq(w!1)(length(w!1)-1)") (("1" (ASSERT -1) (("1" (EXPAND "path_from?" -1 1) (("1" (EXPAND "from?" -1 1) (("1" (BDDSIMP (-1 -6)) (("1" (LEMMA "cycl_red_compos") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "two_walks") (("1" (INST -2 "Tr!1" "w!1^(1+i!1,length(w!1)-1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (INST -1 "Tr!1" "w!1^(1+i!1,length(w!1)-1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (LEMMA "tree_no_circuits") (("1" (INST -1 "Tr!1" "trunc1(w!1 ^ (1 + i!1, length(w!1) - 1)) o rev(qq)") (("1" (EXPAND "circuit?" -1) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1+i!1,length(w!1)-1)" "qq") (("1" (BDDSIMP 1) (("1" (HIDE 2) (("1" (HIDE -19 -20 -21) (("1" (HIDE -9 -11) (("1" (HIDE -1 -3) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "edge?" -11) (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (REVEAL -21) (("1" (HIDE-ALL-BUT (-1 -6 -7) -) (("1" (EXPAND "from?") (("1" (EXPAND "gen_seq2") (("1" (HIDE 1) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (REPLACE -1 1 LR) (("1" (BETA) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -5 -6 -7 -11 -12 -15 -16) -) (("2" (HIDE 1) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -9 -) (("3" (HIDE-ALL-BUT 2 +) (("3" (INSTALL-REWRITES "walks[T]") (("3" (EXPAND "path?") (("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE-ALL-BUT -2 -) (("4" (HIDE-ALL-BUT 2 +) (("4" (EXPAND "path?") (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("5" (HIDE-ALL-BUT -11 -) (("5" (HIDE 1) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (ASSERT) (("2" (HIDE -6 1 3) (("2" (BDDSIMP) (("1" (REVEAL -18) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1) (("1" (EXPAND "gen_seq2") (("1" (HIDE -2 -3 -8 -14 -16 -17) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (EXPAND "^") (("1" (TYPEPRED "i!1") (("1" (EXPAND "^") (("1" (HIDE-ALL-BUT (-1 -2) -) (("1" (AUTO-REWRITE-DEFS :ALWAYS? T) (("1" (ASSERT) (("1" (REVEAL -3 -13) (("1" (REPLACE -2 -4 LR) (("1" (REVEAL -11) (("1" (INST -1 "2+i!1" "length(w!1)-1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "^" -1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (ASSERT (-1 -2)) (("2" (REVEAL -18) (("2" (REPLACE -1 -3 LR) (("2" (EXPAND "gen_seq2" -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -18) (("3" (EXPAND "path_from?" 1) (("3" (REPLACE -1 1 LR) (("3" (HIDE-ALL-BUT (-2 -19) -) (("3" (EXPAND "gen_seq2") (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" -5) (("4" (REPLACE -5 -2 LR) (("4" (REPLACE -19 -2 RL) (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE (-2 -3)) (("3" (BDDSIMP (-1 1)) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE -1 -2 -19 -20 -21) (("1" (HIDE -7 -8 -11 -15 -10 2) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -2) (("2" (REVEAL -17) (("2" (HIDE-ALL-BUT (-1 -13 -17) -) (("2" (HIDE 1 3) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (GRIND) (("2" (HIDE -2) (("2" (REVEAL -15) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (PROP) (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -6 -16 -17 -18 1 3) (("3" (EXPAND "walk_from?") (("3" (BDDSIMP) (("1" (EXPAND "path_from?") (("1" (BDDSIMP) (("1" (EXPAND "path?" -2) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (BDDSIMP) (("2" (EXPAND "from?") (("2" (BDDSIMP) (("2" (REPLACE -19 -4 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "i!1") (("3" (HIDE (-2 -4 -8 -10 -14)) (("3" (EXPAND "from?") (("3" (BDDSIMP) (("3" (EXPAND "path_from?") (("3" (BDDSIMP) (("3" (EXPAND "from?") (("3" (BDDSIMP) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 1 3) (("4" (HIDE -6 -8 -16 -17 -18) (("4" (HIDE -1 -3 -8 -12) (("4" (TYPEPRED "i!1") (("4" (ASSERT) (("4" (EXPAND "^" 1) (("4" (EXPAND "^" -1) (("4" (ASSERT) (("4" (CASE "i!1=length(w!1)-2") (("1" (REPLACE -1 -5 LR) (("1" (EXPAND "^" -5) (("1" (REPLACE -5 -13) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -11) -) (("2" (AUTO-REWRITE-DEFS :ALWAYS? T) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (TYPEPRED "i!1") (("2" (HIDE-ALL-BUT (-1 -22) -) (("2" (HIDE 2 3) (("2" (EXPAND "^") (("2" (AUTO-REWRITE-DEFS :ALWAYS? T) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3) (("2" (BDDSIMP) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1+i!1,length(w!1)-1)" "qq") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-3 -21) -) (("1" (HIDE 2) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -18) (("2" (HIDE-ALL-BUT (-1 -19) -) (("2" (REPLACE -1 1 LR) (("2" (REVEAL -15) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (REVEAL -13) (("2" (PROP) (("2" (INSTALL-REWRITES "walks[T]") (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -4 1 RL) (("3" (REPLACE -19 1 LR) (("3" (HIDE-ALL-BUT (-3 -12 -18) -) (("3" (HIDE 2 3) (("3" (EXPAND "^") (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (TYPEPRED "i!1") (("3" (EXPAND "^" -1) (("3" (GRIND) (("1" (REVEAL -15) (("1" (INST -1 "1+i!1+n!1" "2+i!1+n!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REVEAL -33) (("2" (INST -1 "1+i!1+n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (REVEAL -1) (("3" (INST -1 "1+i!1+i!2") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (TYPEPRED "i!1") (("4" (EXPAND "^" -1) (("4" (ASSERT) (("4" (CASE "i!1=length(w!1)-2") (("1" (REPLACE -1 -6 LR) (("1" (EXPAND "^" -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -17) (("2" (HIDE-ALL-BUT (-1 -19) -) (("2" (HIDE 2) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-9 -21) -) (("3" (HIDE 2) (("3" (EXPAND "^") (("3" (TYPEPRED "i!1") (("3" (EXPAND "^") (("3" (CASE "i!1=length(w!1)-2") (("1" (REVEAL -7) (("1" (REPLACE -2 -1 LR) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (HIDE -2 -3 -4 -5) (("2" (EXPAND "^" -1) (("2" (EXPAND "^" 1) (("2" (HIDE-ALL-BUT (-1 -17) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (TYPEPRED "i!1") (("2" (HIDE-ALL-BUT (-1 -20) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (EXPAND "^" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -4 -18) -) (("2" (REVEAL -26) (("2" (REVEAL -15) (("2" (CASE-REPLACE "seq(w!1 ^ (1, length(w!1) - 1))(length(w!1 ^ (1, length(w!1) - 1)) - 1)=seq(w!1)(length(w!1) - 1)") (("1" (REPLACE -5 -4 LR) (("1" (REPLACE -2 -4 RL) (("1" (REPLACE -3 -4 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -2 -3 -4 2) (("3" (EXPAND "^") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-2 -9 -10 -13 -18) -) (("3" (HIDE 2) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (REVEAL -10) (("2" (EXPAND "edge?") (("2" (COPY -1) (("1" (INST -2 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (GRIND) (("2" (REPLACE -6 3 RL) (("2" (REVEAL -1) (("2" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (ASSERT) (("3" (INST 2 "x!1" "y1!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -3 -17) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -7 -8 -9 -16 -17) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 -2 -3 -7 -8 -9 -16 -17) -) (("3" (HIDE 2) (("3" (ASSERT) (("3" (INSTALL-REWRITES "paths[T]") (("3" (EXPAND "^") (("3" (EXPAND "from?") (("3" (EXPAND "edge?") (("3" (LEMMA "path_from_l") (("3" (EXPAND "path_from?") (("3" (INST -1 "Tr!1" " (# l := length(w!1) - 1, seq := LAMBDA (x: below[length(w!1) - 1]): seq(w!1)(1 + x) #)" "seq(w!1)(1)" "seq(w!1)(length(w!1)-1)") (("3" (BDDSIMP) (("1" (HIDE -1 -3) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -2) (("2" (REVEAL -21 1) (("2" (CASE "length(w!1)=2") (("1" (REPLACE -1 1 LR) (("1" (REPLACE -2 1 LR) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (EXPAND "^") (("1" (EXPAND "trunc1") (("1" (EXPAND "path?") (("1" (ASSERT) (("1" (GRIND) (("1" (NAME "phx" "phi!1(seq(w!1)(1))") (("1" (REPLACE -1 1 LR) (("1" (REPLACE -10 1 RL) (("1" (REPLACE -1 1 RL) (("1" (HIDE -1 -2 -4 2) (("1" (HIDE -6) (("1" (HIDE -2) (("1" (REVEAL -15) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 -11 -13 -14 -15 2) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (INST -2 "i!1+1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -14) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (HIDE -3 -9 -11 -12 -15 -16 -17 2 6 7) (("2" (INSTALL-REWRITES "paths[T]") (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("2" (HIDE -5) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-13) -) (("2" (HIDE 5 6) (("2" (REVEAL -20) (("2" (REPLACE -1 1 LR) (("2" (EXPAND "gen_seq2") (("2" (EXPAND "o") (("2" (EXPAND "^") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (EXPAND "^") (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -15 -16 5 6) (("3" (EXPAND "^") (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 -15 LR) (("1" (ASSERT -15) (("1" (REVEAL -1 -2 -8 1) (("1" (REPLACE -1 1 LR) (("1" (REPLACE -6 1 LR) (("1" (HIDE -2) (("1" (REVEAL -3) (("1" (INST -1 "Tr!1" "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (BDDSIMP) (("1" (REPLACE -1 1 LR) (("1" (REPLACE -4 1 LR) (("1" (ASSERT 1) (("1" (EXPAND "^" 1) (("1" (HIDE -1) (("1" (EXPAND "o ") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "rev") (("1" (REPLACE -2 1 LR) (("1" (HIDE -2) (("1" (EXPAND "gen_seq2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -1 -2 1) (("2" (REPLACE -1 1 LR) (("2" (ASSERT 1) (("2" (EXPAND "^") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (REVEAL -3 -8) (("2" (INST -1 "Tr!1" "empty_seq o rev(qq)") (("1" (BDDSIMP) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1 -4 -6 -7 -10 -11 -13 -14 -15) (("1" (REPLACE -1 1 LR) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "path?_rev") (("2" (INST -1 "Tr!1" "qq") (("2" (BDDSIMP -1 -6) (("1" (CASE "empty_seq o rev(qq)=rev(qq)") (("1" (REPLACE -1 1 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -16) -) (("2" (HIDE 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -3 -4 -5 -9 -10 -12 -13 -14 2) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 LR) (("2" (HIDE (-1 -2 -4 -5 -6 -7 -11 -12 -13 -14 -15 2)) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -3 2 LR) (("3" (ASSERT 2) (("3" (HIDE 1) (("3" (EXPAND "^") (("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (LEMMA "size_subgraph_path") (("3" (INST -1 "Tr!1" "empty_seq o rev(qq)") (("1" (BDDSIMP) (("1" (REPLACE -1 1 LR) (("1" (REPLACE -3 1 LR) (("1" (HIDE -1 -2 -3 -5 -6 -7 -11 -12 -14 -15 -16) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "empty_seq o rev(qq)=rev(qq)") (("1" (REPLACE -1 1 LR) (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP -1 -8) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-16) -) (("2" (HIDE 2 3) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 1 LR) (("2" (HIDE-ALL-BUT (-3 -8 -9 -17) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (INST 4 "trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq)") (("1" (EXPAND "finseq_appl") (("1" (REVEAL -5) (("1" (HIDE -5 -7 -8 -9 -11 -14 -15 5) (("1" (INSTALL-REWRITES "walks[T]") (("1" (BDDSIMP) (("1" (CASE "length(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))=length(w!1)") (("1" (REPLACE -1 4 LR) (("1" (CASE " seq(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))(length(w!1) - 1)=phi!1(seq(w!1)(1))") (("1" (REPLACE -1 4 LR) (("1" (CASE " seq(trunc1(w!1 ^ (1, length(w!1) - 1)) o rev(qq))(length(w!1) - 2)=phi!1(seq(w!1)(0))") (("1" (REPLACE -1 4 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -1 -2 5) (("2" (REPLACE -1 1 LR) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 + LR) (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (EXPAND "^" 5) (("1" (EXPAND "trunc1" 5) (("1" (EXPAND "^" 5) (("1" (CASE "empty_seq o rev(qq)=rev(qq)") (("1" (REPLACE -1 5 LR) (("1" (REPLACE -5 5 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1) -) (("2" (HIDE 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (HIDE -1 -2 -3 5) (("4" (ASSERT) (("4" (EXPAND "^") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REPLACE -2 1 LR) (("2" (HIDE -2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 + LR) (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (EXPAND "^" 5) (("1" (EXPAND "trunc1" 5) (("1" (EXPAND "^" 5) (("1" (CASE "empty_seq o rev(qq)=rev(qq)") (("1" (REPLACE -1 5 LR) (("1" (REPLACE -4 5 LR) (("1" (HIDE -1 -4) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -6 6) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (CASE "length(qq)=2") (("1" (REPLACE -1 1 LR) (("1" (HIDE -2 -3 5) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 -5 2 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 5) (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 + LR) (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (EXPAND "^" 5) (("1" (EXPAND "trunc1" 5) (("1" (EXPAND "^" 5) (("1" (CASE "empty_seq o rev(qq)=rev(qq)") (("1" (REPLACE -1 5 LR) (("1" (REPLACE -3 5 LR) (("1" (HIDE -1 -3 -6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -2 -5 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 4 LR) (("2" (HIDE -1 -4) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (REPLACE -1 4 LR) (("3" (HIDE -1 -4) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (LEMMA "path?_gen_seq2") (("4" (INST -1 "Tr!1" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("4" (BDDSIMP (-1 -3 -4 -5)) (("1" (REVEAL -5 -6 -13) (("1" (CASE "path?(Tr!1,w!1)") (("1" (LEMMA "path?_caret") (("1" (INST -1 "Tr!1" "1" "length(w!1) - 1" "w!1") (("1" (STOP-REWRITE) (("1" (ASSERT (-1 -2 -11)) (("1" (LEMMA "add1_rev") (("1" (INST -1 "Tr!1" "w!1^(1,length(w!1)-1)" " phi!1(seq(w!1)(1))") (("1" (BDDSIMP) (("1" (CASE "phi!1(seq(w!1)(0))=seq(w!1 ^ (1, length(w!1) - 1))(length(w!1 ^ (1, length(w!1) - 1)) - 1)") (("1" (REPLACE -1 -2 RL) (("1" (REPLACE -12 -2 RL) (("1" (COPY 4) (("1" (REPLACE -2 1 RL) (("1" (LEMMA "path?_add1") (("1" (HIDE -2 -3) (("1" (INST -1 "Tr!1" "w!1 ^ (1, length(w!1) - 1)" "phi!1(seq(w!1)(1))") (("1" (REVEAL -2) (("1" (REPLACE -1 -2 RL) (("1" (BDDSIMP (-2 -3 -8 -10)) (("1" (HIDE -8 -9) (("1" (HIDE -11 -12) (("1" (EXPAND "verts_of") (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "^" -3) (("1" (REVEAL -7) (("1" (INST -1 "Tr!1" "1+i!1" "length(w!1)-1" "w!1") (("1" (TYPEPRED "i!1") (("1" (EXPAND "^" -1) (("1" (ASSERT (-1 -2 -8)) (("1" (LEMMA "tree_one_path") (("1" (INST -1 "Tr!1" "w!1 ^ (1 + i!1, length(w!1) - 1)" "qq" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (REVEAL -9) (("1" (HIDE -5 -9) (("1" (INSTALL-REWRITES "walks[T]") (("1" (STOP-REWRITE) (("1" (ASSERT (-)) (("1" (BDDSIMP) (("1" (HIDE-ALL-BUT (-2 -3 -12 -13 -14) -) (("1" (HIDE 1 5) (("1" (REPLACE -3 -1 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path_from?") (("2" (EXPAND "from?") (("2" (REPLACE -11 1 LR) (("2" (ASSERT) (("2" (HIDE -1 -3 -6 -7 -8 -10 -11 2 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (EXPAND "from?") (("3" (HIDE -1 -3 -6 -7 -8 -10 -11 2 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (HIDE-ALL-BUT (-1) -) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (LEMMA "edge?_comm") (("3" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (HIDE -2 -5 -6 -7 -8 -9 -11 -12) (("3" (HIDE 2 6) (("3" (EXPAND "path?") (("3" (BDDSIMP) (("3" (EXPAND "finseq_appl") (("3" (EXPAND "gen_seq2") (("3" (EXPAND "walk?") (("3" (EXPAND "finseq_appl") (("3" (BDDSIMP) (("3" (HIDE -2) (("3" (INST -2 "0") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -12 1 LR) (("2" (HIDE-ALL-BUT (-15 16) -) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 5 LR) (("1" (ASSERT 5) (("1" (EXPAND "^" 5) (("1" (EXPAND "trunc1") (("1" (EXPAND "^" 5) (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (REVEAL -7) (("1" (BDDSIMP (-1 -2)) (("1" (HIDE-ALL-BUT (-2 -3) -) (("1" (INSTALL-REWRITES "paths[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (PROPAX) NIL NIL)) NIL) ("3" (ASSERT) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 5 LR) (("1" (EXPAND "^" 5) (("1" (EXPAND "trunc1" 5) (("1" (EXPAND "^" 5) (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (REVEAL -7) (("1" (BDDSIMP (-1 -2)) (("1" (HIDE-ALL-BUT (-2 -3) -) (("1" (INSTALL-REWRITES "paths[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (HIDE-ALL-BUT (-9 -13) -) (("2" (HIDE 5) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -11) (("2" (HIDE-ALL-BUT (-1 -2 -8 -12) -) (("2" (ASSERT) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -3) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -6)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (HIDE-ALL-BUT (-1 -2 -3 -12) -) (("2" (HIDE 5) (("2" (REPLACE -1 1 LR) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (HIDE -13 -14) (("3" (CASE "length(w!1)=2") (("1" (REPLACE -1 * LR) (("1" (ASSERT) (("1" (REVEAL 1) (("1" (INST 1 "rev(qq)") (("1" (EXPAND "finseq_appl") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP (-1 -10)) (("1" (BDDSIMP) (("1" (HIDE -6 -7 -8 -9 -10 -11 -12 -13 6) (("1" (HIDE -1 -2) (("1" (REVEAL -18) (("1" (REPLACE -1 1 LR) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (HIDE-ALL-BUT (-3 -14) -) (("2" (HIDE 6) (("2" (ASSERT) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -8) (("3" (REPLACE -1 1 LR) (("3" (HIDE -2 -3 -8 -10 -11 -13 -14 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REVEAL -8) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -2 -3 -7 -8 -9 -10 -11 -12 -13 -14 2 6) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -6 -7 -8 -9 -10 -11 -12 2 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("3" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("4" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (EXPAND "incident_edges") (("1" (LEMMA "edge?_comm") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("1" (BDDSIMP (-1 -6)) (("1" (INSTALL-REWRITES "walks[T]") (("1" (HIDE -5 -6 -7 -8 -9 -11 -14 -15 5) (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incident_edges") (("2" (BDDSIMP) (("1" (HIDE-ALL-BUT (-1 -2 -10 -11) -) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST -7 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-5 -7)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (BDDSIMP) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (BDDSIMP) (("1" (LEMMA "walk_concat") (("1" (INST -1 "Tr!1" "seq(w!1)(1)" "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))" "w!1^(1,length(w!1)-1)" "qq") (("1" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (HIDE -1 -2) (("1" (EXPAND "trunc1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (REVEAL -6) (("2" (HIDE -4 -5 -7 -8 -10 -12 -15 -16 2 6) (("2" (EXPAND "walk_from?") (("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -1 1 LR) (("2" (BDDSIMP) (("1" (HIDE -1) (("1" (EXPAND "gen_seq2") (("1" (ASSERT) (("1" (GRIND) (("1" (REPLACE -10 1 RL) (("1" (REVEAL -6) (("1" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "walks[T]") (("2" (REPLACE -9 1 RL) (("2" (REVEAL -6) (("2" (INST -1 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -15) (("3" (REPLACE -1 1 LR) (("3" (HIDE -1 2) (("3" (EXPAND "gen_seq2") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -5) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE -1 -5) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "walk_from?") (("3" (BDDSIMP) (("1" (REVEAL -5) (("1" (HIDE -4 -5 -7 -8 -9 -13 -14 -15 2 6) (("1" (EXPAND "walk?") (("1" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (EXPAND "^") (("1" (INST -1 "1+n!1") (("1" (ASSERT (-1 -2)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (REVEAL -2) (("2" (ASSERT) (("2" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 2 6) (("2" (ASSERT) (("2" (EXPAND "^") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 2 6) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (CASE "length(w!1)=2") (("1" (REPLACE -1 2 LR) (("1" (ASSERT 2) (("1" (EXPAND "^") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP (-1 -10)) (("1" (HIDE-ALL-BUT (-2 -14) -1) (("1" (HIDE-ALL-BUT (-1 -2) -) (("1" (HIDE 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-11 1 2)) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -5) (("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -5 -7 -8 -13 -14 3 6) (("2" (EXPAND "gen_seq2") (("2" (EXPAND "rev") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "o") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (GRIND) (("1" (REPLACE -9 1 RL) (("1" (REVEAL -5) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -1) (("2" (INST -1 "1+n!1" "2+n!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (CASE "n!1=length(w!1)-3") (("1" (REPLACE -1 -5 LR) (("1" (ASSERT) (("1" (REVEAL -1) (("1" (INST -1 "length(w!1)-2" "length(w!1)-1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("4" (REVEAL -11) (("4" (INST -1 "1+n!1") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (CASE "n!1=length(w!1)-3") (("1" (REPLACE -1 3 LR) (("1" (ASSERT) (("1" (REVEAL -11) (("1" (INST -1 "length(w!1)-2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("6" (REPLACE -8 3 RL) (("6" (REVEAL -5) (("6" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("6" (EXPAND "edge?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (REVEAL -2) (("7" (INST -1 "1+i!1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 -4 -6 -7 -8 -10 -13 -14 5) (("3" (REVEAL -13) (("3" (REPLACE -1 1 LR) (("3" (EXPAND "rev") (("3" (EXPAND "o") (("3" (EXPAND "^") (("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "gen_seq2") (("3" (HIDE -1) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -3 -4 -6 -7 -8 -10 -12 -13 6) (("4" (REVEAL -13) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -5) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "^" 1) (("4" (CASE "length(w!1)=2") (("1" (REVEAL 1) (("1" (INST 1 "G_from(Tr!1,rev(qq))" "Bush(Tr!1, phi!1(seq(w!1)(1)),dbl[T](phi!1(seq(w!1)(0)),phi!1(seq(w!1)(1))))") (("1" (BDDSIMP) (("1" (EXPAND "lsth") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "Bush_less") (("1" (INST -1 "Tr!1" "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))" "dbl[T](seq(w!1)(length(w!1) - 2), seq(w!1)(length(w!1) - 1))" "dbl[T](phi!1(seq(w!1)(0)), phi!1(seq(w!1)(1)))") (("1" (BDDSIMP) (("1" (INSTALL-REWRITES "doubletons[T]") (("1" (HIDE -6 -7 -8 -9 -10 -11 -12 -15 -16 1 2 7) (("1" (ASSERT) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (INSTALL-REWRITES "doubletons[T]") (("3" (ASSERT 1) NIL NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT 1) (("1" (ASSERT (-4 1)) (("1" (LEMMA "dbl_comm") (("1" (INST -1 "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("1" (REPLACE -1 1 RL) (("1" (INST -9 "seq(w!1)(1)" "seq(w!1)(0)") (("1" (EXPAND "edge?") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (BDDSIMP) (("1" (REPLACE -13 1 LR) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT 1) (("1" (REVEAL -5) (("1" (INST -1 "length(w!1)-2") (("1" (ASSERT -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "seq(w!1)(length(w!1) - 2)" "seq(w!1)(length(w!1) - 1)") (("2" (INST -11 "(length(w!1) - 2)" "(length(w!1) - 1)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "size_subgraph_path") (("2" (INST-CP -1 "Tr!1" "w!1") (("2" (INST -1 "Tr!1" "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP -1 -8) (("1" (BDDSIMP (-1 -2)) (("1" (CASE "path?(Tr!1,w!1)") (("1" (BDDSIMP (-1 -4)) (("1" (CASE "length(rev(qq))=2") (("1" (REPLACE -6 -3 LR) (("1" (REPLACE -1 -5 LR) (("1" (REPLACE -19 -3 RL) (("1" (ASSERT (-3 -5 2)) NIL NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -7) (("2" (REPLACE -1 1 LR) (("2" (HIDE-ALL-BUT -17 -) (("2" (HIDE 8) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-13 -14 -15) -) (("2" (REVEAL -21) (("2" (HIDE 8) (("2" (INSTALL-REWRITES "paths[T]") (("2" (HIDE 2 3) (("2" (ASSERT) (("2" (BDDSIMP) (("2" (REVEAL -7) (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10) -) (("2" (HIDE 2 3 8) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "lsth") (("2" (PROP) (("1" (LEMMA "size_subgraph_path") (("1" (INST-CP -1 "Tr!1" "w!1") (("1" (BDDSIMP (-2 -3)) (("1" (INST -3 "Tr!1" "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (CASE "path?(Tr!1, qq)") (("1" (BDDSIMP (-1 -2)) (("1" (BDDSIMP (-2 -5)) (("1" (REPLACE -2 + LR) (("1" (REPLACE -17 + LR) (("1" (REPLACE -4 + LR) (("1" (REPLACE -5 (1 2) LR) (("1" (REVEAL -7) (("1" (HIDE-ALL-BUT (-1 -6) -) (("1" (HIDE 4 5 6 7 8) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-3 -5 -6 -15) -) (("2" (HIDE 2 3 9) (("2" (REVEAL -20) (("2" (INSTALL-REWRITES "paths[T]") (("2" (REPLACE -1 1 LR) (("2" (HIDE -1) (("2" (ASSERT) (("2" (GRIND) (("2" (REPLACE -6 3 RL) (("2" (ASSERT) (("2" (REVEAL -6 -8) (("2" (INST -2 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-1 -2)) (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -3 -4 -7 -13) -) (("2" (HIDE 2 3 9) (("2" (REVEAL -15) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3 -4 -7 -10 -13) -) (("2" (HIDE 2 3 9) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (GRIND) (("1" (CASE "i!1=1") (("1" (CASE "j!1=0") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (CASE "i!1=0") (("1" (CASE "j!1=1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL) ("2" (GRIND) (("2" (REVEAL -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -5 -7 -13 -14 1 2 8) (("2" (INST -6 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (BDDSIMP (-5 -6)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "Fox") (("3" (EXPAND "finseq_appl") (("3" (INST 1 "rev(qq)") (("1" (LEMMA "path?_rev") (("1" (INST -1 "Tr!1" "qq") (("1" (BDDSIMP -1 -10) (("1" (BDDSIMP) (("1" (REVEAL -6) (("1" (REPLACE -1 1 LR) (("1" (HIDE -2 -7 -9 -10 -11 -13 -16 -17 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (REVEAL -6) (("3" (REPLACE -1 1 LR) (("3" (HIDE -1 -2 -7 -9 -10 -11 -14 -16 -17 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (REVEAL -6) (("4" (REPLACE -1 1 LR) (("4" (HIDE -1 -2 -6 -7 -9 -10 -11 -13 -16 -17 6) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-9) -) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (INST -8 "seq(w!1)(1)" "seq(w!1)(0)") (("4" (BDDSIMP (-6 -8)) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (BDDSIMP) (("1" (HIDE -5 -7 -8 -9 -13 -14 -15 6) (("1" (INSTALL-REWRITES "graphs[T]") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (REVEAL -3) (("1" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("1" (EXPAND "edge?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incident_edges") (("2" (HIDE -4 -7 -10 -13 -14 7) (("2" (HIDE -4) (("2" (INSTALL-REWRITES "graphs[T]") (("2" (ASSERT) (("2" (INST -5 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (BDDSIMP) (("1" (REPLACE -5 4 LR) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("3" (HIDE -4 -5 -7 -8 -9 -14 -15 6) (("3" (INSTALL-REWRITES "walks[T]") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (INST 1 "phi!1(seq(w!1)(0))" "phi!1(seq(w!1)(1))") (("4" (HIDE -5 -7 -8 -10 -13 -14 7) (("4" (INSTALL-REWRITES "walks[T]") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (REVEAL -5) (("3" (REVEAL -5) (("3" (SPLIT) (("1" (REPLACE -1 1 LR) (("1" (HIDE -1 -2 -7 -9 -10 -11 -13 -16 -17 6) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 LR) (("2" (HIDE -1 -2 -7 -9 -10 -11 -13 -16 -17 6) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (ASSERT) (("2" (GRIND) (("2" (REVEAL -4) (("2" (INST -1 "seq(w!1)(0)" "seq(w!1)(1)") (("2" (EXPAND "edge?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "doubletons[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "doubletons[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -5 "seq(w!1)(1)" "seq(w!1)(0)") (("2" (EXPAND "edge?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "phi!1(seq(w!1)(1))" "phi!1(seq(w!1)(0))") (("2" (INSTALL-REWRITES "doubletons[T]") (("2" (HIDE-ALL-BUT (-9) -) (("2" (HIDE 5 6) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -5 -6 4 5) (("2" (EXPAND "path?") (("2" (EXPAND "finseq_appl") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (BDDSIMP) (("2" (INST -1 "length(w!1)-1") (("2" (REPLACE -5 -1 RL) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED "phi!1") (("3" (INST -1 "seq(w!1)(1)") (("1" (TYPEPRED "w!1") (("1" (HIDE -3 -4 -8 -9 4 5) (("1" (EXPAND "finseq_appl") (("1" (INSTALL-REWRITES "paths[T]") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (INST -2 "1") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|num_edge_tree| 0 (|num_edge_tree-4| "V3.2 try" 3330872104 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("" (ASSERT) (("" (HIDE 1 3) (("" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "singleton") (("2" (INST 1 "1" "LAMBDA (y:T): 0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE "card({e: doubletons[T].doubleton | edges(G!1)(e) AND NOT e(v!1)})=card(edges(G!1))-1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[doubletons[T].doubleton].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (EXPAND "incident_edges" -2) (("2" (LEMMA "finite_sets[doubletons[T].doubleton].card_disj_union") (("2" (INST -1 "{e: doubletons[T].doubleton | edges(G!1)(e) AND e(v!1)}" "{e: doubletons[T].doubleton | edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: doubletons[T].doubleton |
                                                                                                                      edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[doubletons[T].doubleton]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_deg[T].incident_edges_TCC1") (("2" (INST -1 "v!1" "G!1") (("2" (HIDE -2 -3 2) (("2" (EXPAND "is_finite") (("2" (SKOSIMP*) (("2" (EXPAND "injective?") (("2" (LEMMA "finite_subset[doubletons[T].doubleton]") (("2" (INST -1 "edges(G!1)" "{e: doubletons[T].doubleton |
                                                                            edges(G!1)(e) AND NOT e(v!1)}") (("2" (HIDE -2) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (INST 1 "1" "LAMBDA (y:{e: doubletons[T].doubleton |
                                                         edges(G!1)(e) AND e(v!1)}): 0") (("3" (CASE "({e: doubletons[T].doubleton | edges(G!1)(e) AND e(v!1)}) =
                                                     singleton(x!1)") (("1" (HIDE -3) (("1" (SKOSIMP*) (("1" (TYPEPRED "x!1") (("1" (TYPEPRED "x1!1") (("1" (TYPEPRED "x2!1") (("1" (HIDE -1 -4 -7) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST-CP -1 "x1!1") (("1" (INST-CP -1 "x2!1") (("1" (HIDE -1 -8) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 2) (("3" (GRIND) (("3" (GRIND) (("3" (LEMMA "finite_subset[doubletons[T].doubleton]") (("3" (INST -1 "edges(G!1)" "{e: doubletons[T].doubleton |
                                                                        edges(G!1)(e) AND NOT e(v!1)}") (("3" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[T].card_remove") (("2" (INST -1 "vert(G!1)" "v!1") (("2" (TYPEPRED "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|connected?| DEF-DECL "bool" |graph_conn_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|num_edges| CONST-DECL "nat" |graph_ops| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_complected| NIL) (|connect_deg_0| FORMULA-DECL NIL |graph_complected| NIL) (|rev_lem2| FORMULA-DECL NIL |graph_complected| NIL) (|size_del_vert| FORMULA-DECL NIL |graph_ops| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|card_disj_union| FORMULA-DECL NIL |finite_sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|incident_edges_TCC1| SUBTYPE-TCC NIL |graph_deg| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|union| CONST-DECL "set" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|singleton_graph| CONST-DECL "(singleton?)" |graphs| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[T]" |graph_deg_sum| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |graph_deg_sum| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|v!1| SKOLEM-CONST-DECL "(vert(G!1))" |mappings| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL) (|deg_gt_one| FORMULA-DECL NIL |graph_deg_sum| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (|size_prep| FORMULA-DECL NIL |graph_inductions| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL)) NIL) (|num_edge_tree-3| "V3.2 try" 3318758822 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("" (ASSERT) (("" (HIDE 1 3) (("" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_sets[T].card_one") (("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (INST 1 "1" "LAMBDA (y:T): 0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE "card({e: grlib@doubletons[T].doubleton | edges(G!1)(e) AND NOT e(v!1)})=card(edges(G!1))-1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[grlib@doubletons[T].doubleton].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (EXPAND "incident_edges" -2) (("2" (LEMMA "finite_sets[grlib@doubletons[T].doubleton].card_disj_union") (("2" (INST -1 "{e: grlib@doubletons[T].doubleton | edges(G!1)(e) AND e(v!1)}" "{e: grlib@doubletons[T].doubleton | edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: grlib@doubletons[T].doubleton |
                                                                                             edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[grlib@doubletons[T].doubleton]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_deg[T].incident_edges_TCC1") (("2" (INST -1 "G!1" "v!1") (("2" (HIDE -2 -3 2) (("2" (EXPAND "is_finite") (("2" (SKOSIMP*) (("2" (EXPAND "injective?") (("2" (GRIND) (("2" (LEMMA "finite_subset[grlib@doubletons[T].doubleton]") (("2" (INST -1 "edges(G!1)" "{e: grlib@doubletons[T].doubleton |
                                        edges(G!1)(e) AND NOT e(v!1)}") (("2" (HIDE -2) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (INST 1 "1" "LAMBDA (y:{e: grlib@doubletons[T].doubleton |
                                       edges(G!1)(e) AND e(v!1)}): 0") (("3" (CASE "({e: grlib@doubletons[T].doubleton | edges(G!1)(e) AND e(v!1)}) =
                              singleton(x!1)") (("1" (HIDE -3) (("1" (SKOSIMP*) (("1" (TYPEPRED "x!1") (("1" (TYPEPRED "x1!1") (("1" (TYPEPRED "x2!1") (("1" (HIDE -1 -4 -7) (("1" (DECOMPOSE-EQUALITY -5) (("1" (INST-CP -1 "x1!1") (("1" (INST-CP -1 "x2!1") (("1" (HIDE -1 -8) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 -3 2) (("3" (GRIND) (("3" (GRIND) (("3" (LEMMA "finite_subset[grlib@doubletons[T].doubleton]") (("3" (INST -1 "edges(G!1)" "{e: grlib@doubletons[T].doubleton |
                                                        edges(G!1)(e) AND NOT e(v!1)}") (("3" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[T].card_remove") (("2" (INST -1 "vert(G!1)" "v!1") (("2" (TYPEPRED "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|num_edge_tree-2| "V3.2 try" 3318378753 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("" (ASSERT) (("" (HIDE 1 3) (("" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_sets[T].card_one") (("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (INST 1 "1" "LAMBDA (y:T): 0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE "card({e:grlib@doubletons[T].doubleton | edges(G!1)(e) AND NOT e(v!1)})=card(edges(G!1))-1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[grlib@doubletons[T].doubleton].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (EXPAND "incident_edges" -2) (("2" (LEMMA "finite_sets[grlib@doubletons[T].doubleton].card_disj_union") (("2" (INST -1 "{e: grlib@doubletons[T].doubleton | edges(G!1)(e) AND e(v!1)}" "{e: grlib@doubletons[T].doubleton| edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: grlib@doubletons[T].doubleton |
                                         edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|num_edge_tree-1| |nil| 3318087528 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 1 3) (("2" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_sets[T].card_one") (("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (INST 1 "1" "LAMBDA (y:T): 0") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE "card({e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)})=card(edges(G!1))-1") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[doubleton[T]].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (EXPAND "incident_edges" -2) (("2" (LEMMA "finite_sets[doubleton[T]].card_disj_union") (("2" (INST -1 "{e: doubleton[T] | edges(G!1)(e) AND e(v!1)}" "{e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: doubleton[T] |
              edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_deg[T].incident_edges_TCC1") (("2" (INST -1 "G!1" "v!1") (("2" (HIDE -2 -3 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[T].card_remove") (("2" (INST -1 "vert(G!1)" "v!1") (("2" (TYPEPRED "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|uniq_del_vert| 0 (|uniq_del_vert-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "uniq_paths?" 1) (("" (SKOSIMP*) (("" (LEMMA "path_ops[T].path?_del_vert") (("" (INST -1 "G!1" "v!1" "p!1") (("" (REVEAL -1) (("" (INST -1 "G!1" "v!1" "q!1") (("" (EXPAND "path_from?" -) (("" (FLATTEN) (("" (BDDSIMP) (("" (EXPAND "uniq_paths?" -) (("" (INST -5 "s!1" "t!1" "p!1" "q!1") (("" (EXPAND "path_from?" -) (("" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|uniq_paths?| CONST-DECL "bool" |mappings| NIL) (|path?_del_vert| FORMULA-DECL NIL |path_ops| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|del_edge_uniq| 0 (|del_edge_uniq-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (LEMMA "graph_connected[T].conn_eq_path") (("" (INST -1 "del_edge(G!1, e!1)") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE -1) (("" (TYPEPRED "e!1") (("" (SKOSIMP*) (("" (EXPAND "path_connected?" -3) (("" (BDDSIMP) (("" (INST -3 "x!1" "y!1") (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (SKOSIMP*) (("1" (INST -1 "del_edge(G!1, e!1)" "x!1" "y!1" "w!1") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?" -3) (("1" (BDDSIMP (-3 -6 -7)) (("1" (SKOSIMP*) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (INST -1 "G!1" "x!1" "y!1") (("1" (BDDSIMP (-1 -8 1)) (("1" (CASE "path_from?(G!1,gen_seq2(G!1, x!1, y!1),x!1,y!1)") (("1" (CASE "path_from?(G!1, p!1, x!1, y!1)") (("1" (EXPAND "uniq_paths?" -11) (("1" (INST -11 "x!1" "y!1" "p!1" "gen_seq2(G!1, x!1, y!1)") (("1" (BDDSIMP (-1 -2 -11)) (("1" (HIDE -1 -2 -4 -6 -7 -10) (("1" (TYPEPRED "p!1") (("1" (HIDE -5) (("1" (EXPAND "path_from?" -4) (("1" (FLATTEN) (("1" (EXPAND "path?" -4) (("1" (FLATTEN) (("1" (HIDE -5) (("1" (EXPAND "walk?" -4) (("1" (FLATTEN) (("1" (INST -5 "0") (("1" (EXPAND "finseq_appl" -) (("1" (REPLACE -2 -5) (("1" (ASSERT) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -7 -8 -10) (("2" (INSTALL-REWRITES "paths[T]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 -6 -7 -9) (("2" (EXPAND "path_from?" 1) (("2" (EXPAND "path?" 1) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 -1) (("2" (HIDE -2 -3 -4 -5 -6 -8) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1 -) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (GRIND) (("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "graph_ops[T].vert_del_edge") (("3" (INST? -1) (("3" (TYPEPRED "G!1") (("3" (INST -1 "e!1") (("3" (BDDSIMP) (("3" (INST -2 "x!1") (("3" (ASSERT) (("3" (REPLACE -3 1) (("3" (HIDE -2 -3 -4 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|conn_eq_path| FORMULA-DECL NIL |graph_connected| NIL) (|vert_del_edge| FORMULA-DECL NIL |graph_ops| NIL) (|walk_to_path_from| FORMULA-DECL NIL |path_ops| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|edg| CONST-DECL "doubleton[T]" |graphs| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|uniq_paths?| CONST-DECL "bool" |mappings| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |graph_deg_sum| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edge_to_walk| FORMULA-DECL NIL |walks| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|e!1| SKOLEM-CONST-DECL "(edges(G!1))" |mappings| NIL) (|x!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|y!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|charact_tree| 0 (|charact_tree-3| |nil| 3318711379 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G:(connected?(G) AND uniq_paths?(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("" (ASSERT) (("" (HIDE 1 3) (("" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].conn_lem3") (("2" (INST -1 "G!1") (("2" (BDDSIMP) (("1" (LEMMA "graph_complected[T].conn_eq_compl") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (EXPAND "tree?") (("1" (FLATTEN) (("1" (EXPAND "singleton?") (("1" (EXPAND "size") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "v!1") (("2" (LEMMA "graph_complected[T].rev_lem2") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (LEMMA "graph_ops[T].size_del_vert") (("2" (INST? -1) (("2" (LEMMA "uniq_del_vert") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -8 "del_vert(G!1, v!1)") (("2" (REPLACE -9 -3) (("2" (ASSERT -3) (("2" (BDDSIMP) (("2" (EXPAND "tree?" 1) (("2" (FLATTEN) (("2" (INST 2 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "del_edge_uniq") (("3" (INST? -1) (("3" (SKOLEM! -3) (("3" (INST? -1) (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|connected?| DEF-DECL "bool" |graph_conn_defs| NIL) (|uniq_paths?| CONST-DECL "bool" |mappings| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_complected| NIL) (|conn_lem3| FORMULA-DECL NIL |graph_complected| NIL) (|singleton?| CONST-DECL "bool" |graphs| NIL) (|conn_eq_compl| FORMULA-DECL NIL |graph_complected| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|size_del_vert| FORMULA-DECL NIL |graph_ops| NIL) (|uniq_del_vert| FORMULA-DECL NIL |mappings| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|rev_lem2| FORMULA-DECL NIL |graph_complected| NIL) (|del_edge_uniq| FORMULA-DECL NIL |mappings| NIL) (|size_prep| FORMULA-DECL NIL |graph_inductions| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL)) NIL) (|charact_tree-2| |nil| 3318631185 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G:(connected?(G) AND uniq_paths?(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (HIDE 1 3) (("2" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].conn_lem3") (("2" (INST -1 "G!1") (("2" (BDDSIMP) (("1" (LEMMA "graph_complected[T].conn_eq_compl") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (EXPAND "tree?") (("1" (FLATTEN) (("1" (EXPAND "singleton?") (("1" (EXPAND "size") (("1" (PROPAX) NIL))))))))))))))) ("2" (SKOSIMP*) (("2" (TYPEPRED "v!1") (("2" (LEMMA "graph_complected[T].rev_lem2") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (LEMMA "graph_ops[T].size_del_vert") (("2" (INST? -1) (("2" (LEMMA "uniq_del_vert") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -8 "del_vert(G!1, v!1)") (("2" (REPLACE -9 -3) (("2" (ASSERT -3) (("2" (BDDSIMP) (("2" (EXPAND "tree?" 1) (("2" (FLATTEN) (("2" (INST 2 "v!1") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))) ("3" (LEMMA "del_edge_uniq") (("3" (INST? -1) (("3" (SKOLEM! -3) (("3" (INST? -1) (("3" (BDDSIMP) NIL)))))))))))))))))))))))))) NIL) NIL NIL) (|charact_tree-1| |nil| 3318087528 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G:(connected?(G) AND uniq_paths?(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 1 3) (("2" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].conn_lem3") (("2" (INST -1 "G!1") (("2" (BDDSIMP) (("1" (LEMMA "graph_complected[T].conn_eq_compl") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (EXPAND "tree?") (("1" (FLATTEN) (("1" (EXPAND "singleton?") (("1" (EXPAND "size") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "v!1") (("2" (LEMMA "graph_complected[T].rev_lem2") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (LEMMA "graph_ops[T].size_del_vert") (("2" (INST? -1) (("2" (LEMMA "uniq_del_vert") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -8 "del_vert(G!1, v!1)") (("2" (REPLACE -9 -3) (("2" (ASSERT -3) (("2" (BDDSIMP) (("2" (EXPAND "tree?" 1) (("2" (FLATTEN) (("2" (INST 2 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "del_edge_uniq") (("3" (INST? -1) (("3" (SKOLEM! -3) (("3" (INST? -1) (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|iff_tree| 0 (|iff_tree-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (BDDSIMP) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (EXPAND "uniq_paths?") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_path_conn[T].path_implies_conn") (("2" (INST? -1) (("2" (LEMMA "graph_path_conn[T].tree_has_walk") (("2" (EXPAND "path_connected?") (("2" (LEMMA "trees[T].tree_nonempty") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (INST -2 "G!1" "x!1" "y!1") (("2" (TYPEPRED "x!1") (("2" (TYPEPRED "y!1") (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 3 "(#length := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -3 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "charact_tree") (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|uniq_paths?| CONST-DECL "bool" |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|tree_one_path| FORMULA-DECL NIL |tree_paths| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|x!1| SKOLEM-CONST-DECL "(vert(G!1))" |mappings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|tree_nonempty| FORMULA-DECL NIL |trees| NIL) (|tree_has_walk| FORMULA-DECL NIL |graph_path_conn| NIL) (|path_implies_conn| FORMULA-DECL NIL |graph_path_conn| NIL) (|charact_tree| FORMULA-DECL NIL |mappings| NIL)) NIL)) (|tree_num_iff| 0 (|tree_num_iff-2| "V3.2" 3318711644 ("" (SKOSIMP*) (("" (BDDSIMP) (("1" (LEMMA "num_edge_tree") (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "tree_edge_card") (("2" (INST? -1) (("2" (ASSERT) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INSTALL-REWRITES "graph_ops") (("3" (LEMMA "iff_tree") (("3" (INST? -1) (("3" (STOP-REWRITE) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|num_edge_tree| FORMULA-DECL NIL |mappings| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|num_edges| CONST-DECL "nat" |graph_ops| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|tree_edge_card| FORMULA-DECL NIL |trees| NIL) (|iff_tree| FORMULA-DECL NIL |mappings| NIL)) SHOSTAK) (|tree_num_iff-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (BDDSIMP) (("1" (LEMMA "num_edge_tree") (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "tree_edge_card") (("2" (INST? -1) (("2" (ASSERT) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INSTALL-REWRITES "graph_ops") (("3" (LEMMA "iff_tree") (("3" (INST? -1) (("3" (STOP-REWRITE-THEORY "graph_ops") (("3" (STOP-REWRITE) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|tree_map| 0 (|tree_map-2| "Trial3.2" 3319391284 ("" (SKOSIMP*) (("" (LEMMA "graph_pair_induct_not") (("" (INST -1 "LAMBDA (G,H):subgraph?[T](G,G!1) AND subgraph?[T](H,G!1) AND NOT fixed?(G!1,phi!1) AND Fox(G!1,G,H,phi!1)") (("1" (BDDSIMP) (("1" (LEMMA "fixed_fox") (("1" (INST -1 "G!1" "phi!1") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST -2 "G!2" "H!1") (("1" (PROP) (("1" (EXPAND "Fox") (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "G_from(G!1, w!1)") (("1" (REPLACE -6 -2 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (SKOSIMP*) (("2" (EXPAND "Bush") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "subgraph_lem") (("2" (INST -1 "G!1" "reachable(del_edge(G!1,                                   dbl(seq(w!1)(length(w!1) - 2),                                      seq(w!1)(length(w!1) - 1))),                          seq(w!1)(length(w!1) - 1))") (("1" (REPLACE -6 -1 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "small_fox") (("2" (INST -1 "G!1" "phi!1" "_" "_") (("2" (SKOSIMP*) (("2" (INST -1 "G!2" "H!1") (("2" (BDDSIMP (-1 -4)) (("1" (EXPAND "lsth") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST 2 "GG!1" "HH!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |mappings| NIL) (|graph_pair_induct_not| FORMULA-DECL NIL |graph_pair| NIL) (|G_from| CONST-DECL "Subgraph(G)" |subgraphs_from_walk| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (|w!1| SKOLEM-CONST-DECL "prewalk[T]" |mappings| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|reachable| CONST-DECL "finite_set[T]" |mappings| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|subgraph_lem| FORMULA-DECL NIL |subgraphs| NIL) (|Bush| CONST-DECL "Subgraph(Tr)" |mappings| NIL) (|fixed_fox| FORMULA-DECL NIL |mappings| NIL) (|lsth| CONST-DECL "bool" |graph_pair| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|small_fox| FORMULA-DECL NIL |mappings| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|premap| TYPE-EQ-DECL NIL |mappings| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|map| TYPE-EQ-DECL NIL |mappings| NIL) (|fixed?| CONST-DECL "bool" |mappings| NIL) (|phi!1| SKOLEM-CONST-DECL "map(G!1, G!1)" |mappings| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|Fox| CONST-DECL "bool" |mappings| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|Tree| TYPE-EQ-DECL NIL |trees| NIL)) SHOSTAK) (|tree_map-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (LEMMA "graph_pair_induct_not") (("" (INST -1 "LAMBDA (G,H:graph[T]):subgraph?[T](G,G!1) AND subgraph?[T](H,G!1) AND NOT fixed?(G!1,phi!1) AND Fox(G!1,G,H,phi!1)") (("1" (BDDSIMP) (("1" (LEMMA "fixed_fox") (("1" (INST -1 "G!1" "phi!1") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST -2 "G!2" "H!1") (("1" (BETA 2) (("1" (PROP) (("1" (EXPAND "Fox") (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED "G_from(G!1, w!1)") (("1" (REPLACE -6 -2 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE -4 -5 -6 3) (("2" (EXPAND "path?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Fox") (("2" (SKOSIMP*) (("2" (EXPAND "Bush") (("2" (EXPAND "finseq_appl") (("2" (LEMMA "subgraph_lem") (("2" (INST -1 "G!1" "reachable(del_edge(G!1,                                   dbl(seq(w!1)(length(w!1) - 2),                                      seq(w!1)(length(w!1) - 1))),                          seq(w!1)(length(w!1) - 1))") (("1" (REPLACE -6 -1 RL) (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 1 "seq(w!1)(length(w!1) - 2)" "seq(w!1)(length(w!1) - 1)") (("1" (BDDSIMP) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "path?") (("2" (FLATTEN) (("2" (EXPAND "finseq_appl") (("2" (INST -3 "length(w!1) - 2" "length(w!1) - 1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "small_fox") (("2" (INST -1 "G!1" "phi!1" "_" "_") (("2" (SKOSIMP*) (("2" (INST -1 "G!2" "H!1") (("1" (BETA -2) (("1" (FLATTEN) (("1" (BDDSIMP (-1 -4)) (("1" (EXPAND "lsth") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST 2 "GG!1" "HH!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (BETA -1) (("2" (FLATTEN) NIL NIL)) NIL)) NIL) ("3" (BETA -1) (("3" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|sub_cycle_TCC1| 0 (|sub_cycle_TCC1-2| "" 3790105603 ("" (SKOSIMP*) (("" (TYPEPRED "w!1") (("" (HIDE -4) (("" (INSTALL-REWRITES "subgraphs[T]") (("" (ASSERT) (("" (SKOSIMP*) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL)) SHOSTAK (|sub_cycle| SUBTYPE "mappings.w" "Seq[mappings.T](mappings.G)")) (|sub_cycle_TCC1-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (TYPEPRED "w!1") (("" (HIDE -4) (("" (INSTALL-REWRITES "subgraphs[T]") (("" (ASSERT) (("" (SKOSIMP*) (("" (GRIND) (("" (TYPEPRED "i!1") (("" (REVEAL -3) (("" (INST -1 "i!1") (("" (ASSERT) (("" (REVEAL -4) (("" (EXPAND "subgraph?") (("" (BDDSIMP) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (INST -1 "seq(w!1)(i!1)") (("" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|sub_cycle| SUBTYPE "mappings.w" "Seq[mappings.T](mappings.G)"))) (|sub_cycle| 0 (|sub_cycle-2| |nil| 3393153923 ("" (SKOSIMP*) (("" (EXPAND "cycle?") (("" (FLATTEN) (("" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "1" "length(w!1)-2") (("1" (BDDSIMP) (("1" (EXPAND "pre_circuit?") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "walk?_subgraph[T]") (("1" (INST -1 "G!1" "H!1" "w!1") (("1" (BDDSIMP (-1 -2 -3)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cycle?| CONST-DECL "bool" |cycles| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk?_subgraph| FORMULA-DECL NIL |subgraph_paths| NIL) (|pre_circuit?| CONST-DECL "bool" |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](H!1)" |mappings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) NIL) (|sub_cycle-1| |nil| 3318087528 ("" (SKOSIMP*) (("" (EXPAND "cycle?") (("" (FLATTEN) (("" (BDDSIMP) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (INST -4 "1" "length(w!1)-2") (("1" (BDDSIMP) (("1" (EXPAND "pre_circuit?") (("1" (EXPAND "finseq_appl") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "meng_scaff_defs[T].walk?_subgraph") (("1" (INST -1 "G!1" "H!1" "w!1") (("1" (BDDSIMP (-1 -2 -3)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|exclus_cycl| 0 (|exclus_cycl-2| |nil| 3318711162 ("" (SKOSIMP*) (("" (EXPAND "XOR") (("" (FLATTEN) (("" (IFF) (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "tree_no_circuits") (("1" (INST? -1) (("1" (INST -1 "w!1") (("1" (BDDSIMP) (("1" (HIDE -1 -2) (("1" (EXPAND "cycle?") (("1" (EXPAND "finseq_appl") (("1" (FLATTEN) (("1" (INSTALL-REWRITES "circuits[T]") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "k!1") (("1" (INST -7 "k!1-1" "k!1+1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (EXPAND "cycle?") (("2" (FLATTEN) (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "uniq_paths?(G!1)") (("1" (LEMMA "charact_tree") (("1" (INST? -1) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (EXPAND "uniq_paths?") (("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (CASE "tree_paths[T].dual_paths?(G!1,p!1,q!1)") (("1" (LEMMA "min_dual_exists") (("1" (INST? -1) (("1" (BDDSIMP (-1 -2)) (("1" (HIDE -1) (("1" (SKOSIMP*) (("1" (LEMMA "min_dual_distin") (("1" (INST -1 "G!1" "p!2" "q!2") (("1" (LEMMA "dual_cycle") (("1" (INST -1 "G!1" "p!2" "q!2") (("1" (EXPAND "finseq_appl") (("1" (BDDSIMP (-2 -3)) (("1" (EXPAND "is_min_dual?") (("1" (FLATTEN) (("1" (BDDSIMP (-1 -3 -4)) (("1" (INST 2 "trunc1(p!2) o rev(q!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (LEMMA "graph_complected[T].connected_not_empty") (("2" (INST -1 "G!1") (("2" (BDDSIMP (-1 -6)) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_complected[T].connected_not_empty") (("2" (INST -1 "G!1") (("2" (BDDSIMP (-1 -5)) (("2" (EXPAND "empty?") (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_complected[T].connected_not_empty") (("2" (INST -1 "G!1") (("2" (BDDSIMP (-1 -5)) (("2" (EXPAND "empty?") (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "q!1") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (EXPAND "dual_paths?") (("2" (EXPAND "finseq_appl") (("2" (BDDSIMP) (("1" (INSTALL-REWRITES "paths[T]") (("1" (HIDE -6 3) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "paths[T]") (("2" (HIDE -6 3) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("3" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -3 3) (("3" (INSTALL-REWRITES "paths[T]") (("3" (ASSERT) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (HIDE -3 3) (("4" (INSTALL-REWRITES "paths[T]") (("4" (ASSERT) (("4" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((XOR CONST-DECL "bool" |xor_def| NIL) (|uniq_paths?| CONST-DECL "bool" |mappings| NIL) (|charact_tree| FORMULA-DECL NIL |mappings| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|Path| TYPE-EQ-DECL NIL |paths| NIL) (|dual_paths?| CONST-DECL "bool" |tree_paths| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|Graph| TYPE-EQ-DECL NIL |graphs| NIL) (|min_dual_distin| FORMULA-DECL NIL |tree_paths| NIL) (|dual_cycle| FORMULA-DECL NIL |tree_paths| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_complected| NIL) (|is_min_dual?| CONST-DECL "bool" |tree_paths| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|min_dual_exists| FORMULA-DECL NIL |tree_paths| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|cycle?| CONST-DECL "bool" |cycles| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |mappings| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graphs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|endpoint?| CONST-DECL "bool" |paths| NIL) (|circuit?| CONST-DECL "bool" |circuits| NIL) (|pre_circuit?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|cyclically_reduced?| CONST-DECL "bool" |circuits| NIL) (|reduced?| CONST-DECL "bool" |circuits| NIL) (|reducible?| CONST-DECL "bool" |circuits| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|k!1| SKOLEM-CONST-DECL "posnat" |mappings| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](G!1)" |mappings| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|tree_no_circuits| FORMULA-DECL NIL |tree_circ| NIL)) NIL) (|exclus_cycl-1| |nil| 3318710971 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|deg_gt_1_cycle| 0 (|deg_gt_1_cycle-1| |nil| 3318710926 ("" (SKOSIMP*) (("" (LEMMA "conn_compon") (("" (EXPAND "empty?") (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST? -1) (("" (INST -1 "x!1") (("" (SKOSIMP*) (("" (LEMMA "graph_deg_sum[T].deg_gt_one") (("" (INST -1 "H!1") (("" (CASE "FORALL (v: T): vert(H!1)(v) IMPLIES deg(v, H!1) > 1") (("1" (BDDSIMP (-1 -2)) (("1" (LEMMA "tree_num_iff") (("1" (INST -1 "H!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "exclus_cycl") (("2" (INST -1 "H!1") (("2" (BDDSIMP) (("2" (EXPAND "XOR") (("2" (FLATTEN) (("2" (IFF 1) (("2" (BDDSIMP) (("2" (LEMMA "sub_cycle") (("2" (INST? -1) (("2" (SKOSIMP*) (("2" (INST -1 "w!1") (("2" (INST 3 "w!1") (("1" (BDDSIMP (-1 -3 -6)) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (HIDE-ALL-BUT (-1 -2 -8) -) (("2" (HIDE 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "v!1") (("2" (TYPEPRED "v!1") (("2" (BDDSIMP (-1 -2)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -6 "v!1") (("2" (INST -7 "v!1") (("2" (HIDE -2 -4 -8) (("2" (CASE "vert(G!1)(v!1)") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -3 -4 -5 2 3) (("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conn_compon| FORMULA-DECL NIL |mappings| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|x!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|deg_gt_one| FORMULA-DECL NIL |graph_deg_sum| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (|tree_num_iff| FORMULA-DECL NIL |mappings| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (XOR CONST-DECL "bool" |xor_def| NIL) (|sub_cycle| FORMULA-DECL NIL |mappings| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](H!1)" |mappings| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |mappings| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |graph_deg_sum| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|exclus_cycl| FORMULA-DECL NIL |mappings| NIL) (|v!1| SKOLEM-CONST-DECL "T" |mappings| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |mappings| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL)) NIL)))
