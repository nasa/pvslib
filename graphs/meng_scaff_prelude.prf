(|meng_scaff_prelude| (|line20_TCC1| 0 (|line20_TCC1-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (FLATTEN) NIL NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |meng_scaff_defs| NIL)) NIL (|line20| SUBTYPE "meng_scaff_prelude.s" "(vert(meng_scaff_prelude.G))"))) (|line20_TCC2| 0 (|line20_TCC2-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (FLATTEN) NIL NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |meng_scaff_defs| NIL)) NIL (|line20| SUBTYPE "meng_scaff_prelude.t" "(vert(meng_scaff_prelude.G))"))) (|line20_TCC3| 0 (|line20_TCC3-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "separable?") (("" (EXPAND "in?") (("" (FLATTEN) (("" (EXPAND "disjoint?") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|separable?| CONST-DECL "bool" |sep_sets| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_defs| NIL) (|in?| CONST-DECL "bool" |meng_scaff_defs| NIL)) NIL (|line20| SUBTYPE "meng_scaff_prelude.w1" "{t_1 | booleans.AND(vert(meng_scaff_prelude.G)(t_1), t_1 /= meng_scaff_prelude.t)}"))) (|line20_TCC4| 0 (|line20_TCC4-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (EXPAND "disjoint?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |meng_scaff_defs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_defs| NIL)) NIL (|line20| SUBTYPE "meng_scaff_prelude.w2" "{t_1 | booleans.AND(vert(meng_scaff_prelude.G)(t_1), t_1 /= meng_scaff_prelude.t)}"))) (|line20_TCC5| 0 (|line20_TCC5-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (EXPAND "disjoint?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |meng_scaff_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_defs| NIL)) NIL (|line20| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.P1), 2)" "below[P1`length]"))) (|line20_TCC6| 0 (|line20_TCC6-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|line20| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.P2), 2)" "below[P2`length]"))) (|line20| 0 (|line20-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (CASE "EXISTS (yt: T): vert(path_comp(del_vert(
                      del_vert(G!1,w1!1),w2!1),t!1))(yt) AND yt /= t!1") (("1" (HIDE 1) (("1" (SKOSIMP*) (("1" (CASE "size(MM!1) < size(G!1)") (("1" (EXPAND "induction_step") (("1" (INST - "MM!1") (("1" (ASSERT) (("1" (INST - "s!1" "t!1") (("1" (ASSERT) (("1" (CASE "separable?(MM!1, s!1, t!1)
             AND sep_num(MM!1, s!1, t!1) = 2
             AND vert(MM!1)(s!1) AND vert(MM!1)(t!1)") (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (HIDE -1 -2 -3 -4 -5 -9 -10) (("1" (LEMMA "line19") (("1" (INST?) (("1" (INST-CP -1 "p1!1") (("1" (INST -1 "p2!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (CASE "seq(p1!1)(length(p1!1) - 2) = w2!1") (("1" (ASSERT) (("1" (HIDE -5 1) (("1" (INST 1 "p2!1" "p1!1") (("1" (ASSERT) (("1" (LEMMA "independent?_comm") (("1" (INST - "p1!1" "p2!1") (("1" (ASSERT) (("1" (HIDE -1 -4 -5 -6 -7) (("1" (EXPAND "independent?") (("1" (EXPAND "verts_of") (("1" (SPLIT 1) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (INST - "length(p1!1)-2" "i!1") (("1" (ASSERT) (("1" (TYPEPRED "i!1") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "disjoint?") (("1" (FLATTEN) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (INST - "i!1" "length(p2!1)-2") (("2" (ASSERT) (("2" (EXPAND "path_from?") (("2" (EXPAND "disjoint?") (("2" (FLATTEN) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -5 -6 2 3) (("2" (EXPAND "independent?") (("2" (INST - "length(p1!1)-2" "length(p2!1)-2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (HIDE -5 -6 1) (("2" (INST 1 "p1!1" "p2!1") (("2" (ASSERT) (("2" (SPLIT -4) (("1" (ASSERT) (("1" (EXPAND "verts_of") (("1" (SPLIT 1) (("1" (SKOSIMP*) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "independent?") (("1" (INST - "i!1" "length(p2!1)-2") (("1" (EXPAND "disjoint?") (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "independent?") (("2" (INST - "length(p1!1)-2" "i!1") (("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (EXPAND "path_from?") (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "independent?") (("2" (INST - "length(p1!1)-2" "length(p2!1)-2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "pre20") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (HIDE -2 -4 -8) (("2" (LEMMA "line17") (("2" (INST?) (("2" (EXPAND "H") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (LEMMA "line15ab") (("2" (INST -1 "G!1" "t!1" "s!1" "w1!1" "w2!1") (("2" (REWRITE "separable?_comm") (("2" (REWRITE "dbl_comm") (("2" (REWRITE "sep_num_comm") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (SKOSIMP*) (("1" (CASE-REPLACE "edge?(G!1)(w1!1, t!1)") (("1" (ASSERT) (("1" (LEMMA "line16") (("1" (ASSERT) (("1" (INST - "G!1" "s!1" "t!1" "w2!1" "w1!1") (("1" (ASSERT) (("1" (EXPAND "disjoint?") (("1" (FLATTEN) (("1" (EXPAND "in?") (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST 2 "yt!1") (("1" (EXPAND "H") (("1" (REWRITE "del_vert_comm") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "line16") (("2" (INST - "G!1" "s!1" "t!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (REWRITE "dbl_comm") (("2" (ASSERT) (("2" (EXPAND "in?") (("2" (FLATTEN) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST 3 "yt!1") (("2" (EXPAND "H") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in?") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (REWRITE "dbl_comm") (("3" (HIDE 2 3) (("3" (LEMMA "separates_comm") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in?") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "in?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|line17| FORMULA-DECL NIL |meng_scaff| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|induction_step| CONST-DECL "bool" |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|pre20| FORMULA-DECL NIL |meng_scaff| NIL) (|line19| FORMULA-DECL NIL |meng_scaff| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_defs| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|independent?| CONST-DECL "bool" |ind_paths| NIL) (|independent?_comm| FORMULA-DECL NIL |ind_paths| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|separable?| CONST-DECL "bool" |sep_sets| NIL) (|sep_num| CONST-DECL "nat" |sep_sets| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|line15ab| FORMULA-DECL NIL |meng_scaff| NIL) (|separable?_comm| FORMULA-DECL NIL |sep_set_lems| NIL) (|sep_num_comm| FORMULA-DECL NIL |sep_set_lems| NIL) (|del_vert_comm| FORMULA-DECL NIL |graph_ops| NIL) (|in?| CONST-DECL "bool" |meng_scaff_defs| NIL) (|line16| FORMULA-DECL NIL |meng_scaff| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|separates_comm| FORMULA-DECL NIL |sep_set_lems| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|dbl_comm| FORMULA-DECL NIL |doubletons| |structures|)) NIL)) (|join2_TCC1| 0 (|join2_TCC1-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|join2| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p1), 2)" "nat"))) (|join2_TCC2| 0 (|join2_TCC2-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND* "^" MIN EMPTY_SEQ) (("" (EXPAND "o ") (("" (EXPAND "rev") (("" (TYPEPRED "p2!1") (("" (TYPEPRED "p1!1") (("" (LEMMA "walk_concat") (("" (INST?) (("" (INST -1 "t!1" "p2!1") (("" (ASSERT) (("" (HIDE -3 -5) (("" (EXPAND "o ") (("" (EXPAND "rev") (("" (EXPAND* "^" MIN EMPTY_SEQ) (("" (EXPAND "walk_from?") (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (FLATTEN) (("" (SPLIT +) (("1" (HIDE -4) (("1" (EXPAND "verts_in?") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|Long_walk_from| TYPE-EQ-DECL NIL |meng_scaff_prelude| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|walk_concat| FORMULA-DECL NIL |walks| NIL) (|Walk_from| TYPE-EQ-DECL NIL |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL)) NIL (|join2| SUBTYPE "finite_sequences[meng_scaff_prelude.T].o(finite_sequences[meng_scaff_prelude.T].^(meng_scaff_prelude.p1, (0, (number_fields.-)(length(meng_scaff_prelude.p1), 2))), doubletons[meng_scaff_prelude.T].rev(meng_scaff_prelude.p2))" "Walk_from[meng_scaff_prelude.T](meng_scaff_prelude.G, meng_scaff_prelude.s, meng_scaff_prelude.t)"))) (|path_meng_t| 0 (|path_meng_t-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "from?") (("" (FLATTEN) (("" (EXPAND "path?") (("" (FLATTEN) (("" (EXPAND "finseq_appl") (("" (INST - "i!1" "length(p!1) - 1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (< CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)) NIL)) (|path_H_def_TCC1| 0 (|path_H_def_TCC1-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) (("" (EXPAND* "^" MIN EMPTY_SEQ) (("" (TYPEPRED "j!1") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)) NIL (|path_H_def| SUBTYPE "finite_sequences[meng_scaff_prelude.T].^(meng_scaff_prelude.p, (0, meng_scaff_prelude.j))" "prewalk[T]"))) (|path_H_def| 0 (|path_H_def-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (LEMMA "path_H_W") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "path?") (("" (FLATTEN) (("" (HIDE -2) (("" (EXPAND "H") (("" (EXPAND "walk?") (("" (FLATTEN) (("" (SPLIT +) (("1" (HIDE -2) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (EXPAND "del_verts") (("1" (EXPAND "difference") (("1" (EXPAND "member") (("1" (EXPAND "dbl") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (INST?) (("1" (EXPAND "path_comp") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (HIDE -2) (("1" (EXPAND "del_vert") (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "i!1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -2) (("2" (EXPAND "finseq_appl") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "edge?") (("2" (INST?) (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "del_verts") (("2" (SPLIT 1) (("1" (EXPAND "path_comp") (("1" (EXPAND "subgraph") (("1" (FLATTEN) (("1" (EXPAND "del_vert") (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "dbl") (("2" (SPLIT -1) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (SPLIT -1) (("1" (HIDE -3) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (HIDE -1) (("2" (EXPAND "verts_of") (("2" (EXPAND "finseq_appl") (("2" (HIDE 1) (("2" (SPLIT -1) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|path_H_W| FORMULA-DECL NIL |meng_scaff_defs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |meng_scaff_prelude| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(p!1 ^ (0, j!1)))" |meng_scaff_prelude| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|path_H_ind_TCC1| 0 (|path_H_ind_TCC1-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|path_H_ind| SUBTYPE "meng_scaff_prelude.p1" "Longprewalk[T]"))) (|path_H_ind_TCC2| 0 (|path_H_ind_TCC2-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|path_H_ind| SUBTYPE "meng_scaff_prelude.p2" "Longprewalk[T]"))) (|path_H_ind_TCC3| 0 (|path_H_ind_TCC3-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|path_H_ind| SUBTYPE "0" "below[p1`length]"))) (|path_H_ind_TCC4| 0 (|path_H_ind_TCC4-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|separates| CONST-DECL "bool" |sep_sets| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL)) NIL (|path_H_ind| SUBTYPE "0" "below[p2`length]"))) (|path_H_ind| 0 (|path_H_ind-3| |nil| 3559575114 ("" (SKOSIMP*) (("" (AUTO-REWRITE FINSEQ_APPL) (("" (EXPAND "independent?") (("" (SKOSIMP*) (("" (EXPAND "separates") (("" (FLATTEN) (("" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                           p1!1^(0,i!1), s!1, seq(p1!1)(i!1))") (("1" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                             p2!1^(0,j!1), t!1, seq(p2!1)(j!1))") (("1" (NAME-REPLACE "DV" "del_verts(G!1, dbl(w1!1, w2!1))") (("1" (INST + "join2(DV,s!1,t!1,seq(p2!1)(j!1),p1!1^(0,i!1),p2!1^(0,j!1))") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND* "^" MIN EMPTY_SEQ) NIL NIL) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "j!1" "trunc1(p2!1)" "t!1" "w1!1" "w2!1") (("3" (ASSERT) (("3" (EXPAND "trunc1" -1) (("3" (EXPAND* "^" MIN EMPTY_SEQ) (("3" (ASSERT) (("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND MIN 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "i!1" "trunc1(p1!1)" "s!1" "w1!1" "w2!1") (("3" (ASSERT) (("3" (EXPAND "trunc1") (("3" (EXPAND* "^" MIN EMPTY_SEQ) (("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND* "^" MIN EMPTY_SEQ) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|t!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |meng_scaff_prelude| NIL) (|p2!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (DV SKOLEM-CONST-DECL "graph[T]" |meng_scaff_prelude| NIL) (|s!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (|i!1| SKOLEM-CONST-DECL "nat" |meng_scaff_prelude| NIL) (|p1!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|Walk_from| TYPE-EQ-DECL NIL |walks| NIL) (|Long_walk_from| TYPE-EQ-DECL NIL |meng_scaff_prelude| NIL) (|join2| CONST-DECL "Walk_from(G, s, t)" |meng_scaff_prelude| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|path_H_def| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|difference| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|separates| CONST-DECL "bool" |sep_sets| NIL) (|independent?| CONST-DECL "bool" |ind_paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL) (|path_H_ind-2| |nil| 3559575027 ("" (SKOSIMP*) (("" (AUTO-REWRITE FINSEQ_APPL) (("" (EXPAND "independent?") (("" (SKOSIMP*) (("" (EXPAND "separates") (("" (FLATTEN) (("" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                           p1!1^(0,i!1), s!1, seq(p1!1)(i!1))") (("1" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                             p2!1^(0,j!1), t!1, seq(p2!1)(j!1))") (("1" (NAME-REPLACE "DV" "del_verts(G!1, dbl(w1!1, w2!1))") (("1" (INST + "join2(DV,s!1,t!1,seq(p2!1)(j!1),p1!1^(0,i!1),p2!1^(0,j!1))") (("1" (ASSERT) NIL) ("2" (ASSERT) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL))))) ("3" (ASSERT) (("3" (EXPAND "^" 1) (("3" (PROPAX) NIL))))) ("4" (ASSERT) NIL) ("5" (ASSERT) NIL))))) ("2" (HIDE -1 4) (("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL))) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (PROPAX) NIL))) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "j!1" "trunc1(p2!1)" "t!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (EXPAND "trunc1" -1) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL))))))) ("2" (ASSERT) NIL))))))))))) ("3" (EXPAND "^" 1) (("3" (ASSERT) NIL))) ("4" (ASSERT) NIL))) ("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL))) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (PROPAX) NIL))) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "i!1" "trunc1(p1!1)" "s!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL))))))) ("2" (ASSERT) NIL))))))))) ("3" (EXPAND* "^" MIN EMPTY_SEQ) (("3" (ASSERT) NIL))) ("4" (ASSERT) NIL)))))))))))))) NIL) NIL NIL) (|path_H_ind-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "independent?") (("" (SKOSIMP*) (("" (EXPAND "separates") (("" (FLATTEN) (("" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                    p1!1^(0,i!1), s!1, seq(p1!1)(i!1))") (("1" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                    p2!1^(0,j!1), t!1, seq(p2!1)(j!1))") (("1" (NAME-REPLACE "DV" "del_verts(G!1, dbl(w1!1, w2!1))") (("1" (INST + "join2(DV,s!1,t!1,seq(p2!1)(j!1),p1!1^(0,i!1),p2!1^(0,j!1))") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (EXPAND "^" 1) (("3" (PROPAX) NIL NIL)) NIL)) NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "j!1" "trunc1(p2!1)" "t!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (EXPAND "trunc1" -1) (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (ASSERT) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (PROPAX) NIL NIL)) NIL) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "i!1" "trunc1(p1!1)" "s!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND* "^" MIN EMPTY_SEQ) (("3" (ASSERT) NIL NIL)) NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|path_comps_ind3_TCC1| 0 (|path_comps_ind3_TCC1-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL (|path_comps_ind3| SUBTYPE "meng_scaff_prelude.p1" "Longprewalk[T]"))) (|path_comps_ind3_TCC2| 0 (|path_comps_ind3_TCC2-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|path_comps_ind3| SUBTYPE "walks[meng_scaff_prelude.T].trunc1(meng_scaff_prelude.p1)" "Longprewalk[T]"))) (|path_comps_ind3_TCC3| 0 (|path_comps_ind3_TCC3-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|path_comps_ind3| SUBTYPE "meng_scaff_prelude.p2" "Longprewalk[T]"))) (|path_comps_ind3_TCC4| 0 (|path_comps_ind3_TCC4-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|path_comps_ind3| SUBTYPE "walks[meng_scaff_prelude.T].trunc1(meng_scaff_prelude.p2)" "Longprewalk[T]"))) (|path_comps_ind3_TCC5| 0 (|path_comps_ind3_TCC5-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|path_comps_ind3| SUBTYPE "0" "below[p1`length]"))) (|path_comps_ind3_TCC6| 0 (|path_comps_ind3_TCC6-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|path_comps_ind3| SUBTYPE "0" "below[p2`length]"))) (|path_comps_ind3| 0 (|path_comps_ind3-2| "" 3790105478 ("" (SKOSIMP*) (("" (LEMMA "path_H_ind") (("" (INST?) (("" (INST -1 "trunc1(p2!1)" "t!1") (("" (ASSERT) (("" (HIDE -3 -4 -5 2) (("" (EXPAND "trunc1") (("" (EXPAND* "^" MIN EMPTY_SEQ) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_H_ind| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (>= CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL)) SHOSTAK) (|path_comps_ind3-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (LEMMA "path_H_ind") (("" (INST?) (("1" (INST -1 "trunc1(p2!1)" "t!1") (("1" (ASSERT) (("1" (HIDE -3 -4 -5 2) (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|path_H_trunc_TCC1| 0 (|path_H_trunc_TCC1-1| |nil| 3560107624 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|path_H_trunc| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p), 2)" "below[length(p)]"))) (|path_H_trunc_TCC2| 0 (|path_H_trunc_TCC2-1| |nil| 3560107624 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL)) NIL (|path_H_trunc| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p), 1)" "below[length(p)]"))) (|path_H_trunc| 0 (|path_H_trunc-1| |nil| 3560107625 ("" (SKOSIMP*) (("" (LEMMA "path_comp_in") (("" (INST?) (("" (ASSERT) (("" (LEMMA "path_H_W") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (EXPAND "path_from?") (("" (HIDE -3) (("" (EXPAND "path?") (("" (EXPAND "finseq_appl") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "walk?") (("1" (EXPAND "finseq_appl") (("1" (SPLIT +) (("1" (FLATTEN) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (HIDE -2 -3) (("1" (INST?) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (TYPEPRED "i!1") (("2" (CASE-REPLACE "i!1 = length(p!1) - 1") (("1" (HIDE -1 -2 -3 1) (("1" (TYPEPRED "G!1") (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (INST?) (("1" (ASSERT) (("1" (INST?) (("1" (EXPAND "dbl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKOSIMP*) (("2" (HIDE -4) (("2" (INST -3 "n!1") (("2" (ASSERT) (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST - "i!1" "j!1") (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min") (("2" (ASSERT) (("2" (HIDE -2) (("2" (TYPEPRED "j!1") (("2" (CASE-REPLACE "j!1 = length(p!1) - 1") (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -6) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (HIDE 4) (("2" (EXPAND "verts_of") (("2" (EXPAND "finseq_appl") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND* "^" "min") (("3" (ASSERT) (("3" (CASE "i!1 = length(p!1) - 1") (("1" (REPLACE -1) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -6) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (INST 3 "j!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|path_comp_in| FORMULA-DECL NIL |meng_scaff_defs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(p!1))" |meng_scaff_prelude| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(p!1))" |meng_scaff_prelude| NIL) (|j!1| SKOLEM-CONST-DECL "below(length(p!1))" |meng_scaff_prelude| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|path_H_W| FORMULA-DECL NIL |meng_scaff_defs| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (>= CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|meng_last_TCC1| 0 (|meng_last_TCC1-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|meng_last| SUBTYPE "meng_scaff_prelude.w1" "{t_1 | booleans.AND(vert(meng_scaff_prelude.G)(t_1), t_1 /= meng_scaff_prelude.t)}"))) (|meng_last_TCC2| 0 (|meng_last_TCC2-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|meng_last| SUBTYPE "meng_scaff_prelude.w2" "{t_1 | booleans.AND(vert(meng_scaff_prelude.G)(t_1), t_1 /= meng_scaff_prelude.t)}"))) (|meng_last_TCC3| 0 (|meng_last_TCC3-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|union| CONST-DECL "set" |sets| NIL) (|incident| CONST-DECL "finite_set[doubleton[T]]" |meng_scaff_defs| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|meng| CONST-DECL "graph[T]" |meng_scaff_defs| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|meng_last| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p), 3)" "below[p`length]"))) (|meng_last_TCC4| 0 (|meng_last_TCC4-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|union| CONST-DECL "set" |sets| NIL) (|incident| CONST-DECL "finite_set[doubleton[T]]" |meng_scaff_defs| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|meng| CONST-DECL "graph[T]" |meng_scaff_defs| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|meng_last| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p), 2)" "below[p`length]"))) (|meng_last| 0 (|meng_last-2| "" 3790105482 ("" (SKOSIMP*) (("" (LEMMA "path_meng_t") (("" (INST?) (("" (ASSERT) (("" (HIDE -1) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (HIDE -7 -8) (("" (EXPAND "path?") (("" (FLATTEN) (("" (HIDE -7) (("" (EXPAND "walk?") (("" (FLATTEN) (("" (EXPAND "finseq_appl") (("" (INST?) (("" (ASSERT) (("" (HIDE -6) (("" (EXPAND "edge?") (("" (FLATTEN) (("" (ASSERT) (("" (EXPAND "meng") (("" (EXPAND "union") (("" (EXPAND "add") (("" (EXPAND "member") (("" (SPLIT -) (("1" (ASSERT) (("1" (LEMMA "dbl_eq") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (REVEAL -7) (("1" (SPLIT -) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dbl_eq") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -7) (("2" (SPLIT -) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "H") (("3" (EXPAND "path_comp") (("3" (EXPAND "subgraph") (("3" (FLATTEN) (("3" (HIDE -2) (("3" (EXPAND "del_vert") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "incident") (("4" (PROPAX) NIL NIL)) NIL) ("5" (ASSERT) (("5" (EXPAND "incident") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_meng_t| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|union| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|incident| CONST-DECL "finite_set[doubleton[T]]" |meng_scaff_defs| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|dbl_eq| FORMULA-DECL NIL |doubletons| |structures|) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|meng| CONST-DECL "graph[T]" |meng_scaff_defs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL)) SHOSTAK) (|meng_last-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (LEMMA "path_meng_t") (("" (INST?) (("1" (ASSERT) (("1" (ASSERT) (("1" (HIDE -1) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (HIDE -7 -8) (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (HIDE -7) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -6) (("1" (EXPAND "edge?") (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "meng") (("1" (EXPAND "union") (("1" (EXPAND "add") (("1" (EXPAND "member") (("1" (SPLIT -) (("1" (ASSERT) (("1" (LEMMA "dbl_eq") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (REVEAL -7) (("1" (SPLIT -) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "dbl_eq") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -2) (("2" (REVEAL -7) (("2" (SPLIT -) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -1) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "H") (("3" (EXPAND "path_comp") (("3" (EXPAND "subgraph") (("3" (FLATTEN) (("3" (HIDE -2) (("3" (EXPAND "del_vert") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "incident") (("4" (ASSERT) (("4" (SKOSIMP*) NIL NIL)) NIL)) NIL) ("5" (ASSERT) (("5" (EXPAND "incident") (("5" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL)) (|ind_verts_W_TCC1| 0 (|ind_verts_W_TCC1-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|ind_verts_W| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p1), 2)" "below[p1`length]"))) (|ind_verts_W_TCC2| 0 (|ind_verts_W_TCC2-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|ind_verts_W| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p2), 2)" "below[p2`length]"))) (|ind_verts_W| 0 (|ind_verts_W-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "from?") (("" (FLATTEN) (("" (EXPAND "independent?") (("" (SPLIT +) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (INST - "i!1" "length(p2!1) - 2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_of") (("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (INST - "length(p1!1) - 2" "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|independent?| CONST-DECL "bool" |ind_paths| NIL) (|p1!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|p2!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL)) (|ind_verts_w_TCC1| 0 (|ind_verts_w_TCC1-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|ind_verts_w| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p1), 2)" "below[p1`length]"))) (|ind_verts_w_TCC2| 0 (|ind_verts_w_TCC2-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|ind_verts_w| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p2), 2)" "below[p2`length]"))) (|ind_verts_w| 0 (|ind_verts_w-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (EXPAND "from?") (("" (FLATTEN) (("" (EXPAND "independent?") (("" (SPLIT +) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (SKOSIMP*) (("1" (INST - "i!1" "length(p2!1) - 2") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "verts_of") (("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (INST - "length(p1!1) - 2" "i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|independent?| CONST-DECL "bool" |ind_paths| NIL) (|p1!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|p2!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL)) (|path_meng_in_TCC1| 0 (|path_meng_in_TCC1-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|path_meng_in| SUBTYPE "(number_fields.-)(length(meng_scaff_prelude.p), 2)" "below[p`length]"))) (|path_meng_in_TCC2| 0 (|path_meng_in_TCC2-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|path_meng_in| SUBTYPE "meng_scaff_prelude.p" "Longprewalk[T]"))) (|path_meng_in_TCC3| 0 (|path_meng_in_TCC3-1| |nil| 3308649220 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|union| CONST-DECL "set" |sets| NIL) (|incident| CONST-DECL "finite_set[doubleton[T]]" |meng_scaff_defs| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|meng| CONST-DECL "graph[T]" |meng_scaff_defs| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|path_comp| CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|path_verts| CONST-DECL "set[T]" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL)) NIL (|path_meng_in| SUBTYPE "walks[meng_scaff_prelude.T].trunc1(meng_scaff_prelude.p)" "Longprewalk[T]"))) (|path_meng_in| 0 (|path_meng_in-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "path?") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (ASSERT) (("1" (HIDE -8) (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (EXPAND "meng") (("1" (EXPAND "add") (("1" (EXPAND "member") (("1" (SPLIT -7) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (INST - "i!1" "length(p!1) - 1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SPLIT -10) (("1" (FLATTEN) (("1" (INST - "i!1" "length(p!1) - 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "verts_of") (("2" (EXPAND "finseq_appl") (("2" (INST + "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SPLIT -10) (("1" (FLATTEN) (("1" (EXPAND "verts_of") (("1" (INST + "i!1") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST - "i!1" "length(p!1) - 2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "finseq_appl") (("2" (EXPAND "trunc1") (("2" (SKOSIMP*) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -7) (("2" (EXPAND "meng") (("2" (EXPAND "edge?") (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "union") (("2" (EXPAND "add") (("2" (EXPAND "member") (("2" (SPLIT -7) (("1" (LEMMA "dbl_eq") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (INST - "1 + n!1" "length(p!1) - 1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST - "n!1" "length(p!1) - 1") (("2" (ASSERT) (("2" (EXPAND "from?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (LEMMA "dbl_eq") (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -2) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (INST - "1 + n!1" "length(p!1) - 1") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST - "n!1" "length(p!1) - 1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "incident") (("3" (SKOSIMP*) (("3" (HIDE -1) (("3" (LEMMA "dbl_eq") (("3" (INST?) (("3" (ASSERT) (("3" (HIDE -2) (("3" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -12) (("1" (FLATTEN) (("1" (INST - "n!1" "length(p!1) - 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "verts_of") (("2" (INST + "n!1") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -12) (("1" (FLATTEN) (("1" (INST - "1 + n!1" "length(p!1) - 2") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "verts_of") (("2" (INST + "1 + n!1") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "incident") (("4" (SKOSIMP*) (("4" (HIDE -1) (("4" (LEMMA "dbl_eq") (("4" (INST?) (("4" (ASSERT) (("4" (HIDE -2) (("4" (EXPAND "from?") (("4" (FLATTEN) (("4" (GROUND) (("1" (EXPAND "verts_of") (("1" (EXPAND "finseq_appl") (("1" (INST + "n!1") NIL NIL)) NIL)) NIL) ("2" (INST - "n!1" "length(p!1) - 2") (("2" (ASSERT) NIL NIL)) NIL) ("3" (EXPAND "verts_of") (("3" (EXPAND "finseq_appl") (("3" (INST + "1 + n!1") NIL NIL)) NIL)) NIL) ("4" (INST - "1 + n!1" "length(p!1) - 2") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "finseq_appl") (("2" (TYPEPRED "i!1") (("2" (TYPEPRED "j!1") (("2" (HIDE -9 -11 -12) (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) (("2" (INST - "i!1" "j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path?| CONST-DECL "bool" |paths| NIL) (|union| CONST-DECL "set" |sets| NIL) (|incident| CONST-DECL "finite_set[doubleton[T]]" |meng_scaff_defs| NIL) (|dbl_eq| FORMULA-DECL NIL |doubletons| |structures|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|meng| CONST-DECL "graph[T]" |meng_scaff_defs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|join2_lem_TCC1| 0 (|join2_lem_TCC1-2| "" 3758990329 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) SHOSTAK (|join2_lem| SUBTYPE "meng_scaff_prelude.p1" "Longprewalk[T]")) (|join2_lem_TCC1-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) NIL NIL (|join2_lem| SUBTYPE "meng_scaff_prelude.p1" "Longprewalk[T]"))) (|join2_lem_TCC2| 0 (|join2_lem_TCC2-2| "" 3758990336 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) SHOSTAK (|join2_lem| SUBTYPE "meng_scaff_prelude.p2" "Longprewalk[T]")) (|join2_lem_TCC2-1| |nil| 3308649220 ("" (ASSERT) (("" (SKOSIMP*) (("" (ASSERT) (("" (LEMMA "path_from_l") (("" (HIDE -2) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|join2_lem| SUBTYPE "meng_scaff_prelude.p2" "Longprewalk[T]"))) (|join2_lem_TCC3| 0 (|join2_lem_TCC3-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) (("" (EXPAND "path_from?") (("" (EXPAND "walk_from?") (("" (EXPAND "from?") (("" (EXPAND "path?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|path_from_l| FORMULA-DECL NIL |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|join2_lem| SUBTYPE "meng_scaff_prelude.p1" "Long_walk_from(meng_scaff_prelude.G, meng_scaff_prelude.s, meng_scaff_prelude.v)"))) (|join2_lem_TCC4| 0 (|join2_lem_TCC4-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (HIDE -1 -3) (("" (EXPAND "path_from?") (("" (EXPAND "path?") (("" (EXPAND "from?") (("" (EXPAND "walk_from?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL)) NIL (|join2_lem| SUBTYPE "meng_scaff_prelude.p2" "Walk_from[meng_scaff_prelude.T](meng_scaff_prelude.G, meng_scaff_prelude.t, meng_scaff_prelude.v)"))) (|join2_lem| 0 (|join2_lem-5| "" 3884727018 ("" (SKOSIMP*) (("" (AUTO-REWRITE "finseq_appl") (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) (("" (LEMMA "path_from_l") (("" (INST -1 "G!1" "p2!1" "t!1" "v!1") (("" (ASSERT) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "join2") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7 -10) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (EXPAND "edge?") (("2" (CASE "n!1 < length(p1!1) - 1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -7 "length(p1!1) + length(p2!1) - 3 - n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "dbl_comm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7) (("2" (EXPAND "o ") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (ASSERT) (("2" (EXPAND "rev") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -6 "i!1" "j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (CASE "j!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -11) (("1" (REPLACE -8 * RL) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -8) (("2" (INST -8 "i!1" "length(p1!1) + length(p2!1) - 2 - j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" "min" "empty_seq") (("1" (HIDE -6 -8) (("1" (EXPAND "disjoint?") (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" "min" "empty_seq") (("1" (CASE "i!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -9) (("1" (REPLACE -7 * RL) (("1" (REVEAL -2) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "j!1" "length(p1!1) + length(p2!1) - 2 - i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "length(p1!1) + length(p2!1) - 2 - i!1" "length(p1!1) + length(p2!1) - 2 - j!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "j!1") (("2" (EXPAND* "o" "^" "min" "empty_seq" "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED "i!1") (("3" (EXPAND* "o" "^" "min" "empty_seq" "rev") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?") (("2" (EXPAND "join2") (("2" (EXPAND "o ") (("2" (FLATTEN) (("2" (EXPAND* "^" "min" "empty_seq") (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|join2_lem-4| "" 3790105490 ("" (SKOSIMP*) (("" (AUTO-REWRITE FINSEQ_APPL) (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) (("" (LEMMA "path_from_l") (("" (INST -1 "G!1" "p2!1" "t!1" "v!1") (("" (ASSERT) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "join2") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7 -10) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "edge?") (("2" (CASE "n!1 < length(p1!1) - 1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -7 "length(p1!1) + length(p2!1) - 3 - n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "dbl_comm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7) (("2" (EXPAND "o ") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) (("2" (EXPAND "rev") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -6 "i!1" "j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (CASE "j!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -11) (("1" (REPLACE -8 * RL) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -8) (("2" (INST -8 "i!1" "length(p1!1) + length(p2!1) - 2 - j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (HIDE -6 -8) (("1" (EXPAND "disjoint?") (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (CASE "i!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -9) (("1" (REPLACE -7 * RL) (("1" (REVEAL -2) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "j!1" "length(p1!1) + length(p2!1) - 2 - i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "length(p1!1) + length(p2!1) - 2 - i!1" "length(p1!1) + length(p2!1) - 2 - j!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED J!1) (("2" (EXPAND* O ^ MIN EMPTY_SEQ REV) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED I!1) (("3" (EXPAND* O ^ MIN EMPTY_SEQ REV) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?") (("2" (EXPAND "join2") (("2" (EXPAND "o ") (("2" (FLATTEN) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|join2| CONST-DECL "Walk_from(G, s, t)" |meng_scaff_prelude| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_prelude| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(p1!1 ^ (0, length(p1!1) - 2) o rev(p2!1)))" |meng_scaff_prelude| NIL) (|p2!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|p1!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|j!1| SKOLEM-CONST-DECL "below(length(p1!1 ^ (0, length(p1!1) - 2) o rev(p2!1)))" |meng_scaff_prelude| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|dbl_comm| FORMULA-DECL NIL |doubletons| |structures|) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|path_from_l| FORMULA-DECL NIL |paths| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL)) SHOSTAK) (|join2_lem-3| |nil| 3559576863 ("" (SKOSIMP*) (("" (AUTO-REWRITE FINSEQ_APPL) (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) (("" (LEMMA "path_from_l") (("" (INST -1 "G!1" "p2!1" "t!1" "v!1") (("" (ASSERT) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "join2") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7 -10) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "edge?") (("2" (CASE "n!1 < length(p1!1) - 1") (("1" (ASSERT) (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT 1) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -7 "length(p1!1) + length(p2!1) - 3 - n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "dbl_comm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7) (("2" (EXPAND "o ") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) (("2" (EXPAND "rev") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -6 "i!1" "j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (CASE "j!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -11) (("1" (REPLACE -8 * RL) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -6 -8) (("2" (INST -8 "i!1" "length(p1!1) + length(p2!1) - 2 - j!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LIFT-IF) (("3" (PROP) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (HIDE -6 -8) (("1" (EXPAND "disjoint?") (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (CASE "i!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -9) (("1" (REPLACE -7 * RL) (("1" (REVEAL -2) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "j!1" "length(p1!1) + length(p2!1) - 2 - i!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "length(p1!1) + length(p2!1) - 2 - i!1" "length(p1!1) + length(p2!1) - 2 - j!1") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED J!1) (("2" (EXPAND* O ^ MIN EMPTY_SEQ REV) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (TYPEPRED I!1) (("3" (EXPAND* O ^ MIN EMPTY_SEQ REV) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?") (("2" (EXPAND "join2") (("2" (EXPAND "o ") (("2" (FLATTEN) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|join2_lem-2| |nil| 3559576115 ("" (SKOSIMP*) (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) (("" (LEMMA "path_from_l") (("" (INST -1 "G!1" "p2!1" "t!1" "v!1") (("" (ASSERT) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "join2") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (GROUND) (("1" (INST?) NIL) ("2" (INST? -6) NIL))))))))))))))))) ("2" (SKOSIMP*) (("2" (HIDE -4 -7 -10) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "edge?") (("2" (CASE "n!1 < length(p1!1) - 1") (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE-REPLACE "n!1 = length(p1!1) - 1") (("1" (ASSERT) NIL) ("2" (LIFT-IF) (("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) (("2" (INST -7 "length(p1!1) + length(p2!1) - 3 - n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "dbl_comm") NIL))))))))))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (HIDE -4 -7) (("2" (EXPAND "o ") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -6 "i!1" "j!1") (("1" (ASSERT) NIL))) ("2" (TYPEPRED "j!1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (CASE "j!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -11) (("1" (REPLACE -8 * RL) (("1" (INST?) (("1" (INST -6 "length(p1!1) -1") (("1" (ASSERT) NIL))))))))))))))))))) ("2" (ASSERT) (("2" (INST?) (("2" (HIDE -6 -8) (("2" (INST?) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("3" (CASE "j!1 < length(p1!1) - 1") (("1" (ASSERT) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (HIDE -6 -8) (("1" (EXPAND "disjoint?") (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (CASE "i!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -9) (("1" (REPLACE -7 * RL) (("1" (REVEAL -2) (("1" (INST?) (("1" (INST -1 "j!1") (("1" (ASSERT) NIL))))))))))))))))))))) ("2" (INST?) (("2" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (HIDE -4 -8) (("2" (INST?) (("1" (INST -5 "length(p1!1) + length(p2!1) - 2 - j!1") (("1" (ASSERT) NIL) ("2" (ASSERT) (("2" (TYPEPRED "j!1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) (("2" (TYPEPRED "i!1") (("2" (EXPAND "o ") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "from?") (("2" (EXPAND "join2") (("2" (EXPAND "o ") (("2" (FLATTEN) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (ASSERT) NIL)))))))))))))))))))))))))))))))) NIL) NIL NIL) (|join2_lem-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (LEMMA "path_from_l") (("" (INST?) (("" (ASSERT) (("" (LEMMA "path_from_l") (("" (INST -1 "G!1" "p2!1" "t!1" "v!1") (("" (ASSERT) (("" (EXPAND "path_from?") (("" (FLATTEN) (("" (SPLIT +) (("1" (EXPAND "join2") (("1" (EXPAND "path?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (SPLIT +) (("1" (HIDE -4 -7) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST? -6) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7 -10) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "edge?") (("2" (CASE "n!1 < length(p1!1) - 1") (("1" (INST?) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE-REPLACE "n!1 = length(p1!1) - 1") (("1" (ASSERT) NIL NIL) ("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST -7 "length(p1!1) + length(p2!1) - 3 - n!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) (("2" (REWRITE "dbl_comm") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (HIDE -4 -7) (("2" (EXPAND "o ") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (LIFT-IF) (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST -6 "i!1" "j!1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "j!1") (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (CASE "j!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -11) (("1" (REPLACE -8 * RL) (("1" (INST?) (("1" (INST -6 "length(p1!1) -1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INST?) (("2" (HIDE -6 -8) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (CASE "j!1 < length(p1!1) - 1") (("1" (ASSERT) (("1" (TYPEPRED "i!1") (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (EXPAND* "^" MIN EMPTY_SEQ) (("1" (HIDE -6 -8) (("1" (EXPAND "disjoint?") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (CASE "i!1 = length(p1!1) - 1") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (EXPAND "from?") (("1" (FLATTEN) (("1" (REPLACE -9) (("1" (REPLACE -7 * RL) (("1" (REVEAL -2) (("1" (INST?) (("1" (INST -1 "j!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "disjoint?") (("2" (HIDE -4 -8) (("2" (INST?) (("1" (INST -5 "length(p1!1) + length(p2!1) - 2 - j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (TYPEPRED "j!1") (("2" (EXPAND "^") (("2" (EXPAND "o ") (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (TYPEPRED "i!1") (("2" (EXPAND "o ") (("2" (EXPAND "^") (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?") (("2" (EXPAND "join2") (("2" (EXPAND "o ") (("2" (FLATTEN) (("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|path_from_to_walk_from| 0 (|path_from_to_walk_from-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "path_from?") (("" (EXPAND "walk_from?") (("" (EXPAND "from?") (("" (EXPAND "path?") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|path_from?| CONST-DECL "bool" |paths| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL)) NIL)) (|paths_H_disj_TCC1| 0 (|paths_H_disj_TCC1-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|paths_H_disj| SUBTYPE "0" "below[p1`length]"))) (|paths_H_disj_TCC2| 0 (|paths_H_disj_TCC2-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (ASSERT) NIL NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL)) NIL (|paths_H_disj| SUBTYPE "0" "below[p2`length]"))) (|paths_H_disj| 0 (|paths_H_disj-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "disjoint?") (("" (SKOSIMP*) (("" (EXPAND "separates") (("" (FLATTEN) (("" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                           p1!1^(0,i!1), s!1, seq(p1!1)(i!1))") (("1" (CASE "walk_from?[T](del_verts[T](G!1, dbl[T](w1!1, w2!1)),
                             p2!1^(0,j!1), t!1, seq(p2!1)(j!1))") (("1" (HIDE -3 -4) (("1" (NAME-REPLACE "DV" "del_verts(G!1, dbl(w1!1, w2!1))") (("1" (CASE-REPLACE "i!1 = 0") (("1" (REPLACE -4) (("1" (REPLACE -8 * RL) (("1" (INST + "rev(p2!1 ^ (0, j!1))") (("1" (HIDE -3) (("1" (EXPAND "walk_from?") (("1" (FLATTEN) (("1" (LEMMA "walk?_rev") (("1" (INST -1 "DV" "p2!1 ^ (0, j!1)") (("1" (ASSERT) (("1" (EXPAND "^" +) (("1" (EXPAND "min" +) (("1" (EXPAND "rev") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (EXPAND "rev") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST + "join2(DV,s!1,t!1,seq(p2!1)(j!1),p1!1^(0,i!1),p2!1^(0,j!1))") (("1" (TYPEPRED "join2(DV, s!1, t!1, seq(p2!1)(j!1),
                                 p1!1 ^ (0, i!1), p2!1 ^ (0, j!1))") (("1" (PROPAX) NIL NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (EXPAND "walk_from?") (("2" (SPLIT 1) (("1" (EXPAND* "^" MIN EMPTY_SEQ) NIL NIL) ("2" (EXPAND* "^" MIN EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL) ("3" (LEMMA "path_H_def") (("3" (INST -1 "G!1" "j!1" "p2!1" "t!1" "w1!1" "w2!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND "min" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 4) (("2" (LEMMA "path_H_def") (("2" (INST -1 "G!1" "i!1" "p1!1" "s!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (EXPAND "walk_from?") (("2" (EXPAND "^" 1) (("2" (EXPAND "min" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (EXPAND "min" 1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|disjoint?| CONST-DECL "bool" |meng_scaff_prelude| NIL) (|separates| CONST-DECL "bool" |sep_sets| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|path_H_def| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk?_rev| FORMULA-DECL NIL |walks| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|p2!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |meng_scaff_prelude| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|join2| CONST-DECL "Walk_from(G, s, t)" |meng_scaff_prelude| NIL) (|Long_walk_from| TYPE-EQ-DECL NIL |meng_scaff_prelude| NIL) (|Walk_from| TYPE-EQ-DECL NIL |walks| NIL) (|p1!1| SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|i!1| SKOLEM-CONST-DECL "nat" |meng_scaff_prelude| NIL) (|s!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (DV SKOLEM-CONST-DECL "graph[T]" |meng_scaff_prelude| NIL) (|t!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL)) NIL)) (|prelude| 0 (|prelude-1| |nil| 3308649220 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (EXPAND "disjoint?") (("" (FLATTEN) (("" (LEMMA "line20") (("" (INST -1 "G!1" "meng(G!1, s!1, t!1, w1!1, w2!1)" "s!1" "t!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (EXPAND "in?") (("1" (EXPAND "disjoint?") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (HIDE 1 2) (("1" (LEMMA "line20") (("1" (INST -1 "G!1" "meng(G!1, t!1, s!1, w1!1, w2!1)" "t!1" "s!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (REWRITE "separable?_comm") (("1" (EXPAND "in?") (("1" (EXPAND "disjoint?") (("1" (REWRITE "sep_num_comm") (("1" (ASSERT) (("1" (REWRITE "separates_comm") (("1" (SPLIT -1) (("1" (SKOSIMP*) (("1" (HIDE 1 2) (("1" (HIDE -15 -16 -17 -18 7 8) (("1" (NAME "HS" "H(G!1, s!1, w1!1, w2!1)") (("1" (NAME "HT" "H(G!1, t!1, w1!1, w2!1)") (("1" (CASE "path?(HS,trunc1(trunc1(P1!1))) AND from?(trunc1(P1!1),s!1,w1!1)") (("1" (CASE "path?(HS,trunc1(trunc1(P2!1))) AND from?(trunc1(P2!1),s!1,w2!1)") (("1" (CASE "path?(HT,trunc1(trunc1(P1!2))) AND from?(trunc1(P1!2),t!1,w1!1)") (("1" (CASE "path?(HT,trunc1(trunc1(P2!2))) AND from?(trunc1(P2!2),t!1,w2!1)") (("1" (FLATTEN) (("1" (CASE "path_from?[T](G!1, trunc1(P1!1), s!1, w1!1) AND
                                  path_from?[T](G!1, trunc1(P1!2), t!1, w1!1)") (("1" (FLATTEN) (("1" (NAME "Rw1" "join2(G!1,s!1,t!1,w1!1,trunc1(P1!1),trunc1(P1!2))") (("1" (CASE "disjoint?(trunc1(trunc1(P1!1)),trunc1(trunc1(P1!2)))") (("1" (LEMMA "join2_lem") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -3) (("1" (CASE "path_from?[T](G!1, trunc1(P2!1), s!1, w2!1) AND
                                        path_from?[T](G!1, trunc1(P2!2), t!1, w2!1)") (("1" (FLATTEN) (("1" (CASE "disjoint?(trunc1(trunc1(P2!1)),trunc1(trunc1(P2!2)))") (("1" (LEMMA "join2_lem") (("1" (INST -1 "G!1" "trunc1(P2!1)" "trunc1(P2!2)" "s!1" "t!1" "w2!1") (("1" (ASSERT) (("1" (NAME "Rw2" "join2(G!1,s!1,t!1,w2!1,trunc1(P2!1),trunc1(P2!2))") (("1" (REPLACE -1) (("1" (HIDE -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -28 -30) (("1" (CASE "independent?(Rw1,Rw2)") (("1" (CASE "Rw1 /= Rw2") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "path_from?") (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -2 -3 -4 -5 -6 -7 -8 -9 -10) (("1" (HIDE -2 -3 -4 -5 -8 -9 -10) (("1" (LEMMA "independent?_comm") (("1" (INST -1 "Rw1" "Rw2") (("1" (ASSERT) (("1" (REVEAL -10 -11 -15 -16) (("1" (INST 8 "Rw1" "Rw2") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "independent_ne") (("2" (INST?) (("2" (CASE "independent?(Rw1, Rw2)") (("1" (ASSERT) (("1" (REPLACE -10 * RL) (("1" (EXPAND "join2" 1) (("1" (EXPAND "o ") (("1" (EXPAND "trunc1" 1) (("1" (EXPAND* "^" "min") (("1" (EXPAND "rev") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -4 -5 -9 -10 8) (("2" (REPLACE -1 * RL) (("2" (HIDE -1) (("2" (REPLACE -5 * RL) (("2" (HIDE -5) (("2" (HIDE -1 -2 -3 -4) (("2" (REVEAL -11 -12 -13 -14 -15 -16 -17 -18) (("2" (LEMMA "path_comps_ind3") (("2" (INST -1 "G!1" "P1!1" "P2!2" "s!1" "t!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (SPLIT -1) (("1" (LEMMA "path_comps_ind3") (("1" (INST -1 "G!1" "P2!1" "P1!2" "s!1" "t!1" "w1!1" "w2!1") (("1" (ASSERT) (("1" (SPLIT -1) (("1" (HIDE -3 -4 -5 -6 -7 -8 -9 -10) (("1" (EXPAND "independent?" 1) (("1" (SKOSIMP*) (("1" (EXPAND "join2") (("1" (REWRITE "l_trunc1") (("1" (REWRITE "l_trunc1") (("1" (EXPAND* "^" "min") (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (EXPAND "rev") (("1" (REWRITE "l_trunc1") (("1" (REWRITE "l_trunc1") (("1" (LIFT-IF) (("1" (LIFT-IF) (("1" (GROUND) (("1" (EXPAND "independent?" -14) (("1" (INST - "i!1" "j!1") (("1" (ASSERT) (("1" (HIDE -4 -5) (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "j!1 < length(P2!1) - 2") (("1" (ASSERT) (("1" (EXPAND "independent?" -5) (("1" (INST - "j!1" "length(P1!1) + length(P1!2) - 4 - i!1") (("1" (REWRITE "l_trunc1") (("1" (REWRITE "l_trunc1") (("1" (ASSERT) (("1" (CASE "i!1 = length(P1!1) - 2") (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (ASSERT) (("1" (HIDE -3) (("1" (EXPAND "trunc1") (("1" (EXPAND* "^" "min") (("1" (REVEAL -29 7) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (EXPAND "verts_of") (("1" (INST?) (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF) (("2" (PROP) (("1" (GRIND) NIL NIL) ("2" (ASSERT) (("2" (HIDE -4 -5 -13) (("2" (EXPAND "independent?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min") (("2" (INST - "length(P1!1) + length(P1!2) - 4 - i!1" "length(P2!1) + length(P2!2) - 4 - j!1") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?" -7) (("2" (FLATTEN) (("2" (EXPAND "trunc1" -7) (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "from?" -5) (("3" (FLATTEN) (("3" (EXPAND "trunc1" -5) (("3" (ASSERT) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "from?" -8) (("2" (FLATTEN) (("2" (EXPAND "trunc1" -8) (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "from?" -2) (("3" (FLATTEN) (("3" (EXPAND "trunc1" -2) (("3" (ASSERT) (("3" (EXPAND "^") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "paths_H_disj") (("2" (INST?) (("2" (INST?) (("2" (INST -1 "s!1") (("2" (ASSERT) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 2 9) (("2" (HIDE -2 -3 -4 -6 -7 -8 -9 -10 -12 -17 -19 -23) (("2" (EXPAND "from?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 -16 -18 -23 -25) (("2" (HIDE -3 -4 -7 -8) (("2" (REPLACE -5 * RL) (("2" (HIDE -5) (("2" (REPLACE -5 * RL) (("2" (HIDE -5) (("2" (LEMMA "path_comp_in") (("2" (EXPAND "path_from?") (("2" (INST?) (("2" (ASSERT) (("2" (LEMMA "path_H_trunc") (("2" (EXPAND "finseq_appl") (("2" (SPLIT +) (("1" (INST -1 "G!1" "trunc1(P2!1)" "s!1" "t!1" "w2!1" "w1!1") (("1" (REWRITE "H_comm" -1) (("1" (ASSERT) (("1" (EXPAND "path_from?") (("1" (HIDE 1) (("1" (REVEAL -16 -28) (("1" (EXPAND "trunc1" 1) (("1" (EXPAND* "^" "min" "empty_seq") (("1" (LEMMA "meng_last") (("1" (HIDE -2) (("1" (REVEAL -17) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "G!1" "trunc1(P2!2)" "t!1" "s!1" "w2!1" "w1!1") (("2" (ASSERT) (("2" (REWRITE "H_comm") (("2" (ASSERT) (("2" (EXPAND "path_from?") (("2" (HIDE 1) (("2" (EXPAND "trunc1" 1) (("2" (EXPAND* "^" "min" "empty_seq") (("2" (LEMMA "meng_last") (("2" (REVEAL -15) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "paths_H_disj") (("2" (INST?) (("2" (INST?) (("2" (INST -1 "s!1") (("2" (ASSERT) (("2" (HIDE -1 -2 -3 -4 -5 -6 -8 -9 -10 -12 -13 2 9) (("2" (HIDE -3 -5 -7 -8 -9 -10 -12 -14 -15 -16) (("2" (EXPAND "from?") (("2" (EXPAND "trunc1") (("2" (FLATTEN) (("2" (EXPAND* "^" "min" "empty_seq") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "path_from_to_walk_from") NIL NIL) ("3" (REWRITE "path_from_to_walk_from") (("3" (ASSERT) (("3" (EXPAND "trunc1" 1) (("3" (EXPAND* "^" "min" "empty_seq") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -24 -23 -21 -20 -17 -16) (("2" (HIDE -14 -13 -1 -2 -5 -6 8) (("2" (REPLACE -5 * RL) (("2" (HIDE -5) (("2" (REPLACE -5 * RL) (("2" (HIDE -5) (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (LEMMA "path_comp_in") (("2" (SPLIT 1) (("1" (HIDE -2 -3) (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "path_H_trunc") (("1" (EXPAND "finseq_appl") (("1" (INST?) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "path_from?") (("1" (EXPAND "trunc1" 1) (("1" (EXPAND* "^" "min" "empty_seq") (("1" (LEMMA "meng_last") (("1" (HIDE -2 -3 -4 -5 -6) (("1" (INST?) (("1" (INST?) (("1" (EXPAND "path_from?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (INST?) (("3" (ASSERT) (("3" (LEMMA "path_H_trunc") (("3" (EXPAND "finseq_appl") (("3" (INST?) (("3" (INST?) (("3" (EXPAND "path_from?") (("3" (EXPAND "trunc1" 1) (("3" (EXPAND* "^" "min" "empty_seq") (("3" (LEMMA "meng_last") (("3" (HIDE -2 -3 -4 -5 -6) (("3" (INST?) (("3" (INST?) (("3" (EXPAND "path_from?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (REPLACE -7 * RL) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -13 -14 -15 -16 -17 -18) (("2" (REVEAL -9 -11 -12 -13) (("2" (LEMMA "ind_verts_w") (("2" (INST -1 "meng(G!1, t!1, s!1, w1!1, w2!1)" "P1!2" "P2!2" "t!1" "s!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -1 -4) (("2" (LEMMA "path_meng_in") (("2" (EXPAND "path_from?") (("2" (INST?) (("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "from?") (("2" (FLATTEN) (("2" (EXPAND "trunc1" +) (("2" (EXPAND* "^" "min" "empty_seq") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (EXPAND "trunc1" 1) (("4" (EXPAND* "^" "min" "empty_seq") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 * RL) (("2" (HIDE -1 -2 -3 -4 -7 -12 -14 8) (("2" (REVEAL -5) (("2" (LEMMA "ind_verts_w") (("2" (INST -1 "meng(G!1, t!1, s!1, w1!1, w2!1)" "P1!2" "P2!2" "t!1" "s!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (LEMMA "path_meng_in") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) (("2" (HIDE -1 -2) (("2" (EXPAND "from?") (("2" (EXPAND "trunc1") (("2" (EXPAND* "^" "min" "empty_seq") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL) ("4" (EXPAND "trunc1" 1) (("4" (EXPAND* "^" "min" "empty_seq") (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -3 * RL) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 8) (("2" (REVEAL -11) (("2" (LEMMA "ind_verts_w") (("2" (INST -1 "meng(G!1, s!1, t!1, w1!1, w2!1)" "P1!1" "P2!1" "s!1" "t!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (LEMMA "path_meng_in") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "from?") (("2" (EXPAND "trunc1" +) (("2" (EXPAND* "^" "min" "empty_seq") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1" 1) (("3" (EXPAND* "^" "min" "empty_seq") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -2 * RL) (("2" (HIDE -1 -2 -3 -4 -5 -6 -7 -8 -9 -13 8) (("2" (LEMMA "ind_verts_w") (("2" (INST -1 "meng(G!1, s!1, t!1, w1!1, w2!1)" "P1!1" "P2!1" "s!1" "t!1" "w1!1" "w2!1") (("2" (ASSERT) (("2" (FLATTEN) (("2" (LEMMA "path_meng_in") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "from?") (("2" (EXPAND "trunc1" +) (("2" (EXPAND* "^" "min" "empty_seq") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1" 1) (("3" (EXPAND* "^" "min" "empty_seq") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "induction_step") (("2" (PROPAX) NIL NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |meng_scaff_defs| NIL) (|meng| CONST-DECL "graph[T]" |meng_scaff_defs| NIL) (|w2!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (|w1!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (|t!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (|s!1| SKOLEM-CONST-DECL "T" |meng_scaff_prelude| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |meng_scaff_prelude| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |meng_scaff_prelude| NIL) (|separable?_comm| FORMULA-DECL NIL |sep_set_lems| NIL) (H CONST-DECL "Subgraph(G)" |meng_scaff_defs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (>= CONST-DECL "bool" |reals| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (|path_meng_in| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|ind_verts_w| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|path_from_to_walk_from| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_prelude| NIL) (|path_comp_in| FORMULA-DECL NIL |meng_scaff_defs| NIL) (|path_H_trunc| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|H_comm| FORMULA-DECL NIL |meng_scaff_defs| NIL) (|meng_last| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|paths_H_disj| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|independent?| CONST-DECL "bool" |ind_paths| NIL) (|independent_ne| FORMULA-DECL NIL |ind_paths| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|independent?_comm| FORMULA-DECL NIL |ind_paths| NIL) (|path_comps_ind3| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|l_trunc1| FORMULA-DECL NIL |walks| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (P2!1 SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (P2!2 SKOLEM-CONST-DECL "prewalk[T]" |meng_scaff_prelude| NIL) (|j!1| SKOLEM-CONST-DECL "nat" |meng_scaff_prelude| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|join2_lem| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|Walk_from| TYPE-EQ-DECL NIL |walks| NIL) (|Long_walk_from| TYPE-EQ-DECL NIL |meng_scaff_prelude| NIL) (|join2| CONST-DECL "Walk_from(G, s, t)" |meng_scaff_prelude| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|induction_step| CONST-DECL "bool" |meng_scaff_prelude| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|separates_comm| FORMULA-DECL NIL |sep_set_lems| NIL) (|sep_num_comm| FORMULA-DECL NIL |sep_set_lems| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |meng_scaff_prelude| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|line20| FORMULA-DECL NIL |meng_scaff_prelude| NIL) (|disjoint?| CONST-DECL "bool" |meng_scaff_defs| NIL)) NIL)))
