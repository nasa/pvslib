(|sep_sets|
 (|del_verts_TCC1| 0
  (|del_verts_TCC1-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (LEMMA "finite_subset[doubleton[T]]")
      (("" (INST?)
        (("" (INST - "edges(G!1)")
          (("" (ASSERT) (("" (HIDE 2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL))
   NIL
   (|del_verts| SUBTYPE
    "{e | booleans.AND(edges(sep_sets.G)(sep_sets.e), (FORALL v: booleans.IMPLIES(sep_sets.V(sep_sets.v), (booleans.NOT)(sep_sets.e(sep_sets.v)))))}"
    "finite_set[doubleton[T]]")))
 (|del_verts_TCC2| 0
  (|del_verts_TCC2-1| |nil| 3307708403
   ("" (SKOSIMP*)
    (("" (EXPAND "difference")
      (("" (EXPAND "member")
        (("" (INST?)
          (("" (ASSERT)
            (("" (TYPEPRED "G!1")
              (("" (INST?)
                (("" (ASSERT) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|difference| CONST-DECL "set" |sets| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|member| CONST-DECL "bool" |sets| NIL))
   NIL
   (|del_verts| SUBTYPE
    "(# vert := sets[sep_sets.T].difference(vert(sep_sets.G), sep_sets.V), edges := {e | booleans.AND(edges(sep_sets.G)(sep_sets.e), (FORALL v: booleans.IMPLIES(sep_sets.V(sep_sets.v), (booleans.NOT)(sep_sets.e(sep_sets.v)))))} #)"
    "graph[T]")))
 (|sep_set_exists| 0
  (|sep_set_exists-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (CASE "s!1 = t!1 OR edge?(G!1)(s!1,t!1)")
      (("1" (INST 1 "vert(G!1)") (("1" (GROUND) NIL NIL)) NIL)
       ("2" (INST 2 "{t: T | vert(G!1)(t)  AND t /= s!1 AND t /= t!1}")
        (("2" (PROP)
          (("1" (LEMMA "finite_subset[T]")
            (("1" (INST?)
              (("1" (INST?)
                (("1" (ASSERT) (("1" (HIDE 2 3 4) (("1" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE 4 5)
            (("2" (EXPAND "separates")
              (("2" (SKOSIMP*)
                (("2" (EXPAND "walk_from?")
                  (("2" (FLATTEN)
                    (("2" (CASE "length(w!1) = 1")
                      (("1" (REPLACE -1)
                        (("1" (HIDE -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
                       ("2" (CASE-REPLACE "length(w!1) = 2")
                        (("1" (ASSERT)
                          (("1" (EXPAND "walk?")
                            (("1" (FLATTEN)
                              (("1" (INST -5 "0")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "del_verts")
                                    (("1" (EXPAND "edge?")
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2"
                          (CASE
                              "FORALL (i: below(length(w!1))): seq(w!1)(i) = s!1 OR seq(w!1)(i) = t!1")
                          (("1" (EXPAND "walk?")
                            (("1" (FLATTEN)
                              (("1" (INST -5 "0")
                                (("1" (ASSERT)
                                  (("1" (EXPAND "finseq_appl")
                                    (("1" (EXPAND "edge?")
                                      (("1" (EXPAND "del_verts")
                                        (("1" (FLATTEN)
                                          (("1" (INST -1 "1")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (LEMMA "walk_verts_in")
                            (("2" (INST?)
                              (("1" (SPLIT -1)
                                (("1" (HIDE -4)
                                  (("1" (EXPAND "verts_in?")
                                    (("1" (EXPAND "del_verts")
                                      (("1" (EXPAND "difference")
                                        (("1" (EXPAND "member")
                                          (("1" (SKOSIMP*)
                                            (("1" (INST?)
                                              (("1" (FLATTEN)
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (HIDE -1 -2 -3 2 3 4 5 6)
                                (("2" (LEMMA "finite_subset[T]")
                                  (("2" (INST?)
                                    (("2" (INST -1 "vert(G!1)")
                                      (("2" (ASSERT)
                                        (("2" (HIDE 2) (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|edge?| CONST-DECL "bool" |graphs| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) NIL NIL NIL
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)
    (|walk_from?| CONST-DECL "bool" |walks| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|verts_in?| CONST-DECL "bool" |walks| NIL)
    (|walk_verts_in| FORMULA-DECL NIL |walks| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    NIL
    (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (|walk?| CONST-DECL "bool" |walks| NIL))
   NIL))
 (|min_sep_set_TCC1| 0
  (|min_sep_set_TCC1-1| |nil| 3251040627
   ("" (SKOSIMP*) (("" (LEMMA "sep_set_exists") (("" (INST?) NIL NIL)) NIL))
    NIL)
   ((|sep_set_exists| FORMULA-DECL NIL |sep_sets| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL))
   NIL
   (|min_sep_set| ASSUMING
    "ints@abstract_min[seps(sep_sets.G, sep_sets.s, sep_sets.t), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): finite_sets[sep_sets.T].card(v)), (LAMBDA (v: sep_sets.seps(sep_sets.G, sep_sets.s, sep_sets.t)): booleans.TRUE)].abstract_min"
    "T_ne: ASSUMPTION EXISTS (t: abstract_min.T): abstract_min.P(t)")))
 (|min_sep_set_edge| 0
  (|min_sep_set_edge-2| "" 3790105144
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (EXPAND "min_sep_set")
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          ((""
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("" (EXPAND "minimal?")
              (("" (ASSERT) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|min_sep_set_edge-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (EXPAND "min_sep_set")
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          (("1"
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("1" (EXPAND "minimal?")
              (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL)
           ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |graphs| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|min_in| FORMULA-DECL NIL |abstract_min| |ints|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|)
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL))
   NIL))
 (|min_sep_set_card| 0
  (|min_sep_set_card-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (EXPAND "min_sep_set")
      ((""
        (LEMMA "min_is_min[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
        (("1" (INST -1 "V!1")
          (("1" (HIDE 2)
            (("1" (GROUND)
              (("1" (EXPAND "separates")
                (("1" (FLATTEN)
                  (("1" (INST 4 "gen_seq1(G!1,s!1)")
                    (("1" (EXPAND "walk_from?")
                      (("1" (EXPAND "gen_seq1")
                        (("1" (EXPAND "walk?")
                          (("1" (EXPAND "verts_in?")
                            (("1" (SKOSIMP*)
                              (("1" (EXPAND "del_verts")
                                (("1" (EXPAND "difference")
                                  (("1" (EXPAND "member")
                                    (("1" (PROPAX) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "separates")
                (("2" (FLATTEN)
                  (("2" (INST 4 "gen_seq2(G!1,s!1,t!1)")
                    (("2" (EXPAND "walk_from?")
                      (("2" (EXPAND "gen_seq2")
                        (("2" (EXPAND "del_verts")
                          (("2" (EXPAND "walk?")
                            (("2" (SPLIT 4)
                              (("1" (EXPAND "verts_in?")
                                (("1" (SKOSIMP*)
                                  (("1" (EXPAND "difference")
                                    (("1" (EXPAND "member")
                                      (("1" (GROUND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "finseq_appl")
                                  (("2" (EXPAND "edge?")
                                    (("2" (FLATTEN)
                                      (("2" (ASSERT)
                                        (("2" (SKOSIMP*)
                                          (("2" (EXPAND "dbl")
                                            (("2" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (|sep_set_exists| FORMULA-DECL NIL |sep_sets| NIL)
    (V!1 SKOLEM-CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (|t!1| SKOLEM-CONST-DECL "(vert(G!1))" |sep_sets| NIL)
    (|s!1| SKOLEM-CONST-DECL "(vert(G!1))" |sep_sets| NIL)
    (G!1 SKOLEM-CONST-DECL "graph[T]" |sep_sets| NIL)
    (|walk_from?| CONST-DECL "bool" |walks| NIL)
    (|walk?| CONST-DECL "bool" |walks| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL)
    (|gen_seq1| CONST-DECL "Seq(G)" |walks| NIL)
    (|Seq| TYPE-EQ-DECL NIL |walks| NIL)
    (|verts_in?| CONST-DECL "bool" |walks| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NIL APPLICATION-JUDGEMENT "finite_set[T]" |sep_sets| NIL)
    (|gen_seq2| CONST-DECL "Seq(G)" |walks| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |graphs| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|min_is_min| FORMULA-DECL NIL |abstract_min| |ints|))
   NIL))
 (|min_sep_set_seps| 0
  (|min_sep_set_seps-2| "" 3790105145
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (FLATTEN)
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          ((""
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("" (ASSERT)
              (("" (EXPAND "min_sep_set") (("" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|min_sep_set_seps-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (FLATTEN)
        ((""
          (LEMMA "min_in[seps(G!1, s!1, t!1),
                (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
                (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
          (("1"
            (TYPEPRED
             "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
           (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
            (("1" (ASSERT)
              (("1" (EXPAND "min_sep_set") (("1" (PROPAX) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |graphs| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|min_in| FORMULA-DECL NIL |abstract_min| |ints|)
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|))
   NIL))
 (|min_sep_set_vert| 0
  (|min_sep_set_vert-2| "" 3790105145
   ("" (SKOSIMP*)
    ((""
      (TYPEPRED
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
             (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("" (HIDE -1 -2 -3)
        (("" (EXPAND "minimal?")
          (("" (INST -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (REWRITE "card_remove[T]")
              (("1" (ASSERT)
                (("1" (EXPAND "min_sep_set" -1) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (LEMMA "min_sep_set_edge")
                  (("1" (INST?)
                    (("1" (SPLIT -1)
                      (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (HIDE -1)
                        (("2" (EXPAND "separable?")
                          (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (GROUND)
                  (("2" (LEMMA "min_sep_set_seps")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "separates")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "remove")
                              (("2" (EXPAND "member")
                                (("2" (ASSERT)
                                  (("2" (SKOSIMP*)
                                    (("2" (INST 3 "w!1")
                                      (("2" (EXPAND "walk_from?")
                                        (("2" (FLATTEN)
                                          (("2" (EXPAND "walk?")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "verts_in?")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (EXPAND "del_verts")
                                                          (("1"
                                                            (EXPAND
                                                             "difference")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST -3 "i!1")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -3)
                                                    (("2" (SKOSIMP*)
                                                      (("2" (INST?)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "edge?")
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (EXPAND
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (EXPAND
                                                                   "del_verts")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "dbl")
                                                                          (("2"
                                                                            (INST
                                                                             -7
                                                                             "v!2")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (SPLIT
                                                                                 -7)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (CASE-REPLACE
                                                                                   "v!1 = v!2")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -3
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     1
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (REVEAL
                                                                                       -9)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "verts_in?")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "del_verts")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "difference")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "member")
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (INST?)
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST?)
                                                                                                  (("2"
                                                                                                    (FLATTEN)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|min_sep_set_vert-1| |nil| 3251040627
   ("" (SKOSIMP*)
    ((""
      (TYPEPRED
       "min[seps(G!1, s!1, t!1), (LAMBDA (v: seps(G!1, s!1, t!1)): card(v)),
             (LAMBDA (v: seps(G!1, s!1, t!1)): TRUE)]")
      (("1" (HIDE -1 -2 -3)
        (("1" (EXPAND "minimal?")
          (("1" (INST -1 "remove(v!1,(min_sep_set(G!1, s!1, t!1)))")
            (("1" (REWRITE "card_remove[T]")
              (("1" (ASSERT)
                (("1" (EXPAND "min_sep_set" -1) (("1" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (LEMMA "min_sep_set_edge")
                  (("1" (INST?)
                    (("1" (SPLIT -1)
                      (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)
                       ("2" (HIDE -1)
                        (("2" (EXPAND "separable?")
                          (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (GROUND)
                  (("2" (LEMMA "min_sep_set_seps")
                    (("2" (INST?)
                      (("2" (ASSERT)
                        (("2" (EXPAND "separates")
                          (("2" (FLATTEN)
                            (("2" (EXPAND "remove")
                              (("2" (EXPAND "member")
                                (("2" (ASSERT)
                                  (("2" (SKOSIMP*)
                                    (("2" (INST 3 "w!1")
                                      (("2" (EXPAND "walk_from?")
                                        (("2" (FLATTEN)
                                          (("2" (EXPAND "walk?")
                                            (("2" (FLATTEN)
                                              (("2" (ASSERT)
                                                (("2" (SPLIT 3)
                                                  (("1" (HIDE -4)
                                                    (("1" (EXPAND "verts_in?")
                                                      (("1" (SKOSIMP*)
                                                        (("1"
                                                          (EXPAND "del_verts")
                                                          (("1"
                                                            (EXPAND
                                                             "difference")
                                                            (("1"
                                                              (EXPAND "member")
                                                              (("1"
                                                                (INST -3 "i!1")
                                                                (("1" (FLATTEN)
                                                                  (("1"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE -3)
                                                    (("2" (SKOSIMP*)
                                                      (("2" (INST?)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (EXPAND "edge?")
                                                            (("2" (FLATTEN)
                                                              (("2"
                                                                (EXPAND
                                                                 "finseq_appl")
                                                                (("2"
                                                                  (EXPAND
                                                                   "del_verts")
                                                                  (("2"
                                                                    (FLATTEN)
                                                                    (("2"
                                                                      (ASSERT)
                                                                      (("2"
                                                                        (SKOSIMP*)
                                                                        (("2"
                                                                          (EXPAND
                                                                           "dbl")
                                                                          (("2"
                                                                            (INST
                                                                             -7
                                                                             "v!2")
                                                                            (("2"
                                                                              (ASSERT)
                                                                              (("2"
                                                                                (SPLIT
                                                                                 -7)
                                                                                (("1"
                                                                                  (PROPAX)
                                                                                  NIL
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (CASE-REPLACE
                                                                                   "v!1 = v!2")
                                                                                  (("1"
                                                                                    (HIDE
                                                                                     -1
                                                                                     -3
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     1
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("1"
                                                                                      (REVEAL
                                                                                       -9)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "verts_in?")
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "del_verts")
                                                                                          (("1"
                                                                                            (EXPAND
                                                                                             "difference")
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "member")
                                                                                              (("1"
                                                                                                (SPLIT
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (INST?)
                                                                                                  (("1"
                                                                                                    (FLATTEN)
                                                                                                    (("1"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL)
                                                                                                 ("2"
                                                                                                  (INST?)
                                                                                                  (("2"
                                                                                                    (FLATTEN)
                                                                                                    (("2"
                                                                                                      (ASSERT)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (LEMMA "sep_set_exists") (("2" (INST?) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|min| CONST-DECL "{S: T | minimal?(S)}" |abstract_min| |ints|)
    (|minimal?| CONST-DECL "bool" |abstract_min| |ints|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|seps| TYPE-EQ-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|edge?| CONST-DECL "bool" |graphs| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|min_sep_set_edge| FORMULA-DECL NIL |sep_sets| NIL)
    (|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|verts_in?| CONST-DECL "bool" |walks| NIL)
    (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    NIL (|walk?| CONST-DECL "bool" |walks| NIL)
    (|walk_from?| CONST-DECL "bool" |walks| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|min_sep_set_seps| FORMULA-DECL NIL |sep_sets| NIL)
    (|card_remove| FORMULA-DECL NIL |finite_sets| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|min_sep_set| CONST-DECL "finite_set[T]" |sep_sets| NIL) NIL
    (|remove| CONST-DECL "set" |sets| NIL) NIL NIL NIL
    (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL))
   NIL))
 (|ends_not_in_min_sep_set| 0
  (|ends_not_in_min_sep_set-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (LEMMA "min_sep_set_seps")
      (("" (INST?)
        (("" (ASSERT)
          (("" (EXPAND "separates")
            (("" (FLATTEN) (("" (HIDE 3) (("" (GROUND) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|min_sep_set_seps| FORMULA-DECL NIL |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL))
   NIL))
 (|walk?_del_verts_not| 0
  (|walk?_del_verts_not-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (EXPAND "walk?")
      (("" (SPLIT +)
        (("1" (FLATTEN)
          (("1" (HIDE -2)
            (("1" (EXPAND "verts_in?")
              (("1" (SKOSIMP*)
                (("1" (EXPAND "del_verts")
                  (("1" (EXPAND "intersection")
                    (("1" (EXPAND "empty?")
                      (("1" (EXPAND "difference")
                        (("1" (EXPAND "member")
                          (("1" (INST?)
                            (("1" (ASSERT)
                              (("1" (INST?)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "verts_of")
                                    (("1" (INST?)
                                      (("1" (EXPAND "finseq_appl")
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (SKOSIMP*)
          (("2" (EXPAND "edge?")
            (("2" (INST?)
              (("2" (ASSERT)
                (("2" (FLATTEN)
                  (("2" (ASSERT)
                    (("2" (EXPAND "del_verts")
                      (("2" (EXPAND "empty?")
                        (("2" (EXPAND "intersection")
                          (("2" (EXPAND "member")
                            (("2" (SKOSIMP*)
                              (("2" (INST?)
                                (("2" (EXPAND "verts_of")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "dbl")
                                      (("2" (SPLIT -3)
                                        (("1" (INST?) (("1" (ASSERT) NIL NIL))
                                          NIL)
                                         ("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|walk?| CONST-DECL "bool" |walks| NIL)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|edge?| CONST-DECL "bool" |graphs| NIL) NIL
    (|verts_in?| CONST-DECL "bool" |walks| NIL)
    (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL)
    (|empty?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|verts_of| CONST-DECL "finite_set[T]" |walks| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|difference| CONST-DECL "set" |sets| NIL)
    (|intersection| CONST-DECL "set" |sets| NIL))
   NIL))
 (|adj_verts_TCC1| 0
  (|adj_verts_TCC1-2| "" 3790105146
   ("" (SKOSIMP*)
    (("" (LEMMA "finite_subset[T]")
      (("" (INST?)
        (("" (INST -1 "vert(G!1)")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (GRIND)
                (("1" (TYPEPRED "G!1")
                  (("1" (INST?) (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "G!1")
                  (("2" (INST?) (("2" (ASSERT) (("2" (INST?) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK
   (|adj_verts| SUBTYPE
    "{v: sep_sets.T | EXISTS (e: doubletons[sep_sets.T].Dbl): booleans.AND(graph_deg[sep_sets.T].incident_edges(sep_sets.s, sep_sets.G)(e), booleans.AND(e(v), (booleans.NOT)(v = sep_sets.s)))}"
    "finite_set[T]"))
  (|adj_verts_TCC1-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (LEMMA "finite_subset[T]")
      (("" (INST?)
        (("" (INST -1 "vert(G!1)")
          (("" (ASSERT)
            (("" (HIDE 2)
              (("" (GRIND)
                (("1" (TYPEPRED "G!1")
                  (("1" (INST?)
                    (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL)
                     ("2" (INST 1 "x!2" "y!1") NIL NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "G!1")
                  (("2" (INST?)
                    (("1" (ASSERT) (("1" (INST?) NIL NIL)) NIL)
                     ("2" (INST 1 "x!2" "y!1") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) NIL
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|Dbl| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL
   (|adj_verts| SUBTYPE
    "{v: sep_sets.T | EXISTS (e: doubletons[sep_sets.T].Dbl): booleans.AND(graph_deg[sep_sets.T].incident_edges(sep_sets.s, sep_sets.G)(e), booleans.AND(e(v), (booleans.NOT)(v = sep_sets.s)))}"
    "finite_set[T]")))
 (|adj_verts_lem| 0
  (|adj_verts_lem-2| "" 3790105146
   ("" (SKOSIMP*)
    (("" (LEMMA "card_eq_bij[T,Dbl]")
      (("" (EXPAND "deg")
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE 2)
              ((""
                (INST 1 "(LAMBDA (vv: (adj_verts(G!1, s!1))): dbl[T](s!1,vv))")
                (("1" (EXPAND "bijective?")
                  (("1" (PROP)
                    (("1" (EXPAND "injective?")
                      (("1" (SKOSIMP*)
                        (("1"
                          (CASE
                              "dbl[T](s!1, x1!1)(x1!1) = dbl[T](s!1, x2!1)(x1!1)")
                          (("1"
                            (CASE
                                "dbl[T](s!1, x1!1)(x2!1) = dbl[T](s!1, x2!1)(x2!1)")
                            (("1" (HIDE -3)
                              (("1" (EXPAND "dbl") (("1" (GROUND) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "surjective?")
                      (("2" (SKOSIMP*)
                        (("2" (TYPEPRED "y!1")
                          (("2" (SKOSIMP*)
                            (("2" (REPLACE -1)
                              (("2" (CASE "s!1 = x!1 OR s!1 = y!2")
                                (("1" (SPLIT -1)
                                  (("1" (REPLACE -1)
                                    (("1" (INST 2 "y!2")
                                      (("1" (EXPAND "adj_verts")
                                        (("1" (INST + "dbl[T](x!1, y!2)")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "dbl")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST 2 "x!1")
                                    (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T)
                                      (("1" (EXPAND "dbl")
                                        (("1" (IFF 1) (("1" (GROUND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "adj_verts")
                                      (("2" (INST?)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "dbl")
                                            (("2" (PROPAX) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3)
                                  (("2" (EXPAND "incident_edges")
                                    (("2" (FLATTEN)
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "dbl")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (PROP)
                    (("1" (INST?)
                      (("1" (TYPEPRED "vv!1")
                        (("1" (EXPAND "adj_verts")
                          (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "vv!1")
                      (("2" (EXPAND "adj_verts")
                        (("2" (SKOSIMP*)
                          (("2" (EXPAND "incident_edges")
                            (("2" (FLATTEN)
                              (("2" (LEMMA "edge_has_2_verts")
                                (("2" (INST?)
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|adj_verts_lem-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (LEMMA "card_eq_bij[T,Dbl]")
      (("" (EXPAND "deg")
        (("" (INST?)
          (("" (ASSERT)
            (("" (HIDE 2)
              ((""
                (INST 1 "(LAMBDA (vv: (adj_verts(G!1, s!1))): dbl[T](s!1,vv))")
                (("1" (EXPAND "bijective?")
                  (("1" (PROP)
                    (("1" (EXPAND "injective?")
                      (("1" (SKOSIMP*)
                        (("1"
                          (CASE
                              "dbl[T](s!1, x1!1)(x1!1) = dbl[T](s!1, x2!1)(x1!1)")
                          (("1"
                            (CASE
                                "dbl[T](s!1, x1!1)(x2!1) = dbl[T](s!1, x2!1)(x2!1)")
                            (("1" (HIDE -3)
                              (("1" (EXPAND "dbl") (("1" (GROUND) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (ASSERT) NIL NIL))
                            NIL)
                           ("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "surjective?")
                      (("2" (SKOSIMP*)
                        (("2" (TYPEPRED "y!1")
                          (("2" (SKOSIMP*)
                            (("2" (REPLACE -1)
                              (("2" (CASE "s!1 = x!1 OR s!1 = y!2")
                                (("1" (SPLIT -1)
                                  (("1" (REPLACE -1)
                                    (("1" (INST 2 "y!2")
                                      (("1" (EXPAND "adj_verts")
                                        (("1" (INST + "dbl[T](x!1, y!2)")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "dbl")
                                              (("1" (PROPAX) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (INST?)
                                            (("2" (EXPAND "dbl")
                                              (("2" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (INST 2 "x!1")
                                    (("1" (APPLY-EXTENSIONALITY 2 :HIDE? T)
                                      (("1" (EXPAND "dbl")
                                        (("1" (IFF 1) (("1" (GROUND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "adj_verts")
                                      (("2" (INST?)
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "dbl")
                                            (("1" (PROPAX) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (INST?) (("2" (ASSERT) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (HIDE 3)
                                  (("2" (EXPAND "incident_edges")
                                    (("2" (FLATTEN)
                                      (("2" (HIDE -1)
                                        (("2" (EXPAND "dbl")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (SKOSIMP*)
                  (("2" (PROP)
                    (("1" (INST?)
                      (("1" (TYPEPRED "vv!1")
                        (("1" (EXPAND "adj_verts")
                          (("1" (SKOSIMP*) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "vv!1")
                      (("2" (EXPAND "adj_verts")
                        (("2" (SKOSIMP*)
                          (("2" (EXPAND "incident_edges")
                            (("2" (FLATTEN)
                              (("2" (LEMMA "edge_has_2_verts")
                                (("2" (INST?)
                                  (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|Dbl| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL)
    (|card_eq_bij| FORMULA-DECL NIL |finite_sets_card_eq| |finite_sets|)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|adj_verts| CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL)
    (|edge_has_2_verts| FORMULA-DECL NIL |graphs| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|surjective?| CONST-DECL "bool" |functions| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) NIL NIL
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL) NIL NIL NIL
    (|deg| CONST-DECL "nat" |graph_deg| NIL))
   NIL))
 (|sep_num_min| 0
  (|sep_num_min-2| "" 3790105147
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (FLATTEN)
        (("" (LEMMA "min_sep_set_card")
          (("" (INST -1 "G!1" "_" "s!1" "t!1")
            (("" (COPY -1)
              (("" (INST -1 "adj_verts(G!1,s!1)")
                (("" (INST -2 "adj_verts(G!1,t!1)")
                  (("" (SPLIT -1)
                    (("1" (SPLIT -2)
                      (("1" (EXPAND "sep_num")
                        (("1" (LEMMA "adj_verts_lem")
                          (("1" (INST?)
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1)
                                (("1" (LEMMA "adj_verts_lem")
                                  (("1" (INST?)
                                    (("1" (REPLACE -1)
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "min")
                                          (("1" (LIFT-IF)
                                            (("1" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 4)
                        (("2" (EXPAND "separates")
                          (("2" (EXPAND "adj_verts")
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (EXPAND "incident_edges")
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "edge?")
                                      (("1" (LEMMA "edge_has_2_verts")
                                        (("1" (INST?)
                                          (("1" (INST?)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "walk_from?")
                                  (("2" (FLATTEN)
                                    (("2" (EXPAND "walk?")
                                      (("2" (EXPAND "del_verts")
                                        (("2" (EXPAND "edge?")
                                          (("2" (FLATTEN)
                                            (("2" (EXPAND "verts_in?")
                                              (("2" (EXPAND "finseq_appl")
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (INST -4 "length(w!1)-2")
                                                    (("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (INST -5
                                                             "seq(w!1)(length(w!1)-2)")
                                                            (("2" (SPLIT -5)
                                                              (("1"
                                                                (EXPAND "dbl")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2"
                                                                (INST 1
                                                                 "dbl[T](seq(w!1)(length(w!1) - 2),seq(w!1)(length(w!1) - 1))")
                                                                (("2" (SPLIT 1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "incident_edges")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "dbl")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "dbl")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1 4)
                      (("2" (EXPAND "separates")
                        (("2" (EXPAND "adj_verts")
                          (("2" (PROP)
                            (("1" (EXPAND "incident_edges")
                              (("1" (SKOSIMP*)
                                (("1" (EXPAND "edge?")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "edge_has_2_verts")
                                      (("1" (INST?)
                                        (("1" (INST -1 "e!1")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (EXPAND "walk_from?")
                                (("2" (FLATTEN)
                                  (("2" (EXPAND "walk?")
                                    (("2" (FLATTEN)
                                      (("2" (INST -4 "0")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "del_verts")
                                            (("2" (EXPAND "edge?")
                                              (("2" (EXPAND "finseq_appl")
                                                (("2" (FLATTEN)
                                                  (("2" (INST -5 "seq(w!1)(1)")
                                                    (("2" (SPLIT -5)
                                                      (("1" (EXPAND "dbl")
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (INST 1
                                                         "dbl[T](seq(w!1)(0),seq(w!1)(1))")
                                                        (("2"
                                                          (EXPAND
                                                           "incident_edges")
                                                          (("2" (EXPAND "dbl")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL SHOSTAK)
  (|sep_num_min-1| |nil| 3251040627
   ("" (SKOSIMP*)
    (("" (EXPAND "separable?")
      (("" (FLATTEN)
        (("" (LEMMA "min_sep_set_card")
          (("" (INST -1 "G!1" "_" "s!1" "t!1")
            (("" (COPY -1)
              (("" (INST -1 "adj_verts(G!1,s!1)")
                (("" (INST -2 "adj_verts(G!1,t!1)")
                  (("" (SPLIT -1)
                    (("1" (SPLIT -2)
                      (("1" (EXPAND "sep_num")
                        (("1" (LEMMA "adj_verts_lem")
                          (("1" (INST?)
                            (("1" (REPLACE -1)
                              (("1" (HIDE -1)
                                (("1" (LEMMA "adj_verts_lem")
                                  (("1" (INST?)
                                    (("1" (REPLACE -1)
                                      (("1" (HIDE -1)
                                        (("1" (EXPAND "min")
                                          (("1" (LIFT-IF)
                                            (("1" (GROUND) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE -1 4)
                        (("2" (EXPAND "separates")
                          (("2" (EXPAND "adj_verts")
                            (("2" (PROP)
                              (("1" (SKOSIMP*)
                                (("1" (EXPAND "incident_edges")
                                  (("1" (FLATTEN)
                                    (("1" (EXPAND "edge?")
                                      (("1" (LEMMA "edge_has_2_verts")
                                        (("1" (INST?)
                                          (("1" (INST?)
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SKOSIMP*)
                                (("2" (EXPAND "walk_from?")
                                  (("2" (FLATTEN)
                                    (("2" (EXPAND "walk?")
                                      (("2" (EXPAND "del_verts")
                                        (("2" (EXPAND "edge?")
                                          (("2" (FLATTEN)
                                            (("2" (EXPAND "verts_in?")
                                              (("2" (EXPAND "finseq_appl")
                                                (("2" (ASSERT)
                                                  (("2"
                                                    (INST -4 "length(w!1)-2")
                                                    (("2" (ASSERT)
                                                      (("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (INST -5
                                                             "seq(w!1)(length(w!1)-2)")
                                                            (("2" (SPLIT -5)
                                                              (("1"
                                                                (EXPAND "dbl")
                                                                (("1" (PROPAX)
                                                                  NIL NIL))
                                                                NIL)
                                                               ("2"
                                                                (INST 1
                                                                 "dbl[T](seq(w!1)(length(w!1) - 2),seq(w!1)(length(w!1) - 1))")
                                                                (("1" (SPLIT 1)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "incident_edges")
                                                                    (("1"
                                                                      (EXPAND
                                                                       "dbl")
                                                                      (("1"
                                                                        (PROPAX)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (EXPAND
                                                                     "dbl")
                                                                    (("2"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL)
                                                                   ("3"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL)
                                                                 ("2" (INST?)
                                                                  (("2"
                                                                    (ASSERT)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE -1 4)
                      (("2" (EXPAND "separates")
                        (("2" (EXPAND "adj_verts")
                          (("2" (PROP)
                            (("1" (EXPAND "incident_edges")
                              (("1" (SKOSIMP*)
                                (("1" (EXPAND "edge?")
                                  (("1" (ASSERT)
                                    (("1" (LEMMA "edge_has_2_verts")
                                      (("1" (INST?)
                                        (("1" (INST -1 "e!1")
                                          (("1" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (SKOSIMP*)
                              (("2" (EXPAND "walk_from?")
                                (("2" (FLATTEN)
                                  (("2" (EXPAND "walk?")
                                    (("2" (FLATTEN)
                                      (("2" (INST -4 "0")
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "del_verts")
                                            (("2" (EXPAND "edge?")
                                              (("2" (EXPAND "finseq_appl")
                                                (("2" (FLATTEN)
                                                  (("2" (INST -5 "seq(w!1)(1)")
                                                    (("2" (SPLIT -5)
                                                      (("1" (EXPAND "dbl")
                                                        (("1" (PROPAX) NIL
                                                          NIL))
                                                        NIL)
                                                       ("2"
                                                        (INST 1
                                                         "dbl[T](seq(w!1)(0),seq(w!1)(1))")
                                                        (("1"
                                                          (EXPAND
                                                           "incident_edges")
                                                          (("1" (EXPAND "dbl")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (INST?)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|separable?| CONST-DECL "bool" |sep_sets| NIL)
    (|min_sep_set_card| FORMULA-DECL NIL |sep_sets| NIL)
    (|finite_difference| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|adj_verts_lem| FORMULA-DECL NIL |sep_sets| NIL)
    (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL)
    (|sep_num| CONST-DECL "nat" |sep_sets| NIL)
    (|separates| CONST-DECL "bool" |sep_sets| NIL)
    (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL)
    NIL (|edge?| CONST-DECL "bool" |graphs| NIL)
    (|Dbl| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|edge_has_2_verts| FORMULA-DECL NIL |graphs| NIL)
    (|walk_from?| CONST-DECL "bool" |walks| NIL)
    (|walk?| CONST-DECL "bool" |walks| NIL)
    (|verts_in?| CONST-DECL "bool" |walks| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|del_verts| CONST-DECL "graph[T]" |sep_sets| NIL)
    (|adj_verts| CONST-DECL "finite_set[T]" |sep_sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|graph| TYPE-EQ-DECL NIL |graphs| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|)
    (|dbl| CONST-DECL "set[T]" |doubletons| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |sep_sets| NIL))
   NIL)))

