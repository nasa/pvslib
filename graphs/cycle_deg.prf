(|cycle_deg| (|reachable_TCC1| 0 (|reachable_TCC1-2| |nil| 3312297543 ("" (SKOSIMP*) (("" (TYPEPRED "vert(G!1)") (("" (LEMMA "finite_subset[T]") (("" (INST -1 "vert(G!1)" "{y: T |
                  vert(G!1)(y) AND
                   (EXISTS (w: Seq[T](G!1)): walk_from?[T](G!1, w, x!1, y))}") (("" (BDDSIMP) (("" (HIDE 2) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL)) NIL (|reachable| SUBTYPE "{y: cycle_deg.T | booleans.AND(vert(cycle_deg.G)(y), EXISTS (w: walks[cycle_deg.T].Seq(cycle_deg.G)): walks[cycle_deg.T].walk_from?(cycle_deg.G, w, cycle_deg.x, y))}" "finite_set[T]")) (|reachable_TCC1-1| |nil| 3312285093 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|reachable| SUBTYPE "{y: cycle_deg.T | booleans.AND(vert(cycle_deg.G)(y), EXISTS (w: walks[cycle_deg.T].Seq(cycle_deg.G)): walks[cycle_deg.T].walk_from?(cycle_deg.G, w, cycle_deg.x, y))}" "finite_set[T]"))) (|reachable_subset| 0 (|reachable_subset-1| |nil| 3312297501 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|reachable| CONST-DECL "finite_set[T]" |cycle_deg| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL)) SHOSTAK)) (|reachable_conn| 0 (|reachable_conn-6| "" 3884726694 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#length := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT (-1 -2 1)) NIL NIL)) NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND "^" -4 1) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (ASSERT) (("2" (EXPAND MIN) (("2" (TYPEPRED "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|reachable_conn-5| |nil| 3559571065 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#length := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND MIN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT (-1 -2 1)) NIL NIL)) NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND "^" -4 1) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND MIN) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (ASSERT) (("2" (EXPAND MIN) (("2" (TYPEPRED I!1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|conn_eq_path| FORMULA-DECL NIL |graph_connected| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|walk_merge| FORMULA-DECL NIL |walks| NIL) (|p!1| SKOLEM-CONST-DECL "prewalk[T]" |cycle_deg| NIL) (|x!1| SKOLEM-CONST-DECL "(vert(G!1))" |cycle_deg| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graph_conn_piece| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|p!2| SKOLEM-CONST-DECL "prewalk[T]" |cycle_deg| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(p!1))" |cycle_deg| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|walk?_caret| FORMULA-DECL NIL |walks| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|p!2| SKOLEM-CONST-DECL "prewalk[T]" |cycle_deg| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|p!2| SKOLEM-CONST-DECL "prewalk[T]" |cycle_deg| NIL) (|n!1| SKOLEM-CONST-DECL "nat" |cycle_deg| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?_reverse| FORMULA-DECL NIL |walks| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|reachable| CONST-DECL "finite_set[T]" |cycle_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL) (|reachable_conn-4| |nil| 3559570741 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#l := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL))) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL))))))))))) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL))))) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL))))))))))) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL))) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL) ("2" (GRIND) NIL))))))))) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL))))))))))))) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL))))))))) ("5" (ASSERT) NIL) ("6" (ASSERT) NIL) ("7" (ASSERT) NIL) ("8" (ASSERT) NIL))))) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))) ("4" (ASSERT (-1 -2 1)) NIL))))) ("2" (ASSERT (-1 1)) NIL))) ("2" (ASSERT (-1 1)) NIL))))) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL))))))) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND "^" -4 1) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL))) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL))))))))))) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL))))))))))))))))))))))) ("2" (GRIND) NIL))) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL))))))))) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (ASSERT) NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) NIL) NIL NIL) (|reachable_conn-3| |nil| 3559570524 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#l := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL))) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL))))))))))) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL))))) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (EXPAND* MIN EMPTY_SEQ) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL))))))))))) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL))) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL) ("2" (GRIND) NIL))))))))) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL))))))))))))) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL))))))))) ("5" (ASSERT) NIL) ("6" (ASSERT) NIL) ("7" (ASSERT) NIL) ("8" (ASSERT) NIL))))) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))) ("4" (ASSERT (-1 -2 1)) NIL))))) ("2" (ASSERT (-1 1)) NIL))) ("2" (ASSERT (-1 1)) NIL))))) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL))))))) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND* MIN EMPTY_SEQ) (("1" (EXPAND "^" -4 1) (("1" (EXPAND* MIN EMPTY_SEQ) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL))) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL))))))))))) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (GRIND) NIL))) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL))))))))) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (ASSERT) NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) NIL) NIL NIL) (|reachable_conn-2| |nil| 3559570298 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#l := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL))) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL))))))))))) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL))))) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (EXPAND* MIN EMPTY_SEQ) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL))))))))))) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL))))))))))))))))))))))))))))) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL))) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL))))) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL))))))))) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL))))))))))))))))) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL) ("2" (GRIND) NIL))))))))) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL))))))))))))) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL))))))))) ("5" (ASSERT) NIL) ("6" (ASSERT) NIL) ("7" (ASSERT) NIL) ("8" (ASSERT) NIL))))) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL))))))))))))) ("4" (ASSERT (-1 -2 1)) NIL))))) ("2" (ASSERT (-1 1)) NIL))) ("2" (ASSERT (-1 1)) NIL))))) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL))))))) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND* MIN EMPTY_SEQ) (("1" (EXPAND "^" -4 1) (("1" (EXPAND* MIN EMPTY_SEQ) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL))) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL))))))))))) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL))))))))))))))))))))))))))) ("2" (GRIND) NIL))) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL))))))))) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (EXPAND* MIN EMPTY_SEQ) (("2" (ASSERT) NIL)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) NIL) NIL NIL) (|reachable_conn-1| |nil| 3312285132 ("" (SKOSIMP*) (("" (LEMMA "conn_eq_path") (("" (INST -1 "subgraph(G!1, reachable(G!1, x!1))") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE 1) (("" (EXPAND "path_connected?") (("" (BDDSIMP) (("1" (INSTALL-REWRITES "subgraphs") (("1" (ASSERT) (("1" (INST -1 "x!1") (("1" (BDDSIMP) (("1" (INST 1 "(#l := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (ASSERT) NIL NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "x!2") (("2" (TYPEPRED "y!1") (("2" (EXPAND "subgraph" -) (("2" (FLATTEN) (("2" (EXPAND "reachable" -) (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk?_reverse") (("2" (INST-CP -1 "G!1" "x!1" "y!1" "w!1") (("2" (INST -1 "G!1" "x!1" "x!2" "w!2") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (LEMMA "walk_merge") (("2" (INST -1 "G!1" "w!4" "w!3" "x!2" "y!1" "x!1") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (INST 1 "p!1") (("1" (INSTALL-REWRITES "walks") (("1" (ASSERT) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (TYPEPRED "p!1") (("1" (INST -11 "n!1") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST-CP -9 "n!1") (("1" (INST -9 "1+n!1") (("1" (HIDE -3 -4 -5 -6) (("1" (BDDSIMP (-2 -5 -6 1)) (("1" (HIDE -8 -9 -11 -12) (("1" (REVEAL -10 -11) (("1" (REVEAL (-1 -2 -7 -8)) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G!1" "0" "n!1" "p!1") (("1" (STOP-REWRITE) (("1" (ASSERT) (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP) (("1" (INST -8 "G!1" "x!2" "x!3" "p!1 ^ (0,  n!1)") (("1" (EXPAND "walk_from?" -8) (("1" (EXPAND "^" -8 (1 2 3)) (("1" (BDDSIMP (-2 -8)) (("1" (SKOSIMP*) (("1" (INST -9 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (EXPAND "walk_from?" -9 (1 2)) (("1" (TYPEPRED "w!2") (("1" (CASE "walk?(G!1,w!2)") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (EXPAND "walk_from?" -12) (("1" (FLATTEN) (("1" (EXPAND "walk?" -14) (("1" (FLATTEN) (("1" (HIDE-ALL-BUT (-4 -7 -12 -13 -14 -15 -25 -26) -) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -12 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-2 -7 -8 -19) -) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REVEAL -10) (("2" (HIDE (-16 -17)) (("2" (HIDE-ALL-BUT (-1 -9 -12 -13 -14 -15) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -3) -) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REVEAL -6 -7) (("3" (LEMMA "walk?_caret") (("3" (INST -1 "G!1" "0" "1+n!1" "p!1") (("3" (INST -3 "G!1" "x!2" "x!3" "p!1 ^ (0, 1 + n!1)") (("1" (TYPEPRED "n!1") (("1" (BDDSIMP (-1 -2 -4 -5 -8)) (("1" (SKOSIMP*) (("1" (INST -6 "G!1" "w!5" "w!2" "x!1" "x!3" "x!2") (("1" (HIDE-ALL-BUT (-3 -6 -12 -13 -14) -) (("1" (TYPEPRED "w!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -4 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT -3 -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 -5 -6 -7) -) (("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (HIDE (-5 -11 -12 -13 -14 -15 -16 -17 -18)) (("2" (ASSERT) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (HIDE -2 -5 -11 -12 -13 -14 -15 -16) (("3" (ASSERT) (("3" (BDDSIMP) (("3" (TYPEPRED "p!1") (("3" (REVEAL -13) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE -4 -12 -15 3) (("4" (REVEAL -8) (("4" (HIDE 2) (("4" (ASSERT) (("4" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (HIDE -2 -9 -12 -15 2) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (ASSERT (-1 -2 1)) NIL NIL)) NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL) ("2" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL) ("3" (INST -9 "n!1") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -7 "i!1") (("2" (BDDSIMP) (("2" (LEMMA "walk?_caret") (("2" (INST -1 "G!1" "0" "i!1" "p!1") (("2" (TYPEPRED "i!1") (("2" (REVEAL -4) (("2" (INST -1 "G!1" "x!2" "seq(p!1)(i!1)" "p!1 ^ (0, i!1)") (("1" (CASE "walk?(G!1,p!1)") (("1" (BDDSIMP (-1 -3 -4)) (("1" (EXPAND "walk_from?" -4 1) (("1" (EXPAND "^" -4 (1 2)) (("1" (EXPAND "^" -4 1) (("1" (BDDSIMP (-3 -4 -10)) (("1" (SKOSIMP*) (("1" (REVEAL -3) (("1" (INST -1 "G!1" "w!5" "w!2" "x!1" "seq(p!1)(i!1)" "x!2") (("1" (CASE "walk_from?(G!1, w!2, x!1, x!2)") (("1" (BDDSIMP (-1 -2 -5)) (("1" (SKOSIMP*) (("1" (INST 1 "p!2") (("1" (HIDE-ALL-BUT -3 -) (("1" (GRIND) NIL NIL)) NIL) ("2" (TYPEPRED "p!2") (("2" (HIDE-ALL-BUT (-1 -4) -) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?" 1) (("2" (HIDE-ALL-BUT (-14 -15 -16) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL) ("2" (REVEAL -2) (("2" (HIDE-ALL-BUT (-1 -10 -11 -12) -) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "^" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|conn_compon| 0 (|conn_compon-3| |nil| 3312284893 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
                 incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[doubleton[T]]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL NIL)) NIL) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (HIDE -2 -3 -4 -5 -6 -7) (("1" (TYPEPRED "G!1") (("1" (EXPAND "add1") (("1" (PROP) (("1" (TYPEPRED "w!1") (("1" (EXPAND "verts_in?") (("1" (INST?) NIL NIL)) NIL)) NIL) ("2" (REVEAL -1 -3) (("2" (INST - "x!2") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (ASSERT) (("2" (EXPAND "reachable") (("2" (ASSERT) (("2" (EXPAND "subgraph") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL NIL)) NIL) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|Subgraph| TYPE-EQ-DECL NIL |subgraphs| NIL) (|subgraph| CONST-DECL "Subgraph(G)" |subgraphs| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|reachable| CONST-DECL "finite_set[T]" |cycle_deg| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |cycle_deg| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|reachable_conn| FORMULA-DECL NIL |cycle_deg| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(add1[T](w!1, x!3)))" |cycle_deg| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL) (|edge_has_2_verts| FORMULA-DECL NIL |graphs| NIL) (|walk?_add1| FORMULA-DECL NIL |walks| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|add1| CONST-DECL "prewalk" |walks| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](G!1)" |cycle_deg| NIL) (|x!3| SKOLEM-CONST-DECL "T" |cycle_deg| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)) NIL) (|conn_compon-2| |nil| 3312284858 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
                 incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[doubleton[T]]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL))) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL))))))))))))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL))))) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL))))))))))) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL))))))))))) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL))))))) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (HIDE -2 -3 -4 -5 -6 -7) (("1" (TYPEPRED "G!1") (("1" (EXPAND "add1") (("1" (PROP) (("1" (TYPEPRED "w!1") (("1" (EXPAND "verts_in?") (("1" (INST?) NIL))))) ("2" (REVEAL -1 -3) (("2" (INST - "x!2") (("2" (ASSERT) NIL))))))))))))))) ("2" (ASSERT) NIL))) ("2" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL))))))))))))))))))))))))) ("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL))))))))))))))))))) ("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (TYPEPRED "x!1") (("2" (ASSERT) (("2" (EXPAND "reachable") (("2" (ASSERT) (("2" (EXPAND "subgraph") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL))))))))))))))) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL))) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("1" (ASSERT) (("1" (GRIND) NIL))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL)))))))))))))))))))))))) NIL) NIL NIL) (|conn_compon-1| |nil| 3312283698 ("" (SKOSIMP*) (("" (INST 1 "subgraph(G!1,reachable(G!1,x!1))") (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "y!1") (("1" (EXPAND "deg") (("1" (CASE "incident_edges(y!1, G!1) =
                 incident_edges(y!1, subgraph(G!1, reachable(G!1, x!1)))") (("1" (AUTO-REWRITE-THEORIES "finite_sets[doubleton[T]]") (("1" (REPLACE -1 1) (("1" (PROPAX) NIL))))) ("2" (HIDE 2) (("2" (EXPAND "incident_edges") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (BDDSIMP) (("1" (EXPAND "reachable") (("1" (EXPAND "subgraph") (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (BDDSIMP) (("1" (CASE "y!1=x!3") (("1" (REPLACE -1 1 RL) (("1" (INST 1 "w!1") NIL))) ("2" (INST 2 "add1(w!1,x!3)") (("1" (EXPAND "walk_from?") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (LEMMA "walk?_add1") (("1" (INST -1 "G!1" "w!1" "x!3") (("1" (BDDSIMP) (("1" (REPLACE -7 1) (("1" (HIDE -1 -6 -7 2) (("1" (GRIND) (("1" (LEMMA "edge_has_2_verts") (("1" (INST -1 "x!2" "x!3" "y!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))) ("2" (TYPEPRED "G!1") (("2" (INST -1 "x!2") (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (ASSERT) NIL))))))))))))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "walks") (("2" (ASSERT) NIL))))) ("3" (ASSERT) (("3" (HIDE -1 -2 -3 -7) (("3" (GRIND) NIL))))))))))) ("2" (EXPAND "walk_from?") (("2" (BDDSIMP) (("2" (EXPAND "walk?") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "verts_in?") (("2" (SKOSIMP*) (("2" (TYPEPRED "i!1") (("2" (EXPAND "add1" -1) (("2" (CASE "i!1=length(w!1)") (("1" (REPLACE -1 1) (("1" (CASE "seq(add1[T](w!1, x!3))(length(w!1))=x!3") (("1" (REPLACE -1 1) (("1" (TYPEPRED "G!1") (("1" (INST -1 "x!2") (("1" (BDDSIMP) (("1" (INST -2 "x!3") (("1" (BDDSIMP) NIL))))))))))) ("2" (HIDE -3 -9 2) (("2" (GRIND) NIL))) ("3" (HIDE -3 -9 2) (("3" (GRIND) NIL))))))) ("2" (INST -8 "i!1-1") (("1" (BDDSIMP) (("1" (ASSERT -8) (("1" (HIDE -2 -3 -4 -5 -6 -7) (("1" (TYPEPRED "G!1") (("1" (INST -1 "dbl[T](seq(w!1)(i!1 - 1), seq(w!1)(i!1))") (("1" (BDDSIMP) (("1" (INST -1 "seq(add1[T](w!1, x!3))(i!1)") (("1" (ASSERT) (("1" (EXPAND "add1") (("1" (ASSERT) (("1" (HIDE -2 3) (("1" (GRIND) NIL))))))))))) ("2" (HIDE 3) (("2" (GRIND) NIL))))) ("2" (INST 1 "seq(w!1)(i!1 - 1)" "seq(w!1)(i!1)") (("1" (BDDSIMP) (("1" (PROPAX) NIL) ("2" (EXPAND "edge?") (("2" (ASSERT) NIL))))) ("2" (ASSERT) NIL) ("3" (ASSERT) (("3" (REVEAL -1) (("3" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (HIDE -4 -6) (("1" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))) ("3" (ASSERT) NIL) ("4" (ASSERT) (("4" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (HIDE -5) (("1" (GRIND) NIL))))))))) ("2" (ASSERT) NIL))))))))))))) ("2" (ASSERT) NIL))) ("2" (CASE "i!1=0") (("1" (REPLACE -1 3) (("1" (EXPAND "add1") (("1" (TYPEPRED "w!1") (("1" (GRIND) NIL))))))) ("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "x!3") (("2" (PROP) NIL))))))))))))))))))) ("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) NIL))))))))))))))))))))) ("2" (TYPEPRED "x!1") (("2" (ASSERT) (("2" (EXPAND "reachable") (("2" (ASSERT) (("2" (EXPAND "subgraph") (("2" (INST 1 "gen_seq1(G!1,x!1)") (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) NIL))))))))))))))) ("3" (LEMMA "reachable_conn") (("3" (INST? -1) NIL))) ("4" (INSTALL-REWRITES "subgraphs[T]") (("4" (STOP-REWRITE) (("4" (AUTO-REWRITE-THEORY "subgraphs[T]") (("4" (TYPEPRED "x!1") (("4" (ASSERT) (("4" (BDDSIMP) (("1" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("1" (ASSERT) (("1" (GRIND) NIL))))) ("2" (ASSERT) (("2" (INSTALL-REWRITES "finite_sets[T]") (("2" (ASSERT) (("2" (GRIND) NIL)))))))))))))))))))))))) NIL) NIL NIL)) (|sub_cycle_TCC1| 0 (|sub_cycle_TCC1-2| |nil| 3312297570 ("" (SKOSIMP*) (("" (TYPEPRED "w!1") (("" (EXPAND "verts_in?") (("" (SKOSIMP*) (("" (EXPAND "subgraph?") (("" (FLATTEN) (("" (HIDE -5) (("" (EXPAND "subset?") (("" (EXPAND "member") (("" (ASSERT) (("" (INST?) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL)) NIL (|sub_cycle| SUBTYPE "cycle_deg.w" "Seq[cycle_deg.T](cycle_deg.G)")) (|sub_cycle_TCC1-1| |nil| 3312285654 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|sub_cycle| SUBTYPE "cycle_deg.w" "Seq[cycle_deg.T](cycle_deg.G)"))) (|sub_cycle| 0 (|sub_cycle-2| |nil| 3393153710 ("" (SKOSIMP*) (("" (EXPAND "cycle?") (("" (FLATTEN) (("" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "1" "length(w!1)-2") (("1" (BDDSIMP) (("1" (EXPAND "pre_circuit?") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "walk?_subgraph[T]") (("1" (INST -1 "G!1" "H!1" "w!1") (("1" (BDDSIMP (-1 -2 -3)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cycle?| CONST-DECL "bool" |cycles| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|walk?_subgraph| FORMULA-DECL NIL |subgraph_paths| NIL) (|pre_circuit?| CONST-DECL "bool" |walks| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](H!1)" |cycle_deg| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)) NIL) (|sub_cycle-1| |nil| 3312297681 ("" (SKOSIMP*) (("" (EXPAND "cycle?") (("" (FLATTEN) (("" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (INST -4 "1" "length(w!1)-2") (("1" (BDDSIMP) (("1" (EXPAND "pre_circuit?") (("1" (FLATTEN) (("1" (BDDSIMP) (("1" (LEMMA "meng_scaff_defs[T].walk?_subgraph") (("1" (INST -1 "G!1" "H!1" "w!1") (("1" (BDDSIMP (-1 -2 -3)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|uniq_del_vert| 0 (|uniq_del_vert-1| |nil| 3312297467 ("" (SKOSIMP*) (("" (EXPAND "uniq_paths?" 1) (("" (SKOSIMP*) (("" (LEMMA "path_ops[T].path?_del_vert") (("" (INST -1 "G!1" "v!1" "p!1") (("" (REVEAL -1) (("" (INST -1 "G!1" "v!1" "q!1") (("" (EXPAND "path_from?" -) (("" (FLATTEN) (("" (BDDSIMP) (("" (EXPAND "uniq_paths?" -) (("" (INST -5 "s!1" "t!1" "p!1" "q!1") (("" (EXPAND "path_from?" -) (("" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|uniq_paths?| CONST-DECL "bool" |cycle_deg| NIL) (|path?_del_vert| FORMULA-DECL NIL |path_ops| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|del_edge_uniq| 0 (|del_edge_uniq-1| |nil| 3312297438 ("" (SKOSIMP*) (("" (LEMMA "graph_connected[T].conn_eq_path") (("" (INST -1 "del_edge(G!1, e!1)") (("" (IFF -1) (("" (BDDSIMP) (("" (HIDE -1) (("" (TYPEPRED "e!1") (("" (SKOSIMP*) (("" (EXPAND "path_connected?" -3) (("" (BDDSIMP) (("" (INST -3 "x!1" "y!1") (("1" (LEMMA "path_ops[T].walk_to_path_from") (("1" (SKOSIMP*) (("1" (INST -1 "del_edge(G!1, e!1)" "x!1" "y!1" "w!1") (("1" (TYPEPRED "w!1") (("1" (EXPAND "walk_from?" -3) (("1" (BDDSIMP (-3 -6 -7)) (("1" (SKOSIMP*) (("1" (LEMMA "walks[T].edge_to_walk") (("1" (INST -1 "G!1" "x!1" "y!1") (("1" (BDDSIMP (-1 -8 1)) (("1" (CASE "path_from?(G!1,gen_seq2(G!1, x!1, y!1),x!1,y!1)") (("1" (CASE "path_from?(G!1, p!1, x!1, y!1)") (("1" (EXPAND "uniq_paths?" -11) (("1" (INST -11 "x!1" "y!1" "p!1" "gen_seq2(G!1, x!1, y!1)") (("1" (BDDSIMP (-1 -2 -11)) (("1" (HIDE -1 -2 -4 -6 -7 -10) (("1" (TYPEPRED "p!1") (("1" (HIDE -5) (("1" (EXPAND "path_from?" -4) (("1" (FLATTEN) (("1" (EXPAND "path?" -4) (("1" (FLATTEN) (("1" (HIDE -5) (("1" (EXPAND "walk?" -4) (("1" (FLATTEN) (("1" (INST -5 "0") (("1" (REPLACE -2 -5) (("1" (ASSERT) (("1" (INSTALL-REWRITES "walks[T]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 -7 -8 -10) (("2" (INSTALL-REWRITES "paths[T]") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3 -4 -5 -6 -7 -9) (("2" (EXPAND "path_from?" 1) (("2" (EXPAND "path?" 1) (("2" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 -1) (("2" (HIDE -2 -3 -4 -5 -6 -8) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT -1 -) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -3) (("2" (GRIND) (("2" (TYPEPRED "G!1") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -2 "y!1") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "graph_ops[T].vert_del_edge") (("3" (INST? -1) (("3" (TYPEPRED "G!1") (("3" (INST -1 "e!1") (("3" (BDDSIMP) (("3" (INST -2 "x!1") (("3" (ASSERT) (("3" (REPLACE -3 1) (("3" (HIDE -2 -3 -4 2 4) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|conn_eq_path| FORMULA-DECL NIL |graph_connected| NIL) (|vert_del_edge| FORMULA-DECL NIL |graph_ops| NIL) (|walk_to_path_from| FORMULA-DECL NIL |path_ops| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (|edg| CONST-DECL "doubleton[T]" |graphs| NIL) (|gen_seq2| CONST-DECL "Seq(G)" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|uniq_paths?| CONST-DECL "bool" |cycle_deg| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graph_conn_piece| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edge_to_walk| FORMULA-DECL NIL |walks| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|e!1| SKOLEM-CONST-DECL "(edges(G!1))" |cycle_deg| NIL) (|x!1| SKOLEM-CONST-DECL "T" |cycle_deg| NIL) (|y!1| SKOLEM-CONST-DECL "T" |cycle_deg| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|del_edge| CONST-DECL "graph[T]" |graph_ops| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL)) (|charact_tree| 0 (|charact_tree-1| |nil| 3312297339 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G:(connected?(G) AND uniq_paths?(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("" (HIDE 1) (("" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].conn_lem3") (("2" (INST -1 "G!1") (("2" (BDDSIMP) (("1" (LEMMA "graph_complected[T].conn_eq_compl") (("1" (INST? -1) (("1" (BDDSIMP) (("1" (EXPAND "tree?") (("1" (FLATTEN) (("1" (EXPAND "singleton?") (("1" (EXPAND "size") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "v!1") (("2" (LEMMA "graph_complected[T].rev_lem2") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (LEMMA "graph_ops[T].size_del_vert") (("2" (INST? -1) (("2" (LEMMA "uniq_del_vert") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (INST -8 "del_vert(G!1, v!1)") (("2" (REPLACE -9 -3) (("2" (ASSERT -3) (("2" (BDDSIMP) (("2" (EXPAND "tree?" 1) (("2" (FLATTEN) (("2" (INST 2 "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "del_edge_uniq") (("3" (INST? -1) (("3" (SKOLEM! -3) (("3" (INST? -1) (("3" (BDDSIMP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|connected?| DEF-DECL "bool" |graph_conn_defs| NIL) (|uniq_paths?| CONST-DECL "bool" |cycle_deg| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|del_edge_uniq| FORMULA-DECL NIL |cycle_deg| NIL) (|rev_lem2| FORMULA-DECL NIL |graph_complected| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|uniq_del_vert| FORMULA-DECL NIL |cycle_deg| NIL) (|size_del_vert| FORMULA-DECL NIL |graph_ops| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|conn_eq_compl| FORMULA-DECL NIL |graph_complected| NIL) (|singleton?| CONST-DECL "bool" |graphs| NIL) (|conn_lem3| FORMULA-DECL NIL |graph_complected| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_complected| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|size_prep| FORMULA-DECL NIL |graph_inductions| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL)) NIL)) (|exclus_cycl| 0 (|exclus_cycl-1| |nil| 3312285692 ("" (SKOSIMP*) (("" (EXPAND "XOR") (("" (FLATTEN) (("" (IFF) (("" (BDDSIMP) (("1" (SKOSIMP*) (("1" (LEMMA "tree_no_circuits") (("1" (INST? -1) (("1" (INST -1 "w!1") (("1" (BDDSIMP) (("1" (HIDE -1 -2) (("1" (EXPAND "cycle?") (("1" (FLATTEN) (("1" (INSTALL-REWRITES "circuits[T]") (("1" (ASSERT) (("1" (BDDSIMP) (("1" (SKOSIMP*) (("1" (TYPEPRED "k!1") (("1" (INST -7 "k!1-1" "k!1+1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "length(w!1)=2") (("1" (REPLACE -1 * LR) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2) (("2" (EXPAND "cycle?") (("2" (FLATTEN) (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "uniq_paths?(G!1)") (("1" (LEMMA "charact_tree") (("1" (INST? -1) (("1" (BDDSIMP) NIL NIL)) NIL)) NIL) ("2" (EXPAND "uniq_paths?") (("2" (SKOSIMP*) (("2" (HIDE 2) (("2" (CASE "tree_paths[T].dual_paths?(G!1,p!1,q!1)") (("1" (LEMMA "min_dual_exists") (("1" (INST? -1) (("1" (BDDSIMP (-1 -2)) (("1" (HIDE -1) (("1" (SKOSIMP*) (("1" (LEMMA "min_dual_distin") (("1" (INST -1 "G!1" "p!2" "q!2") (("1" (LEMMA "dual_cycle") (("1" (INST -1 "G!1" "p!2" "q!2") (("1" (BDDSIMP (-2 -3)) (("1" (EXPAND "is_min_dual?") (("1" (FLATTEN) (("1" (BDDSIMP (-1 -3 -4)) (("1" (INST 2 "trunc1(p!2) o rev(q!2)") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_complected[T].connected_not_empty") (("2" (INST -1 "G!1") (("2" (BDDSIMP (-1 -6)) (("2" (EXPAND "empty?") (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_complected[T].connected_not_empty") (("2" (INST -1 "G!1") (("2" (BDDSIMP (-1 -5)) (("2" (EXPAND "empty?") (("2" (EXPAND "nonempty?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "q!1") (("2" (EXPAND "path_from?") (("2" (FLATTEN) (("2" (EXPAND "nonempty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (EXPAND "path?" -6) (("2" (FLATTEN) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (INST -6 "0") (("2" (INST - "seq(q!1)(0)") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "dual_paths?") (("2" (HIDE -3 3) (("2" (INSTALL-REWRITES "paths[T]") (("2" (ASSERT) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "path_from?") (("3" (FLATTEN) NIL NIL)) NIL) ("4" (EXPAND "path_from?") (("4" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((XOR CONST-DECL "bool" |xor_def| NIL) (|uniq_paths?| CONST-DECL "bool" |cycle_deg| NIL) (|charact_tree| FORMULA-DECL NIL |cycle_deg| NIL) (|path?| CONST-DECL "bool" |paths| NIL) (|Path| TYPE-EQ-DECL NIL |paths| NIL) (|dual_paths?| CONST-DECL "bool" |tree_paths| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|Graph| TYPE-EQ-DECL NIL |graphs| NIL) (|min_dual_distin| FORMULA-DECL NIL |tree_paths| NIL) (|dual_cycle| FORMULA-DECL NIL |tree_paths| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_complected| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks| NIL) (|trunc1| CONST-DECL "prewalk" |walks| NIL) (|rev| CONST-DECL "finseq[T]" |doubletons| |structures|) (|is_min_dual?| CONST-DECL "bool" |tree_paths| NIL) (|path_from?| CONST-DECL "bool" |paths| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|min_dual_exists| FORMULA-DECL NIL |tree_paths| NIL) (|from?| CONST-DECL "bool" |walks| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|cycle?| CONST-DECL "bool" |cycles| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|k!1| SKOLEM-CONST-DECL "posnat" |cycle_deg| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|reducible?| CONST-DECL "bool" |circuits| NIL) (|reduced?| CONST-DECL "bool" |circuits| NIL) (|cyclically_reduced?| CONST-DECL "bool" |circuits| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|pre_circuit?| CONST-DECL "bool" |walks| NIL) (|circuit?| CONST-DECL "bool" |circuits| NIL) (|endpoint?| CONST-DECL "bool" |paths| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |graph_conn_piece| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](G!1)" |cycle_deg| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|tree_no_circuits| FORMULA-DECL NIL |tree_circ| NIL)) NIL)) (|num_edge_tree| 0 (|num_edge_tree-3| "RWB NEW" 3312544218 ("" (LEMMA "size_prep[T]") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (ASSERT) (("" (GROUND) (("" (HIDE 2 3) (("" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "1" "LAMBDA (y:T): 0") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE-REPLACE "{e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)} = edges(del_vert(G!1,v!1))") (("1" (CASE "card(edges(del_vert(G!1,v!1)))=card(edges(G!1))-1") (("1" (EXPAND "del_vert") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -1 -3 2) (("2" (STOP-REWRITE "is_finite") (("2" (LEMMA "finite_sets[doubleton[T]].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("1" (SKOSIMP*) (("1" (EXPAND "incident_edges" -2) (("1" (LEMMA "finite_sets[doubleton[T]].card_disj_union") (("1" (INST -1 "{e: doubleton[T] | edges(G!1)(e) AND e(v!1)}" "{e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: doubleton[T] |
                                                                                                                                                 edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 2) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "finite_subset[doubleton[T]]") (("2" (INST - "edges(G!1)" "{e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)}") (("2" (ASSERT) (("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE -1 -2 2) (("3" (LEMMA "finite_subset[doubleton[T]]") (("3" (INST - "edges(G!1)" "{e: doubleton[T] | edges(G!1)(e) AND e(v!1)}") (("3" (ASSERT) (("3" (HIDE 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND "del_vert") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 2) (("2" (LEMMA "finite_sets[T].card_remove") (("2" (INST -1 "vert(G!1)" "v!1") (("2" (TYPEPRED "v!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -3 -4 -5 4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|connected?| DEF-DECL "bool" |graph_conn_defs| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|num_edges| CONST-DECL "nat" |graph_ops| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|connected_not_empty| FORMULA-DECL NIL |graph_complected| NIL) (|connect_deg_0| FORMULA-DECL NIL |graph_complected| NIL) (|rev_lem2| FORMULA-DECL NIL |graph_complected| NIL) (|size_del_vert| FORMULA-DECL NIL |graph_ops| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|card_disj_union| FORMULA-DECL NIL |finite_sets| NIL) (|incident_edges| CONST-DECL "finite_set[doubleton[T]]" |graph_deg| NIL) (|Card| CONST-DECL "nat" |finite_sets| NIL) (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|del_vert| CONST-DECL "graph[T]" |graph_ops| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|singleton_graph| CONST-DECL "(singleton?)" |graphs| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set[T]" |cycle_deg| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|v!1| SKOLEM-CONST-DECL "(vert(G!1))" |cycle_deg| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|restrict| CONST-DECL "R" |restrict| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL) (|deg_gt_one| FORMULA-DECL NIL |graph_deg_sum| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (> CONST-DECL "bool" |reals| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (|size_prep| FORMULA-DECL NIL |graph_inductions| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL)) SHOSTAK) (|num_edge_tree-2| |nil| 3312286644 ("" (LEMMA "size_prep[T]") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (HIDE 1 3) (("2" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL))))))) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL))))))))))) ("2" (LEMMA "finite_sets[T].card_one") (("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (INST 1 "1" "LAMBDA (y:T): 0") (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL))))))))) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE "card({e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)})=card(edges(G!1))-1") (("1" (ASSERT) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[doubleton[T]].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (EXPAND "incident_edges" -2) (("2" (LEMMA "finite_sets[doubleton[T]].card_disj_union") (("2" (INST -1 "{e: doubleton[T] | edges(G!1)(e) AND e(v!1)}" "{e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: doubleton[T] |
                                                                    edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL))))))))) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (BDDSIMP) NIL))))))))))))))))) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL))))))))) ("2" (LEMMA "graph_deg[T].incident_edges_TCC1") (("2" (INST -1 "G!1" "v!1") (("2" (HIDE -2 -3 2) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[T].card_remove") (("2" (INST -1 "vert(G!1)" "v!1") (("2" (TYPEPRED "v!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("3" (PROPAX) NIL))))))))))))))))))))) ("2" (HIDE -1 -2 -3 -4 -5 4) (("2" (ASSERT) NIL)))))))))))))))))))))))) NIL) NIL NIL) (|num_edge_tree-1| |nil| 3312286544 ("" (LEMMA "size_prep") (("" (INST -1 "LAMBDA G: (connected?(G) and num_edges(G)<size(G) IMPLIES tree?(G))") (("" (BDDSIMP) (("1" (ASSERT) NIL) ("2" (HIDE 1 3) (("2" (INDUCT "n" 1 "nat_induction") (("1" (SKOSIMP*) (("1" (HIDE -3 1) (("1" (LEMMA "graph_complected[T].connected_not_empty") (("1" (INST -1 "G!1") (("1" (BDDSIMP) (("1" (HIDE -1) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].nonempty_card") (("1" (INST -1 "vert(G!1)") (("1" (BDDSIMP) (("1" (GRIND) NIL) ("2" (EXPAND "nonempty?" 1) (("2" (EXPAND "empty?" -1) (("2" (INST -1 "x!1") (("2" (EXPAND "member" 1) (("2" (PROPAX) NIL))))))))))))))))))))))))))))) ("2" (SKOSIMP*) (("2" (LEMMA "graph_complected[T].connect_deg_0") (("2" (CASE "forall (v:(vert(G!1))):deg(v,G!1)>1") (("1" (LEMMA "graph_deg_sum[T].deg_gt_one") (("1" (INST -1 "G!1") (("1" (BDDSIMP (-1 -2)) (("1" (ASSERT (-2 -7)) NIL))))))) ("2" (SKOSIMP*) (("2" (CASE "deg(v!1,G!1)=0") (("1" (TYPEPRED "v!1") (("1" (INST -3 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -3 -6)) (("1" (EXPAND "tree?" 2) (("1" (PROP) (("1" (HIDE -2 -3 -5 -6 -7 1 3) (("1" (GRIND) (("1" (GRIND) (("1" (EXPAND "singleton" 1) (("1" (HIDE -2) (("1" (GRIND) (("1" (LEMMA "finite_sets[T].card_one") (("1" (INST -1 "{y: T | y = v!1}") (("1" (BDDSIMP) (("1" (INST 2 "v!1") (("1" (GRIND) (("1" (HIDE -1 1) (("1" (EXPAND "singleton" 1) (("1" (PROPAX) NIL))))))))))) ("2" (LEMMA "finite_sets[T].card_one") (("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (INST 1 "1" "LAMBDA (y:T): 0") (("2" (GRIND) NIL))))))))))))))))))))))))))))))))))) ("2" (CASE "deg(v!1,G!1)=1") (("1" (HIDE -2) (("1" (LEMMA "graph_complected[T].rev_lem2") (("1" (INST -1 "G!1" "v!1") (("1" (BDDSIMP (-1 -2 -5)) (("1" (INST -4 "del_vert(G!1, v!1)") (("1" (LEMMA "graph_ops[T].size_del_vert") (("1" (INST? -1) (("1" (REPLACE -6 -1) (("1" (ASSERT -1) (("1" (BDDSIMP (-1 -5)) (("1" (HIDE -1 -3 -5 -6 -7) (("1" (EXPAND "tree?" 3) (("1" (FLATTEN) (("1" (INST 4 "v!1") (("1" (ASSERT) NIL))))))))) ("2" (HIDE -1 -2 -4 -5 2 3) (("2" (HIDE 2) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) (("2" (CASE "card[T](remove[T](v!1, vert(G!1)))=card[T](vert(G!1))-1") (("1" (CASE "card({e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)})=card(edges(G!1))-1") (("1" (ASSERT) NIL) ("2" (HIDE -1 -3 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[doubleton[T]].card_one") (("2" (INST -1 "incident_edges(v!1, G!1)") (("2" (BDDSIMP) (("2" (SKOSIMP*) (("2" (EXPAND "incident_edges" -2) (("2" (LEMMA "finite_sets[doubleton[T]].card_disj_union") (("2" (INST -1 "{e: doubleton[T] | edges(G!1)(e) AND e(v!1)}" "{e: doubleton[T] | edges(G!1)(e) AND NOT e(v!1)}") (("1" (BDDSIMP) (("1" (EXPAND "union" -1) (("1" (EXPAND "member" -1) (("1" (CASE "{x: doubleton[T] |
                                         edges(G!1)(x) AND x(v!1) OR edges(G!1)(x) AND NOT x(v!1)}=edges(G!1)") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (EXPAND "incident_edges" -2) (("1" (REPLACE -2 -1) (("1" (ASSERT (-1 1)) NIL))))))))) ("2" (HIDE -1 -2 -3 2) (("2" (GRIND) (("2" (APPLY-EXTENSIONALITY 1) (("2" (HIDE 2) (("2" (IFF 1) (("2" (BDDSIMP) NIL))))))))))))))))) ("2" (HIDE -1 -2 2) (("2" (INSTALL-REWRITES "finite_sets[doubleton[T]]") (("2" (ASSERT) (("2" (SKOSIMP*) NIL))))))))) ("2" (LEMMA "graph_deg[T].incident_edges_TCC1") (("2" (INST -1 "G!1" "v!1") (("2" (HIDE -2 -3 2) (("2" (ASSERT) NIL))))))))))))))))))))))))))) ("2" (HIDE -1 -2 2) (("2" (GRIND) (("2" (LEMMA "finite_sets[T].card_remove") (("2" (INST -1 "vert(G!1)" "v!1") (("2" (TYPEPRED "v!1") (("2" (ASSERT) NIL))))))))))))))))))))) ("3" (PROPAX) NIL))))))))))))))))))))) ("2" (HIDE -1 -2 -3 -4 -5 4) (("2" (ASSERT) NIL)))))))))))))))))))))))) NIL) NIL NIL)) (|iff_tree| 0 (|iff_tree-3| |nil| 3559572018 ("" (SKOSIMP*) (("" (BDDSIMP) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (EXPAND "uniq_paths?") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_path_conn[T].path_implies_conn") (("2" (INST? -1) (("2" (LEMMA "graph_path_conn[T].tree_has_walk") (("2" (EXPAND "path_connected?") (("2" (LEMMA "trees[T].tree_nonempty") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (INST -2 "G!1" "x!1" "y!1") (("2" (TYPEPRED "x!1") (("2" (TYPEPRED "y!1") (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 3 "(#length := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -3 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "charact_tree") (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|uniq_paths?| CONST-DECL "bool" |cycle_deg| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|tree_one_path| FORMULA-DECL NIL |tree_paths| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|path_connected?| CONST-DECL "bool" |graph_conn_defs| NIL) (|Walk| TYPE-EQ-DECL NIL |walks| NIL) (|x!1| SKOLEM-CONST-DECL "(vert(G!1))" |cycle_deg| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|walk?| CONST-DECL "bool" |walks| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NIL APPLICATION-JUDGEMENT "finite_set[T]" |cycle_deg| NIL) (|edge?| CONST-DECL "bool" |graphs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_from?| CONST-DECL "bool" |walks| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|tree_nonempty| FORMULA-DECL NIL |trees| NIL) (|tree_has_walk| FORMULA-DECL NIL |graph_path_conn| NIL) (|path_implies_conn| FORMULA-DECL NIL |graph_path_conn| NIL) (|charact_tree| FORMULA-DECL NIL |cycle_deg| NIL)) NIL) (|iff_tree-2| |nil| 3312297085 ("" (SKOSIMP*) (("" (BDDSIMP) (("1" (LEMMA "tree_paths[T].tree_one_path") (("1" (EXPAND "uniq_paths?") (("1" (SKOSIMP*) (("1" (INST? -1) (("1" (INST -1 "q!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "graph_path_conn[T].path_implies_conn") (("2" (INST? -1) (("2" (LEMMA "graph_path_conn[T].tree_has_walk") (("2" (EXPAND "path_connected?") (("2" (LEMMA "trees[T].tree_nonempty") (("2" (INST? -1) (("2" (BDDSIMP) (("2" (HIDE 3) (("2" (SKOSIMP*) (("2" (INST -2 "G!1" "x!1" "y!1") (("2" (TYPEPRED "x!1") (("2" (TYPEPRED "y!1") (("2" (BDDSIMP) (("1" (EXPAND "walk_from?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (INST 3 "(#l := 1, seq :=(LAMBDA (i:below(1)): x!1)#)") (("1" (HIDE -3 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -1 -3 2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "charact_tree") (("3" (INST? -1) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|iff_tree-1| |nil| 3312297045 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|tree_num_iff| 0 (|tree_num_iff-1| |nil| 3312285994 ("" (SKOSIMP*) (("" (BDDSIMP) (("1" (LEMMA "num_edge_tree") (("1" (INST? -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "tree_edge_card") (("2" (INST? -1) (("2" (ASSERT) (("2" (INSTALL-REWRITES "graph_ops") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) (("3" (INSTALL-REWRITES "graph_ops") (("3" (LEMMA "iff_tree") (("3" (INST? -1) (("3" (STOP-REWRITE-THEORY "graph_ops") (("3" (STOP-REWRITE) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|num_edge_tree| FORMULA-DECL NIL |cycle_deg| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|num_edges| CONST-DECL "nat" |graph_ops| NIL) (|size| CONST-DECL "nat" |graphs| NIL) (|tree_edge_card| FORMULA-DECL NIL |trees| NIL) (|iff_tree| FORMULA-DECL NIL |cycle_deg| NIL)) NIL)) (|deg_gt_1_cycle| 0 (|deg_gt_1_cycle-2| |nil| 3312283508 ("" (SKOSIMP*) (("" (LEMMA "conn_compon") (("" (EXPAND "empty?") (("" (EXPAND "empty?") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST? -1) (("" (INST -1 "x!1") (("" (SKOSIMP*) (("" (LEMMA "graph_deg_sum[T].deg_gt_one") (("" (INST -1 "H!1") (("" (CASE "FORALL (v: T): vert(H!1)(v) IMPLIES deg(v, H!1) > 1") (("1" (BDDSIMP (-1 -2)) (("1" (LEMMA "tree_num_iff") (("1" (INST -1 "H!1") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (LEMMA "exclus_cycl") (("2" (INST -1 "H!1") (("2" (BDDSIMP) (("2" (EXPAND "XOR") (("2" (FLATTEN) (("2" (IFF 1) (("2" (BDDSIMP) (("2" (LEMMA "sub_cycle") (("2" (INST? -1) (("2" (SKOSIMP*) (("2" (INST -1 "w!1") (("2" (INST 3 "w!1") (("1" (BDDSIMP (-1 -3 -6)) (("1" (PROPAX) NIL NIL)) NIL) ("2" (TYPEPRED "w!1") (("2" (HIDE-ALL-BUT (-1 -2 -8) -) (("2" (HIDE 2 3) (("2" (INSTALL-REWRITES "walks[T]") (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST?) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST -1 "v!1") (("2" (TYPEPRED "v!1") (("2" (BDDSIMP (-1 -2)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST -6 "v!1") (("2" (INST -7 "v!1") (("2" (HIDE -2 -4 -8) (("2" (CASE "vert(G!1)(v!1)") (("1" (BDDSIMP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE -3 -4 -5 2 3) (("2" (INSTALL-REWRITES "subgraphs[T]") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|conn_compon| FORMULA-DECL NIL |cycle_deg| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (G!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|x!1| SKOLEM-CONST-DECL "T" |cycle_deg| NIL) (|deg_gt_one| FORMULA-DECL NIL |graph_deg_sum| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|deg| CONST-DECL "nat" |graph_deg| NIL) (|tree_num_iff| FORMULA-DECL NIL |cycle_deg| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (XOR CONST-DECL "bool" |xor_def| NIL) (|sub_cycle| FORMULA-DECL NIL |cycle_deg| NIL) (|w!1| SKOLEM-CONST-DECL "Seq[T](H!1)" |cycle_deg| NIL) (H!1 SKOLEM-CONST-DECL "graph[T]" |cycle_deg| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|subgraph?| CONST-DECL "bool" |subgraphs| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |cycle_deg| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Seq| TYPE-EQ-DECL NIL |walks| NIL) (|verts_in?| CONST-DECL "bool" |walks| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|exclus_cycl| FORMULA-DECL NIL |cycle_deg| NIL) (|v!1| SKOLEM-CONST-DECL "T" |cycle_deg| NIL) (|graph| TYPE-EQ-DECL NIL |graphs| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|pregraph| TYPE-EQ-DECL NIL |graphs| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|doubleton| TYPE-EQ-DECL NIL |doubletons| |structures|) (|dbl| CONST-DECL "set[T]" |doubletons| |structures|) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |cycle_deg| NIL) (|empty?| CONST-DECL "bool" |graphs| NIL)) NIL) (|deg_gt_1_cycle-1| |nil| 3312283478 ("" (POSTPONE) NIL NIL) NIL NIL)))
