(|stdregex|
 (|match_TCC1| 0
  (|match_TCC1-1| NIL 3964268011 ("" (REWRITE "wf_nat") NIL NIL)
   ((|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)) NIL
   (|match| SUBTYPE "LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b)"
    "(orders[nat].well_founded?)" (67 66 67 85))))
 (|match_TCC2| 0
  (|match_TCC2-1| NIL 3964268011
   ("" (LEMMA "lt_lex2_wf")
    (("" (INST?)
      (("1" (EXPAND "lt_lex2") (("1" (PROPAX) NIL NIL)) NIL)
       ("2" (HIDE 2) (("2" (REWRITE "wf_nat") NIL NIL)) NIL))
      NIL))
    NIL)
   ((|lt_wf| APPLICATION-JUDGEMENT "(well_founded?[[T]])"
     |well_foundedness_more| |orders|)
    (|strict_well_founded?| CONST-DECL "bool" |orders| NIL)
    (<< ADT-DEF-DECL "(strict_well_founded?[Regex])" |stdregex| NIL)
    (|MeasureFun| TYPE-EQ-DECL NIL |well_foundedness_more| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|)
    (< CONST-DECL "bool" |reals| NIL)
    (|well_founded?| CONST-DECL "bool" |orders| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|wf_nat| FORMULA-DECL NIL |naturalnumbers| NIL)
    (|lt_lex2_wf| JUDGEMENT-TCC NIL |lex2_generic| |orders|)
    (|Regex| TYPE-DECL NIL |stdregex| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL))
   NIL
   (|match| WELL-FOUNDED
    "lex2_generic[stdregex.Regex, string].lt_lex2(stdregex.<<, well_foundedness_more[string, nat].lt(LAMBDA (s: strings.string): length(s), LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b)))"
    "NIL" (67 25 67 87))))
 (|match_TCC3| 0
  (|match_TCC3-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL)
   ((|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|))
   NIL
   (|match| TERMINATION "stdregex.match(stdregex.w)(stdregex.a)" "NIL"
    (36 40 36 51))))
 (|match_TCC4| 0
  (|match_TCC4-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL)
   ((|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|))
   NIL
   (|match| TERMINATION "stdregex.match(stdregex.s)(stdregex.suffix)" "NIL"
    (38 48 38 64))))
 (|match_TCC5| 0
  (|match_TCC5-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL)
   ((|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|))
   NIL
   (|match| TERMINATION "stdregex.match(stdregex.w)(stdregex.a)" "NIL"
    (49 44 49 55))))
 (|match_TCC6| 0
  (|match_TCC6-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL)
   ((|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|))
   NIL
   (|match| TERMINATION "stdregex.match(stdregex.s)(stdregex.a)" "NIL"
    (50 44 50 55))))
 (|match_TCC7| 0
  (|match_TCC7-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL)
   ((|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|))
   NIL
   (|match| TERMINATION "stdregex.match(stdregex.w)(stdregex.a)" "NIL"
    (58 40 58 51))))
 (|match_TCC8| 0
  (|match_TCC8-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL)
   ((|lt_lex2| CONST-DECL "bool" |lex2_generic| |orders|)
    (|lt| CONST-DECL "bool" |well_foundedness_more| |orders|))
   NIL
   (|match| TERMINATION "stdregex.match(stdregex.r)(stdregex.suffix)" "NIL"
    (60 54 60 70))))
 (|match_TCC9| 0
  (|match_TCC9-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|match| SUBTYPE "stdregex.preffix" "(Maybe[string].some?)" (61 41 61 48))))
 (|match_TCC10| 0
  (|match_TCC10-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|match| SUBTYPE "stdregex.next_preffix" "(Maybe[string].some?)"
    (61 55 61 67))))
 (|make_regex_word_TCC1| 0
  (|make_regex_word_TCC1-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|make_regex_word| SUBTYPE "0" "below(length(stdregex.s))" (74 33 74 34))))
 (|make_regex_word_TCC2| 0
  (|make_regex_word_TCC2-1| NIL 3964268011 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|make_regex_word| TERMINATION
    "stdregex.make_regex_word(stdstr.substring(stdregex.s, 1, (number_fields.-)(length(stdregex.s), 1)))"
    "NIL" (74 38 74 85))))
 (|numeral_regex_TCC1| 0
  (|numeral_regex_TCC1-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|numeral_regex| SUBTYPE "(number_fields.+)(48, stdregex.i)"
    "below[0x110000]" (81 30 81 36))))
 (|numeral_regex_TCC2| 0
  (|numeral_regex_TCC2-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|numeral_regex| SUBTYPE
    "LAMBDA (i: naturalnumbers.below(10), r: stdregex.Regex): stdregex.Plus(stdregex.Literal(character_adt.char((number_fields.+)(48, i))), r)"
    "ForBody[stdregex.Regex](0, 9)" (80 29 81 42))))
 (|alphabet_regex_TCC1| 0
  (|alphabet_regex_TCC1-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|alphabet_regex| SUBTYPE "(number_fields.+)(97, stdregex.i)"
    "below[0x110000]" (87 30 87 36))))
 (|alphabet_regex_TCC2| 0
  (|alphabet_regex_TCC2-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|alphabet_regex| SUBTYPE
    "LAMBDA (i: naturalnumbers.below(26), r: stdregex.Regex): stdregex.Plus(stdregex.Literal(character_adt.char((number_fields.+)(97, i))), r)"
    "ForBody[stdregex.Regex](0, 25)" (86 30 87 42))))
 (|ascii_minus_quote_TCC1| 0
  (|ascii_minus_quote_TCC1-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|ascii_minus_quote| SUBTYPE "stdregex.i" "below[0x110000]" (93 49 93 50))))
 (|ascii_minus_quote_TCC2| 0
  (|ascii_minus_quote_TCC2-1| NIL 3964268011 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|ascii_minus_quote| SUBTYPE
    "LAMBDA (i: naturalnumbers.below(26), r: stdregex.Regex): IF (booleans.NOT)(i = 34) THEN stdregex.Plus(stdregex.Literal(character_adt.char(i)), r) ELSE r ENDIF"
    "ForBody[stdregex.Regex](0, 127)" (92 31 93 69)))))

