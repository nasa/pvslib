(|stdjson|
 (|parse_json_record_TCC1| 0
  (|parse_json_record_TCC1-1| NIL 3964284325
   ("" (SKEEP*) (("" (REWRITE "length_cdr") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)) NIL
   (|parse_json_record| SUBTYPE "list_adt[stdjson.Token].cdr(stdjson.ll)"
                        "ListTokenLt(stdjson.ll)" (96 19 96 26))))
 (|parse_json_record_TCC2| 0
  (|parse_json_record_TCC4-1| NIL 3964287563
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 2)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_record| SUBTYPE "0" "below[length[Token](ll)]" (97 23 97 24))))
 (|parse_json_record_TCC3| 0
  (|parse_json_record_TCC2-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|parse_json_record| SUBTYPE "0" "below[length[Token](restl)]"
                        (100 30 100 31))))
 (|parse_json_record_TCC4| 0
  (|parse_json_record_TCC5-1| NIL 3964287563 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|parse_json_record| SUBTYPE "1" "below[length[Token](restl)]"
                        (101 25 101 26))))
 (|parse_json_record_TCC5| 0
  (|parse_json_record_TCC3-1| NIL 3964284325
   ("" (SKEEP*) (("" (HIDE (-2 -3 -6 -7 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|nth| DEF-DECL "T" |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_record| SUBTYPE "stdjson.restl"
                        "(list_adt[stdjson.Token].cons?)" (102 44 102 49))))
 (|parse_json_record_TCC6| 0
  (|parse_json_record_TCC5-1| NIL 3964284325
   ("" (SKEEP*)
    (("" (HIDE (-2 -3 -6 -7 1))
      (("" (CASE-REPLACE "comma?(nth(ll,0))")
        (("1" (REPLACES -3)
          (("1" (EXPAND "length") (("1" (GRIND) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT)
          (("2" (EXPAND "length" -3)
            (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL))
          NIL)
         ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|comma?| ADT-RECOGNIZER-DECL "[Token -> boolean]" |stdjson| NIL)
    (|Token| TYPE-DECL NIL |stdjson| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_record| SUBTYPE "list_adt[stdjson.Token].cdr(stdjson.restl)"
                        "(list_adt[stdjson.Token].cons?)" (102 40 102 50))))
 (|parse_json_record_TCC7| 0
  (|parse_json_record_TCC9-1| NIL 3964284325
   ("" (SKEEP*)
    (("" (TYPEPRED "rest")
      (("" (HIDE-ALL-BUT (-1 -2 -5 -6 2))
        (("" (REWRITE "length_cdr")
          (("" (REWRITE "length_cdr")
            (("" (CASE-REPLACE "comma?(nth(ll,0))")
              (("1" (REPLACES -4)
                (("1" (REWRITE "length_cdr") (("1" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT) NIL NIL)
               ("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (|Token| TYPE-DECL NIL |stdjson| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|ListTokenLt| TYPE-EQ-DECL NIL |stdjson| NIL)
    (|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|comma?| ADT-RECOGNIZER-DECL "[Token -> boolean]" |stdjson| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_record| TERMINATION
                        #<(SIMPLE-ARRAY CHARACTER
                           (201)) stdjson.parse_json_record(stdjson.parse_json_f)(stdjson.rest, list_props[[string, stdjson.JValue]].append(stdjson.acc, (: (stdjson.str(list_props[stdjson.Token].nth(stdjson.restl, 0)), stdjson.jv) :))... {701070E1EF}>
                        "NIL" (103 14 103 92))))
 (|parse_json_record_TCC8| 0
  (|parse_json_record_TCC4-1| NIL 3964284325
   ("" (SKEEP*)
    ((""
      (NAME-REPLACE "VV" "v(parse_json_f)
            (rest,
             append[[string, JValue]]
                 (acc, (: (str(nth[Token](restl, 0)), jv) :)))")
      (("" (TYPEPRED "VV`2")
        (("" (HIDE-ALL-BUT (-1 -2 -5 -6 2))
          (("" (TYPEPRED "rest")
            (("" (REWRITE "length_cdr")
              (("" (REWRITE "length_cdr")
                (("" (CASE-REPLACE "comma?(nth(ll,0))")
                  (("1" (REPLACES -5)
                    (("1" (REWRITE "length_cdr") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL)
                   ("3" (HIDE-ALL-BUT (-3 1)) (("3" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|JValue| TYPE-DECL NIL |stdjson| NIL)
    (|Token| TYPE-DECL NIL |stdjson| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|ListTokenLt| TYPE-EQ-DECL NIL |stdjson| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|str?| ADT-RECOGNIZER-DECL "[Token -> boolean]" |stdjson| NIL)
    (|str| ADT-ACCESSOR-DECL "[(str?) -> string]" |stdjson| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|comma?| ADT-RECOGNIZER-DECL "[Token -> boolean]" |stdjson| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_record| SUBTYPE
                        #<(SIMPLE-ARRAY CHARACTER
                           (201)) stdjson.parse_json_record(stdjson.parse_json_f)(stdjson.rest, list_props[[string, stdjson.JValue]].append(stdjson.acc, (: (stdjson.str(list_props[stdjson.Token].nth(stdjson.restl, 0)), stdjson.jv) :))... {701070E54F}>
                        "[stdjson.JValue, ListTokenLt(stdjson.ll)]"
                        (103 14 103 92))))
 (|parse_json_array_TCC1| 0
  (|parse_json_array_TCC1-1| NIL 3964345728
   ("" (SKEEP*) (("" (REWRITE "length_cdr") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Token| TYPE-DECL NIL |stdjson| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_array| SUBTYPE "list_adt[stdjson.Token].cdr(stdjson.ll)"
    "ListTokenLt(stdjson.ll)" (122 18 122 25))))
 (|parse_json_array_TCC2| 0
  (|parse_json_array_TCC2-1| NIL 3964345728
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 2)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|parse_json_array| SUBTYPE "0" "below[length[Token](ll)]"
    (123 23 123 24))))
 (|parse_json_array_TCC3| 0
  (|parse_json_array_TCC3-1| NIL 3964345728
   ("" (SKEEP*)
    (("" (HIDE-ALL-BUT (-1 -4 2))
      (("" (TYPEPRED "rest")
        (("" (CASE-REPLACE "comma?(nth(ll, 0))")
          (("1" (REPLACES -4)
            (("1" (REWRITE "length_cdr") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) (("2" (REPLACES -3) (("2" (POSTPONE) NIL NIL)) NIL))
            NIL)
           ("3" (POSTPONE) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|parse_json_array| TERMINATION
    "stdjson.parse_json_array(stdjson.parse_json_f)(stdjson.rest, list_props[stdjson.JValue].append(stdjson.acc, (: stdjson.jv :)))"
    "NIL" (126 14 126 71))))
 (|parse_json_array_TCC4| 0
  (|parse_json_array_TCC4-1| NIL 3964345728
   ("" (SKEEP*)
    ((""
      (NAME-REPLACE "VV" "v(parse_json_f)
            (rest,
             append[JValue]
                 (acc, (: jv :)))")
      (("" (TYPEPRED "VV`2")
        (("" (HIDE-ALL-BUT (-1 -2 -5 2))
          (("" (TYPEPRED "rest") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|parse_json_array| SUBTYPE
    "stdjson.parse_json_array(stdjson.parse_json_f)(stdjson.rest, list_props[stdjson.JValue].append(stdjson.acc, (: stdjson.jv :)))"
    "[stdjson.JValue, ListTokenLt(stdjson.ll)]" (126 14 126 71))))
 (|parse_json_TCC1| 0
  (|parse_json_TCC5-1| NIL 3964284325 ("" (CASES-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.ll" "(list_adt[stdjson.Token].cons?)"
                 (140 47 140 49))))
 (|parse_json_TCC2| 0
  (|parse_json_TCC1-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
                 (141 30 141 34))))
 (|parse_json_TCC3| 0
  (|parse_json_TCC2-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
                 (142 30 142 34))))
 (|parse_json_TCC4| 0
  (|parse_json_TCC4-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
                 (143 29 143 33))))
 (|parse_json_TCC5| 0
  (|parse_json_TCC6-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
                 (144 30 144 34))))
 (|parse_json_TCC6| 0
  (|parse_json_TCC8-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
                 (145 23 145 27))))
 (|parse_json_TCC7| 0
  (|parse_json_TCC3-1| NIL 3964284325 ("" (TERMINATION-TCC) NIL NIL) NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
                 (146 24 146 28))))
 (|parse_json_old_TCC1| 0
  (|parse_json_old_TCC1-1| NIL 3964294813 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_old| SUBTYPE
    "stdprog[list_adt[stdjson.Token].list].val(stdjson.remaining)"
    "(list_adt[stdjson.Token].cons?)" (164 43 164 57))))
 (|parse_json_old_TCC2| 0
  (|parse_json_old_TCC2-1| NIL 3964294813 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_old| SUBTYPE
    "list_adt[stdjson.Token].cdr(stdprog[list_adt[stdjson.Token].list].val(stdjson.remaining))"
    "(list_adt[stdjson.Token].cons?)" (170 64 170 83))))
 (|parse_json_old_TCC3| 0
  (|parse_json_old_TCC3-1| NIL 3964294813 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|parse_json_old| TERMINATION
    "stdjson.parse_json_old(list_adt[stdjson.Token].cdr(list_adt[stdjson.Token].cdr(stdprog[list_adt[stdjson.Token].list].val(stdjson.remaining))))"
    "NIL" (173 66 173 107))))
 (|parse_json_old_TCC4| 0
  (|parse_json_old_TCC4-1| NIL 3964294813 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_old| SUBTYPE "stdjson.next" "(list_adt[stdjson.Token].cons?)"
    (176 70 176 74))))
 (|parse_json_old_TCC5| 0
  (|parse_json_old_TCC5-1| NIL 3964294813 ("" (CASES-TCC) NIL NIL) NIL NIL
   (|parse_json_old| CASES "stdjson.key"
    #<(SIMPLE-ARRAY CHARACTER (235)) Token: DATATYPE
 BEGIN
  Lbrace: lbrace?
  Rbrace: rbrace?
  Lbrack: lbrack?
  Rbrack: rbrack?
  Colon: colon?
  Comma: comma?
  Str(str: string): str?
  Num(num: real): num?
  T: t?
  F: f?
  N: n?
 ... {70106A859F}>
    (171 46 171 49))))
 (|parse_json_old_TCC6| 0
  (|parse_json_old_TCC6-1| NIL 3964294813 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_old| SUBTYPE
    "stdprog[list_adt[stdjson.Token].list].val(stdjson.remaining)"
    "(list_adt[stdjson.Token].cons?)" (208 47 208 61))))
 (|parse_json_old_TCC7| 0
  (|parse_json_old_TCC7-1| NIL 3964294813 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|parse_json_old| TERMINATION
    "stdjson.parse_json_old(stdprog[list_adt[stdjson.Token].list].val(stdjson.remaining))"
    "NIL" (214 54 214 85))))
 (|parse_json_old_TCC8| 0
  (|parse_json_old_TCC8-1| NIL 3964294813 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_old| SUBTYPE "stdjson.next" "(list_adt[stdjson.Token].cons?)"
    (217 58 217 62))))
 (|remove_whitespace_TCC1| 0
  (|remove_whitespace_TCC1-1| NIL 3964284325 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|remove_whitespace| TERMINATION "stdjson.remove_whitespace(stdjson.xs)"
                        "NIL" (252 20 252 41))))
 (|remove_whitespace_TCC2| 0
  (|remove_whitespace_TCC2-1| NIL 3964284325 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|remove_whitespace| TERMINATION "stdjson.remove_whitespace(stdjson.xs)"
                        "NIL" (254 28 254 49))))
 (|json_from_file_TCC1| 0
  (|json_from_file_TCC1-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|json_from_file| SUBTYPE "stdio.input" "(stdio.input_mode?)"
    (698 21 698 26))))
 (|json_to_string_TCC1| 0
  (|json_to_string_TCC1-1| NIL 3964284325 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|json_to_string| TERMINATION "stdjson.json_to_string(stdjson.kv`2)" "NIL"
    (375 117 375 137))))
 (|json_to_string_TCC2| 0
  (|json_to_string_TCC2-1| NIL 3964284325 ("" (TERMINATION-TCC) NIL NIL)
   ((|for| CONST-DECL "T" |for_iterate| |structures|)) NIL
   (|json_to_string| TERMINATION "stdjson.json_to_string(stdjson.x)" "NIL"
    (360 4 395 17
     "making application json_to_string(x) for recursive defn conversion"))))
 (|json_to_string_TCC3| 0
  (|json_to_string_TCC3-1| NIL 3964284325 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|json_to_string| TERMINATION-SUBTYPE "stdjson.arr"
    "[{z: stdjson.JValue | reals.<(0, 0)} -> string]" (377 85 377 88))))
 (|json_to_string_TCC4| 0
  (|json_to_string_TCC4-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|json_to_string| SUBTYPE "0" "below(length(stdjson.str))"
    (381 28 381 29))))
 (|json_to_string_TCC5| 0
  (|json_to_string_TCC5-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|json_to_string| SUBTYPE "(number_fields.-)(length(stdjson.str), 1)"
    "below(length(stdjson.str))" (383 33 383 48))))
 (|json_to_string_TCC6| 0
  (|json_to_string_TCC6-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|))
   NIL
   (|json_to_string| SUBTYPE "1" "below(length(stdjson.str))"
    (385 76 385 77))))
 (|json_to_string_TCC7| 0
  (|json_to_string_TCC7-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|json_to_string| SUBTYPE
    "LAMBDA (i: naturalnumbers.below(list_props[string].length(stdjson.strs)), acc: strings.string): stdstr.strconcat(stdstr.strconcat(acc, list_props[string].nth(stdjson.strs, i)), \",\")"
    "ForBody[finseq[char]](0, (number_fields.-)(list_props[string].length(stdjson.strs), 2))"
    (365 58 366 76))))
 (|json_to_string_TCC8| 0
  (|json_to_string_TCC8-1| NIL 3964284325 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|for| CONST-DECL "T" |for_iterate| |structures|))
   NIL
   (|json_to_string| SUBTYPE
    "(number_fields.-)(list_props[string].length(stdjson.strs), 1)"
    "below[length[string](strs)]" (369 53 369 69)))))

