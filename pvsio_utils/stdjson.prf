(|stdjson|
 (|parse_json_dict_TCC1| 0
  (|parse_json_dict_TCC1-1| NIL 3964359736
   ("" (SKEEP*) (("" (REWRITE "length_cdr") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)) NIL
   (|parse_json_dict| SUBTYPE "list_adt[stdjson.Token].cdr(stdjson.ll)"
    "ListTokenLt(stdjson.ll)" (95 19 95 26))))
 (|parse_json_dict_TCC2| 0
  (|parse_json_dict_TCC2-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 2)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json_dict| SUBTYPE "0" "below[length[Token](ll)]" (96 23 96 24))))
 (|parse_json_dict_TCC3| 0
  (|parse_json_dict_TCC3-1| NIL 3964359736 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_dict| SUBTYPE "0" "below[length[Token](restl)]"
    (99 30 99 31))))
 (|parse_json_dict_TCC4| 0
  (|parse_json_dict_TCC4-1| NIL 3964359736 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|parse_json_dict| SUBTYPE "1" "below[length[Token](restl)]"
    (100 25 100 26))))
 (|parse_json_dict_TCC5| 0
  (|parse_json_dict_TCC5-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE (-2 -3 -6 -7 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json_dict| SUBTYPE "stdjson.restl" "(list_adt[stdjson.Token].cons?)"
    (101 44 101 49))))
 (|parse_json_dict_TCC6| 0
  (|parse_json_dict_TCC6-1| NIL 3964359736
   ("" (SKEEP*)
    (("" (HIDE (-2 -3 -6 -7 1))
      (("" (CASE-REPLACE "comma?(nth(ll,0))")
        (("1" (REPLACES -3)
          (("1" (EXPAND "length") (("1" (GRIND) NIL NIL)) NIL)) NIL)
         ("2" (ASSERT) (("2" (EXPAND "length") (("2" (GRIND) NIL NIL)) NIL))
          NIL)
         ("3" (HIDE-ALL-BUT (-1 1)) (("3" (GRIND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|parse_json_dict| SUBTYPE "list_adt[stdjson.Token].cdr(stdjson.restl)"
    "(list_adt[stdjson.Token].cons?)" (101 40 101 50))))
 (|parse_json_dict_TCC7| 0
  (|parse_json_dict_TCC7-1| NIL 3964359736
   ("" (SKEEP*)
    (("" (TYPEPRED "rest")
      (("" (HIDE-ALL-BUT (-1 -2 -5 -6 2))
        (("" (REWRITE "length_cdr")
          (("" (REWRITE "length_cdr")
            (("" (CASE-REPLACE "comma?(nth(ll,0))")
              (("1" (REPLACES -4)
                (("1" (REWRITE "length_cdr") (("1" (ASSERT) NIL NIL)) NIL))
                NIL)
               ("2" (ASSERT) NIL NIL)
               ("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)) NIL
   (|parse_json_dict| TERMINATION
    "stdjson.parse_json_dict(stdjson.parse_json_f)(stdjson.rest, list_props[[string, stdjson.JValue]].append(stdjson.acc, (: (stdjson.str(list_props[stdjson.Token].nth(stdjson.restl, 0)), stdjson.jv) :)))"
    "NIL" (102 14 102 90))))
 (|parse_json_dict_TCC8| 0
  (|parse_json_dict_TCC8-1| NIL 3964359736
   ("" (SKEEP*)
    ((""
      (NAME-REPLACE "VV" "v(parse_json_f)
            (rest,
             append[[string, JValue]]
                 (acc, (: (str(nth[Token](restl, 0)), jv) :)))")
      (("" (TYPEPRED "VV`2")
        (("" (HIDE-ALL-BUT (-1 -2 -5 -6 2))
          (("" (TYPEPRED "rest")
            (("" (REWRITE "length_cdr")
              (("" (REWRITE "length_cdr")
                (("" (CASE-REPLACE "comma?(nth(ll,0))")
                  (("1" (REPLACES -5)
                    (("1" (REWRITE "length_cdr") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL)
                   ("2" (ASSERT) NIL NIL)
                   ("3" (HIDE-ALL-BUT (-3 1)) (("3" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)) NIL
   (|parse_json_dict| SUBTYPE
    "stdjson.parse_json_dict(stdjson.parse_json_f)(stdjson.rest, list_props[[string, stdjson.JValue]].append(stdjson.acc, (: (stdjson.str(list_props[stdjson.Token].nth(stdjson.restl, 0)), stdjson.jv) :)))"
    "[stdjson.JValue, ListTokenLt(stdjson.ll)]" (102 14 102 90))))
 (|parse_json_array_TCC1| 0
  (|parse_json_array_TCC1-1| NIL 3964359736
   ("" (SKEEP*) (("" (REWRITE "length_cdr") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)) NIL
   (|parse_json_array| SUBTYPE "list_adt[stdjson.Token].cdr(stdjson.ll)"
    "ListTokenLt(stdjson.ll)" (121 18 121 25))))
 (|parse_json_array_TCC2| 0
  (|parse_json_array_TCC2-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 2)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json_array| SUBTYPE "0" "below[length[Token](ll)]"
    (122 23 122 24))))
 (|parse_json_array_TCC3| 0
  (|parse_json_array_TCC3-1| NIL 3964359736
   ("" (SKEEP*)
    (("" (HIDE-ALL-BUT (-1 -4 2))
      (("" (TYPEPRED "rest")
        (("" (CASE-REPLACE "comma?(nth(ll, 0))")
          (("1" (REPLACES -4)
            (("1" (REWRITE "length_cdr") (("1" (ASSERT) NIL NIL)) NIL)) NIL)
           ("2" (ASSERT) NIL NIL)
           ("3" (HIDE-ALL-BUT (-2 1)) (("3" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|length_cdr| FORMULA-DECL NIL |list_lemmas| |structures|)) NIL
   (|parse_json_array| TERMINATION
    "stdjson.parse_json_array(stdjson.parse_json_f)(stdjson.rest, list_props[stdjson.JValue].append(stdjson.acc, (: stdjson.jv :)))"
    "NIL" (125 14 125 71))))
 (|parse_json_array_TCC4| 0
  (|parse_json_array_TCC4-1| NIL 3964359736
   ("" (SKEEP*)
    ((""
      (NAME-REPLACE "VV" "v(parse_json_f)
            (rest,
             append[JValue]
                 (acc, (: jv :)))")
      (("" (TYPEPRED "VV`2")
        (("" (HIDE-ALL-BUT (-1 -2 -5 2))
          (("" (TYPEPRED "rest") (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|parse_json_array| SUBTYPE
    "stdjson.parse_json_array(stdjson.parse_json_f)(stdjson.rest, list_props[stdjson.JValue].append(stdjson.acc, (: stdjson.jv :)))"
    "[stdjson.JValue, ListTokenLt(stdjson.ll)]" (125 14 125 71))))
 (|parse_json_TCC1| 0
  (|parse_json_TCC1-1| NIL 3964359736 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)) NIL
   (|parse_json| SUBTYPE "stdjson.ll" "(list_adt[stdjson.Token].cons?)"
    (140 45 140 47))))
 (|parse_json_TCC2| 0
  (|parse_json_TCC7-1| NIL 3964359736 ("" (SUBTYPE-TCC) NIL NIL)
   ((|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)) NIL
   (|parse_json| SUBTYPE "stdjson.ll" "(list_adt[stdjson.Token].cons?)"
    (141 46 141 48))))
 (|parse_json_TCC3| 0
  (|parse_json_TCC2-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
    (142 30 142 34))))
 (|parse_json_TCC4| 0
  (|parse_json_TCC3-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
    (143 30 143 34))))
 (|parse_json_TCC5| 0
  (|parse_json_TCC4-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
    (144 29 144 33))))
 (|parse_json_TCC6| 0
  (|parse_json_TCC5-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
    (145 30 145 34))))
 (|parse_json_TCC7| 0
  (|parse_json_TCC6-1| NIL 3964359736
   ("" (SKEEP*) (("" (HIDE-ALL-BUT (-1 1)) (("" (GRIND) NIL NIL)) NIL)) NIL)
   NIL NIL
   (|parse_json| SUBTYPE "stdjson.tail" "ListTokenLt(stdjson.ll)"
    (146 23 146 27))))
 (|remove_whitespace_TCC1| 0
  (|remove_whitespace_TCC1-1| NIL 3964359736 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|remove_whitespace| TERMINATION "stdjson.remove_whitespace(stdjson.xs)"
    "NIL" (166 18 166 39))))
 (|remove_whitespace_TCC2| 0
  (|remove_whitespace_TCC2-1| NIL 3964359736 ("" (TERMINATION-TCC) NIL NIL) NIL
   NIL
   (|remove_whitespace| TERMINATION "stdjson.remove_whitespace(stdjson.xs)"
    "NIL" (168 26 168 47))))
 (|textfile_to_string_TCC1| 0
  (|textfile_to_string_TCC1-1| NIL 3964534856 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|textfile_to_string| SUBTYPE "stdio.input" "(stdio.input_mode?)"
    (192 30 192 38))))
 (|jobject_field_value_TCC1| 0
  (|jobject_field_value_TCC1-1| NIL 3964534856 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|jobject_field_value| SUBTYPE "stdjson.l"
    "(list_adt[[string, stdjson.JValue]].cons?)" (208 10 208 11))))
 (|jfield_to_string_TCC1| 0
  (|jfield_to_string_TCC1-1| NIL 3964534856 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|jfield_to_string| SUBTYPE "stdjson.indent" "nat" (226 37 226 43))))
 (|jfield_to_string_TCC2| 0
  (|jfield_to_string_TCC2-1| NIL 3964534856
   ("" (SKEEP)
    (("" (INST 2 "(spaces(indent),emptystr,emptystr)") (("" (ASSERT) NIL NIL))
      NIL))
    NIL)
   NIL NIL
   (|jfield_to_string| EXISTENCE ""
    "[{str: strings.string | length(str) = stdjson.indent}, string, string]"
    (222 4 227 11))))
 (|jfield_to_string_TCC3| 0
  (|jfield_to_string_TCC3-1| NIL 3964534856 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|jfield_to_string| SUBTYPE "stdjson.indent" "nat" (226 37 226 43))))
 (|json_to_string_aux_TCC1| 0
  (|json_to_string_aux_TCC1-1| NIL 3964534856
   ("" (SKEEP)
    (("" (EXPAND "<<")
      (("" (GRIND)
        (("" (REWRITE "every_nth")
          (("" (SKEEP :PREDS? T)
            (("" (REWRITE "some_nth") (("" (INST 1 "i") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   NIL NIL
   (|json_to_string_aux| SUBTYPE "stdjson.jobj"
    "list_adt[[string, JValueLt(stdjson.jval)]].list" (233 67 233 71))))
 (|json_to_string_aux_TCC2| 0
  (|json_to_string_aux_TCC2-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (236 28 236 34))))
 (|json_to_string_aux_TCC3| 0
  (|json_to_string_aux_TCC3-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (236 28 236 34))))
 (|json_to_string_aux_TCC4| 0
  (|json_to_string_aux_TCC4-1| NIL 3964613118
   ("" (SKEEP)
    (("" (EXPAND "<<")
      (("" (GRIND)
        (("" (REWRITE "every_nth")
          (("" (SKEEP :PREDS? T)
            (("" (REWRITE "some_nth") (("" (INST 5 "i") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((<< ADT-DEF-DECL "(strict_well_founded?[JValue])" |stdjson| NIL)
    (|every_nth| FORMULA-DECL NIL |list_props| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|character| TYPE-DECL NIL |character_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL)
    (|char| TYPE-EQ-DECL NIL |strings| NIL)
    (|string| TYPE-EQ-DECL NIL |strings| NIL)
    (|JValue| TYPE-DECL NIL |stdjson| NIL)
    (|some_nth| FORMULA-DECL NIL |list_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|some| ADT-DEF-DECL "boolean" |list_adt| NIL))
   NIL
   (|json_to_string_aux| SUBTYPE "stdjson.jobj"
    "list_adt[[string, JValueLt(stdjson.jval)]].list" (238 75 238 79))))
 (|json_to_string_aux_TCC5| 0
  (|json_to_string_aux_TCC5-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (239 44 239 50))))
 (|json_to_string_aux_TCC6| 0
  (|json_to_string_aux_TCC3-1| NIL 3964534856
   ("" (SKEEP*)
    (("" (INST 3 "(spaces(indent),to_lisp(null),spaces(indent))")
      (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL NIL
   (|json_to_string_aux| EXISTENCE ""
    "[{str: strings.string | length(str) = stdjson.indent}, stdpvs.Lisp[list[string]], {str: strings.string | length(str) = stdjson.indent}]"
    (229 4 271 24))))
 (|json_to_string_aux_TCC7| 0
  (|json_to_string_aux_TCC7-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (239 44 239 50))))
 (|json_to_string_aux_TCC8| 0
  (|json_to_string_aux_TCC8-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (247 28 247 34))))
 (|json_to_string_aux_TCC9| 0
  (|json_to_string_aux_TCC9-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (247 28 247 34))))
 (|json_to_string_aux_TCC10| 0
  (|json_to_string_aux_TCC10-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (250 44 250 50))))
 (|json_to_string_aux_TCC11| 0
  (|json_to_string_aux_TCC11-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (250 44 250 50))))
 (|json_to_string_aux_TCC12| 0
  (|json_to_string_aux_TCC12-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (255 34 255 40))))
 (|json_to_string_aux_TCC13| 0
  (|json_to_string_aux_TCC4-1| NIL 3964534856
   ("" (SKEEP)
    (("" (INST 2 "(spaces(indent),emptystr)") (("" (ASSERT) NIL NIL)) NIL))
    NIL)
   NIL NIL
   (|json_to_string_aux| EXISTENCE ""
    "[{str: strings.string | length(str) = stdjson.indent}, string]"
    (229 4 271 24))))
 (|json_to_string_aux_TCC14| 0
  (|json_to_string_aux_TCC14-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (255 34 255 40))))
 (|json_to_string_aux_TCC15| 0
  (|json_to_string_aux_TCC15-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (259 34 259 40))))
 (|json_to_string_aux_TCC16| 0
  (|json_to_string_aux_TCC16-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (259 34 259 40))))
 (|json_to_string_aux_TCC17| 0
  (|json_to_string_aux_TCC17-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (264 34 264 40))))
 (|json_to_string_aux_TCC18| 0
  (|json_to_string_aux_TCC18-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (264 34 264 40))))
 (|json_to_string_aux_TCC19| 0
  (|json_to_string_aux_TCC19-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (268 33 268 39))))
 (|json_to_string_aux_TCC20| 0
  (|json_to_string_aux_TCC20-1| NIL 3964613118 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL (|json_to_string_aux| SUBTYPE "stdjson.indent" "nat" (268 33 268 39))))
 (|json_to_file_TCC1| 0
  (|json_to_file_TCC1-1| NIL 3964535588 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|json_to_file| SUBTYPE "stdio.output" "(stdio.output_mode?)"
    (718 22 718 28)))))

