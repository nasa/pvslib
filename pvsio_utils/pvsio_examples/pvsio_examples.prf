(|pvsio_examples|
 (|pp_TCC1| 0
  (|pp_TCC1-1| NIL 3965832920 ("" (SUBTYPE-TCC) NIL NIL)
   ((|odd?| CONST-DECL "bool" |integers| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (|skip| CONST-DECL "void" |stdpvs| NIL)
    (|printstr| CONST-DECL "void" |stdio| NIL)
    (|{\|\|}| CONST-DECL "Lisp[T]" |stdpvs| NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|pp| SUBTYPE "pvsio_examples.myb" "(Maybe[real].some?)" (40 63 40 66))))
 (|hello_you_TCC1| 0
  (|hello_you_TCC1-1| NIL 3900957007 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL)
    (O CONST-DECL "finseq" |finite_sequences| NIL)
    (|strconcat| CONST-DECL
     "{str: string | length(str) = length(s1) + length(s2)}" |stdstr| NIL)
    (|skip| CONST-DECL "void" |stdpvs| NIL)
    (|printstr| CONST-DECL "void" |stdio| NIL)
    (|{\|\|}| CONST-DECL "Lisp[T]" |stdpvs| NIL)
    (|fail| CONST-DECL "void" |stdpvs| NIL)
    (|assert| CONST-DECL "void" |stdio| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL))
   NIL (|hello_you| SUBTYPE "pvsio_examples.r" "nonneg_real" (54 40 54 41))))
 (|cat_TCC1| 0
  (|cat_TCC1-1| NIL 3902411546 ("" (SUBTYPE-TCC) NIL NIL)
   ((|input_mode?| CONST-DECL "bool" |stdio| NIL)) NIL
   (|cat| SUBTYPE "stdio.input" "(stdio.input_mode?)" (804 21 804 26))))
 (|copy_with_line_numbers_TCC1| 0
  (|copy_with_line_numbers_TCC1-1| NIL 3902411546 ("" (SUBTYPE-TCC) NIL NIL)
   ((|output_mode?| CONST-DECL "bool" |stdio| NIL)) NIL
   (|copy_with_line_numbers| SUBTYPE
    "stdpvs.prog(stdio.fprint(pvsio_examples.fout, stdpvs.format_lisp[Lisp[[posnat, string]]](\"[~3,'0d]~a~%\", {|pvsio_examples.l, pvsio_examples.s|})), (number_fields.+)(pvsio_examples.l, 1))"
    "posnat" (85 27 88 15))))
 (|exc_sqrt_TCC1| 0
  (|exc_sqrt_TCC1-1| NIL 3965833879 ("" (SUBTYPE-TCC) NIL NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   NIL (|exc_sqrt| SUBTYPE "pvsio_examples.a" "nonneg_real" (112 14 112 15))))
 (|exc_quadratic_TCC1| 0
  (|exc_quadratic_TCC1-1| NIL 3965835683 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|exc_quadratic| SUBTYPE "pvsio_examples.d" "nonneg_real" (142 25 142 26))))
 (|pp_rat_off_TCC1| 0
  (|pp_rat_off_TCC1-1| NIL 3902411690 ("" (GRIND) NIL NIL)
   (NIL (|set| CONST-DECL "void" |stdprog| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL) NIL NIL
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|nprat_div_posrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|pp_rat_off| SUBTYPE
    "stdpvs.prog(stdprog[bool].set(stdmath.PP_RATIONALS, booleans.FALSE), (: -1, number_fields./(1, 2), number_fields./(-1, 7), number_fields./(50, 99), number_fields./(-20435934594359, 349543959345934), exponentiation.^(10, (-8)) :))"
    "list[rat]" (216 4 217 78))))
 (|pp_rat_on_TCC1| 0
  (|pp_rat_on_TCC1-1| NIL 3902411690 ("" (GRIND) NIL NIL)
   (NIL (|set| CONST-DECL "void" |stdprog| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL) NIL NIL
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posrat_exp| APPLICATION-JUDGEMENT "posrat" |exponentiation| NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|nprat_div_posrat_is_nprat| APPLICATION-JUDGEMENT "nprat" |rationals| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|pp_rat_on| SUBTYPE
    "stdpvs.prog(stdprog[bool].set(stdmath.PP_RATIONALS, booleans.TRUE), (: -1, number_fields./(1, 2), number_fields./(-1, 7), number_fields./(50, 99), number_fields./(-20435934594359, 349543959345934), exponentiation.^(10, (-8)) :))"
    "list[rat]" (220 4 221 78))))
 (|a_fact| 0 (|a_fact-1| NIL 3900957258 ("" (PROPAX) NIL NIL) NIL SHOSTAK)))

