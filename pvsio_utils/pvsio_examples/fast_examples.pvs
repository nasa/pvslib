fast_approx : THEORY
BEGIN

  IMPORTING fast_approx@pvsio,
  	    pi_3   

  %% By importing fast_approx@pvsio, the following numerical evalutions are computed using fast approximations instead of
  %% the default floating-point compuations. The numerical values are only computed in PVSio. Computations
  %% are not avaialable in formal proofs since sqrt, sin, cos, etc. are the real functions and they are not computable.

  main : void =
    with_mutable[nat,void](PRECISION,20,
      printf("Approximations: fast_approx (Precision: ~a)~%",val(PRECISION)) &
      LET x : real = 3,
          sqrt_x = sqrt(x),
          sin_x  = sin(pi_3),
          cos_x  = cos(pi_3),
    	  tan_x  = tan(pi_3),
	  atan_x = atan(1) IN
        printf("  sqrt(~a) ≅ ~a ≅ ~a~%",{| x, pp_rat(rational(sqrt_x)), sqrt_x |}) &
        printf("  π ≅ ~a ≅ ~a~%",{| pp_rat(rational(pi)), pi |}) &
        printf("  sin(π/3) ≅ ~a ≅ ~a~%",{| pp_rat(rational(sin_x)), sin_x |}) &
        printf("  cos(π/3) ≅ ~a ≅ ~a~%",{| pp_rat(rational(cos_x)), cos_x |}) &
        printf("  tan(π/3) ≅ ~a ≅ ~a~%",{| pp_rat(rational(tan_x)), tan_x |}) &
        printf("  atan(1) ≅ ~a ≅ ~a~%",{| pp_rat(rational(atan_x)), atan_x |}))

  %% The fast approximations are computed using PVS's fast_approx definititions: sqrt_fast_approx(x,eps), 
  %% sin_fast_approx(x,eps), cos_fast_approx(x,eps), tan_fast_approx(x,eps), atan_fast_approx(x,eps), and
  %% pi_fast_approx(eps), where eps is 10^PRECISION. Formal proproperties of these approximations are available
  %% by importing fast_approx@fast_approps_props, e.g.,

  IMPORTING fast_approx@fast_approx_props

  sqrt_prop : LEMMA
    FORALL (x:nnreal, p:posnat):
      LET precision = 10^-p IN 
      abs(sqrt(x) - sqrt_fast_approx(x,precision)) <= precision

%|- sqrt_prop : PROOF
%|- (THEN (SKEEP) (SKOLETIN) (LEMMA "sqrt_close") (INST?) (ASSERT))
%|- QED sqrt_prop


END fast_approx
