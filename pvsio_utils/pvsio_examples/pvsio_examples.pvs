%% Examples of use of PVSio 8.0
%% http://shemesh.larc.nasa.gov/fm/pvs/PVSio
%% NASA LaRC

pvsio_examples : THEORY
BEGIN

  %% Print to stdout 
  hello_world : void =
    println("Hello World")
 
  %%% Print welcome message 
  main : void =
    println("+"+pad(50,"-")+"+") &
    println("|"+center(50,"PVSio "+pvsio_version)+"|")&
    println("|"+center(50,date)+"|")&
    print("+"+pad(50,"-")+"+") 

  Point : TYPE = [# x : real, y: real #]

  %% Print with formated string
  pp : void =
    LET l :list[nat] = (: 1,2,3,4 :),
        b : bool = odd?(length(l)),
        r : rat = (12/7)^5,
        p : Point = (# x:= 1, y:= 2 #) IN
    printf("PVS Values:~%") &	
    printf("  List: ~a~%  Boolean: ~a~%  Rational Number: ~a~%  Record: ~a~%",
           {| l,b,r,p |}) &
    printf("Formated Values:~%") &	
    printf("  List: ~{~a~^,~}~%",{| l |}) &
    printf("  Boolean: ~:[*false*~;*true*~]~%",{| b |}) &
    printf("  Rational Number: ~,2f~%",r) &
    printf("  Decimal (precision 10): ~-10/pvs:d/~%",1/3) &
    print("  ... and most Common Lisp format's directives.")

  IMPORTING reals@sqrt
  
  %% Read from stdin a string and a number, check if number is
  %% non-negative, and compute sqrt.
  hello_you : void =
     LET name = query_line("What is your name?") IN
     println("Hi "+name) &
     LET r = query_real(name+", enter a non-negative real number:") IN
     assert(r>=0,format("Sorry ~a, ~a is < 0",{| name, r |})) &
     print("The sqrt of "+r+" is "+sqrt(r))

  %% Catch a NotARealNumber exception and return 0 instead
  catch_NARN : real = 
     catch(NotARealNumber,
	   query_real("Enter a real number:"),
           0) 

  %% Read a file 
  cat : void =
    %% with_open_file guarantees that file is closed before leaving the execution
    with_openin_file("pvsio_welcome.sh", LAMBDA(f:IStream):
      while(NOT eof?(f),println(fread_line(f))))  

  more(n:nat) : void =
    with_openin_file("pvsio_examples.pvs", LAMBDA(f:IStream):
      try(FORALL(i:below(n)):
          IF NOT eof?(f) THEN
            println(fread_line(f)) 
          ELSE 
            fail
          ENDIF))

  %% Iterate a function on a file 
  copy_with_line_numbers : void =
    LET fout = fopenout("pvsio_examples_with_line_numbers.tmp"),
        fin  = fopenin("pvsio_examples.pvs"),
        lns  = unwind_protect(
                 fmap_line(fin,
                           1,  % Initial value of an accumulator for the line numbers read from fin
                           LAMBDA(s:string,l:posnat):
                           prog(% Writing a line in fout
			        fprintf(fout,"[~3,'0d]~a~%",{|(l,s)|}),
				% Increasing the line number for the accumulator
			        l+1)),
                 fclose(fout) & fclose(fin)) IN
    printf("*** ~a lines written in pvsio_examples_with_line_numbers.tmp",lns-1)

  %% Use mutable variable
  woow(x:int) : void =
    LET lvar = ref[int](x) IN
    println("The value of lvar is "+val(lvar)) &
    set[int](lvar,x+1) &
    print("The new value of lvar is "+val(lvar))

  %% Use global variables
  gvar : Global[int,0]

  WOOW(x:int) : void = 
    println("The original of gvar is "+val(gvar)) &
    set(gvar,x) &
    print("The current value of gvar is "+val(gvar))

  %% Exception handling

  NegDiscriminant : Exception[real] = "NegDiscriminant"

  % Throw exception with discriminant if discriminant is neg (r1,r2,discr)
  exc_quadratic(a:nzreal,b,c:real) : [real,real,real] =
    LET d = sq(b)-4*a*c IN
    IF d < 0 THEN 
      throw(NegDiscriminant,d,
           format("Discriminant of ~ax^2 + ~ax + ~a = 0 is ~a, which is a negative number",
	          {| a,b,c,d |}))  % Throw exception with specific message
    ELSE
       LET sqrt_d = sqrt(d) IN
       ((-b+sqrt_d)/(2*a),(-b-sqrt_d)/(2*a),d)
    ENDIF

  % Catch exception if discriminat is neg and, in this case, return (0,0,d), where d is neg.
  safe_quadratic(a:nzreal,b,c:real) : [real,real,real] =
    catch(NegDiscriminant,
          safe_quadratic(a,b,c),
	  LAMBDA(d:real): (0,0,d))
    	
  ExceptionInt : Exception[int] = "ExceptionInt"

  LessThan0 : Exception[int] = ExceptionInt <<           %% LessThan0 is an ExceptionInt
    ("LessThan0",
     LAMBDA(i:int):format("Number ~a is less than 0",i)) %% Default message for this exception

  GreaterThan100  : Exception[int] = ExceptionInt <<     %% GreaterThan100 is an ExceptionInt
    ("GreaterThan100",
     LAMBDA(i:int):format("Number ~a is greater than 100",i))  %% Default message for this exception

  int_0_100 : int =
    LET i = query_int("Enter a number between 0 and 100") IN
    IF i < 0 THEN throw(LessThan0,i)
    ELSIF i > 100 then throw(GreaterThan100,i)
    ELSE i
    ENDIF

  %% Catch several exceptions
  read_0_100 : int =  
    catch((: LessThan0, GreaterThan100 :),
	  int_0_100,
	  0)  % Returned value when exception is caught

  %% Catch several exceptions through exception hierarchy
  read_0_100_alt : int =  
    catch(ExceptionInt,
	  int_0_100, 
	  0) % Returned value when exception is caught
	     
  %% PVS parsing and printing

  zero : Point = str2pvs("(# x := 0, y:= 0#)")
   
  rec2str(p:Point):string = pvs2str(p)

  %% Parse and print decimals
  dec_parser : void =
    LET r = decstr2rat("1.23456789") IN
    printf("~a",r)

  rat_formats : void =
    LET lr : list[rat] = (: -1, 1/2, -1/7, 50/99, -20435934594359/349543959345934, 10^(-8) :) IN
    FORALL(i:below(length(lr))):
      LET r : rat = nth(lr,i) IN
        with_mutable[nat,void](PRECISION,6, % Set PRECISION to 6 (reset to previous value afterwards)
  	with_mutable(ROUNDING,TowardsZero,  % Set ROUNDING to TowardsZero (reset to previous value afterwards)
	  printf("Rational without formatting: ~a~%",r) & 
          printf("  Decimal when possible, otherwise rational: ~a~%",
	         rat2str(r)) & 
          printf("  Pretty-printed decimal with overlines indicating period and ellipsis indicating truncation: ~a~%",
	         pp_rat(r)) &
          printf("  Decimal with truncation at default precision (~a) and significant trailing zeros: ~a~%",
	         {| val(PRECISION), rat2decstr(r) |}) &
	  LET precision: nat = 10,
	      rounding : RoundingMode = TowardsInfnty,
	      zeros    : bool = TRUE IN
            printf("  Decimal with truncation at given precision (~a) and significant trailing zeros: ~a~%",
	           {| precision, rat2decstr(r,precision) |}) &
            printf("  Decimal given precision (~a) and rounding mode (~a): ~a~%",
	           {| precision, rounding, rat2decstr(r,10,TowardsInfnty) |}) &         
            printf("  Decimal given precision (~a), rounding mode (~a), and trailing zeros (~a): ~a~%",
	           {| precision, rounding, zeros, rat2decstr_with_zeros(r,10,TowardsInfnty,TRUE) |})))

  pp_rat_off : list[rat] =  % Turns off pretty print of rationals in PVSio
    prog(set(PP_RATIONALS,FALSE),
         (: -1, 1/2, -1/7, 50/99, -20435934594359/349543959345934, 10^(-8) :))

  pp_rat_on : list[rat] =  % Turns on pretty print of rationals in PVSio (this is the default in PVSio)
    prog(set(PP_RATIONALS,TRUE),
         (: -1, 1/2, -1/7, 50/99, -20435934594359/349543959345934, 10^(-8) :))

  dec_formatter : void =
    LET r = 1/3 IN
    printf("~-10/pvs:d/~%",r) &  %% 10 decimals
    printf("~-20/pvs:d/",r)      %% 20 decimals

  %% ... and many other things.
  % But, semantic attachments may produce surprising results:

  paradox: bool =
    (RANDOM=RANDOM) % often evaluates to FALSE!

  not_a_paradox: bool =
    LET r = RANDOM IN
      r = r         % evaluates to TRUE

  a_fact : LEMMA 
    RANDOM = RANDOM % is trivially TRUE!

END pvsio_examples
