float_approx : THEORY
BEGIN

  IMPORTING pi_3,
  	    reals@sqrt,
            trig@sincos_def,
	    trig@pi_def,
	    trig@atan,
	    lnexp@ln_exp


  %% The following numerical evalutions are computed with Lisp's floating-point
  %% The numerical values are only available in PVSio and cannot be used in formal proofs
  %% In formal proofs sqrt, sin, cos, etc. are the real functions and they are not computable
  
  main : void =
    with_mutable[nat,void](PRECISION,20,
      printf("Approximations: float~%") &
      LET r : real = 3,
          sqrt_x = sqrt(r),
          sin_x  = sin(pi_3),
	  cos_x  = cos(pi_3),
	  tan_x  = tan(pi_3),
	  atan_x = atan(1),
	  ln_x   = ln(r),
	  exp_x  = exp(1) IN
        printf("  sqrt(~a) ≅ ~f ≅ ~a~%",{| r, pp_rat(rational(sqrt_x)), sqrt_x |}) &
        printf("  π ≅ ~f ≅ ~a~%",{| pp_rat(rational(pi)), pi |}) &
        printf("  sin(π/3) ≅ ~f ≅ ~a~%",{| pp_rat(rational(sin_x)), sin_x |}) &
        printf("  cos(π/3) ≅ ~f ≅ ~a~%",{| pp_rat(rational(cos_x)), cos_x |}) &
        printf("  tan(π/3) ≅ ~f ≅ ~a~%",{| pp_rat(rational(tan_x)), tan_x |}) &
        printf("  atan(1) ≅ ~f ≅ ~a~%",{| pp_rat(rational(atan_x)), atan_x |}) &
        printf("  ln(~a) ≅ ~f ≅ ~a~%",{| r, pp_rat(rational(ln_x)), ln_x |}) &
        printf("  exp(1) ≅ ~f ≅ ~a~%",{| pp_rat(rational(exp_x)), exp_x |}))

END float_approx
