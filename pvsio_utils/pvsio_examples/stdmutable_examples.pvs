stdmutable_examples : THEORY
BEGIN

  X : Global[nat,0]
  Y : Global[nat,0]
  Z : Global[nat]

  % Save mutable variable X before doing somthing and restore before leaving (no matter what)
  ex1 : void =
    with_mutable[nat,void](X,
      set[nat](X,100) & printf("~%X: ~a",val(X)) & error("Error"))

  ex1a : void =
    printf("~%X: ~a",val(X))

  % Save and set mutable variable X before doing something and restore before leaving (no matter what)
  ex2 : void =
    with_mutable[nat,void](Y,100,
      printf("~%Y: ~a",val(Y)) & error("Error"))

  ex2a : void =
    printf("~%Y: ~a",val(Y))

  % If mutable variable is undefined before saving it, it's gurateed to be undefined afterward
  ex3: void =
      with_mutable[nat,void](Z,100,
      printf("~%Z: ~a",val(Z)) & error("Error"))

  ex3a : bool =
    undef(Z)

  ex3b : nat =
    val(Z);

  % Mutable variables can be used a stacks
  ex4: void =
    push[nat](Z,1) &
    printf("~%Z: ~a",val(Z)) &
    push[nat](Z,val(Z)+1) &
    printf("~%Z: ~a",val(Z)) &
    pop(Z) &
    printf("~%Z: ~a",val(Z)) 

  % Mutable variables can have a local scope

  ex5 : void =
    LET x = new[nat] IN
      set[nat](x,1) &
      printf("~%x: ~a",val(x))

  ex5a : nat =
    LET x = new[nat] IN
      val(x)

  ex6 : void =
    LET x = ref[nat](1) IN
      printf("~%x: ~a",val(x)) &
      set[nat](x,val(x)+1) &
      printf("~%x: ~a",val(x))

  ex6a : void =
    LET x : Mutable[nat] = ref[nat](1) IN
      printf("~%x: ~a",val(x)) &
      push[nat](x,val(x)+1) &
      printf("~%x: ~a",val(x)) &
      pop(x) &
      printf("~%x: ~a",val(x)) 
     
END stdmutable_examples
