accumulated_error
[ base: above(1)
, (importing fixed_point_format[base])
  format: fixed_point_format
, round: [real -> int]
, (importing rounding_props[base,format,round])
  round_error: round_error ]: THEORY
BEGIN

  importing basic_ops[base, format, round]
  importing fixed_point_conversions[base,format,round]

  % #TODO move to another place
  abs_lem: conjecture ∀(x,y,e,t: real):
  abs(x - y) <= e ∧ x <= t ∧ t < y ⇒ abs(x-t) <= e

  % Addition 

  err_add(ea,eb: nonneg_real): nonneg_real
  = ea + eb

  accum_err_add: conjecture
    ∀
    (a,b: fixed_point)
    (ra,rb: (in_representable_range?))
    (ea,eb: nonneg_real)
    : abs(ra - fixed_point2real(a)) <= ea ∧
      abs(rb - fixed_point2real(b)) <= eb ∧
      in_representable_range?(ra+rb)
      ⇒ abs((ra+rb) - fixed_point2real(add_fxp(a,b))) <= err_add(ea,eb) 

  % Subtraction 

  err_sub(ea,eb: nonneg_real): nonneg_real
  = ea + eb

  accum_err_sub: conjecture
    ∀
    (a,b: fixed_point)
    (ra,rb: (in_representable_range?))
    (ea,eb: nonneg_real)
    : abs(ra - fixed_point2real(a)) <= ea ∧
      abs(rb - fixed_point2real(b)) <= eb ∧
      in_representable_range?(ra+rb)
      ⇒ abs((ra-rb) - fixed_point2real(sub_fxp(a,b))) <= err_sub(ea,eb) 

  % Multiplication 

  err_mul(a,b: real, ea,eb: nonneg_real): nonneg_real
  = abs(a)*eb+abs(b)*ea+ea*eb + round_error 

  accum_err_mul: conjecture
    ∀
    (a,b: fixed_point)
    (ra,rb: (in_representable_range?))
    (ea,eb: nonneg_real)
    : abs(ra - fixed_point2real(a)) <= ea ∧
      abs(rb - fixed_point2real(b)) <= eb ∧
      in_representable_range?(ra*rb)
      ⇒ abs((ra*rb) - fixed_point2real(mul_fxp(a,b))) <= err_mul(ra,rb,ea,eb) 

END accumulated_error
