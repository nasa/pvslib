fixed_point_conversions
[ base: above(1),
  (importing fixed_point_format[base])
  format: fixed_point_format,
  real2int: [real->int]]: THEORY
BEGIN

  importing basic_defs[base, format, real2int]

  % projection ( fixed_point -> real )
  fixed_point2real
  (a: fixed_point)
  : rational
  = a`representation * (base ^ -format`scaling_factor)

  % rounding ( real -> fixed_point )
  real2fixed_point
  (x: real | in_representable_range?(x) )
  : fixed_point
  = make_fixed_point(real2int(x * (base ^ format`scaling_factor)))

  % sanity check
  conversion_check_max
  : conjecture real2fixed_point(max_representable) = max_fxp

  conversion_check_min
  : conjecture real2fixed_point(min_representable) = min_fxp

  %
  
  quantize(x: real): fixed_point
  = if x > max_representable then max_fxp
    elsif x < min_representable then min_fxp
    else real2fixed_point(x) endif


END fixed_point_conversions
