(|era_examples|
 (|sqrt23_num_p11| 0
  (|sqrt23_num_p11-1| |nil| 3676376596
   ("" (THEN (ERA-NUMERICAL (! 1 1 2) :PRECISION 11) (ASSERT)) NIL NIL)
   ((PI ADT-CONSTRUCTOR-DECL "(pi?)" |CauchyExpr_adt| |exact_real_arith|)
    (|pi?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    NIL (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (SQRT ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (sqrt?)]" |CauchyExpr_adt|
          |exact_real_arith|)
    (|sqrt?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (add?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (sub?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|posreal_plus_nnreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|) NIL
    (|Integral| CONST-DECL "real" |integral_def| |analysis|) NIL NIL
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|sin6sqrt2_num_p11| 0
  (|sin6sqrt2_num_p11-1| |nil| 3676376596
   ("" (THEN (ERA-NUMERICAL (! 1 1 2) :PRECISION 11) (ASSERT)) NIL NIL)
   ((SQRT ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (sqrt?)]" |CauchyExpr_adt|
          |exact_real_arith|)
    (|sqrt?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (PI ADT-CONSTRUCTOR-DECL "(pi?)" |CauchyExpr_adt| |exact_real_arith|)
    (|pi?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    NIL (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (MULT ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (mult?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (div?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (SIN ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (sin?)]" |CauchyExpr_adt|
         |exact_real_arith|)
    (|sin?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (ADD ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (add?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|) NIL
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|sin| CONST-DECL "real" |sincos_def| |trig|) NIL
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|) NIL
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|exp_pi_num_p9| 0
  (|exp_pi_num_p9-1| |nil| 3676376596
   ("" (THEN (ERA-NUMERICAL (! 1 1 2) :PRECISION 9) (ASSERT)) NIL NIL)
   ((PI ADT-CONSTRUCTOR-DECL "(pi?)" |CauchyExpr_adt| |exact_real_arith|)
    (|pi?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (EXP ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (exp?)]" |CauchyExpr_adt|
         |exact_real_arith|)
    (|exp?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (SUB ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (sub?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|sub?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|exp| CONST-DECL "{py | x = ln(py)}" |ln_exp| |lnexp|) NIL NIL
    (|Integral| CONST-DECL "real" |integral_def| |analysis|) NIL
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|div_small_num_z8_p24| 0
  (|div_small_num_z8_p24-1| |nil| 3676376596
   ("" (THEN (ERA-NUMERICAL (! 1 1 2) :PRECISION 24 :ZERO-PREC 8) (ASSERT)) NIL
    NIL)
   ((PI ADT-CONSTRUCTOR-DECL "(pi?)" |CauchyExpr_adt| |exact_real_arith|)
    (|pi?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (MULT ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (mult?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|mult?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (DIV ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (div?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|div?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|Integral| CONST-DECL "real" |integral_def| |analysis|) NIL
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) NIL
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|ln_small_num_z7_p9| 0
  (|ln_small_num_z7_p9-1| |nil| 3676376596
   ("" (THEN (ERA-NUMERICAL (! 1 1 2) :PRECISION 9 :ZERO-PREC 7) (ASSERT)) NIL
    NIL)
   ((/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) NIL
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (LN ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (ln?)]" |CauchyExpr_adt|
     |exact_real_arith|)
    (|ln?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|nzrat_div_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (- CONST-DECL "[numfield -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|minus_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|nzrat_times_nzrat_is_nzrat| APPLICATION-JUDGEMENT "nzrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|rat_plus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|)
    (|minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    NIL (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|trivial_binding| 0
  (|trivial_binding-1| |nil| 3676376596
   ("" (THEN (SKEEP) (ERA-NUMERICAL "q * q") (ASSERT)) NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posnat_expt| APPLICATION-JUDGEMENT "posnat" |exponentiation| NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|posint_times_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_times_int_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|mult_divides1| APPLICATION-JUDGEMENT "(divides(n))" |divides| NIL)
    (|mult_divides2| APPLICATION-JUDGEMENT "(divides(m))" |divides| NIL)
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|rat_times_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|mult?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (MULT ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (mult?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) NIL)
   SHOSTAK))
 (|sq_sin_cos_1| 0
  (|sq_sin_cos_1-1| |nil| 3703179302
   ("" (THEN (ERA-NUMERICAL "sq(sin(1)) + sq(cos(1))") (ASSERT)) NIL NIL)
   ((COS ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (cos?)]" |CauchyExpr_adt|
         |exact_real_arith|)
    (|cos?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    NIL (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (SIN ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (sin?)]" |CauchyExpr_adt|
         |exact_real_arith|)
    (|sin?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (POW ADT-CONSTRUCTOR-DECL "[[CauchyExpr, nat] -> (pow?)]" |CauchyExpr_adt|
     |exact_real_arith|)
    (|pow?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (ADD ADT-CONSTRUCTOR-DECL "[[CauchyExpr, CauchyExpr] -> (add?)]"
     |CauchyExpr_adt| |exact_real_arith|)
    (|add?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnreal_plus_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal" |real_types|
     NIL)
    (|sq| CONST-DECL "nonneg_real" |sq| |reals|)
    (|sin| CONST-DECL "real" |sincos_def| |trig|)
    (|cos| CONST-DECL "real" |sincos_def| |trig|)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|) NIL NIL
    (|expt| DEF-DECL "real" |exponentiation| NIL)
    (|sq_expt2| FORMULA-DECL NIL |sq| |reals|) NIL
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nzreal_div_nzreal_is_nzreal| APPLICATION-JUDGEMENT "nzreal" |real_types|
     NIL)
    (|real_div_nzreal_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|nonneg_floor_is_nat| APPLICATION-JUDGEMENT "nat" |floor_ceil| NIL)
    (|nnreal_times_nnreal_is_nnreal| APPLICATION-JUDGEMENT "nnreal"
     |real_types| NIL)
    (|posreal_times_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    NIL NIL (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   SHOSTAK))
 (|pi_num_b210| 0
  (|pi_num_b210-1| |nil| 3703167028
   (""
    (THEN (BETA) (ERA-NUMERICAL (! 1 1 2) :PRECISION 210 :BIN-PREC? T)
     (ASSERT))
    NIL NIL)
   ((PI ADT-CONSTRUCTOR-DECL "(pi?)" |CauchyExpr_adt| |exact_real_arith|)
    (|pi?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|pi_bound| NAME-JUDGEMENT "{r: posreal | pi_lb < r AND r < pi_ub}"
     |atan_approx| |trig|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL NIL (|Integral| CONST-DECL "real" |integral_def| |analysis|) NIL
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|ln2_num_b210| 0
  (|ln2_num_b210-1| |nil| 3703167782
   (""
    (THEN (BETA) (ERA-NUMERICAL (! 1 1 2) :PRECISION 210 :BIN-PREC? T)
     (ASSERT))
    NIL NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) NIL
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|posreal_div_posreal_is_posreal| APPLICATION-JUDGEMENT "posreal"
     |real_types| NIL)
    (|Integral| CONST-DECL "real" |integral_def| |analysis|)
    (|ln| CONST-DECL "real" |ln_exp| |lnexp|)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|ln?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (LN ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (ln?)]" |CauchyExpr_adt|
     |exact_real_arith|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) NIL)
   SHOSTAK))
 (|e_num_b210| 0
  (|e_num_b210-1| |nil| 3703167782
   (""
    (THEN (BETA) (ERA-NUMERICAL (! 1 1 2) :PRECISION 210 :BIN-PREC? T)
     (ASSERT))
    NIL NIL)
   ((CONST ADT-CONSTRUCTOR-DECL "[rat -> (const?)]" |CauchyExpr_adt|
           |exact_real_arith|)
    (|const?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (EXP ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (exp?)]" |CauchyExpr_adt|
         |exact_real_arith|)
    (|exp?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL) NIL
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|) NIL
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|e| CONST-DECL "posreal" |ln_exp| |lnexp|) NIL
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   SHOSTAK))
 (|sqrt2_num_b210_TCC1| 0
  (|sqrt2_num_b210_TCC1-1| NIL 3922783244 ("" (ASSERT) NIL NIL)
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|))
   NIL
   (|sqrt2_num_b210| SUBTYPE "sqrt.sqrt(2)"
    "{x: {nnz: real_types.nnreal | number_fields.*(nnz, nnz) = 2} | reals.>(x, 0)}")))
 (|sqrt2_num_b210| 0
  (|sqrt2_num_b210-1| |nil| 3703167782
   (""
    (THEN (BETA) (ERA-NUMERICAL (! 1 1 2) :PRECISION 210 :BIN-PREC? T)
     (ASSERT))
    NIL NIL)
   ((|sqrt_pos| APPLICATION-JUDGEMENT "posreal" |sqrt| |reals|)
    (< CONST-DECL "bool" |reals| NIL)
    (|rat_div_nzrat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL) NIL
    (|sqrt| CONST-DECL "{nnz: nnreal | nnz * nnz = nnx}" |sqrt| |reals|)
    (|nnreal| TYPE-EQ-DECL NIL |real_types| NIL)
    (|posrat_plus_nnrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nonzero_real| NONEMPTY-TYPE-EQ-DECL NIL |reals| NIL)
    (|times_div_cancel2| FORMULA-DECL NIL |extra_real_props| NIL)
    (|posrat_times_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    NIL (|val| ADT-ACCESSOR-DECL "[(some?) -> T]" |Maybe| |structures|)
    (* CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (^ CONST-DECL "real" |exponentiation| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|posreal| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nonneg_real| NONEMPTY-TYPE-EQ-DECL NIL |real_types| NIL)
    (|both_sides_div_pos_lt1| FORMULA-DECL NIL |real_props| NIL)
    (|rat_minus_rat_is_rat| APPLICATION-JUDGEMENT "rat" |rationals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_minus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|posint_exp| APPLICATION-JUDGEMENT "posint" |exponentiation| NIL)
    (|real_times_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL)
    (|numerical_soundness| FORMULA-DECL NIL |cauchy_numerical|
     |exact_real_arith|)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL)
    (|bijective?| CONST-DECL "bool" |functions| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (/ CONST-DECL "[numfield, nznum -> numfield]" |number_fields| NIL)
    (|nznum| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|Some| ADT-CONSTRUCTOR-DECL "[T -> (some?)]" |Maybe| |structures|)
    (|some?| ADT-RECOGNIZER-DECL "[Maybe -> boolean]" |Maybe| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|numerical| CONST-DECL "Output" |cauchy_numerical| |exact_real_arith|)
    (|Output| TYPE-EQ-DECL NIL |cauchy_numerical| |exact_real_arith|)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|Maybe| TYPE-DECL NIL |Maybe| |structures|)
    (|posrat_div_posrat_is_posrat| APPLICATION-JUDGEMENT "posrat" |rationals|
     NIL)
    (|CauchyExpr| TYPE-DECL NIL |CauchyExpr_adt| |exact_real_arith|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|sqrt?| ADT-RECOGNIZER-DECL "[CauchyExpr -> boolean]" |CauchyExpr_adt|
     |exact_real_arith|)
    (SQRT ADT-CONSTRUCTOR-DECL "[CauchyExpr -> (sqrt?)]" |CauchyExpr_adt|
          |exact_real_arith|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rat| NONEMPTY-TYPE-EQ-DECL NIL |rationals| NIL) NIL)
   SHOSTAK)))

