%==============================================================================%
%                                                                              %
% Instantiation of digraphs_ using computational digraphs.                     %
%                                                                              %
%   Mariano Moscato        National Institute of Aerospace (US)   2015         %
%                                                                              %
%==============================================================================%
c_digraphs[T: TYPE]: THEORY
BEGIN

  % proof of correct interpretation
  IMPORTING c_digraphs_imp[T]

  % instantiation
  IMPORTING digraphs_[ T,
  	    	       digraph_type,
		       digraph_verts,
		       digraph_edges,
		       digraph_size,
		       digraph_make]

  % Properties valid only for computational digraphs.
  IMPORTING structures@list_overloading

  data_vert_list: JUDGEMENT
    data(C: (cdigraph)) HAS_TYPE VertList(C)

  % -------------------------------------------------------------------------- %
  % Function to generate a fully connected cdigraph given a list of nodes.
  IMPORTING structures@subrange_list

  fully_connected_edges(size:nat): {ll: list[list[nat]] | length(ll) = size AND
         FORALL(i:below(size)): LET l = nth(ll,i) IN
	                    (FORALL(j:below(length(l))): nth(l,j) < size) AND
	                                                 no_repetitions?(l) } =
    IF size > 0 THEN clone_times[nat](size)(make_srl(0,size-1))
    ELSE null ENDIF

  make_fully_connected(vl: (no_repetitions?[T])): (cdigraph) =
    (# data := vl, adjs := fully_connected_edges(length(vl)) #)

  mfc_is_fully_connected: LEMMA
   FORALL(vl: (no_repetitions?[T]), v1,v2: T):
    LET fc = make_fully_connected(vl) IN
     vert(fc)(v1) AND
     vert(fc)(v2)
     IMPLIES edges(fc)(v1,v2)

END c_digraphs
