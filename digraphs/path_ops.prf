(path_ops
 (walk?_del_vert 0
  (walk?_del_vert-1 nil 3507100928
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (flatten)
        (("" (prop)
          (("1" (hide -2)
            (("1" (expand "verts_in?")
              (("1" (assert)
                (("1" (skosimp*) (("1" (inst?) (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -1)
            (("2" (skosimp*)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (lemma "edges_del_vert")
                    (("2" (expand "edge?")
                      (("2" (assert)
                        (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (edges_del_vert formula-decl nil digraph_ops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edgetype type-eq-decl nil digraphs_utils nil)
    (edge? const-decl "bool" digraphs_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (T formal-type-decl nil path_ops nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finite_remove application-judgement "finite_set[T]" path_ops nil)
    (remove const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (in? const-decl "bool" pairs structures)
    (verts_in? const-decl "bool" walks_ nil))
   nil))
 (walk?_del_vert_not 0
  (walk?_del_vert_not-1 nil 3507100928
   ("" (skosimp*)
    (("" (expand "walk?")
      (("" (flatten)
        (("" (prop)
          (("1" (hide -2)
            (("1" (expand "verts_in?")
              (("1" (assert)
                (("1" (skosimp*)
                  (("1" (expand "verts_of")
                    (("1" (inst 2 "i!1")
                      (("1" (expand "finseq_appl")
                        (("1" (inst?)
                          (("1" (expand "del_vert")
                            (("1" (expand "remove")
                              (("1" (expand "member") (("1" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp*)
            (("2" (inst?)
              (("2" (hide -2)
                (("2" (expand "del_vert")
                  (("2" (expand "edge?")
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (expand "verts_of")
                          (("2" (expand "in?")
                            (("2" (expand "finseq_appl")
                              (("2" (split -2)
                                (("1" (inst?) (("1" (assert) nil nil)) nil)
                                 ("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (in? const-decl "bool" pairs structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_remove application-judgement "finite_set[T]" path_ops nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (T formal-type-decl nil path_ops nil)
    (verts_of const-decl "finite_set[T]" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (del_vert const-decl "digraph[T]" digraph_ops nil)
    (member const-decl "bool" sets nil) (remove const-decl "set" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (verts_in? const-decl "bool" walks_ nil))
   nil))
 (path?_del_vert 0
  (path?_del_vert-2 "" 3790101468
   ("" (skosimp*)
    (("" (expand "path?")
      (("" (flatten)
        (("" (lemma "walk?_del_vert")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((path? const-decl "bool" paths nil)
    (walk?_del_vert formula-decl nil path_ops nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil path_ops nil))
   shostak)
  (path?_del_vert-1 nil 3507100928
   ("" (skosimp*)
    (("" (expand "path?")
      (("" (flatten)
        (("" (lemma "walk?_del_vert") (("" (inst?) (("" (assert) nil))))))))))
    nil)
   ((path? const-decl "bool" paths nil) (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil))
   nil))
 (path?_del_verts 0
  (path?_del_verts-2 "" 3790101469
   ("" (skosimp*)
    (("" (expand "path?")
      (("" (flatten)
        (("" (split +)
          (("1" (hide -2)
            (("1" (expand "walk?")
              (("1" (flatten)
                (("1" (split +)
                  (("1" (hide -2)
                    (("1" (expand "verts_in?")
                      (("1" (expand "del_verts")
                        (("1" (expand "difference")
                          (("1" (expand "member")
                            (("1" (skosimp*)
                              (("1" (inst?) (("1" (assert) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skosimp*)
                    (("2" (expand "finseq_appl")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "edge?")
                            (("2" (assert)
                              (("2" (expand "del_verts")
                                (("2" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((path? const-decl "bool" paths nil)
    (verts_in? const-decl "bool" walks_ nil)
    (difference const-decl "set" sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil path_ops nil)
    (below type-eq-decl nil nat_types nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil)
    (del_verts const-decl "digraph[T]" sep_sets nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil))
   shostak)
  (path?_del_verts-1 nil 3507100928
   ("" (skosimp*)
    (("" (expand "path?")
      (("" (flatten)
        (("" (split +)
          (("1" (hide -2)
            (("1" (expand "walk?")
              (("1" (flatten)
                (("1" (split +)
                  (("1" (hide -2)
                    (("1" (expand "verts_in?")
                      (("1" (expand "del_verts")
                        (("1" (expand "difference")
                          (("1" (expand "member")
                            (("1" (skosimp*)
                              (("1" (inst?) (("1" (assert) nil)))))))))))))))
                   ("2" (skosimp*)
                    (("2" (expand "finseq_appl")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "edge?")
                            (("2" (assert)
                              (("2" (expand "del_verts")
                                (("2" (propax) nil)))))))))))))))))))))))
           ("2" (propax) nil))))))))
    nil)
   ((path? const-decl "bool" paths nil) (walk? const-decl "bool" walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (del_verts const-decl "digraph[T]" sep_sets nil)
    (edge? const-decl "bool" digraphs_ nil))
   nil))
 (walk_to_path 0
  (walk_to_path-1 nil 3507100928
   ("" (skolem!)
    ((""
      (case "FORALL (w: prewalk): NOT walk_from?(G!1, w, s!1, t!1)
                  OR (EXISTS (p: prewalk): path?(G!1, p) AND walk_from?(G!1, p, s!1, t!1))")
      (("1" (flatten)
        (("1" (skosimp*) (("1" (inst -1 "w!1") (("1" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "w" 1 "digraph_induction_walk")
          (("2" (skosimp*)
            (("2"
              (case "(EXISTS (i,j: below(length(w!1))): i /= j AND seq(w!1)(i) = seq(w!1)(j))")
              (("1" (skosimp*)
                (("1" (case "i!1 < j!1")
                  (("1" (inst -3 "w!1^(0,i!1) o w!1^(j!1+1,length(w!1)-1)")
                    (("1" (split -3)
                      (("1" (rewrite "walk?_cut") nil nil)
                       ("2" (propax) nil nil)
                       ("3" (hide -2 -3 3)
                        (("3" (expand "o ")
                          (("3" (expand "^")
                            (("3" (expand "min")
                              (("3" (expand "empty_seq")
                                (("3" (lift-if) (("3" (ground) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "o ")
                      (("2" (expand "^")
                        (("2" (expand "min")
                          (("2" (lift-if)
                            (("2" (expand "empty_seq")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -2 "w!1^(0,j!1) o w!1^(i!1+1,length(w!1)-1)")
                      (("1" (assert)
                        (("1" (split -2)
                          (("1" (hide 4) (("1" (rewrite "walk?_cut") nil nil))
                            nil)
                           ("2" (propax) nil nil)
                           ("3" (expand "o ")
                            (("3" (expand "^")
                              (("3" (expand "min")
                                (("3" (lift-if)
                                  (("3" (expand "empty_seq")
                                    (("3" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "o ")
                        (("2" (expand "^")
                          (("2" (expand "min")
                            (("2" (expand "empty_seq")
                              (("2" (lift-if) (("2" (ground) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2" (inst 2 "w!1")
                  (("2" (assert)
                    (("2" (expand "path?")
                      (("2" (expand "walk_from?")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (skosimp*)
                              (("2" (expand "finseq_appl")
                                (("2" (inst?) (("2" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (walk?_cut formula-decl nil walks_ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j!1 skolem-const-decl "below(length(w!1))" path_ops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (i!1 skolem-const-decl "below(length(w!1))" path_ops nil)
    (w!1 skolem-const-decl "prewalk
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make]" path_ops nil)
    (^ const-decl "finseq" finite_sequences nil)
    (O const-decl "finseq" finite_sequences nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (digraph_induction_walk formula-decl nil walk_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil path_ops nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (walk_from? const-decl "bool" walks_ nil)
    (path? const-decl "bool" paths nil))
   nil))
 (walk_to_path_from 0
  (walk_to_path_from-2 "" 3790101470
   ("" (skosimp*)
    (("" (lemma "walk_to_path")
      (("" (inst?)
        (("" (inst -1 "s!1" "t!1")
          (("" (split -1)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (expand "path_from?")
                  (("1" (assert)
                    (("1" (expand "walk_from?") (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst?) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_to_path formula-decl nil path_ops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (prewalk type-eq-decl nil walks_ nil)
    (walk_from? const-decl "bool" walks_ nil)
    (path_from? const-decl "bool" paths nil)
    (digraph type-eq-decl nil digraph_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (T formal-type-decl nil path_ops nil))
   shostak)
  (walk_to_path_from-1 nil 3507100928
   ("" (skosimp*)
    (("" (lemma "walk_to_path")
      (("" (inst?)
        (("" (inst -1 "s!1" "t!1")
          (("" (split -1)
            (("1" (skosimp*)
              (("1" (inst?)
                (("1" (expand "path_from?")
                  (("1" (assert)
                    (("1" (expand "walk_from?")
                      (("1" (flatten)
                        (("1" (expand "from?")
                          (("1" (assert) nil)))))))))))))))
             ("2" (inst?) nil))))))))))
    nil)
   ((path_from? const-decl "bool" paths nil)
    (walk_from? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (digraph_make const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" digraphs_imp nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]" digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (finite_set type-eq-decl nil finite_sets nil))
   nil)))

