%==============================================================================%
%                                                                              %
% Some theories in this library are wrote is such a way that any of its decla- %
% rations (functions, predicates, formulas) are valid for any type fulfilling  %
% certain conditions. Those conditions are stated in this theory.              %
%                                                                              %
% Such conditions are mainly expressed upon the existence of some functions    %
% ("vert", "edges", "make") which must be provided when the theory is used.    %
% The constraints these functions must satisfy are determined by the predicate %
% "correct_implementation".                                                    %
%                                                                              %
%            Mariano Moscato (NIA) 2015                                        %
%                                                                              %
%==============================================================================%
digraphs_abs[ T:TYPE,
	      ConcreteDigraph: TYPE,
	      vert : [ConcreteDigraph -> [T -> bool]],
	      edges: [ConcreteDigraph -> [T,T -> bool]],
	      size : [ConcreteDigraph -> nat],
	      make : [ v:(is_finite[T]),
	              { e: (is_finite[[T,T]]) |
				        FORALL(x,y:T):
					  e(x,y) IMPLIES v(x) AND v(y) }
   		       -> ConcreteDigraph] ] : THEORY
BEGIN

  vert_type: TYPE = (is_finite[T])
  edge_type(v:vert_type): TYPE = { e: (is_finite[[T,T]]) |
				        FORALL(x,y:T):
					  e(x,y) IMPLIES v(x) AND v(y) }

  correct_implementation_(
   vert : [ConcreteDigraph -> [T -> bool]],
   edges: [ConcreteDigraph -> [T,T -> bool]],
   size : [ConcreteDigraph -> nat],
   make : [v:vert_type, edge_type(v) -> ConcreteDigraph]): bool =
    (FORALL(G: ConcreteDigraph): is_finite(vert(G)) ) AND
    (FORALL(G: ConcreteDigraph): is_finite(edges(G)) ) AND
    (FORALL(x,y:T)(G: ConcreteDigraph):
      edges(G)(x,y) IMPLIES vert(G)(x) AND vert(G)(y)) AND
    (FORALL(v:vert_type,e:edge_type(v)):
        vert(make(v,e)) = v AND edges(make(v,e)) = e) AND
    (FORALL(G: ConcreteDigraph): size(G) = card(vert(G)))

  correct_implementation: bool =
      correct_implementation_(vert,edges,size,make)

  vert_is_finite: LEMMA FORALL(G: ConcreteDigraph):
    correct_implementation
    IMPLIES  is_finite(vert(G))
  AUTO_REWRITE+ vert_is_finite

  edges_is_finite: LEMMA FORALL(G: ConcreteDigraph):
    correct_implementation
    IMPLIES is_finite(edges(G))
  AUTO_REWRITE+ edges_is_finite

  edges_in_verts: LEMMA FORALL(G: ConcreteDigraph)(x,y:T):
    correct_implementation AND edges(G)(x,y)
    IMPLIES vert(G)(x) AND vert(G)(y)
  AUTO_REWRITE+ edges_in_verts

  make_ok: LEMMA FORALL(v:vert_type,e:edge_type(v)):
    correct_implementation
    IMPLIES
        vert(make(v,e)) = v AND edges(make(v,e)) = e
  AUTO_REWRITE+ make_ok

  make_ok_v: LEMMA FORALL(v:vert_type,e:edge_type(v)):
    correct_implementation
    IMPLIES vert(make(v,e)) = v
  AUTO_REWRITE+ make_ok_v

  make_ok_e: LEMMA FORALL(v:vert_type,e:edge_type(v)):
    correct_implementation
    IMPLIES edges(make(v,e)) = e
  AUTO_REWRITE+ make_ok_e

  size_def: LEMMA FORALL(G: ConcreteDigraph):
    correct_implementation
    IMPLIES size(G) = card(vert(G))
  AUTO_REWRITE+ size_def

END digraphs_abs
