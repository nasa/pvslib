%==============================================================================%
%                                                                              %
% This theory contains basic definitions and properties for interpretations of %
% weighted digraphs, as stated in "weighted_digraphs_abs.pvs".                 %
%                                                                              %
% This theory is based on the previous version of the theory                   %
% "weighted_digraphs.pvs".                                                     %
%                                                                              %
%   Andréia Borges Avelar  Universidade de Brasília (Brasil)      2014         %
%   Mauricio Ayala-Rincon  Universidade de Brasília (Brasil)      2014         %
%   Cesar Muñoz            NASA Langley Research Center (US)      2014         %
%   Mariano Moscato        National Institute of Aerospace (US)   2015         %
%                                                                              %
%==============================================================================%
weighted_digraphs_[
       T : TYPE,

       Weight : TYPE,
       add_w : {f : [[Weight, Weight] -> Weight] | associative?(f) },
       zero_w : {zero: Weight | identity?(add_w)(zero)},

       % digraphs
       ConcreteDigraph: TYPE,
       vert : [ConcreteDigraph-> [T -> bool]],
       edges: [ConcreteDigraph -> [T,T -> bool]],
       size : [ConcreteDigraph -> nat],
       make : [ v:(is_finite[T]),
              {e: (is_finite[[T,T]]) | FORALL(x,y:T):
       	          e(x,y) IMPLIES v(x) AND v(y) } -> ConcreteDigraph],

       % weighted digraphs
       wdg           : TYPE,
       dg            : [wdg -> ConcreteDigraph],
       get_wgt       : [W: wdg, (edges(dg(W))) -> Weight],
       WeightsMap    : TYPE,
       weighted_edge?: [WeightsMap->[[T,T]->bool]],  % ~ has_key?
       get_weight    :                               % ~ get_value
                       [map0:WeightsMap,(weighted_edge?(map0))->Weight],
       weight_map?   : [ConcreteDigraph->[WeightsMap-> bool ]],
       make_wdg      : [cd:ConcreteDigraph,map2:(weight_map?(cd))->wdg] ]:THEORY
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a
    % correct interpretation for (uninterpreted) digraphs. That is checked using
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs_abs[T,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation

    IMPORTING weighted_digraphs_abs[T,Weight,add_w,zero_w,
	        ConcreteDigraph,vert,edges,size,make,
		wdg,dg,get_wgt,WeightsMap,
		weighted_edge?,get_weight,weight_map?,make_wdg]
    concretewd_implements_abstractwd: ASSUMPTION
      weighted_digraphs_abs.correct_implementation
  ENDASSUMING

  AUTO_REWRITE+ concretedigraph_implements_abstractdigraph

	IMPORTING circuits_[T,ConcreteDigraph,vert,edges,size,make],
                  di_subgraphs_[T,ConcreteDigraph,vert,edges,size,make]

                            u, v : VAR T
                               g : VAR ConcreteDigraph
         i, i1, i2, j, j1, j2, n : VAR nat
                       w, w1, w2 : VAR prewalk

% -----------------------------------------------------------------------------%
%  Definition of weighted digraph and sub- weighted digraph
% -----------------------------------------------------------------------------%

 G : VAR wdg

 wgt(G) : TYPE = [edge(dg(G)) ->  Weight]

 Sub_wdg(G) : TYPE = {S: wdg | di_subgraph?(dg(S), dg(G))}

% -----------------------------------------------------------------------------%
%            DEFINITIONS: about weights
% -----------------------------------------------------------------------------%

 wgt_aux(G: wdg, w: Walk(dg(G)))(i, (j: below(length(w)))) : RECURSIVE Weight =
   IF j <= i THEN zero_w
   ELSE add_w( wgt_aux(G, w)(i, j - 1) , get_wgt(G,(w(j - 1), w(j))) )
   ENDIF
 MEASURE j

 wgt_walk(G: wdg, w: Walk(dg(G))) : Weight =
   wgt_aux(G, w)(0, length(w) - 1)

% -----------------------------------------------------------------------------%
%            PROPERTIES
% -----------------------------------------------------------------------------%

 wgt_aux_shift_walk: LEMMA
   FORALL (w1, w2: Walk(dg(G)), j1: below(length(w1)), j2: below(length(w2))):
       w1^(i1, j1) = w2^(i2, j2)
     IMPLIES
       wgt_aux(G, w1)(i1, j1) = wgt_aux(G, w2)(i2, j2)

 wgt_aux_first : LEMMA
   FORALL (w : Walk(dg(G)), i, j):
       j < length(w) AND i < j
     IMPLIES
       wgt_aux(G, w)(i, j) = add_w( get_wgt(G,(w(i), w(i + 1))),
       		  	     	    wgt_aux(G, w)(i + 1, j) )

 wgt_aux_split : LEMMA
   FORALL (w : Walk(dg(G)), i, j, n):
       j < length(w) AND i <= n AND n <= j
     IMPLIES
       wgt_aux(G, w)(i, j) = add_w( wgt_aux(G, w)(i, n),
        	  	     	    wgt_aux(G, w)(n, j) )

 wgt_aux_sub_walk: LEMMA
   FORALL (w : Walk(dg(G)), i, j):
       j < length(w) AND i < j
     IMPLIES
       wgt_aux(G, w)(i, j) = wgt_aux(G, w^(i,j))(0, j - i)

 wgt_walk_to_aux: LEMMA
   FORALL(w: Walk(dg(G)), i, j):
      j < length(w) AND i < j IMPLIES
      wgt_walk(G, w^(i, j)) = wgt_aux(G, w)(i, j)

 wgt_walk_decomposed: LEMMA
   j < length(w) AND walk?(dg(G), w) IMPLIES
   wgt_walk(G, w) =  add_w( wgt_walk(G, w^(0, j)),
                            wgt_walk(G, w^(j, length(w)-1)) )

% -----------------------------------------------------------------------------%

 wgt_walk_edge: LEMMA
   FORALL(w: Walk(dg(G))):
    length(w) = 2 IMPLIES wgt_walk(G, w) = get_wgt(G,(w(0), w(1)))

 wgt_comp_rest: LEMMA
   FORALL (w1, w2: Walk(dg(G))):
     last(w1) = first(w2) IMPLIES
     wgt_walk(G, w1 o rest(w2)) = add_w( wgt_walk(G, w1),
     		      		  	 wgt_walk(G, w2) )

 wgt_comp: LEMMA
  FORALL (W1, W2: Walk(dg(G))):
   edge?(dg(G))(last(W1), first(W2))
   IMPLIES wgt_walk(G, W1 o W2) =
             add_w( add_w( wgt_walk(G, W1),
   		      	   wgt_walk(G, gen_seq2(dg(G), last(W1), first(W2))) ),
                    wgt_walk(G, W2) )

END weighted_digraphs_
