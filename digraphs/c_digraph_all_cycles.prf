(|c_digraph_all_cycles|
 (|loi_cons| 0
  (|loi_cons-1| |nil| 3655568650
   ("" (SKEEP)
    (("" (EXPAND "list_of_idxs")
      (("" (SKEEP)
        (("" (INST -1 "i+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   SHOSTAK))
 (|walk?_TCC1| 0
  (|walk?_TCC1-1| |nil| 3655548129 ("" (SUBTYPE-TCC) NIL NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL
   (|walk?| SUBTYPE "(number_fields.+)(c_digraph_all_cycles.i, 1)"
    "below[length[nat](l)]")))
 (|walk?_TCC2| 0
  (|walk?_TCC2-1| |nil| 3655548129 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|walk?| SUBTYPE "c_digraph_all_cycles.i" "below[length[nat](l)]")))
 (|walk?_TCC3| 0
  (|walk?_TCC3-1| |nil| 3655548129 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL))
   NIL
   (|walk?| SUBTYPE
    "list_props[nat].nth(c_digraph_all_cycles.l, c_digraph_all_cycles.i)"
    "below[length[list[nat]](adjs(C))]")))
 (|walk_eq_TCC1| 0
  (|walk_eq_TCC1-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL (|walk_eq| SUBTYPE "c_digraph_all_cycles.i" "below[length[nat](w2)]")))
 (|walk_eq_TCC2| 0
  (|walk_eq_TCC2-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|idx| DEF-DECL "{i: below(length(l)) | nth(l, i) = a}" |more_list_props|
     |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|edges| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|walk_eq| SUBTYPE
    "list_props[nat].nth(c_digraph_all_cycles.w2, c_digraph_all_cycles.i)"
    "below[length[T](data(C))]")))
 (|walk_append_TCC1| 0
  (|walk_append_TCC1-1| |nil| 3655576611 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|walk_append| SUBTYPE "c_digraph_all_cycles.l2" "(list_adt[nat].cons?)")))
 (|walk_append_TCC2| 0
  (|walk_append_TCC2-1| |nil| 3655576611 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL))
   NIL
   (|walk_append| SUBTYPE "more_list_props[nat].last(c_digraph_all_cycles.l1)"
    "below[length[list[nat]](adjs(C))]")))
 (|walk_append_TCC3| 0
  (|walk_append_TCC3-1| |nil| 3655576611
   ("" (SKEEP*) (("" (USE "loi_append") (("" (ASSERT) NIL NIL)) NIL)) NIL)
   ((T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|loi_append| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|walk_append| SUBTYPE
    "list_props[nat].append(c_digraph_all_cycles.l1, c_digraph_all_cycles.l2)"
    "(c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C))")))
 (|walk_append| 0
  (|walk_append-2| "" 3804532594
   ("" (SKEEP 1 :BUT ("l1"))
    (("" (INDUCT "l1")
      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
       ("4" (GRIND) NIL NIL)
       ("5" (SKOLEM 1 ("v" "vs"))
        (("5" (FLATTEN)
          (("5" (USE "loi_cons")
            (("5" (ASSERT)
              (("5" (CASE "walk?(C)(vs)")
                (("1" (ASSERT)
                  (("1" (SPLIT -7)
                    (("1" (ASSERT)
                      (("1" (EXPAND "append" 1)
                        (("1" (EXPAND "walk?" 1)
                          (("1" (SKEEP :PREDS? T)
                            (("1" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 1 (1 3))
                                    (("1" (EXPAND "walk?" -7)
                                      (("1" (INST -7 "0")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "nth" -7 (1 3))
                                            (("1" (ASSERT)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "walk?" -5)
                                (("2" (FLATTEN)
                                  (("2" (INST -5 "i-1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 3 (1 3))
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "append" 1)
                        (("2" (EXPAND "walk?" 1)
                          (("2" (SKEEP :PREDS? T)
                            (("2" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 1 (1 3))
                                    (("1" (EXPAND "walk?" -7)
                                      (("1" (INST -7 "0")
                                        (("1" (EXPAND "nth" -7 (1 3))
                                          (("1" (USE "nth_append[nat]")
                                            (("1" (SPLIT -1)
                                              (("1" (REPLACE -1 :HIDE? T)
                                                (("1" (LIFT-IF 1)
                                                  (("1" (SPLIT 1)
                                                    (("1" (FLATTEN) NIL NIL)
                                                     ("2" (FLATTEN)
                                                      (("2"
                                                        (CASE "length(vs)=0")
                                                        (("1"
                                                          (EXPAND "walk?" -4)
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -1)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "walk?" -3)
                                                (("2" (FLATTEN)
                                                  (("2" (EXPAND "length" 1 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "length" 1 1)
                                          (("2" (EXPAND "walk?" -3)
                                            (("2" (FLATTEN)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SPLIT -5)
                                (("1" (EXPAND "walk?" -1)
                                  (("1" (FLATTEN)
                                    (("1" (INST -1 "i-1")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "nth" 3 (1 3))
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "NOT null?(vs)")
                  (("1" (EXPAND "walk?" 2)
                    (("1" (SPLIT 2)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (EXPAND "walk?" -4)
                        (("2" (SKEEP 1)
                          (("2" (INST -4 "i+1")
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" -4 (1 3))
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "append" 2)
                    (("2" (EXPAND "append" 2)
                      (("2" (ASSERT)
                        (("2" (EXPAND "walk?" 2)
                          (("2" (SKEEP 2 :PREDS? T)
                            (("2" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 2 (1 3))
                                    (("1" (CASE "last(cons(v,vs))=v")
                                      (("1" (REPLACE -1 :HIDE? T)
                                        (("1" (EXPAND "nth" 2 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "nth" 3 1)
                                (("2" (EXPAND "walk?" -7)
                                  (("2" (INST -7 "i-1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 3 3)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
       ("8" (SKEEP*) (("8" (USE "loi_append") (("8" (ASSERT) NIL NIL)) NIL))
        NIL)
       ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL)
       ("11" (SKEEP*)
        (("11" (EXPAND "list_of_idxs")
          (("11" (EXPAND "size")
            (("11" (EXPAND "last")
              (("11" (INST -2 "length(l1)-1")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "C")
                    (("1" (EXPAND "cdigraph") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("12" (GRIND) NIL NIL) ("13" (GRIND) NIL NIL) ("14" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|loi_cons| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|loi_append| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK)
  (|walk_append-1| |nil| 3656062706
   ("" (SKEEP 1 :BUT ("l1"))
    (("" (INDUCT "l1")
      (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
       ("4" (GRIND) NIL NIL)
       ("5" (SKOLEM 1 ("v" "vs"))
        (("5" (FLATTEN)
          (("5" (USE "loi_cons")
            (("5" (ASSERT)
              (("5" (CASE "walk?(C)(vs)")
                (("1" (ASSERT)
                  (("1" (SPLIT -7)
                    (("1" (ASSERT)
                      (("1" (EXPAND "append" 1)
                        (("1" (EXPAND "walk?" 1)
                          (("1" (SKEEP :PREDS? T)
                            (("1" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 1 (1 3))
                                    (("1" (EXPAND "walk?" -7)
                                      (("1" (INST -7 "0")
                                        (("1" (ASSERT)
                                          (("1" (EXPAND "nth" -7 (1 3))
                                            (("1" (ASSERT)
                                              (("1" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (GRIND) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "walk?" -5)
                                (("2" (FLATTEN)
                                  (("2" (INST -5 "i-1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 3 (1 3))
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT)
                      (("2" (EXPAND "append" 1)
                        (("2" (EXPAND "walk?" 1)
                          (("2" (SKEEP :PREDS? T)
                            (("2" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 1 (1 3))
                                    (("1" (EXPAND "walk?" -7)
                                      (("1" (INST -7 "0")
                                        (("1" (EXPAND "nth" -7 (1 3))
                                          (("1" (USE "nth_append[nat]")
                                            (("1" (SPLIT -1)
                                              (("1" (REPLACE -1 :HIDE? T)
                                                (("1" (LIFT-IF 1)
                                                  (("1" (SPLIT 1)
                                                    (("1" (FLATTEN) NIL NIL)
                                                     ("2" (FLATTEN)
                                                      (("2"
                                                        (CASE "length(vs)=0")
                                                        (("1"
                                                          (EXPAND "walk?" -4)
                                                          (("1" (FLATTEN)
                                                            (("1"
                                                              (EXPAND "length"
                                                                      -1)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (EXPAND "walk?" -3)
                                                (("2" (FLATTEN)
                                                  (("2" (EXPAND "length" 1 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "length" 1 1)
                                          (("2" (EXPAND "walk?" -3)
                                            (("2" (FLATTEN)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (SPLIT -5)
                                (("1" (EXPAND "walk?" -1)
                                  (("1" (FLATTEN)
                                    (("1" (INST -1 "i-1")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "nth" 3 (1 3))
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (GRIND) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (CASE "NOT null?(vs)")
                  (("1" (EXPAND "walk?" 2)
                    (("1" (SPLIT 2)
                      (("1" (PROPAX) NIL NIL)
                       ("2" (EXPAND "walk?" -4)
                        (("2" (SKEEP 1)
                          (("2" (INST -4 "i+1")
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" -4 (1 3))
                                (("1" (PROPAX) NIL NIL)) NIL))
                              NIL)
                             ("2" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "append" 2)
                    (("2" (EXPAND "append" 2)
                      (("2" (ASSERT)
                        (("2" (EXPAND "walk?" 2)
                          (("2" (SKEEP 2 :PREDS? T)
                            (("2" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 2 (1 3))
                                    (("1" (CASE "last(cons(v,vs))=v")
                                      (("1" (REPLACE -1 :HIDE? T)
                                        (("1" (EXPAND "nth" 2 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "nth" 3 1)
                                (("2" (EXPAND "walk?" -7)
                                  (("2" (INST -7 "i-1")
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "nth" 3 3)
                                        (("1" (PROPAX) NIL NIL)) NIL))
                                      NIL)
                                     ("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("6" (GRIND) NIL NIL) ("7" (GRIND) NIL NIL)
       ("8" (SKEEP*) (("8" (USE "loi_append") (("8" (ASSERT) NIL NIL)) NIL))
        NIL)
       ("9" (GRIND) NIL NIL) ("10" (GRIND) NIL NIL)
       ("11" (SKEEP*)
        (("11" (EXPAND "list_of_idxs")
          (("11" (EXPAND "size")
            (("11" (EXPAND "last")
              (("11" (INST -4 "length(l1)-1")
                (("1" (ASSERT)
                  (("1" (TYPEPRED "C")
                    (("1" (EXPAND "cdigraph") (("1" (PROPAX) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("12" (GRIND) NIL NIL) ("13" (GRIND) NIL NIL) ("14" (GRIND) NIL NIL))
      NIL))
    NIL)
   ((|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|loi_append| FORMULA-DECL NIL |c_digraphs_def| NIL))
   SHOSTAK))
 (|walk_eq_inj_1| 0
  (|walk_eq_inj_1-1| |nil| 3828696935
   ("" (SKEEP)
    (("" (EXPAND "walk_eq")
      (("" (APPLY-EXTENSIONALITY)
        (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)
         ("2" (APPLY-EXTENSIONALITY)
          (("2" (FLATTEN)
            (("2" (INST?)
              (("2" (INST?)
                (("2" (ASSERT)
                  (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK))
 (|circuit?_TCC1| 0
  (|circuit?_TCC1-1| |nil| 3655548129 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL (|circuit?| SUBTYPE "c_digraph_all_cycles.w" "(list_adt[nat].cons?)")))
 (|circuit?_TCC2| 0
  (|circuit?_TCC2-1| |nil| 3655548129 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|circuit?| SUBTYPE "c_digraph_all_cycles.w"
    "{l: list[nat] | (booleans.NOT)(list_adt[nat].null?(l))}")))
 (|no_repetitions_append| 0
  (|no_repetitions_append-1| |nil| 3828696935
   ("" (INDUCT "l1")
    (("1" (GRIND) NIL NIL)
     ("2" (SKOLEM 1 ("v" "vs"))
      (("2" (FLATTEN)
        (("2" (SKEEP 1)
          (("2" (INST -1 "l2")
            (("2" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (HIDE -5)
                  (("1" (ASSERT)
                    (("1" (EXPAND "append" 1)
                      (("1" (EXPAND "no_repetitions?" 1)
                        (("1" (SKEEP :PREDS? T)
                          (("1" (SPLIT -7)
                            (("1" (CASE "i=0")
                              (("1" (REPLACE -1 :HIDE? T)
                                (("1" (EXPAND "nth" -7 1)
                                  (("1" (EXPAND "nth" -7 1)
                                    (("1" (ASSERT)
                                      (("1" (USE "nth_append[nat]")
                                        (("1" (SPLIT -1)
                                          (("1" (REPLACE -1 :HIDE? T)
                                            (("1" (LIFT-IF -7)
                                              (("1" (SPLIT -7)
                                                (("1" (FLATTEN)
                                                  (("1"
                                                    (EXPAND "no_repetitions?"
                                                            -6)
                                                    (("1" (INST -6 "0" "j")
                                                      (("1" (GRIND) NIL NIL)
                                                       ("2" (GRIND) NIL NIL)
                                                       ("3" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2"
                                                    (LEMMA "nth_member[nat]")
                                                    (("2"
                                                      (INST -1 "l2" "v"
                                                       "j-1-length(vs)")
                                                      (("1" (ASSERT)
                                                        (("1" (INST -8 "v")
                                                          (("1" (ASSERT)
                                                            (("1" (GRIND) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (GRIND) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (HIDE-ALL-BUT (-3 1))
                                            (("2" (EXPAND "length" -1)
                                              (("2" (USE "length_append[nat]")
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (CASE "j=0")
                                (("1" (REPLACE -1 :HIDE? T)
                                  (("1" (HIDE 2)
                                    (("1" (EXPAND "nth" -7)
                                      (("1" (ASSERT)
                                        (("1" (USE "nth_append[nat]")
                                          (("1" (SPLIT -1)
                                            (("1" (REPLACE -1 :HIDE? T)
                                              (("1" (LIFT-IF -7)
                                                (("1" (SPLIT -7)
                                                  (("1" (FLATTEN)
                                                    (("1"
                                                      (EXPAND "no_repetitions?"
                                                              -6)
                                                      (("1" (INST -6 "0" "i")
                                                        (("1" (ASSERT)
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "nth" -6)
                                                              (("1" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND) NIL NIL)
                                                         ("3" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (FLATTEN)
                                                    (("2"
                                                      (LEMMA "nth_member[nat]")
                                                      (("2"
                                                        (INST -1 "l2" "v"
                                                         "i-1-length(vs)")
                                                        (("1" (ASSERT)
                                                          (("1" (INST -8 "v")
                                                            (("1" (ASSERT)
                                                              (("1" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (1 -2))
                                              (("2" (EXPAND "length" -1)
                                                (("2"
                                                  (USE "length_append[nat]")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "no_repetitions?" -1)
                                  (("2" (INST -1 "i-1" "j-1")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL)
                                     ("3" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("2" (HIDE-ALL-BUT (1 -3))
                              (("2" (EXPAND "no_repetitions?")
                                (("2" (SKEEP)
                                  (("2" (INST -2 "i!1+1" "j!1+1")
                                    (("1" (GRIND) NIL NIL)
                                     ("2" (GRIND) NIL NIL)
                                     ("3" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (HIDE-ALL-BUT (-5 1))
                              (("3" (SKEEP)
                                (("3" (INST -3 "n") (("3" (GRIND) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (HIDE -2)
                  (("2" (SPLIT -2)
                    (("1" (FLATTEN)
                      (("1" (ASSERT)
                        (("1" (SPLIT 1)
                          (("1" (HIDE-ALL-BUT (-4 1))
                            (("1" (EXPAND "no_repetitions?")
                              (("1" (SKEEP 1 :PREDS? T)
                                (("1" (INST -4 "i" "j")
                                  (("1" (ASSERT)
                                    (("1" (USE "nth_append[nat]")
                                      (("1" (ASSERT)
                                        (("1" (ASSERT)
                                          (("1" (REPLACE -1 :HIDE? T)
                                            (("1" (USE "nth_append[nat]")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (USE "length_append[nat]")
                                    (("2" (ASSERT) NIL NIL)) NIL)
                                   ("3" (USE "length_append[nat]")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (SKEEP 1)
                            (("2" (INST -5 "n")
                              (("2" (EXPAND "member" -1)
                                (("2" (SPLIT -1)
                                  (("1" (REPLACE -1 :HIDE? T)
                                    (("1" (ASSERT)
                                      (("1" (EXPAND "no_repetitions?" -4)
                                        (("1" (USE "member_nth[nat]")
                                          (("1" (ASSERT)
                                            (("1" (SKEEP -1)
                                              (("1"
                                                (INST -5 "0"
                                                 "i+length(cons(v,vs)) ")
                                                (("1" (SPLIT -5)
                                                  (("1" (EXPAND "nth" -1 1)
                                                    (("1" (EXPAND "append" 1 1)
                                                      (("1"
                                                        (USE "nth_append[nat]")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "length" 1)
                                                    (("2" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2"
                                                  (USE "length_append[nat]")
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3"
                                                  (USE "length_append[nat]")
                                                  (("3" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (HIDE 2)
                      (("2" (EXPAND "no_repetitions?")
                        (("2" (SKEEP)
                          (("2" (INST -2 "i+1" "j+1")
                            (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|list_induction| FORMULA-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL))
   SHOSTAK))
 (|no_repetitions_prefix| 0
  (|no_repetitions_prefix-1| |nil| 3656073052
   ("" (SKEEP)
    (("" (USE "prefix_supl[nat]")
      (("" (ASSERT)
        (("" (SKEEP)
          (("" (REPLACE -1 :HIDE? T :DIR RL)
            (("" (HIDE -2)
              (("" (EXPAND "no_repetitions?")
                (("" (SKEEP 1 :PREDS? T)
                  (("" (INST -3 "i" "j")
                    (("1" (ASSERT)
                      (("1" (USE "nth_append[nat]")
                        (("1" (ASSERT)
                          (("1" (ASSERT)
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (USE "nth_append[nat]")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (USE "length_append[nat]") (("2" (ASSERT) NIL NIL))
                      NIL)
                     ("3" (USE "length_append[nat]") (("3" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prefix_supl| FORMULA-DECL NIL |more_list_props| |structures|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|))
   SHOSTAK))
 (|norep_loi_length| 0
  (|norep_loi_length-1| |nil| 3656074107
   ("" (SKEEP :PREDS? T)
    (("" (HIDE -2)
      (("" (LEMMA "list_pigeonhole[nat]")
        (("" (INST -1 "fullset[naturalnumbers.below(size(C))]" "l")
          (("1" (SPLIT -1)
            (("1" (SKEEP)
              (("1" (EXPAND "no_repetitions?")
                (("1" (INST -4 "n" "m") (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL)
             ("2" (USE "every_nth[nat]")
              (("2" (REPLACE -1 :HIDE? T)
                (("2" (SKEEP)
                  (("2" (EXPAND "extend")
                    (("2" (EXPAND "list_of_idxs")
                      (("2" (INST -2 "i")
                        (("2" (ASSERT)
                          (("2" (EXPAND "fullset") (("2" (PROPAX) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3"
              (CASE "card(fullset[naturalnumbers.below(size(C))]) =size(C)")
              (("1" (ASSERT) NIL NIL) ("2" (USE "below_prelude_card") NIL NIL))
              NIL))
            NIL)
           ("2" (USE "finite_extension[nat,below(size(C))]")
            (("2" (REPLACE -1 :HIDE? T)
              (("2" (USE "finite_full[below(size(C))]")
                (("2" (REPLACE -1 :HIDE? T :DIR RL)
                  (("2" (EXPAND "is_finite_type")
                    (("2" (INST 1 "size(C)" "LAMBDA(i:below(size(C))):i")
                      (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|fullset| CONST-DECL "set" |sets| NIL)
    (|extend| CONST-DECL "R" |extend| NIL)
    (FALSE CONST-DECL "bool" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Card| CONST-DECL "nat" |finite_sets| NIL)
    (|card| CONST-DECL "{n: nat | n = Card(S)}" |finite_sets| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below_prelude_card| FORMULA-DECL NIL |ordered_nat| |orders|)
    (|every_nth| FORMULA-DECL NIL |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|injective?| CONST-DECL "bool" |functions| NIL)
    (|is_finite_type| CONST-DECL "bool" |finite_sets| NIL)
    (|finite_full| FORMULA-DECL NIL |finite_sets| NIL)
    (|finite_extension| FORMULA-DECL NIL |extend_set_props| NIL)
    (|list_pigeonhole| FORMULA-DECL NIL |more_list_props| |structures|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   SHOSTAK))
 (|cycle?_TCC1| 0
  (|cycle?_TCC1-1| |nil| 3655551876 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL (|cycle?| SUBTYPE "c_digraph_all_cycles.c" "(list_adt[nat].cons?)")))
 (|cycle_prefix| 0
  (|cycle_prefix-1| |nil| 3656082121
   ("" (SKEEP)
    (("" (USE "prefix_supl[nat]")
      (("" (REPLACE -1 :HIDE? T)
        (("" (SKEEP)
          (("" (CASE "L=null")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (USE "append_null[nat]") (("1" (ASSERT) NIL NIL)) NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (CASE "car(c2)=last(c2)")
                (("1" (CASE "car(c1) = last(c1)")
                  (("1" (CASE "car(c1) = car(c2)")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (EXPAND "last")
                          (("1" (EXPAND "cycle?" -3)
                            (("1" (EXPAND "no_repetitions?")
                              (("1" (CASE "length(c1)>=2")
                                (("1" (CASE "length(c2)>=2")
                                  (("1" (EXPAND "nth" -3)
                                    (("1" (ASSERT)
                                      (("1"
                                        (INST -5 "length(c1)-2" "length(c2)-2")
                                        (("1" (SPLIT -5)
                                          (("1" (EXPAND "/=")
                                            (("1" (REPLACE -3 :HIDE? T :DIR RL)
                                              (("1"
                                                (REPLACE -4 :HIDE? T :DIR RL)
                                                (("1" (EXPAND "append" 1)
                                                  (("1" (LIFT-IF 1)
                                                    (("1" (SPLIT 1)
                                                      (("1" (FLATTEN)
                                                        (("1" (TYPEPRED "c1")
                                                          (("1"
                                                            (EXPAND "walk?")
                                                            (("1" (FLATTEN) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (FLATTEN)
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (USE
                                                             "nth_append[nat]")
                                                            (("2" (SPLIT -1)
                                                              (("1"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("1"
                                                                  (LIFT-IF 2)
                                                                  (("1"
                                                                    (SPLIT 2)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL)
                                                                     ("2"
                                                                      (FLATTEN)
                                                                      (("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL)
                                                               ("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "/=")
                                            (("2" (HIDE-ALL-BUT (-1 -6 1))
                                              (("2"
                                                (REPLACE -2 :HIDE? T :DIR RL)
                                                (("2"
                                                  (USE "length_append[nat]")
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (REPLACE -5 :HIDE? T :DIR RL)
                                          (("2" (EXPAND "append" 1)
                                            (("2" (LIFT-IF 1)
                                              (("2" (SPLIT 1)
                                                (("1" (FLATTEN)
                                                  (("1" (TYPEPRED "c1")
                                                    (("1" (EXPAND "walk?")
                                                      (("1" (FLATTEN) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (FLATTEN)
                                                  (("2" (ASSERT)
                                                    (("2"
                                                      (USE
                                                       "length_append[nat]")
                                                      (("2"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("2"
                                                          (EXPAND "length" 2 1)
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "c2")
                                    (("2" (EXPAND "circuit?" -4)
                                      (("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "c1")
                                  (("2" (EXPAND "circuit?" -4)
                                    (("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "append" -5)
                      (("2" (LIFT-IF -5)
                        (("2" (SPLIT -5)
                          (("1" (FLATTEN)
                            (("1" (TYPEPRED "c1")
                              (("1" (EXPAND "walk?") (("1" (FLATTEN) NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2" (DECOMPOSE-EQUALITY -1) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "c1")
                    (("2" (EXPAND "circuit?") (("2" (FLATTEN) NIL NIL)) NIL))
                    NIL)
                   ("3" (TYPEPRED "c1")
                    (("3" (EXPAND "walk?") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)
                   ("4" (TYPEPRED "c1")
                    (("4" (EXPAND "walk?")
                      (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "c2")
                  (("2" (EXPAND "circuit?" -4) (("2" (FLATTEN) NIL NIL)) NIL))
                  NIL)
                 ("3" (TYPEPRED "c2")
                  (("3" (EXPAND "walk?") (("3" (FLATTEN) NIL NIL)) NIL)) NIL)
                 ("4" (TYPEPRED "c2")
                  (("4" (EXPAND "walk?")
                    (("4" (FLATTEN) (("4" (ASSERT) NIL NIL)) NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prefix_supl| FORMULA-DECL NIL |more_list_props| |structures|)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|append_null| FORMULA-DECL NIL |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL))
   SHOSTAK))
 (|cycle_construction_loi| 0
  (|cycle_construction_loi-1| |nil| 3656764704
   ("" (SKEEP)
    (("" (EXPAND "list_of_idxs")
      (("" (SKEEP)
        (("" (TYPEPRED "walked")
          (("" (HIDE -1)
            (("" (EXPAND "list_of_idxs")
              (("" (USE "reverse_def[nat]")
                (("" (ASSERT)
                  (("" (SPLIT -1)
                    (("1" (REPLACES -1)
                      (("1" (INST?)
                        (("1" (HIDE 2)
                          (("1" (TYPEPRED "i")
                            (("1" (USE "length_reverse[nat]")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (USE "length_reverse[nat]") (("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|reverse_def| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL))
 (|cycle_construction_TCC1| 0
  (|cycle_construction_TCC1-2| |nil| 3655803332
   ("" (SKEEP*) (("" (USE "cycle_construction_loi") NIL NIL)) NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cycle_construction_loi| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycle_construction| SUBTYPE
    "list_props[nat].reverse(c_digraph_all_cycles.walked)"
    "(c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C))"))
  (|cycle_construction_TCC1-1| |nil| 3655641985 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|cycle_construction| SUBTYPE
    "list_props[nat].reverse(c_digraph_all_cycles.walked)"
    "(c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C))")))
 (|cycle_construction_TCC2| 0
  (|cycle_construction_TCC2-1| |nil| 3655641985 ("" (GRIND) NIL NIL)
   ((|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|cycle_construction| SUBTYPE "c_digraph_all_cycles.walked"
    "(list_adt[nat].cons?)")))
 (|cycle_construction_TCC3| 0
  (|cycle_construction_TCC3-1| |nil| 3655641985
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE-ALL-BUT (-2 2))
        (("" (EXPAND "list_of_idxs")
          (("" (EXPAND "size")
            (("" (TYPEPRED "C")
              (("" (EXPAND "cdigraph")
                (("" (INST -2 "0")
                  (("1" (EXPAND "nth" -2) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (TYPEPRED "walked")
                    (("2" (HIDE-ALL-BUT (1 2))
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycle_construction| SUBTYPE
    "list_adt[nat].car(c_digraph_all_cycles.walked)"
    "below[length[list[nat]](adjs(C))]")))
 (|cycle_construction_TCC4| 0
  (|cycle_construction_TCC4-3| "" 3744338290
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (SPLIT 2)
          (("1" (LEMMA "loi_permutation")
            (("1"
              (INST -1 "C" "cons[nat](v, walked)"
               "reverse(cons[nat](v, walked))")
              (("1" (ASSERT)
                (("1" (HIDE 2)
                  (("1" (EXPAND "list_of_idxs")
                    (("1" (SKEEP)
                      (("1" (CASE "i=0")
                        (("1" (REPLACES -1)
                          (("1" (EXPAND "nth" 1)
                            (("1" (TYPEPRED "v") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (INST -1 "i-1")
                          (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "i")
                              (("2" (ASSERT)
                                (("2" (EXPAND "length" -1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (USE "permutation_reverse[nat]")
                (("2" (ASSERT)
                  (("2" (HIDE 2)
                    (("2" (USE "permutation_reflexive[nat]") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "reverse" 1)
            (("2" (USE "walk_append")
              (("1" (ASSERT)
                (("1" (HIDE 2)
                  (("1" (SPLIT 1)
                    (("1" (GRIND) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (USE "last_reverse[nat]") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "list_of_idxs")
                (("2" (SKEEP)
                  (("2" (CASE "i=0")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (EXPAND "nth")
                        (("1" (TYPEPRED "v") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "i")
                      (("2" (HIDE-ALL-BUT (-1 1))
                        (("2" (EXPAND "length")
                          (("2" (ASSERT)
                            (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (EXPAND "circuit?")
            (("3" (SPLIT 1)
              (("1" (LEMMA "last_reverse[nat]")
                (("1" (INST -1 "cons[nat](v, walked)")
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1" (ASSERT)
                      (("1" (LEMMA "car_reverse[nat]")
                        (("1" (INST -1 "cons[nat](v, walked)")
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (USE "last_cons[nat]")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (USE "length_reverse[nat]")
                (("2" (REPLACE -1 :HIDE? T)
                  (("2" (EXPAND "length")
                    (("2" (EXPAND "walk?")
                      (("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|permutation_list| CONST-DECL "bool" |permutations_list| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|permutation_reflexive| FORMULA-DECL NIL |permutations_list| |structures|)
    (|permutation_reverse| FORMULA-DECL NIL |permutations_list| |structures|)
    (|loi_permutation| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (|walk_append| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK
   (|cycle_construction| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.v, c_digraph_all_cycles.walked))"
    "(c_digraph_all_cycles.circuit?(c_digraph_all_cycles.C))"))
  (|cycle_construction_TCC4-2| |nil| 3655803535
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (SPLIT 2)
          (("1" (LEMMA "loi_permutation")
            (("1"
              (INST -1 "C" "cons[nat](v, walked)"
               "reverse(cons[nat](v, walked))")
              (("1" (ASSERT)
                (("1" (HIDE 2)
                  (("1" (EXPAND "list_of_idxs")
                    (("1" (SKEEP)
                      (("1" (CASE "i=0")
                        (("1" (REPLACES -1)
                          (("1" (EXPAND "nth" 1)
                            (("1" (TYPEPRED "v") (("1" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (INST -1 "i-1")
                          (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "i")
                              (("2" (ASSERT)
                                (("2" (EXPAND "length" -1)
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (USE "permutation_reverse[nat]")
                (("2" (ASSERT)
                  (("2" (HIDE 2)
                    (("2" (USE "permutation_reflexive[nat]") NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "reverse" 1)
            (("2" (USE "walk_append")
              (("1" (ASSERT)
                (("1" (HIDE 2)
                  (("1" (SPLIT 1)
                    (("1" (GRIND) NIL NIL)
                     ("2" (FLATTEN)
                      (("2" (USE "last_reverse[nat]") (("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (EXPAND "list_of_idxs")
                (("2" (SKEEP)
                  (("2" (CASE "i=0")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (EXPAND "nth")
                        (("1" (TYPEPRED "v") (("1" (PROPAX) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "i")
                      (("2" (HIDE-ALL-BUT (-1 1))
                        (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (EXPAND "circuit?")
            (("3" (SPLIT 1)
              (("1" (LEMMA "last_reverse[nat]")
                (("1" (INST -1 "cons[nat](v, walked)")
                  (("1" (REPLACE -1 :HIDE? T)
                    (("1" (ASSERT)
                      (("1" (LEMMA "car_reverse[nat]")
                        (("1" (INST -1 "cons[nat](v, walked)")
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (USE "last_cons[nat]")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (USE "length_reverse[nat]")
                (("2" (REPLACE -1 :HIDE? T)
                  (("2" (EXPAND "length")
                    (("2" (EXPAND "walk?")
                      (("2" (FLATTEN)
                        (("2" (ASSERT)
                          (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|permutation_list| CONST-DECL "bool" |permutations_list| |structures|)
    (|permutation_reflexive| FORMULA-DECL NIL |permutations_list| |structures|)
    (|permutation_reverse| FORMULA-DECL NIL |permutations_list| |structures|)
    (|loi_permutation| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|cycle_construction| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.v, c_digraph_all_cycles.walked))"
    "(c_digraph_all_cycles.circuit?(c_digraph_all_cycles.C))"))
  (|cycle_construction_TCC4-1| |nil| 3655641985 ("" (SUBTYPE-TCC) NIL NIL) NIL
   NIL
   (|cycle_construction| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.v, c_digraph_all_cycles.walked))"
    "(c_digraph_all_cycles.circuit?(c_digraph_all_cycles.C))")))
 (|cycle_construction| 0
  (|cycle_construction-2| |nil| 3656333987
   ("" (SKEEP*)
    (("" (EXPAND "cycle?")
      (("" (HIDE-ALL-BUT (-3 -2 1))
        (("" (EXPAND "reverse" 1)
          (("" (USE "cdr_append[nat]")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (USE "no_repetitions_append[nat]")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (SPLIT 1)
                      (("1" (EXPAND "no_repetitions?")
                        (("1" (SKEEP)
                          (("1" (INST -2 "i+1" "j+1")
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "j")
                              (("2" (REVEAL -5)
                                (("2" (EXPAND "walk?")
                                  (("2" (FLATTEN)
                                    (("2" (EXPAND "length" 2)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (TYPEPRED "i")
                              (("3" (REVEAL -5)
                                (("3" (EXPAND "walk?")
                                  (("3" (FLATTEN)
                                    (("3" (EXPAND "length" 2)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL)
                       ("3" (SKEEP)
                        (("3" (EXPAND "member" -2)
                          (("3" (EXPAND "member" -2)
                            (("3" (REPLACE -2 :HIDE? T)
                              (("3" (REPLACE -3 :HIDE? T :DIR RL)
                                (("3" (EXPAND "no_repetitions?")
                                  (("3" (USE "member_nth[nat]")
                                    (("3" (ASSERT)
                                      (("3" (SKEEP -1)
                                        (("3" (INST -3 "i+1" "0")
                                          (("1" (EXPAND "/=")
                                            (("1" (EXPAND "nth" 1)
                                              (("1" (USE "car_reverse[nat]")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REVEAL -8)
                                            (("2" (EXPAND "walk?")
                                              (("2" (FLATTEN)
                                                (("2" (EXPAND "length")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (TYPEPRED "i")
                                            (("3" (REVEAL -8)
                                              (("3" (EXPAND "walk?")
                                                (("3" (FLATTEN)
                                                  (("3" (EXPAND "length" 2)
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REVEAL -2)
              (("2" (EXPAND "walk?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|no_repetitions_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL)
  (|cycle_construction-1| |nil| 3655642083
   ("" (SKEEP*)
    (("" (EXPAND "cycle?")
      (("" (HIDE-ALL-BUT (-3 -2 1))
        (("" (EXPAND "reverse" 1)
          (("" (USE "cdr_append[nat]")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (USE "no_repetitions_append")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (SPLIT 1)
                      (("1" (EXPAND "no_repetitions?")
                        (("1" (SKEEP)
                          (("1" (INST -2 "i+1" "j+1")
                            (("1" (ASSERT)
                              (("1" (EXPAND "nth" 2) (("1" (PROPAX) NIL NIL))
                                NIL))
                              NIL)
                             ("2" (TYPEPRED "j")
                              (("2" (REVEAL -5)
                                (("2" (EXPAND "walk?")
                                  (("2" (FLATTEN)
                                    (("2" (EXPAND "length" 2)
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL)
                             ("3" (TYPEPRED "i")
                              (("3" (REVEAL -5)
                                (("3" (EXPAND "walk?")
                                  (("3" (FLATTEN)
                                    (("3" (EXPAND "length" 2)
                                      (("3" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (GRIND) NIL NIL)
                       ("3" (SKEEP)
                        (("3" (EXPAND "member" -2)
                          (("3" (EXPAND "member" -2)
                            (("3" (REPLACE -2 :HIDE? T)
                              (("3" (REPLACE -3 :HIDE? T :DIR RL)
                                (("3" (EXPAND "no_repetitions?")
                                  (("3" (USE "member_nth[nat]")
                                    (("3" (ASSERT)
                                      (("3" (SKEEP -1)
                                        (("3" (INST -3 "i+1" "0")
                                          (("1" (EXPAND "/=")
                                            (("1" (EXPAND "nth" 1)
                                              (("1" (USE "car_reverse[nat]")
                                                (("1" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL)
                                           ("2" (REVEAL -8)
                                            (("2" (EXPAND "walk?")
                                              (("2" (FLATTEN)
                                                (("2" (EXPAND "length")
                                                  (("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("3" (TYPEPRED "i")
                                            (("3" (REVEAL -8)
                                              (("3" (EXPAND "walk?")
                                                (("3" (FLATTEN)
                                                  (("3" (EXPAND "length" 2)
                                                    (("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REVEAL -2)
              (("2" (EXPAND "walk?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|cdr_append| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK))
 (|circuit_walk_eq| 0
  (|circuit_walk_eq-1| |nil| 3828697190
   (""
    (THEN (SKEEP) (TYPEPRED "ci") (HIDE -1) (EXPAND "circuit?") (FLATTEN)
     (EXPAND "walk_eq") (FLATTEN) (ASSERT) (EXPAND "finseq_appl")
     (EXPAND "pre_circuit?") (EXPAND "finseq_appl") (INST-CP -6 "0")
     (INST -6 "length(ci)-1") (REPLACE -5 :DIR RL) (REPLACE -6 :HIDE? T)
     (REPLACE -6 :HIDE? T) (EXPAND "last") (ASSERT) (GRIND))
    NIL NIL)
   ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |circuits_| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL))
   SHOSTAK))
 (|cycle_walk_eq| 0
  (|cycle_walk_eq-1| |nil| 3828697190
   ("" (SKEEP)
    (("" (TYPEPRED "ci")
      (("" (HIDE -1)
        (("" (EXPAND "cycle?")
          (("" (SPLIT 1)
            (("1" (USE "circuit_walk_eq") (("1" (ASSERT) NIL NIL)) NIL)
             ("2" (EXPAND "finseq_appl")
              (("2" (SKEEP)
                (("2" (CASE "i=0")
                  (("1" (EXPAND "circuit?")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "no_repetitions?")
                        (("1" (EXPAND "last")
                          (("1" (EXPAND "nth" -5)
                            (("1" (LIFT-IF -5)
                              (("1" (SPLIT -5)
                                (("1" (GRIND) NIL NIL)
                                 ("2" (FLATTEN)
                                  (("2" (EXPAND "length" -1)
                                    (("2" (LIFT-IF -1)
                                      (("2" (SPLIT -1)
                                        (("1" (FLATTEN)
                                          (("1" (EXPAND "length")
                                            (("1" (ASSERT) NIL NIL)) NIL))
                                          NIL)
                                         ("2" (FLATTEN)
                                          (("2" (ASSERT)
                                            (("2"
                                              (INST -7 "length(cdr(ci))-1"
                                               "j-1")
                                              (("1" (SPLIT -7)
                                                (("1" (EXPAND "/=")
                                                  (("1"
                                                    (REPLACE -1 :DIR RL :HIDE?
                                                             T)
                                                    (("1" (EXPAND "walk_eq")
                                                      (("1" (FLATTEN)
                                                        (("1" (INST-CP -7 "0")
                                                          (("1" (INST -7 "j")
                                                            (("1"
                                                              (EXPAND
                                                               "finseq_appl")
                                                              (("1"
                                                                (EXPAND "nth"
                                                                        -8 2)
                                                                (("1"
                                                                  (EXPAND "nth"
                                                                          -7 2)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             -2)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -7
                                                                       :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -7
                                                                         :HIDE?
                                                                         T)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (HIDE-ALL-BUT
                                                                             (-1
                                                                              1
                                                                              4))
                                                                            (("1"
                                                                              (TYPEPRED
                                                                               "C")
                                                                              (("1"
                                                                                (EXPAND
                                                                                 "cdigraph")
                                                                                (("1"
                                                                                  (FLATTEN)
                                                                                  (("1"
                                                                                    (HIDE-ALL-BUT
                                                                                     (-3
                                                                                      -5
                                                                                      1
                                                                                      2))
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "no_repetitions?")
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "car(ci)"
                                                                                         "nth(cdr(ci),j-1)")
                                                                                        (("1"
                                                                                          (ASSERT)
                                                                                          NIL
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "/=")
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL)
                                               ("2" (GRIND) NIL NIL)
                                               ("3" (EXPAND "length" -6)
                                                (("3" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (CASE "j=0")
                    (("1" (EXPAND "circuit?")
                      (("1" (FLATTEN)
                        (("1" (EXPAND "no_repetitions?")
                          (("1" (EXPAND "last")
                            (("1" (EXPAND "nth" -5)
                              (("1" (LIFT-IF -5)
                                (("1" (SPLIT -5)
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (FLATTEN)
                                    (("2" (EXPAND "length" -1)
                                      (("2" (LIFT-IF -1)
                                        (("2" (SPLIT -1)
                                          (("1" (FLATTEN)
                                            (("1" (EXPAND "length")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2"
                                                (INST -7 "i-1"
                                                 "length(cdr(ci))-1")
                                                (("1" (SPLIT -7)
                                                  (("1" (EXPAND "/=")
                                                    (("1"
                                                      (REPLACE -1 :DIR RL
                                                               :HIDE? T)
                                                      (("1" (EXPAND "walk_eq")
                                                        (("1" (FLATTEN)
                                                          (("1"
                                                            (INST-CP -7 "0")
                                                            (("1" (INST -7 "i")
                                                              (("1"
                                                                (EXPAND
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (EXPAND "nth"
                                                                          -8 2)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "nth" -7
                                                                     2)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1 -2)
                                                                      (("1"
                                                                        (REPLACE
                                                                         -7
                                                                         :HIDE?
                                                                         T)
                                                                        (("1"
                                                                          (REPLACE
                                                                           -7
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             :HIDE?
                                                                             T)
                                                                            (("1"
                                                                              (HIDE-ALL-BUT
                                                                               (-1
                                                                                1
                                                                                4))
                                                                              (("1"
                                                                                (TYPEPRED
                                                                                 "C")
                                                                                (("1"
                                                                                  (EXPAND
                                                                                   "cdigraph")
                                                                                  (("1"
                                                                                    (FLATTEN)
                                                                                    (("1"
                                                                                      (HIDE-ALL-BUT
                                                                                       (-3
                                                                                        -5
                                                                                        1
                                                                                        2))
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "no_repetitions?")
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "car(ci)"
                                                                                           "nth(cdr(ci),i-1)")
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (EXPAND "/=")
                                                    (("2" (GRIND) NIL NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (EXPAND "length" -6)
                                                  (("2" (ASSERT) NIL NIL)) NIL)
                                                 ("3" (GRIND) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "no_repetitions?")
                      (("2" (EXPAND "walk_eq")
                        (("2" (FLATTEN)
                          (("2" (INST-CP -7 "i")
                            (("2" (EXPAND "finseq_appl")
                              (("2" (EXPAND "nth" -8 2)
                                (("2" (ASSERT)
                                  (("2" (INST -7 "j")
                                    (("2" (EXPAND "nth" -7 2)
                                      (("2" (REPLACE -7 :HIDE? T)
                                        (("2" (REPLACE -7 :HIDE? T)
                                          (("2" (INST -5 "i-1" "j-1")
                                            (("2" (ASSERT)
                                              (("2" (HIDE-ALL-BUT (-1 -5))
                                                (("2" (TYPEPRED "C")
                                                  (("2" (EXPAND "cdigraph")
                                                    (("2" (FLATTEN)
                                                      (("2"
                                                        (HIDE-ALL-BUT
                                                         (-3 -5 1))
                                                        (("2"
                                                          (EXPAND
                                                           "no_repetitions?")
                                                          (("2"
                                                            (INST -1
                                                             "nth(cdr(ci), i - 1)"
                                                             "nth(cdr(ci), j - 1)")
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|cycle?| CONST-DECL "bool" |cycles_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|circuit_walk_eq| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL))
   SHOSTAK))
 (|cycle_construction_size_TCC1| 0
  (|cycle_construction_size_TCC1-1| |nil| 3656764056
   ("" (SKEEP*) (("" (USE "cycle_construction_loi") NIL NIL)) NIL)
   ((|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cycle_construction_loi| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycle_construction_size| SUBTYPE
    "list_props[nat].reverse(c_digraph_all_cycles.walked)"
    "(c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C))")))
 (|cycle_construction_size_TCC2| 0
  (|cycle_construction_size_TCC2-1| |nil| 3656764056 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|cycle_construction_size| SUBTYPE "c_digraph_all_cycles.walked"
    "{l: list[nat] | (booleans.NOT)(list_adt[nat].null?(l))}")))
 (|cycle_construction_size| 0
  (|cycle_construction_size-2| |nil| 3656764143
   ("" (SKEEP*)
    (("" (USE "norep_loi_length")
      (("1" (ASSERT) NIL NIL)
       ("2" (TYPEPRED "walked")
        (("2" (HIDE-ALL-BUT (-4 1))
          (("2" (EXPAND "no_repetitions?")
            (("2" (SKEEP)
              (("2" (INST -1 "length(walked)-1-i" "length(walked)-1-j")
                (("1" (ASSERT)
                  (("1" (LEMMA "reverse_def[nat]")
                    (("1" (INST -1 "walked" "length(walked) - 1 - j")
                      (("1" (ASSERT)
                        (("1" (REPLACE -1 :HIDE? T)
                          (("1" (LEMMA "reverse_def[nat]")
                            (("1" (INST -1 "walked" "length(walked) - 1 - i")
                              (("1" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "length_reverse[nat]") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (USE "length_reverse[nat]") (("3" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|norep_loi_length| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|reverse_def| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL)
  (|cycle_construction_size-1| |nil| 3656764065
   ("" (SKEEP*)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "member" -1)
          (("1" (SPLIT -1)
            (("1" (INST 1 "w")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (REPLACE -2 :HIDE? T)
                  (("1" (EXPAND "member")
                    (("1" (HIDE -1)
                      (("1" (USE "prefix_reflexive[nat]") NIL)))))))))
               ("2" (TYPEPRED "walking")
                (("2" (EXPAND "list_of_idxs")
                  (("2" (INST -2 "0")
                    (("1" (ASSERT) NIL)
                     ("2" (REPLACE -5 :HIDE? T)
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL)))))))))))))
             ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
              (("1" (HIDE -1)
                (("1" (INST -1 "cycle")
                  (("1" (ASSERT)
                    (("1" (SKEEP -1)
                      (("1" (INST 1 "w_1")
                        (("1" (ASSERT)
                          (("1" (REPLACE -5 :HIDE? T)
                            (("1" (GRIND) NIL)))))))))))))))
               ("2" (HIDE 2)
                (("2" (TYPEPRED "ws")
                  (("2" (HIDE -1)
                    (("2" (TYPEPRED "walking")
                      (("2" (HIDE -1)
                        (("2" (REPLACE -5 :HIDE? T)
                          (("2" (USE "loi_cons")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_end[nat]")
                                (("2" (ASSERT) NIL)))))))))))))))))))))))))))
       ("2" (FLATTEN)
        (("2" (SKEEP -1)
          (("2" (CASE "w_1 =v")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REPLACE -3 :HIDE? T)
                (("1" (EXPAND "member" 1)
                  (("1" (FLATTEN)
                    (("1"
                      (CASE "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (HIDE-ALL-BUT (-1 -3 1))
                        (("1" (TYPEPRED "cycle")
                          (("1" (HIDE-ALL-BUT (-5 -6 -7 1))
                            (("1" (LEMMA "cycle_prefix")
                              (("1" (INST? -1 :WHERE -4)
                                (("1" (INST? -1 :WHERE -4)
                                  (("1" (ASSERT) NIL)))))))))))))
                       ("2" (HIDE 2 3)
                        (("2" (USE "cycle_construction")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "walking")
                              (("1" (REPLACE -6 :HIDE? T)
                                (("1" (HIDE-ALL-BUT (1 -3))
                                  (("1" (USE "suffix_member[nat]")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "v")
                                        (("1" (GRIND) NIL)))))))))))))))
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "walking")
                              (("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (ASSERT)
                                  (("2" (GRIND) NIL)))))))))))))))))))))))
             ("2" (REPLACE -3 :HIDE? T)
              (("2" (REPLACE -3 :HIDE? T)
                (("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "member" 2)
                      (("2" (FLATTEN)
                        (("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (ASSERT)
                                (("1" (INST 1 "w_1")
                                  (("1" (ASSERT) NIL)))))))))
                           ("2" (TYPEPRED "walking")
                            (("2" (REVEAL -1)
                              (("2" (HIDE -2)
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (USE "loi_cons")
                                    (("2" (ASSERT)
                                      (("2" (USE "suffix_end[nat]")
                                        (("2" (ASSERT)
                                          NIL))))))))))))))))))))))))))))))))))))))
    NIL)
   NIL NIL))
 (|cycle_construction_grow_TCC1| 0
  (|cycle_construction_grow_TCC1-1| |nil| 3656764502 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   NIL
   (|cycle_construction_grow| SUBTYPE "c_digraph_all_cycles.walked"
    "(list_adt[nat].cons?)")))
 (|cycle_construction_grow_TCC2| 0
  (|cycle_construction_grow_TCC2-2| |nil| 3656764944
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE-ALL-BUT (-2 1))
        (("" (EXPAND "list_of_idxs")
          (("" (EXPAND "size")
            (("" (TYPEPRED "C")
              (("" (EXPAND "cdigraph")
                (("" (INST -2 "0")
                  (("1" (EXPAND "nth" -2) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (HIDE-ALL-BUT 1)
                    (("2" (CASE "cons?(walked)")
                      (("1" (GRIND) NIL NIL)
                       ("2" (HIDE-ALL-BUT 1)
                        (("2" (TYPEPRED "walked")
                          (("2" (EXPAND "walk?")
                            (("2" (FLATTEN)
                              (("2" (USE "null_reverse[nat]")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycle_construction_grow| SUBTYPE
    "list_adt[nat].car(c_digraph_all_cycles.walked)"
    "below[length[list[nat]](C`adjs)]"))
  (|cycle_construction_grow_TCC2-1| |nil| 3656764502 ("" (SUBTYPE-TCC) NIL NIL)
   NIL NIL
   (|cycle_construction_grow| SUBTYPE
    "list_adt[nat].car(c_digraph_all_cycles.walked)"
    "below[length[list[nat]](C`adjs)]")))
 (|cycle_construction_grow_TCC3| 0
  (|cycle_construction_grow_TCC3-1| |nil| 3656764502
   ("" (SKEEP*) (("" (USE "cycle_construction_loi") NIL NIL)) NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cycle_construction_loi| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycle_construction_grow| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked))"
    "(c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C))")))
 (|cycle_construction_grow_TCC4| 0
  (|cycle_construction_grow_TCC4-1| |nil| 3656764502 ("" (ASSERT) NIL NIL) NIL
   NIL
   (|cycle_construction_grow| SUBTYPE
    "list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)"
    "{l: list[nat] | (booleans.NOT)(list_adt[nat].null?(l))}")))
 (|cycle_construction_grow| 0
  (|cycle_construction_grow-2| "" 3744338402
   ("" (SKEEP)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (SPLIT 3)
          (("1" (EXPAND "list_of_idxs")
            (("1" (SKEEP)
              (("1" (CASE "i=0")
                (("1" (REPLACES -1)
                  (("1" (EXPAND "nth")
                    (("1" (TYPEPRED "walking")
                      (("1" (REPLACE -8 :HIDE? T)
                        (("1" (HIDE-ALL-BUT (1 -2))
                          (("1" (EXPAND "list_of_idxs")
                            (("1" (INST -1 "0")
                              (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST -1 "i-1")
                  (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (TYPEPRED "i")
                      (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "reverse" 1)
            (("2" (TYPEPRED "walking")
              (("2" (HIDE -1)
                (("2" (HIDE-ALL-BUT (1 -4 -2 -7))
                  (("2" (USE "walk_append")
                    (("1" (ASSERT)
                      (("1" (SPLIT 1)
                        (("1" (GRIND) NIL NIL)
                         ("2" (FLATTEN)
                          (("2" (REPLACE -3 -1 :HIDE? T)
                            (("2" (USE "suffix_member[nat]")
                              (("2" (ASSERT)
                                (("2" (INST -1 "w")
                                  (("2" (LEMMA "last_reverse[nat]")
                                    (("2" (INST -1 "walked")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "member" 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (USE "null_reverse[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "walking")
                      (("2" (REPLACE -6 -2 :HIDE? T)
                        (("2" (HIDE-ALL-BUT (-2 1))
                          (("2" (EXPAND "list_of_idxs")
                            (("2" (SKEEP)
                              (("2" (INST -1 "i")
                                (("1" (CASE "i=0")
                                  (("1" (REPLACES -1)
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "i")
                                    (("2" (EXPAND "length")
                                      (("2" (ASSERT)
                                        (("2" (EXPAND "length")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "length")
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "i")
                                      (("2" (EXPAND "length" -1)
                                        (("2" (ASSERT)
                                          (("2" (EXPAND "length" -1)
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE-ALL-BUT (-3 1 2))
            (("3" (EXPAND "reverse" 1)
              (("3" (USE "no_repetitions_append[nat]")
                (("3" (REPLACE -1 1 :DIR RL :HIDE? T)
                  (("3" (ASSERT)
                    (("3" (SPLIT 1)
                      (("1" (GRIND) NIL NIL)
                       ("2" (SKEEP)
                        (("2" (EXPAND "member" -2)
                          (("2" (EXPAND "member" -2)
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (LEMMA "member_reverse[nat]")
                                (("2" (INST -1 "w" "walked")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (HIDE-ALL-BUT (-4 1))
            (("4" (USE "last_cons[nat]") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|walk_append| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK)
  (|cycle_construction_grow-1| |nil| 3656764508
   ("" (SKEEP)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (SPLIT 3)
          (("1" (EXPAND "list_of_idxs")
            (("1" (SKEEP)
              (("1" (CASE "i=0")
                (("1" (REPLACES -1)
                  (("1" (EXPAND "nth")
                    (("1" (TYPEPRED "walking")
                      (("1" (REPLACE -8 :HIDE? T)
                        (("1" (HIDE-ALL-BUT (1 -2))
                          (("1" (EXPAND "list_of_idxs")
                            (("1" (INST -1 "0")
                              (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST -1 "i-1")
                  (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (TYPEPRED "i")
                      (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "reverse" 1)
            (("2" (TYPEPRED "walking")
              (("2" (HIDE -1)
                (("2" (HIDE-ALL-BUT (1 -4 -2 -7))
                  (("2" (USE "walk_append")
                    (("1" (ASSERT)
                      (("1" (SPLIT 1)
                        (("1" (GRIND) NIL NIL)
                         ("2" (FLATTEN)
                          (("2" (REPLACE -3 -1 :HIDE? T)
                            (("2" (USE "suffix_member[nat]")
                              (("2" (ASSERT)
                                (("2" (INST -1 "w")
                                  (("2" (LEMMA "last_reverse[nat]")
                                    (("2" (INST -1 "walked")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "member" 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (USE "null_reverse[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "walking")
                      (("2" (REPLACE -6 -2 :HIDE? T)
                        (("2" (HIDE-ALL-BUT (-2 1))
                          (("2" (EXPAND "list_of_idxs")
                            (("2" (SKEEP)
                              (("2" (INST -1 "i")
                                (("1" (CASE "i=0")
                                  (("1" (REPLACES -1)
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "i")
                                    (("2" (EXPAND "length")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "length")
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "i")
                                      (("2" (EXPAND "length" -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE-ALL-BUT (-3 1 2))
            (("3" (EXPAND "reverse" 1)
              (("3" (USE "no_repetitions_append[nat]")
                (("3" (REPLACE -1 1 :DIR RL :HIDE? T)
                  (("3" (ASSERT)
                    (("3" (SPLIT 1)
                      (("1" (GRIND) NIL NIL)
                       ("2" (SKEEP)
                        (("2" (EXPAND "member" -2)
                          (("2" (EXPAND "member" -2)
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (LEMMA "member_reverse[nat]")
                                (("2" (INST -1 "w" "walked")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (HIDE-ALL-BUT (-4 1))
            (("4" (USE "last_cons[nat]") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL))
 (|cycles_from_measure_TCC1| 0
  (|cycles_from_measure_TCC1-1| NIL 3913991036
   ("" (SKEEP*) (("" (USE "cycle_construction_loi") NIL NIL)) NIL)
   ((|cycle_construction_loi| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycles_from_measure| SUBTYPE
    "list_props[nat].reverse(c_digraph_all_cycles.walked)"
    "(c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C))")))
 (|cycles_from_measure_TCC2| 0
  (|cycles_from_measure_TCC2-1| NIL 3913991036 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|))
   NIL
   (|cycles_from_measure| SUBTYPE "c_digraph_all_cycles.walked"
    "{l: list[nat] | (booleans.NOT)(list_adt[nat].null?(l))}")))
 (|cycles_from_measure_TCC3| 0
  (|cycles_from_measure_TCC3-1| |nil| 3655748237
   ("" (SKEEP*) (("" (USE "cycle_construction_size") NIL NIL)) NIL)
   ((|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cycle_construction_size| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycles_from_measure| SUBTYPE
    "(number_fields.-)(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C), list_props[nat].length(c_digraph_all_cycles.walked))"
    "nat")))
 (|cycles_from_aux_1| 0
  (|cycles_from_aux_1-1| NIL 3913991932
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (REPLACE -6 :HIDE? T)
          (("" (SPLIT 1)
            (("1" (LEMMA "loi_permutation")
              (("1"
                (INST -1 "C" "cons[nat](v, walked)"
                 "reverse(cons[nat](v, walked))")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (EXPAND "list_of_idxs")
                      (("1" (SKEEP)
                        (("1" (CASE "i=0")
                          (("1" (REPLACES -1)
                            (("1" (EXPAND "nth" 1)
                              (("1" (HIDE-ALL-BUT (1 -5))
                                (("1" (TYPEPRED "walking")
                                  (("1" (REPLACE -4 :HIDE? T)
                                    (("1" (HIDE-ALL-BUT (-2 1))
                                      (("1" (EXPAND "list_of_idxs")
                                        (("1" (INST -1 "0")
                                          (("1" (EXPAND "nth")
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "length")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST -1 "i-1")
                            (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "i")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "length" -1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "permutation_reverse[nat]")
                  (("2" (ASSERT)
                    (("2" (HIDE 2)
                      (("2" (USE "permutation_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "reverse" 1)
              (("2" (USE "walk_append")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (SPLIT 1)
                      (("1" (GRIND) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (TYPEPRED "walking")
                          (("2" (HIDE-ALL-BUT (-3 2 1 -8))
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (USE "suffix_member[nat]")
                                (("2" (ASSERT)
                                  (("2" (INST -1 "v")
                                    (("2" (SPLIT -1)
                                      (("1" (LEMMA "last_reverse[nat]")
                                        (("1" (INST -1 "walked")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (USE "null_reverse[nat]")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "member" 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "walking")
                  (("2" (REPLACE -8 :HIDE? T)
                    (("2" (HIDE-ALL-BUT (-2 1))
                      (("2" (EXPAND "list_of_idxs")
                        (("2" (SKEEP :PREDS? T)
                          (("2" (CASE "i=0")
                            (("1" (REPLACES -1)
                              (("1" (INST -2 "0")
                                (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL))
                                  NIL)
                                 ("2" (EXPAND "length")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "length")
                              (("2" (ASSERT)
                                (("2" (EXPAND "length")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "circuit?")
              (("3" (SPLIT 1)
                (("1" (LEMMA "last_reverse[nat]")
                  (("1" (INST -1 "cons[nat](v, walked)")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (ASSERT)
                        (("1" (LEMMA "car_reverse[nat]")
                          (("1" (INST -1 "cons[nat](v, walked)")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (USE "last_cons[nat]")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "length_reverse[nat]")
                  (("2" (REPLACE -1 :HIDE? T)
                    (("2" (EXPAND "length")
                      (("2" (EXPAND "walk?")
                        (("2" (FLATTEN)
                          (("2" (USE "null_reverse[nat]")
                            (("2" (ASSERT)
                              (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (USE "cycle_construction")
              (("4" (ASSERT)
                (("4" (TYPEPRED "walking")
                  (("4" (REPLACE -8 :HIDE? T)
                    (("4" (HIDE-ALL-BUT (-3 1))
                      (("4" (USE "suffix_member[nat]")
                        (("4" (ASSERT)
                          (("4" (INST -1 "v") (("4" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cycle_construction| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|walk_append| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|loi_permutation| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (|permutation_reverse| FORMULA-DECL NIL |permutations_list| |structures|)
    (|permutation_reflexive| FORMULA-DECL NIL |permutations_list| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|permutation_list| CONST-DECL "bool" |permutations_list| |structures|)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|cycles_from_aux_2| 0
  (|cycles_from_aux_2-1| NIL 3913992357
   ("" (USE "cycle_construction_grow")
    (("" (SKEEP) (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)
   ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|cycle_construction_grow| FORMULA-DECL NIL |c_digraph_all_cycles| NIL))
   SHOSTAK))
 (|cycles_from_aux_3| 0
  (|cycles_from_aux_3-1| NIL 3913992661
   ("" (SKEEP*)
    (("" (TYPEPRED "walking")
      (("" (REPLACES -4)
        (("" (SPLIT 3)
          (("1" (HIDE-ALL-BUT (-2 1))
            (("1" (EXPAND "list_of_idxs")
              (("1" (SKEEP)
                (("1" (TYPEPRED "i")
                  (("1" (INST -2 "i+1")
                    (("1" (EXPAND "nth" -2) (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (GRIND) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (HIDE-ALL-BUT (-3 1))
            (("2" (USE "suffix_end[nat]") (("2" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|ws| SKOLEM-CONST-DECL "list[nat]" |c_digraph_all_cycles| NIL)
    (|i| SKOLEM-CONST-DECL "below(length(ws))" |c_digraph_all_cycles| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|w| SKOLEM-CONST-DECL "nat" |c_digraph_all_cycles| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK))
 (|cycles_from_TCC1| 0
  (|cycles_from_TCC1-1| |nil| 3655548129 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL))
   NIL
   (|cycles_from| SUBTYPE
    "list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].null"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}")))
 (|cycles_from_TCC2| 0
  (|cycles_from_TCC2-3| "" 3804532698 ("" (USE "cycles_from_aux_1") NIL NIL)
   ((|cycles_from_aux_1| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)) SHOSTAK
   (|cycles_from| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked))"
    "(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))"))
  (|cycles_from_TCC2-2| "" 3744338551
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (REPLACE -5 :HIDE? T)
          (("" (SPLIT 1)
            (("1" (LEMMA "loi_permutation")
              (("1"
                (INST -1 "C" "cons[nat](v, walked)"
                 "reverse(cons[nat](v, walked))")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (EXPAND "list_of_idxs")
                      (("1" (SKEEP)
                        (("1" (CASE "i=0")
                          (("1" (REPLACES -1)
                            (("1" (EXPAND "nth" 1)
                              (("1" (HIDE-ALL-BUT (1 -5))
                                (("1" (TYPEPRED "walking")
                                  (("1" (REPLACE -4 :HIDE? T)
                                    (("1" (HIDE-ALL-BUT (-2 1))
                                      (("1" (EXPAND "list_of_idxs")
                                        (("1" (INST -1 "0")
                                          (("1" (EXPAND "nth")
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "length")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST -1 "i-1")
                            (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "i")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "length" -1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "permutation_reverse[nat]")
                  (("2" (ASSERT)
                    (("2" (HIDE 2)
                      (("2" (USE "permutation_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "reverse" 1)
              (("2" (USE "walk_append")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (SPLIT 1)
                      (("1" (GRIND) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (TYPEPRED "walking")
                          (("2" (HIDE-ALL-BUT (-3 2 1 -8))
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (USE "suffix_member[nat]")
                                (("2" (ASSERT)
                                  (("2" (INST -1 "v")
                                    (("2" (SPLIT -1)
                                      (("1" (LEMMA "last_reverse[nat]")
                                        (("1" (INST -1 "walked")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (USE "null_reverse[nat]")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "member" 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "walking")
                  (("2" (REPLACE -8 :HIDE? T)
                    (("2" (HIDE-ALL-BUT (-2 1))
                      (("2" (EXPAND "list_of_idxs")
                        (("2" (SKEEP :PREDS? T)
                          (("2" (CASE "i=0")
                            (("1" (REPLACES -1)
                              (("1" (INST -2 "0")
                                (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL))
                                  NIL)
                                 ("2" (EXPAND "length")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "length")
                              (("2" (ASSERT)
                                (("2" (EXPAND "length")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "circuit?")
              (("3" (SPLIT 1)
                (("1" (LEMMA "last_reverse[nat]")
                  (("1" (INST -1 "cons[nat](v, walked)")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (ASSERT)
                        (("1" (LEMMA "car_reverse[nat]")
                          (("1" (INST -1 "cons[nat](v, walked)")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (USE "last_cons[nat]")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "length_reverse[nat]")
                  (("2" (REPLACE -1 :HIDE? T)
                    (("2" (EXPAND "length")
                      (("2" (EXPAND "walk?")
                        (("2" (FLATTEN)
                          (("2" (USE "null_reverse[nat]")
                            (("2" (ASSERT)
                              (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (USE "cycle_construction")
              (("4" (ASSERT)
                (("4" (TYPEPRED "walking")
                  (("4" (REPLACE -8 :HIDE? T)
                    (("4" (HIDE-ALL-BUT (-3 1))
                      (("4" (USE "suffix_member[nat]")
                        (("4" (ASSERT)
                          (("4" (INST -1 "v") (("4" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|loi_permutation| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (|permutation_reverse| FORMULA-DECL NIL |permutations_list| |structures|)
    (|permutation_reflexive| FORMULA-DECL NIL |permutations_list| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|permutation_list| CONST-DECL "bool" |permutations_list| |structures|))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked))"
    "(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))"))
  (|cycles_from_TCC2-1| |nil| 3655549886
   ("" (SKEEP*)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (REPLACE -5 :HIDE? T)
          (("" (SPLIT 1)
            (("1" (LEMMA "loi_permutation")
              (("1"
                (INST -1 "C" "cons[nat](v, walked)"
                 "reverse(cons[nat](v, walked))")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (EXPAND "list_of_idxs")
                      (("1" (SKEEP)
                        (("1" (CASE "i=0")
                          (("1" (REPLACES -1)
                            (("1" (EXPAND "nth" 1)
                              (("1" (HIDE-ALL-BUT (1 -5))
                                (("1" (TYPEPRED "walking")
                                  (("1" (REPLACE -4 :HIDE? T)
                                    (("1" (HIDE-ALL-BUT (-2 1))
                                      (("1" (EXPAND "list_of_idxs")
                                        (("1" (INST -1 "0")
                                          (("1" (EXPAND "nth")
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (EXPAND "length")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (INST -1 "i-1")
                            (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL))
                              NIL)
                             ("2" (ASSERT)
                              (("2" (TYPEPRED "i")
                                (("2" (ASSERT)
                                  (("2" (EXPAND "length" -1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "permutation_reverse[nat]")
                  (("2" (ASSERT)
                    (("2" (HIDE 2)
                      (("2" (USE "permutation_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "reverse" 1)
              (("2" (USE "walk_append")
                (("1" (ASSERT)
                  (("1" (HIDE 2)
                    (("1" (SPLIT 1)
                      (("1" (GRIND) NIL NIL)
                       ("2" (FLATTEN)
                        (("2" (TYPEPRED "walking")
                          (("2" (HIDE-ALL-BUT (-3 2 1 -8))
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (USE "suffix_member[nat]")
                                (("2" (ASSERT)
                                  (("2" (INST -1 "v")
                                    (("2" (SPLIT -1)
                                      (("1" (LEMMA "last_reverse[nat]")
                                        (("1" (INST -1 "walked")
                                          (("1" (ASSERT) NIL NIL)
                                           ("2" (USE "null_reverse[nat]")
                                            (("2" (ASSERT) NIL NIL)) NIL))
                                          NIL))
                                        NIL)
                                       ("2" (EXPAND "member" 1)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "walking")
                  (("2" (REPLACE -8 :HIDE? T)
                    (("2" (HIDE-ALL-BUT (-2 1))
                      (("2" (EXPAND "list_of_idxs")
                        (("2" (SKEEP :PREDS? T)
                          (("2" (CASE "i=0")
                            (("1" (REPLACES -1)
                              (("1" (INST -2 "0")
                                (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL))
                                  NIL)
                                 ("2" (EXPAND "length")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL)
                             ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (EXPAND "circuit?")
              (("3" (SPLIT 1)
                (("1" (LEMMA "last_reverse[nat]")
                  (("1" (INST -1 "cons[nat](v, walked)")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (ASSERT)
                        (("1" (LEMMA "car_reverse[nat]")
                          (("1" (INST -1 "cons[nat](v, walked)")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (USE "last_cons[nat]")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "length_reverse[nat]")
                  (("2" (REPLACE -1 :HIDE? T)
                    (("2" (EXPAND "length")
                      (("2" (EXPAND "walk?")
                        (("2" (FLATTEN)
                          (("2" (USE "null_reverse[nat]")
                            (("2" (ASSERT)
                              (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("4" (USE "cycle_construction")
              (("4" (ASSERT)
                (("4" (TYPEPRED "walking")
                  (("4" (REPLACE -8 :HIDE? T)
                    (("4" (HIDE-ALL-BUT (-3 1))
                      (("4" (USE "suffix_member[nat]")
                        (("4" (ASSERT)
                          (("4" (INST -1 "v") (("4" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|loi_permutation| FORMULA-DECL NIL |c_digraphs_def| NIL)
    (|permutation_reverse| FORMULA-DECL NIL |permutations_list| |structures|)
    (|permutation_reflexive| FORMULA-DECL NIL |permutations_list| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|permutation_list| CONST-DECL "bool" |permutations_list| |structures|))
   NIL
   (|cycles_from| SUBTYPE
    "list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked))"
    "(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))")))
 (|cycles_from_TCC3| 0
  (|cycles_from_TCC3-3| "" 3804532801
   ("" (SKEEP)
    (("" (TYPEPRED "walking")
      (("" (HIDE -1)
        (("" (REPLACE -3 :HIDE? T)
          (("" (USE "loi_cons")
            (("" (ASSERT)
              (("" (USE "suffix_end[nat]") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|loi_cons| FORMULA-DECL NIL |c_digraph_all_cycles| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}"))
  (|cycles_from_TCC3-2| "" 3790101839
   ("" (SKEEP)
    (("" (TYPEPRED "walking")
      (("" (HIDE -1)
        (("" (REPLACE -4 :HIDE? T)
          (("" (USE "loi_cons")
            (("" (ASSERT)
              (("" (USE "suffix_end[nat]") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}"))
  (|cycles_from_TCC3-1| |nil| 3655550370
   (""
    (THEN (SKEEP) (TYPEPRED "walking") (HIDE -1) (REPLACE -4 :HIDE? T)
     (USE "loi_cons") (ASSERT) (USE "suffix_end[nat]") (ASSERT))
    NIL NIL)
   ((|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL))
   NIL
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}")))
 (|cycles_from_TCC4| 0
  (|cycles_from_TCC4-1| |nil| 3655550370 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< DEF-DECL "bool" |ordinals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|lex2| CONST-DECL "ordinal" |lex2| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|cycles_from| TERMINATION
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws)"
    "NIL")))
 (|cycles_from_TCC5| 0
  (|cycles_from_TCC7-1| "" 3884640968
   ("" (SKEEP*)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "member" -1)
          (("1" (SPLIT -1)
            (("1" (INST 1 "w")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (EXPAND "member")
                    (("1" (HIDE -1)
                      (("1" (USE "prefix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "walking")
                (("2" (EXPAND "list_of_idxs")
                  (("2" (INST -2 "0")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -4 :HIDE? T)
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
              (("1" (HIDE -1)
                (("1" (INST -1 "cycle")
                  (("1" (ASSERT)
                    (("1" (SKEEP -1)
                      (("1" (ASSERT)
                        (("1" (REPLACE -4 :HIDE? T)
                          (("1" (INST 1 "w!1") (("1" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "ws")
                  (("2" (HIDE -1)
                    (("2" (TYPEPRED "walking")
                      (("2" (HIDE -1)
                        (("2" (REPLACE -4 :HIDE? T)
                          (("2" (USE "loi_cons")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_end[nat]")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (SKEEP -1)
          (("2" (CASE "w!1 = v")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REPLACE -4 :HIDE? T)
                (("1" (EXPAND "member" 1)
                  (("1" (FLATTEN)
                    (("1"
                      (CASE "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (HIDE-ALL-BUT (-1 -3 1))
                        (("1" (TYPEPRED "cycle")
                          (("1" (HIDE-ALL-BUT (-5 -6 -7 1))
                            (("1" (LEMMA "cycle_prefix")
                              (("1" (INST? -1 :WHERE -4)
                                (("1" (INST? -1 :WHERE -4)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 3)
                        (("2" (USE "cycle_construction")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "walking")
                              (("1" (REPLACE -6 :HIDE? T)
                                (("1" (HIDE-ALL-BUT (1 -3))
                                  (("1" (USE "suffix_member[nat]")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "v")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "walking")
                              (("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (USE "cycles_from_aux_1")
                        (("3" (ASSERT)
                          (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -4 :HIDE? T)
              (("2" (REPLACE -3 :HIDE? T)
                (("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "member" 2)
                      (("2" (FLATTEN)
                        (("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (ASSERT)
                                (("1" (INST 1 "w!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "walking")
                            (("2" (REVEAL -1)
                              (("2" (HIDE -2)
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (USE "loi_cons")
                                    (("2" (ASSERT)
                                      (("2" (USE "suffix_end[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|cycles_from_aux_1| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cycle_construction| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|cycle_prefix| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|prefix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|loi_cons| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL)
    (|ordinal?| DEF-DECL "bool" |ordinals| NIL)
    (< DEF-DECL "bool" |ordinals| NIL)
    (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].cons(list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC5-4| "" 3804538809
   ("" (SKEEP*)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "member" -1)
          (("1" (SPLIT -1)
            (("1" (INST 1 "w")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (EXPAND "member")
                    (("1" (HIDE -1)
                      (("1" (USE "prefix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "walking")
                (("2" (EXPAND "list_of_idxs")
                  (("2" (INST -2 "0")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -4 :HIDE? T)
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
              (("1" (HIDE -1)
                (("1" (INST -1 "cycle")
                  (("1" (ASSERT)
                    (("1" (SKEEP -1)
                      (("1" (ASSERT)
                        (("1" (REPLACE -4 :HIDE? T)
                          (("1" (INST 1 "w!1") (("1" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "ws")
                  (("2" (HIDE -1)
                    (("2" (TYPEPRED "walking")
                      (("2" (HIDE -1)
                        (("2" (REPLACE -4 :HIDE? T)
                          (("2" (USE "loi_cons")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_end[nat]")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (SKEEP -1)
          (("2" (CASE "w!1 = v")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REPLACE -4 :HIDE? T)
                (("1" (EXPAND "member" 1)
                  (("1" (FLATTEN)
                    (("1"
                      (CASE "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (HIDE-ALL-BUT (-1 -3 1))
                        (("1" (TYPEPRED "cycle")
                          (("1" (HIDE-ALL-BUT (-5 -6 -7 1))
                            (("1" (LEMMA "cycle_prefix")
                              (("1" (INST? -1 :WHERE -4)
                                (("1" (INST? -1 :WHERE -4)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 3)
                        (("2" (USE "cycle_construction")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "walking")
                              (("1" (REPLACE -6 :HIDE? T)
                                (("1" (HIDE-ALL-BUT (1 -3))
                                  (("1" (USE "suffix_member[nat]")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "v")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "walking")
                              (("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (LEMMA "cycles_from_TCC2")
                        (("3" (INST?)
                          (("3" (ASSERT)
                            (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -4 :HIDE? T)
              (("2" (REPLACE -3 :HIDE? T)
                (("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "member" 2)
                      (("2" (FLATTEN)
                        (("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (ASSERT)
                                (("1" (INST 1 "w!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "walking")
                            (("2" (REVEAL -1)
                              (("2" (HIDE -2)
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (USE "loi_cons")
                                    (("2" (ASSERT)
                                      (("2" (USE "suffix_end[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|member| DEF-DECL "bool" |list_props| NIL)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL)
    (|ordinal?| DEF-DECL "bool" |ordinals| NIL)
    (< DEF-DECL "bool" |ordinals| NIL)
    (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|loi_cons| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|prefix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cycle_prefix| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|cycle_construction| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].cons(list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC5-3| "" 3744401450
   ("" (SKEEP*)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "member" -1)
          (("1" (SPLIT -1)
            (("1" (INST 1 "w")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (REPLACE -2 :HIDE? T)
                  (("1" (EXPAND "member")
                    (("1" (HIDE -1)
                      (("1" (USE "prefix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "walking")
                (("2" (EXPAND "list_of_idxs")
                  (("2" (INST -2 "0")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -5 :HIDE? T)
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
              (("1" (HIDE -1)
                (("1" (INST -1 "cycle")
                  (("1" (ASSERT)
                    (("1" (SKEEP -1)
                      (("1" (ASSERT)
                        (("1" (REPLACE -5 :HIDE? T)
                          (("1" (INST 1 "w!1") (("1" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "ws")
                  (("2" (HIDE -1)
                    (("2" (TYPEPRED "walking")
                      (("2" (HIDE -1)
                        (("2" (REPLACE -5 :HIDE? T)
                          (("2" (USE "loi_cons")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_end[nat]")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (SKEEP -1)
          (("2" (CASE "w!1 = v")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REPLACE -3 :HIDE? T)
                (("1" (EXPAND "member" 1)
                  (("1" (FLATTEN)
                    (("1"
                      (CASE "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (HIDE-ALL-BUT (-1 -3 1))
                        (("1" (TYPEPRED "cycle")
                          (("1" (HIDE-ALL-BUT (-5 -6 -7 1))
                            (("1" (LEMMA "cycle_prefix")
                              (("1" (INST? -1 :WHERE -4)
                                (("1" (INST? -1 :WHERE -4)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 3)
                        (("2" (USE "cycle_construction")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "walking")
                              (("1" (REPLACE -6 :HIDE? T)
                                (("1" (HIDE-ALL-BUT (1 -3))
                                  (("1" (USE "suffix_member[nat]")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "v")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "walking")
                              (("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (LEMMA "cycles_from_TCC2")
                        (("3" (INST?)
                          (("3" (ASSERT)
                            (("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -3 :HIDE? T)
              (("2" (REPLACE -3 :HIDE? T)
                (("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "member" 2)
                      (("2" (FLATTEN)
                        (("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (ASSERT)
                                (("1" (INST 1 "w!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "walking")
                            (("2" (REVEAL -1)
                              (("2" (HIDE -2)
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (USE "loi_cons")
                                    (("2" (ASSERT)
                                      (("2" (USE "suffix_end[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|prefix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].cons(list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC5-2| "" 3744340798
   ("" (SKEEP*)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "member" -1)
          (("1" (SPLIT -1)
            (("1" (INST 1 "w")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (REPLACE -2 :HIDE? T)
                  (("1" (EXPAND "member")
                    (("1" (HIDE -1)
                      (("1" (USE "prefix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "walking")
                (("2" (EXPAND "list_of_idxs")
                  (("2" (INST -2 "0")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -5 :HIDE? T)
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
              (("1" (HIDE -1)
                (("1" (INST -1 "cycle")
                  (("1" (ASSERT)
                    (("1" (SKEEP -1)
                      (("1" (ASSERT)
                        (("1" (REPLACE -5 :HIDE? T)
                          (("1" (INST 1 "w!1") (("1" (GRIND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "ws")
                  (("2" (HIDE -1)
                    (("2" (TYPEPRED "walking")
                      (("2" (HIDE -1)
                        (("2" (REPLACE -5 :HIDE? T)
                          (("2" (USE "loi_cons")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_end[nat]")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (SKEEP -1)
          (("2" (CASE "w!1 = v")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REPLACE -3 :HIDE? T)
                (("1" (EXPAND "member" 1)
                  (("1" (FLATTEN)
                    (("1"
                      (CASE "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (HIDE-ALL-BUT (-1 -3 1))
                        (("1" (TYPEPRED "cycle")
                          (("1" (HIDE-ALL-BUT (-5 -6 -7 1))
                            (("1" (LEMMA "cycle_prefix")
                              (("1" (INST? -1 :WHERE -4)
                                (("1" (INST? -1 :WHERE -4)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 3)
                        (("2" (USE "cycle_construction")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "walking")
                              (("1" (REPLACE -6 :HIDE? T)
                                (("1" (HIDE-ALL-BUT (1 -3))
                                  (("1" (USE "suffix_member[nat]")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "v")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "walking")
                              (("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (HIDE 2 3)
                        (("3" (ASSERT)
                          (("3" (HIDE -1 -3)
                            (("3" (TYPEPRED "walked")
                              (("3" (HIDE -1) (("3" (POSTPONE) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -3 :HIDE? T)
              (("2" (REPLACE -3 :HIDE? T)
                (("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "member" 2)
                      (("2" (FLATTEN)
                        (("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (ASSERT)
                                (("1" (INST 1 "w!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "walking")
                            (("2" (REVEAL -1)
                              (("2" (HIDE -2)
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (USE "loi_cons")
                                    (("2" (ASSERT)
                                      (("2" (USE "suffix_end[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|prefix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].cons(list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC5-1| |nil| 3655550370
   ("" (SKEEP*)
    (("" (SPLIT 1)
      (("1" (FLATTEN)
        (("1" (EXPAND "member" -1)
          (("1" (SPLIT -1)
            (("1" (INST 1 "w")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (REPLACE -2 :HIDE? T)
                  (("1" (EXPAND "member")
                    (("1" (HIDE -1)
                      (("1" (USE "prefix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "walking")
                (("2" (EXPAND "list_of_idxs")
                  (("2" (INST -2 "0")
                    (("1" (ASSERT) NIL NIL)
                     ("2" (REPLACE -5 :HIDE? T)
                      (("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
              (("1" (HIDE -1)
                (("1" (INST -1 "cycle")
                  (("1" (ASSERT)
                    (("1" (SKEEP -1)
                      (("1" (INST 1 "w_1")
                        (("1" (ASSERT)
                          (("1" (REPLACE -5 :HIDE? T) (("1" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (HIDE 2)
                (("2" (TYPEPRED "ws")
                  (("2" (HIDE -1)
                    (("2" (TYPEPRED "walking")
                      (("2" (HIDE -1)
                        (("2" (REPLACE -5 :HIDE? T)
                          (("2" (USE "loi_cons")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_end[nat]")
                                (("2" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (FLATTEN)
        (("2" (SKEEP -1)
          (("2" (CASE "w_1 =v")
            (("1" (REPLACE -1 :HIDE? T)
              (("1" (REPLACE -3 :HIDE? T)
                (("1" (EXPAND "member" 1)
                  (("1" (FLATTEN)
                    (("1"
                      (CASE "cycle?(C)(reverse[nat](cons[nat](v, walked)))")
                      (("1" (HIDE-ALL-BUT (-1 -3 1))
                        (("1" (TYPEPRED "cycle")
                          (("1" (HIDE-ALL-BUT (-5 -6 -7 1))
                            (("1" (LEMMA "cycle_prefix")
                              (("1" (INST? -1 :WHERE -4)
                                (("1" (INST? -1 :WHERE -4)
                                  (("1" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (HIDE 2 3)
                        (("2" (USE "cycle_construction")
                          (("1" (ASSERT)
                            (("1" (TYPEPRED "walking")
                              (("1" (REPLACE -6 :HIDE? T)
                                (("1" (HIDE-ALL-BUT (1 -3))
                                  (("1" (USE "suffix_member[nat]")
                                    (("1" (ASSERT)
                                      (("1" (INST -1 "v")
                                        (("1" (GRIND) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (ASSERT)
                            (("2" (TYPEPRED "walking")
                              (("2" (HIDE-ALL-BUT (1 -3))
                                (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -3 :HIDE? T)
              (("2" (REPLACE -3 :HIDE? T)
                (("2" (EXPAND "member" -1)
                  (("2" (ASSERT)
                    (("2" (EXPAND "member" 2)
                      (("2" (FLATTEN)
                        (("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (ASSERT)
                                (("1" (INST 1 "w_1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (TYPEPRED "walking")
                            (("2" (REVEAL -1)
                              (("2" (HIDE -2)
                                (("2" (REPLACE -1 :HIDE? T)
                                  (("2" (USE "loi_cons")
                                    (("2" (ASSERT)
                                      (("2" (USE "suffix_end[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|prefix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|cycles_from| SUBTYPE
    "list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].cons(list_props[nat].reverse(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}")))
 (|cycles_from_TCC6| 0
  (|cycles_from_TCC6-3| "" 3804538841
   ("" (SKEEP)
    (("" (TYPEPRED "walking")
      (("" (HIDE -1)
        (("" (REPLACE -3 :HIDE? T)
          (("" (USE "loi_cons")
            (("" (ASSERT)
              (("" (USE "suffix_end[nat]") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|loi_cons| FORMULA-DECL NIL |c_digraph_all_cycles| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}"))
  (|cycles_from_TCC6-2| "" 3790101843
   ("" (SKEEP)
    (("" (TYPEPRED "walking")
      (("" (HIDE -1)
        (("" (REPLACE -4 :HIDE? T)
          (("" (USE "loi_cons")
            (("" (ASSERT)
              (("" (USE "suffix_end[nat]") (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|))
   SHOSTAK
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}"))
  (|cycles_from_TCC6-1| |nil| 3655550370
   (""
    (THEN (SKEEP) (TYPEPRED "walking") (HIDE -1) (REPLACE -4 :HIDE? T)
     (USE "loi_cons") (ASSERT) (USE "suffix_end[nat]") (ASSERT))
    NIL NIL)
   ((|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL))
   NIL
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}")))
 (|cycles_from_TCC7| 0
  (|cycles_from_TCC7-1| |nil| 3655550370 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< DEF-DECL "bool" |ordinals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|lex2| CONST-DECL "ordinal" |lex2| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|cycles_from| TERMINATION
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws)"
    "NIL")))
 (|cycles_from_TCC8| 0
  (|cycles_from_TCC8-3| "" 3804539280
   ("" (SKEEP*)
    (("" (TYPEPRED "v1(C)(v)(walked, ws)")
      (("1" (HIDE -1)
        (("1" (INST -1 "cycle")
          (("1" (REPLACE -1 :HIDE? T)
            (("1" (SPLIT 2)
              (("1" (FLATTEN)
                (("1" (SKEEP)
                  (("1" (INST?)
                    (("1" (ASSERT)
                      (("1" (REPLACE -3 :HIDE? T)
                        (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (REPLACE -3 :HIDE? T)
                        (("2" (EXPAND "member" -1)
                          (("2" (REPLACE -1 :HIDE? T)
                            (("2" (TYPEPRED "walked")
                              (("2"
                                (CASE
                                    "no_repetitions?(cdr(reverse[nat](cons[nat](w, walked))))")
                                (("1" (EXPAND "reverse" -1)
                                  (("1"
                                    (CASE
                                        "no_repetitions?(cdr(reverse(walked))) AND no_repetitions?(cons(w, null)) AND NOT EXISTS(n:nat): member(n,cdr(reverse(walked))) AND member(n, cons(w,null))")
                                    (("1" (HIDE -2)
                                      (("1" (FLATTEN)
                                        (("1" (INST 1 "w")
                                          (("1" (EXPAND "member" 1 2)
                                            (("1" (LEMMA "rdc_rac[nat]")
                                              (("1" (INST -1 "walked")
                                                (("1"
                                                  (REPLACE -1 -10 :DIR RL
                                                           :HIDE? T)
                                                  (("1" (EXPAND "rac")
                                                    (("1" (EXPAND "last")
                                                      (("1"
                                                        (REPLACE -7 -9 :HIDE?
                                                                 T)
                                                        (("1"
                                                          (USE
                                                           "member_append_fi[nat]")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "member"
                                                                      -1 2)
                                                              (("1"
                                                                (EXPAND
                                                                 "member" -1 2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "rdc")
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     (-1 1))
                                                                    (("1"
                                                                      (LEMMA
                                                                       "member_reverse[nat]")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "w"
                                                                         "cdr(reverse(walked))")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "append" -1)
                                      (("2" (LIFT-IF -1)
                                        (("2" (SPLIT -1)
                                          (("1" (FLATTEN)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2"
                                                (USE
                                                 "no_repetitions_append[nat]")
                                                (("2" (REPLACE -1 :DIR RL)
                                                  (("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (SKEEP -6)
                                                        (("2" (INST -5 "n")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (GRIND) NIL NIL)
                                     ("4" (EXPAND "walk?")
                                      (("4" (FLATTEN) (("4" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "cycle")
                                  (("2" (HIDE-ALL-BUT (1 -11 -5))
                                    (("2" (EXPAND "cycle?")
                                      (("2" (USE "prefix_cdr[nat]")
                                        (("1" (ASSERT)
                                          (("1" (HIDE -3)
                                            (("1" (USE "no_repetitions_prefix")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "cycle")
                                          (("2" (EXPAND "walk?" -3)
                                            (("2" (FLATTEN) NIL NIL)) NIL))
                                          NIL)
                                         ("3" (USE "null_reverse[nat]")
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (HIDE-ALL-BUT 1)
                                  (("3" (USE "null_reverse[nat]")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "walking")
        (("2" (HIDE-ALL-BUT (1 -2 -3 -4))
          (("2" (REPLACE -3 :HIDE? T)
            (("2" (USE "loi_cons")
              (("2" (ASSERT)
                (("2" (USE "suffix_end[nat]") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL)
    (|ordinal?| DEF-DECL "bool" |ordinals| NIL)
    (< DEF-DECL "bool" |ordinals| NIL)
    (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions_prefix| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|prefix_cdr| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|loi_cons| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws)"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC8-2| |nil| 3656334009
   ("" (SKEEP*)
    (("" (TYPEPRED "v1(C)(v)(walked, ws)")
      (("1" (HIDE -1)
        (("1" (INST -1 "cycle")
          (("1" (REPLACE -1 :HIDE? T)
            (("1" (SPLIT 2)
              (("1" (FLATTEN)
                (("1" (SKEEP)
                  (("1" (INST?)
                    (("1" (ASSERT)
                      (("1" (REPLACE -4 :HIDE? T)
                        (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (REPLACE -4 :HIDE? T)
                        (("2" (EXPAND "member" -1)
                          (("2" (REPLACE -1 :HIDE? T)
                            (("2" (TYPEPRED "walked")
                              (("2"
                                (CASE
                                    "no_repetitions?(cdr(reverse[nat](cons[nat](w, walked))))")
                                (("1" (EXPAND "reverse" -1)
                                  (("1"
                                    (CASE
                                        "no_repetitions?(cdr(reverse(walked))) AND no_repetitions?(cons(w, null)) AND NOT EXISTS(n:nat): member(n,cdr(reverse(walked))) AND member(n, cons(w,null))")
                                    (("1" (HIDE -2)
                                      (("1" (FLATTEN)
                                        (("1" (INST 1 "w")
                                          (("1" (EXPAND "member" 1 2)
                                            (("1" (LEMMA "rdc_rac[nat]")
                                              (("1" (INST -1 "walked")
                                                (("1"
                                                  (REPLACE -1 -10 :DIR RL
                                                           :HIDE? T)
                                                  (("1" (EXPAND "rac")
                                                    (("1" (EXPAND "last")
                                                      (("1"
                                                        (REPLACE -7 -9 :HIDE?
                                                                 T)
                                                        (("1"
                                                          (USE
                                                           "member_append_fi[nat]")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "member"
                                                                      -1 2)
                                                              (("1"
                                                                (EXPAND
                                                                 "member" -1 2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "rdc")
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     (-1 1))
                                                                    (("1"
                                                                      (LEMMA
                                                                       "member_reverse[nat]")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "w"
                                                                         "cdr(reverse(walked))")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "append" -1)
                                      (("2" (LIFT-IF -1)
                                        (("2" (SPLIT -1)
                                          (("1" (FLATTEN)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2"
                                                (USE
                                                 "no_repetitions_append[nat]")
                                                (("2" (REPLACE -1 :DIR RL)
                                                  (("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (SKEEP -6)
                                                        (("2" (INST -5 "n")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (GRIND) NIL NIL)
                                     ("4" (EXPAND "walk?")
                                      (("4" (FLATTEN) (("4" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "cycle")
                                  (("2" (HIDE-ALL-BUT (1 -11 -5))
                                    (("2" (EXPAND "cycle?")
                                      (("2" (USE "prefix_cdr[nat]")
                                        (("1" (ASSERT)
                                          (("1" (HIDE -3)
                                            (("1" (USE "no_repetitions_prefix")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "cycle")
                                          (("2" (EXPAND "walk?" -3)
                                            (("2" (FLATTEN) NIL NIL)) NIL))
                                          NIL)
                                         ("3" (USE "null_reverse[nat]")
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (HIDE-ALL-BUT 1)
                                  (("3" (USE "null_reverse[nat]")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "walking")
        (("2" (HIDE-ALL-BUT (1 -2 -3 -5))
          (("2" (REPLACE -3 :HIDE? T)
            (("2" (USE "loi_cons")
              (("2" (ASSERT)
                (("2" (USE "suffix_end[nat]") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_cdr| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|cycles_from| SUBTYPE
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws)"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC8-1| |nil| 3655550370
   ("" (SKEEP*)
    (("" (TYPEPRED "v1(C)(v)(walked, ws)")
      (("1" (HIDE -1)
        (("1" (INST -1 "cycle")
          (("1" (REPLACE -1 :HIDE? T)
            (("1" (SPLIT 2)
              (("1" (FLATTEN)
                (("1" (SKEEP)
                  (("1" (INST?)
                    (("1" (ASSERT)
                      (("1" (REPLACE -4 :HIDE? T)
                        (("1" (EXPAND "member" 1) (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (SKEEP)
                  (("2" (INST?)
                    (("2" (ASSERT)
                      (("2" (REPLACE -4 :HIDE? T)
                        (("2" (EXPAND "member" -1)
                          (("2" (REPLACE -1 :HIDE? T)
                            (("2" (TYPEPRED "walked")
                              (("2"
                                (CASE
                                    "no_repetitions?(cdr(reverse[nat](cons[nat](w, walked))))")
                                (("1" (EXPAND "reverse" -1)
                                  (("1"
                                    (CASE
                                        "no_repetitions?(cdr(reverse(walked))) AND no_repetitions?(cons(w, null)) AND NOT EXISTS(n:nat): member(n,cdr(reverse(walked))) AND member(n, cons(w,null))")
                                    (("1" (HIDE -2)
                                      (("1" (FLATTEN)
                                        (("1" (INST 1 "w")
                                          (("1" (EXPAND "member" 1 2)
                                            (("1" (LEMMA "rdc_rac[nat]")
                                              (("1" (INST -1 "walked")
                                                (("1"
                                                  (REPLACE -1 -10 :DIR RL
                                                           :HIDE? T)
                                                  (("1" (EXPAND "rac")
                                                    (("1" (EXPAND "last")
                                                      (("1"
                                                        (REPLACE -7 -9 :HIDE?
                                                                 T)
                                                        (("1"
                                                          (USE
                                                           "member_append_fi[nat]")
                                                          (("1" (ASSERT)
                                                            (("1"
                                                              (EXPAND "member"
                                                                      -1 2)
                                                              (("1"
                                                                (EXPAND
                                                                 "member" -1 2)
                                                                (("1"
                                                                  (EXPAND
                                                                   "rdc")
                                                                  (("1"
                                                                    (HIDE-ALL-BUT
                                                                     (-1 1))
                                                                    (("1"
                                                                      (LEMMA
                                                                       "member_reverse[nat]")
                                                                      (("1"
                                                                        (INST
                                                                         -1 "w"
                                                                         "cdr(reverse(walked))")
                                                                        (("1"
                                                                          (ASSERT)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (EXPAND "append" -1)
                                      (("2" (LIFT-IF -1)
                                        (("2" (SPLIT -1)
                                          (("1" (FLATTEN)
                                            (("1" (GRIND) NIL NIL)) NIL)
                                           ("2" (FLATTEN)
                                            (("2" (ASSERT)
                                              (("2"
                                                (USE "no_repetitions_append")
                                                (("2" (REPLACE -1 :DIR RL)
                                                  (("2" (FLATTEN)
                                                    (("2" (ASSERT)
                                                      (("2" (SKEEP -6)
                                                        (("2" (INST -5 "n")
                                                          (("2" (ASSERT) NIL
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("3" (GRIND) NIL NIL)
                                     ("4" (EXPAND "walk?")
                                      (("4" (FLATTEN) (("4" (ASSERT) NIL NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (TYPEPRED "cycle")
                                  (("2" (HIDE-ALL-BUT (1 -11 -5))
                                    (("2" (EXPAND "cycle?")
                                      (("2" (USE "prefix_cdr[nat]")
                                        (("1" (ASSERT)
                                          (("1" (HIDE -3)
                                            (("1" (USE "no_repetitions_prefix")
                                              (("1" (ASSERT) NIL NIL)) NIL))
                                            NIL))
                                          NIL)
                                         ("2" (TYPEPRED "cycle")
                                          (("2" (EXPAND "walk?" -3)
                                            (("2" (FLATTEN) NIL NIL)) NIL))
                                          NIL)
                                         ("3" (USE "null_reverse[nat]")
                                          (("3" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("3" (HIDE-ALL-BUT 1)
                                  (("3" (USE "null_reverse[nat]")
                                    (("3" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (TYPEPRED "walking")
        (("2" (HIDE-ALL-BUT (1 -2 -3 -5))
          (("2" (REPLACE -3 :HIDE? T)
            (("2" (USE "loi_cons")
              (("2" (ASSERT)
                (("2" (USE "suffix_end[nat]") (("2" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_cdr| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rdc_rac| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rdc| CONST-DECL "list[T]" |more_list_props| |structures|)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|rac| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix_end| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|cycles_from| SUBTYPE
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws)"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}")))
 (|cycles_from_TCC9| 0
  (|cycles_from_TCC9-3| "" 3804539350 ("" (USE "cycles_from_aux_2") NIL NIL)
   ((|cycles_from_aux_2| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)) SHOSTAK
   (|cycles_from| SUBTYPE
    "list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)"
    "{walked: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | booleans.AND(c_digraph_all_cycles.walk?(c_digraph_all_cycles.C)(list_props[nat].reverse(walked)), booleans.AND(more_list_props[nat].no_repetitions?(list_props[nat].reverse(walked)), more_list_props[nat].last(walked) = c_digraph_all_cycles.v))}"))
  (|cycles_from_TCC9-2| |nil| 3656334023
   ("" (USE "cycle_construction_grow") NIL NIL)
   ((|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL))
   NIL
   (|cycles_from| SUBTYPE
    "list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)"
    "{walked: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | booleans.AND(c_digraph_all_cycles.walk?(c_digraph_all_cycles.C)(list_props[nat].reverse(walked)), booleans.AND(more_list_props[nat].no_repetitions?(list_props[nat].reverse(walked)), more_list_props[nat].last(walked) = c_digraph_all_cycles.v))}"))
  (|cycles_from_TCC9-1| |nil| 3655550370
   ("" (SKEEP)
    (("" (TYPEPRED "walked")
      (("" (HIDE -1)
        (("" (SPLIT 3)
          (("1" (EXPAND "list_of_idxs")
            (("1" (SKEEP)
              (("1" (CASE "i=0")
                (("1" (REPLACES -1)
                  (("1" (EXPAND "nth")
                    (("1" (TYPEPRED "walking")
                      (("1" (REPLACE -8 :HIDE? T)
                        (("1" (HIDE-ALL-BUT (1 -2))
                          (("1" (EXPAND "list_of_idxs")
                            (("1" (INST -1 "0")
                              (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL))
                                NIL)
                               ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (INST -1 "i-1")
                  (("1" (EXPAND "nth" 2) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (ASSERT)
                    (("2" (TYPEPRED "i")
                      (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (EXPAND "reverse" 1)
            (("2" (TYPEPRED "walking")
              (("2" (HIDE -1)
                (("2" (HIDE-ALL-BUT (1 -4 -2 -7))
                  (("2" (USE "walk_append")
                    (("1" (ASSERT)
                      (("1" (SPLIT 1)
                        (("1" (GRIND) NIL NIL)
                         ("2" (FLATTEN)
                          (("2" (REPLACE -3 -1 :HIDE? T)
                            (("2" (USE "suffix_member[nat]")
                              (("2" (ASSERT)
                                (("2" (INST -1 "w")
                                  (("2" (LEMMA "last_reverse[nat]")
                                    (("2" (INST -1 "walked")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "member" 1)
                                          (("1" (PROPAX) NIL NIL)) NIL))
                                        NIL)
                                       ("2" (USE "null_reverse[nat]")
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (TYPEPRED "walking")
                      (("2" (REPLACE -6 -2 :HIDE? T)
                        (("2" (HIDE-ALL-BUT (-2 1))
                          (("2" (EXPAND "list_of_idxs")
                            (("2" (SKEEP)
                              (("2" (INST -1 "i")
                                (("1" (CASE "i=0")
                                  (("1" (REPLACES -1)
                                    (("1" (ASSERT) (("1" (GRIND) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "i")
                                    (("2" (EXPAND "length")
                                      (("2" (ASSERT) NIL NIL)) NIL))
                                    NIL))
                                  NIL)
                                 ("2" (EXPAND "length")
                                  (("2" (ASSERT)
                                    (("2" (TYPEPRED "i")
                                      (("2" (EXPAND "length" -1)
                                        (("2" (ASSERT) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("3" (HIDE-ALL-BUT (-3 1 2))
            (("3" (EXPAND "reverse" 1)
              (("3" (USE "no_repetitions_append")
                (("3" (REPLACE -1 1 :DIR RL :HIDE? T)
                  (("3" (ASSERT)
                    (("3" (SPLIT 1)
                      (("1" (GRIND) NIL NIL)
                       ("2" (SKEEP)
                        (("2" (EXPAND "member" -2)
                          (("2" (EXPAND "member" -2)
                            (("2" (REPLACE -2 :HIDE? T)
                              (("2" (LEMMA "member_reverse[nat]")
                                (("2" (INST -1 "w" "walked")
                                  (("2" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("4" (HIDE-ALL-BUT (-4 1))
            (("4" (USE "last_cons[nat]") (("4" (ASSERT) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|length_null| FORMULA-DECL NIL |more_list_props| |structures|)
    (|suffix_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|null_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|cycles_from| SUBTYPE
    "list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked)"
    "{walked: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | booleans.AND(c_digraph_all_cycles.walk?(c_digraph_all_cycles.C)(list_props[nat].reverse(walked)), booleans.AND(more_list_props[nat].no_repetitions?(list_props[nat].reverse(walked)), more_list_props[nat].last(walked) = c_digraph_all_cycles.v))}")))
 (|cycles_from_TCC10| 0
  (|cycles_from_TCC10-1| |nil| 3655550370
   ("" (SKEEP)
    (("" (TYPEPRED "walking")
      (("" (HIDE -1)
        (("" (EXPAND "list_of_idxs")
          (("" (INST -1 "0")
            (("1" (REPLACE -3 :HIDE? T)
              (("1" (EXPAND "nth" -1)
                (("1" (EXPAND "size")
                  (("1" (TYPEPRED "C")
                    (("1" (EXPAND "cdigraph") (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (REPLACE -2 :HIDE? T)
              (("2" (EXPAND "length" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.w"
    "below[length[list[nat]](adjs(C))]")))
 (|cycles_from_TCC11| 0
  (|cycles_from_TCC11-1| |nil| 3655550370
   ("" (SKEEP*)
    (("" (SPLIT 3)
      (("1" (EXPAND "list_of_idxs")
        (("1" (SKEEP)
          (("1" (TYPEPRED "C")
            (("1" (EXPAND "cdigraph")
              (("1" (FLATTEN)
                (("1" (INST -2 "w")
                  (("1" (EXPAND "list_of_idxs") (("1" (INST -2 "i") NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (USE "suffix_reflexive[nat]") NIL NIL))
      NIL))
    NIL)
   ((< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|suffix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycles_from| SUBTYPE
    "list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.w)"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.w))}")))
 (|cycles_from_TCC12| 0
  (|cycles_from_TCC12-1| |nil| 3655550370
   ("" (SKEEP*)
    (("" (LEMMA "lex2_lt")
      (("" (EXPAND "cycles_from_measure")
        (("" (INST? -1 :WHERE 3)
          (("1" (REPLACE -1 :HIDE? T)
            (("1" (FLATTEN) (("1" (HIDE 4) (("1" (GRIND) NIL NIL)) NIL)) NIL))
            NIL)
           ("2" (USE "cycle_construction_size") NIL NIL)
           ("3" (LEMMA "cycle_construction_size")
            (("3" (INST -1 "C" "v" "cons(w,walked)")
              (("3" (ASSERT)
                (("3" (USE "cycle_construction_grow") (("3" (ASSERT) NIL NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|lex2_lt| FORMULA-DECL NIL |lex2| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|cycle_construction_size| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|cycle_construction_grow| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycles_from| TERMINATION
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked), list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.w))"
    "NIL")))
 (|cycles_from_TCC13| 0
  (|cycles_from_TCC13-1| |nil| 3655550370
   ("" (USE "cycles_from_aux_3") NIL NIL)
   ((|cycles_from_aux_3| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)) NIL
   (|cycles_from| SUBTYPE "c_digraph_all_cycles.ws"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), list_adt[nat].car(c_digraph_all_cycles.walked)))}")))
 (|cycles_from_TCC14| 0
  (|cycles_from_TCC14-1| |nil| 3655550370 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL) (< DEF-DECL "bool" |ordinals| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|lex2| CONST-DECL "ordinal" |lex2| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|cycles_from| TERMINATION
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws)"
    "NIL")))
 (|cycles_from_TCC15| 0
  (|cycles_from_TCC17-1| "" 3884642508
   ("" (SKEEP*)
    (("" (CASE "list_of_idxs[T](C)(nth[list[nat]](adjs(C), w))")
      (("1" (LABEL "loi_adjs_w" -1)
        (("1" (HIDE "loi_adjs_w")
          (("1" (SPLIT 3)
            (("1" (FLATTEN)
              (("1" (USE "member_append_fi[(cycle?(C))]")
                (("1" (ASSERT)
                  (("1" (HIDE -2)
                    (("1" (SPLIT -1)
                      (("1"
                        (TYPEPRED
                         "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (ASSERT)
                              (("1" (SKEEP -1)
                                (("1" (INST 1 "w")
                                  (("1" (REPLACE -4 1)
                                    (("1" (EXPAND "member" 1 1)
                                      (("1" (HIDE-ALL-BUT (-2 1))
                                        (("1" (LEMMA "prefix_supl[nat]")
                                          (("1" (INST? -1 :WHERE -2)
                                            (("1" (REPLACE -1 :HIDE? T)
                                              (("1" (SKEEP -1)
                                                (("1"
                                                  (REPLACE -1 :DIR RL :HIDE? T)
                                                  (("1"
                                                    (LEMMA "prefix_supl[nat]")
                                                    (("1" (INST? -1 :WHERE 1)
                                                      (("1"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("1"
                                                          (INST 1
                                                           "cons(w_1, L)")
                                                          (("1"
                                                            (EXPAND "reverse" 1
                                                                    2)
                                                            (("1"
                                                              (USE
                                                               "append_assoc[nat]")
                                                              (("1"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("1"
                                                                  (EXPAND
                                                                   "append" 1
                                                                   3)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "append" 1
                                                                     3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "walking")
                                    (("2" (EXPAND "list_of_idxs" -2)
                                      (("2" (REPLACE -7 :HIDE? T)
                                        (("2" (INST -2 "0")
                                          (("1" (EXPAND "nth" -2)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (REVEAL -2)
                                            (("2" (REPLACES -1)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (REVEAL "loi_adjs_w")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_reflexive[nat]") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (USE "cycles_from_aux_2")
                          (("3" (ASSERT) NIL NIL)) NIL))
                        NIL)
                       ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (ASSERT)
                              (("1" (SKEEP -1)
                                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (USE "cycles_from_aux_3")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "cycles_from_aux_3") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (HIDE-ALL-BUT 1)
                  (("3" (REVEAL "loi_adjs_w")
                    (("3" (ASSERT)
                      (("3" (USE "suffix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (USE "cycles_from_aux_2") (("4" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (SKEEP -1)
                (("2" (REPLACE -3 -1)
                  (("2" (EXPAND "member" -1)
                    (("2" (SPLIT -1)
                      (("1" (REPLACES -1)
                        (("1"
                          (TYPEPRED
                           "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (USE "member_append_l[(cycle?(C))]")
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "cycle")
                                    (("1"
                                      (CASE
                                          "NOT reverse[nat](cons[nat](w, walked)) = cycle")
                                      (("1" (LABEL "cycle is incomplete" 1)
                                        (("1" (HIDE "cycle is incomplete")
                                          (("1"
                                            (INST 2
                                             "nth(cycle, length(walked) + 1)")
                                            (("1" (HIDE -1)
                                              (("1"
                                                (CASE
                                                    "nth(cycle, length(walked)) = w")
                                                (("1" (SPLIT 2)
                                                  (("1" (EXPAND "walk?")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (HIDE-ALL-BUT
                                                         (-1 -3 1))
                                                        (("1"
                                                          (INST -2
                                                           "length(walked)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (REVEAL -5)
                                                            (("2"
                                                              (HIDE-ALL-BUT
                                                               (1 -1))
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (USE
                                                                   "length_reverse[nat]")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1 1)
                                                                    (("2"
                                                                      (CASE
                                                                          "1 + length[nat](walked) = length(cycle)")
                                                                      (("1"
                                                                        (HIDE
                                                                         -2 1)
                                                                        (("1"
                                                                          (REVEAL
                                                                           -10
                                                                           "cycle is incomplete")
                                                                          (("1"
                                                                            (USE
                                                                             "prefix_eq[nat]")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 (-2
                                                                                  1))
                                                                                (("1"
                                                                                  (USE
                                                                                   "length_reverse[nat]")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     :HIDE?
                                                                                     T)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT (-6 1))
                                                    (("2" (EXPAND "reverse" 1)
                                                      (("2"
                                                        (LEMMA
                                                         "prefix_supl[nat]")
                                                        (("2"
                                                          (INST? -1 :WHERE -2)
                                                          (("2"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("2" (SKEEP)
                                                              (("2"
                                                                (REPLACE -1
                                                                         :DIR
                                                                         RL)
                                                                (("2"
                                                                  (USE
                                                                   "prefix_app[nat]")
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             :HIDE?
                                                                             T)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "prefix_supl[nat]")
                                                                      (("2"
                                                                        (INST?
                                                                         -1
                                                                         :WHERE
                                                                         1)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (CASE
                                                                                "NOT null? (L)")
                                                                            (("1"
                                                                              (LABEL
                                                                               "L not null"
                                                                               1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 "L not null")
                                                                                (("1"
                                                                                  (INST
                                                                                   1
                                                                                   "cdr(L)")
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "car(L)= nth(append(reverse[nat](cons[nat](w, walked)), L),
                                                                                                                                                                                                                                                       1 + length(walked))
                                                                                                                                                                                                                                                   ")
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -1
                                                                                       :DIR
                                                                                       RL
                                                                                       :HIDE?
                                                                                       T)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "append"
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "append"
                                                                                           1)
                                                                                          (("1"
                                                                                            (APPLY-EXTENSIONALITY
                                                                                             1)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (USE
                                                                                         "nth_append[nat]")
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             :HIDE?
                                                                                             T)
                                                                                            (("1"
                                                                                              (USE
                                                                                               "length_reverse[nat]")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 :HIDE?
                                                                                                 T)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (USE
                                                                                               "length_reverse[nat]")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 :HIDE?
                                                                                                 T)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (REVEAL
                                                                                                     "L not null")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REVEAL
                                                                                     "L not null")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               1)
                                                                              (("2"
                                                                                (REVEAL
                                                                                 "cycle is incomplete")
                                                                                (("2"
                                                                                  (USE
                                                                                   "append_null[nat]")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT (-5 1))
                                                  (("2" (EXPAND "reverse" -1)
                                                    (("2"
                                                      (USE "prefix_supl[nat]")
                                                      (("2"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (REPLACE -1 :HIDE?
                                                                     T :DIR RL)
                                                            (("2"
                                                              (USE
                                                               "nth_append[nat]")
                                                              (("2" (SPLIT -1)
                                                                (("1"
                                                                  (REPLACE -1
                                                                           :HIDE?
                                                                           T)
                                                                  (("1"
                                                                    (USE
                                                                     "length_append[nat]")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (USE
                                                                         "length_reverse[nat]")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (USE
                                                                                 "nth_append[nat]")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :HIDE?
                                                                                       T)
                                                                                      (("1"
                                                                                        (USE
                                                                                         "length_reverse[nat]")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           :HIDE?
                                                                                           T)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (USE
                                                                                       "length_reverse[nat]")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (USE
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("2"
                                                                        (USE
                                                                         "length_reverse[nat]")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (HIDE-ALL-BUT (1 -5))
                                                  (("3"
                                                    (USE "prefix_length[nat]")
                                                    (("3" (ASSERT)
                                                      (("3" (HIDE -2)
                                                        (("3"
                                                          (USE
                                                           "length_reverse[nat]")
                                                          (("3"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("3"
                                                              (EXPAND "length"
                                                                      -1 1)
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-2 1))
                                              (("2" (EXPAND "list_of_idxs")
                                                (("2"
                                                  (INST -1
                                                   "1 + length[nat](walked)")
                                                  NIL NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE-ALL-BUT (1 -6))
                                              (("3"
                                                (REVEAL "cycle is incomplete")
                                                (("3" (ASSERT)
                                                  (("3"
                                                    (CASE
                                                        "length(reverse[nat](cons[nat](w, walked))) = length(cycle)")
                                                    (("1" (HIDE -2 2)
                                                      (("1"
                                                        (USE "prefix_eq[nat]")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (HIDE-ALL-BUT (-1 1 3))
                                                      (("2"
                                                        (USE
                                                         "prefix_length[nat]")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (USE
                                                             "length_reverse[nat]")
                                                            (("2" (REPLACES -1)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "walked")
                                        (("2" (HIDE-ALL-BUT (-6 -5 5 -10))
                                          (("2" (REPLACE -2 :DIR RL :HIDE? T)
                                            (("2" (EXPAND "circuit?")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "car_reverse[nat]")
                                                  (("2"
                                                    (INST -1 "cons(w, walked)")
                                                    (("2" (REPLACE -1 :HIDE? T)
                                                      (("2"
                                                        (USE "last_cons[nat]")
                                                        (("2"
                                                          (REPLACE -1 :HIDE? T)
                                                          (("2"
                                                            (LEMMA
                                                             "last_reverse[nat]")
                                                            (("2"
                                                              (INST -1
                                                               "cons(w, walked)")
                                                              (("2"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "cycles_from_aux_3")
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (HIDE-ALL-BUT 1)
                                  (("3" (REVEAL "loi_adjs_w")
                                    (("3" (ASSERT)
                                      (("3" (USE "suffix_reflexive[nat]") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (USE "cycles_from_aux_2")
                                  (("4" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (REVEAL "loi_adjs_w")
                              (("2" (ASSERT)
                                (("2" (USE "suffix_reflexive[nat]") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (USE "cycles_from_aux_2")
                            (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (USE "member_append_r[(cycle?(C))]")
                              (("1" (ASSERT)
                                (("1" (INST 2 "w!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (USE "cycles_from_aux_3")
                                (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (HIDE-ALL-BUT 1)
                                (("3" (REVEAL "loi_adjs_w")
                                  (("3" (ASSERT)
                                    (("3" (USE "suffix_reflexive[nat]") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("4" (USE "cycles_from_aux_2")
                                (("4" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (USE "cycles_from_aux_3")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE-ALL-BUT (-1 1))
        (("2" (TYPEPRED "C")
          (("2" (EXPAND "cdigraph")
            (("2" (FLATTEN) (("2" (INST -2 "w") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL)
    (|ordinal?| DEF-DECL "bool" |ordinals| NIL)
    (< DEF-DECL "bool" |ordinals| NIL)
    (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)
    (|ws| SKOLEM-CONST-DECL "list[nat]" |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (C SKOLEM-CONST-DECL "(cdigraph[T])" |c_digraph_all_cycles| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|w| SKOLEM-CONST-DECL "nat" |c_digraph_all_cycles| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|v| SKOLEM-CONST-DECL "below(size[T](C))" |c_digraph_all_cycles| NIL)
    (|walked| SKOLEM-CONST-DECL "{walked: (list_of_idxs(C)) |
   walk?(C)(reverse(walked)) AND
    no_repetitions?(reverse(walked)) AND last(walked) = v}"
     |c_digraph_all_cycles| NIL)
    (|cycles_from_aux_3| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|walking| SKOLEM-CONST-DECL
     "{walking: (list_of_idxs(C)) | suffix?(walking, nth(adjs(C), car(walked)))}"
     |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|prefix_supl| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|suffix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cycles_from_aux_2| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cycle| SKOLEM-CONST-DECL "(cycle?(C))" |c_digraph_all_cycles| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (L SKOLEM-CONST-DECL "list[nat]" |c_digraph_all_cycles| NIL)
    (|append_null| FORMULA-DECL NIL |list_props| NIL)
    (|prefix_app| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_eq| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|prefix_length| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].append(c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked), list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.w)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC15-2| "" 3744342678
   ("" (SKEEP*)
    (("" (CASE "list_of_idxs[T](C)(nth[list[nat]](adjs(C), w))")
      (("1" (LABEL "loi_adjs_w" -1)
        (("1" (HIDE "loi_adjs_w")
          (("1" (SPLIT 3)
            (("1" (FLATTEN)
              (("1" (USE "member_append_fi[(cycle?(C))]")
                (("1" (ASSERT)
                  (("1" (HIDE -2)
                    (("1" (SPLIT -1)
                      (("1"
                        (TYPEPRED
                         "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (ASSERT)
                              (("1" (SKEEP -1)
                                (("1" (INST 1 "w")
                                  (("1" (REPLACE -4 1)
                                    (("1" (EXPAND "member" 1 1)
                                      (("1" (HIDE-ALL-BUT (-2 1))
                                        (("1" (LEMMA "prefix_supl[nat]")
                                          (("1" (INST? -1 :WHERE -2)
                                            (("1" (REPLACE -1 :HIDE? T)
                                              (("1" (SKEEP -1)
                                                (("1"
                                                  (REPLACE -1 :DIR RL :HIDE? T)
                                                  (("1"
                                                    (LEMMA "prefix_supl[nat]")
                                                    (("1" (INST? -1 :WHERE 1)
                                                      (("1"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("1"
                                                          (INST 1
                                                           "cons(w_1, L)")
                                                          (("1"
                                                            (EXPAND "reverse" 1
                                                                    2)
                                                            (("1"
                                                              (USE
                                                               "append_assoc[nat]")
                                                              (("1"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("1"
                                                                  (EXPAND
                                                                   "append" 1
                                                                   3)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "append" 1
                                                                     3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "walking")
                                    (("2" (EXPAND "list_of_idxs" -2)
                                      (("2" (REPLACE -7 :HIDE? T)
                                        (("2" (INST -2 "0")
                                          (("1" (EXPAND "nth" -2)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (REVEAL -2)
                                            (("2" (REPLACES -1)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (REVEAL "loi_adjs_w")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_reflexive[nat]") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (USE "cycles_from_TCC9") (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (ASSERT)
                              (("1" (SKEEP -1)
                                (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (USE "cycles_from_TCC13")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "cycles_from_TCC13") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (HIDE-ALL-BUT 1)
                  (("3" (REVEAL "loi_adjs_w")
                    (("3" (ASSERT)
                      (("3" (USE "suffix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (USE "cycles_from_TCC9") (("4" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (SKEEP -1)
                (("2" (REPLACE -3 -1)
                  (("2" (EXPAND "member" -1)
                    (("2" (SPLIT -1)
                      (("1" (REPLACES -1)
                        (("1"
                          (TYPEPRED
                           "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (USE "member_append_l[(cycle?(C))]")
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "cycle")
                                    (("1"
                                      (CASE
                                          "NOT reverse[nat](cons[nat](w, walked)) = cycle")
                                      (("1" (LABEL "cycle is incomplete" 1)
                                        (("1" (HIDE "cycle is incomplete")
                                          (("1"
                                            (INST 2
                                             "nth(cycle, length(walked) + 1)")
                                            (("1" (HIDE -1)
                                              (("1"
                                                (CASE
                                                    "nth(cycle, length(walked)) = w")
                                                (("1" (SPLIT 2)
                                                  (("1" (EXPAND "walk?")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (HIDE-ALL-BUT
                                                         (-1 -3 1))
                                                        (("1"
                                                          (INST -2
                                                           "length(walked)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (REVEAL -5)
                                                            (("2"
                                                              (HIDE-ALL-BUT
                                                               (1 -1))
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (USE
                                                                   "length_reverse[nat]")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1 1)
                                                                    (("2"
                                                                      (CASE
                                                                          "1 + length[nat](walked) = length(cycle)")
                                                                      (("1"
                                                                        (HIDE
                                                                         -2 1)
                                                                        (("1"
                                                                          (REVEAL
                                                                           -10
                                                                           "cycle is incomplete")
                                                                          (("1"
                                                                            (USE
                                                                             "prefix_eq[nat]")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 (-2
                                                                                  1))
                                                                                (("1"
                                                                                  (USE
                                                                                   "length_reverse[nat]")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     :HIDE?
                                                                                     T)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT (-6 1))
                                                    (("2" (EXPAND "reverse" 1)
                                                      (("2"
                                                        (LEMMA
                                                         "prefix_supl[nat]")
                                                        (("2"
                                                          (INST? -1 :WHERE -2)
                                                          (("2"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("2" (SKEEP)
                                                              (("2"
                                                                (REPLACE -1
                                                                         :DIR
                                                                         RL)
                                                                (("2"
                                                                  (USE
                                                                   "prefix_app[nat]")
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             :HIDE?
                                                                             T)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "prefix_supl[nat]")
                                                                      (("2"
                                                                        (INST?
                                                                         -1
                                                                         :WHERE
                                                                         1)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (CASE
                                                                                "NOT null? (L)")
                                                                            (("1"
                                                                              (LABEL
                                                                               "L not null"
                                                                               1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 "L not null")
                                                                                (("1"
                                                                                  (INST
                                                                                   1
                                                                                   "cdr(L)")
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "car(L)= nth(append(reverse[nat](cons[nat](w, walked)), L),
                                                                                                                                                                                                                          1 + length(walked))
                                                                                                                                                                                                                      ")
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -1
                                                                                       :DIR
                                                                                       RL
                                                                                       :HIDE?
                                                                                       T)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "append"
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "append"
                                                                                           1)
                                                                                          (("1"
                                                                                            (APPLY-EXTENSIONALITY
                                                                                             1)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (USE
                                                                                         "nth_append[nat]")
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             :HIDE?
                                                                                             T)
                                                                                            (("1"
                                                                                              (USE
                                                                                               "length_reverse[nat]")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 :HIDE?
                                                                                                 T)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (USE
                                                                                               "length_reverse[nat]")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 :HIDE?
                                                                                                 T)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (REVEAL
                                                                                                     "L not null")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REVEAL
                                                                                     "L not null")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               1)
                                                                              (("2"
                                                                                (REVEAL
                                                                                 "cycle is incomplete")
                                                                                (("2"
                                                                                  (USE
                                                                                   "append_null[nat]")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT (-5 1))
                                                  (("2" (EXPAND "reverse" -1)
                                                    (("2"
                                                      (USE "prefix_supl[nat]")
                                                      (("2"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (REPLACE -1 :HIDE?
                                                                     T :DIR RL)
                                                            (("2"
                                                              (USE
                                                               "nth_append[nat]")
                                                              (("2" (SPLIT -1)
                                                                (("1"
                                                                  (REPLACE -1
                                                                           :HIDE?
                                                                           T)
                                                                  (("1"
                                                                    (USE
                                                                     "length_append[nat]")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (USE
                                                                         "length_reverse[nat]")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (USE
                                                                                 "nth_append[nat]")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :HIDE?
                                                                                       T)
                                                                                      (("1"
                                                                                        (USE
                                                                                         "length_reverse[nat]")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           :HIDE?
                                                                                           T)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (USE
                                                                                       "length_reverse[nat]")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (USE
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("2"
                                                                        (USE
                                                                         "length_reverse[nat]")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (HIDE-ALL-BUT (1 -5))
                                                  (("3"
                                                    (USE "prefix_length[nat]")
                                                    (("3" (ASSERT)
                                                      (("3" (HIDE -2)
                                                        (("3"
                                                          (USE
                                                           "length_reverse[nat]")
                                                          (("3"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("3"
                                                              (EXPAND "length"
                                                                      -1 1)
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-2 1))
                                              (("2" (EXPAND "list_of_idxs")
                                                (("2"
                                                  (INST -1
                                                   "1 + length[nat](walked)")
                                                  NIL NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE-ALL-BUT (1 -6))
                                              (("3"
                                                (REVEAL "cycle is incomplete")
                                                (("3" (ASSERT)
                                                  (("3"
                                                    (CASE
                                                        "length(reverse[nat](cons[nat](w, walked))) = length(cycle)")
                                                    (("1" (HIDE -2 2)
                                                      (("1"
                                                        (USE "prefix_eq[nat]")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (HIDE-ALL-BUT (-1 1 3))
                                                      (("2"
                                                        (USE
                                                         "prefix_length[nat]")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (USE
                                                             "length_reverse[nat]")
                                                            (("2" (REPLACES -1)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "walked")
                                        (("2" (HIDE-ALL-BUT (-6 -5 5 -10))
                                          (("2" (REPLACE -2 :DIR RL :HIDE? T)
                                            (("2" (EXPAND "circuit?")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "car_reverse[nat]")
                                                  (("2"
                                                    (INST -1 "cons(w, walked)")
                                                    (("2" (REPLACE -1 :HIDE? T)
                                                      (("2"
                                                        (USE "last_cons[nat]")
                                                        (("2"
                                                          (REPLACE -1 :HIDE? T)
                                                          (("2"
                                                            (LEMMA
                                                             "last_reverse[nat]")
                                                            (("2"
                                                              (INST -1
                                                               "cons(w, walked)")
                                                              (("2"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "cycles_from_TCC13")
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (HIDE-ALL-BUT 1)
                                  (("3" (REVEAL "loi_adjs_w")
                                    (("3" (ASSERT)
                                      (("3" (USE "suffix_reflexive[nat]") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (USE "cycles_from_TCC9")
                                  (("4" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (REVEAL "loi_adjs_w")
                              (("2" (ASSERT)
                                (("2" (USE "suffix_reflexive[nat]") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (USE "cycles_from_TCC9")
                            (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (USE "member_append_r[(cycle?(C))]")
                              (("1" (ASSERT)
                                (("1" (INST 2 "w!1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (USE "cycles_from_TCC13")
                                (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (HIDE-ALL-BUT 1)
                                (("3" (REVEAL "loi_adjs_w")
                                  (("3" (ASSERT)
                                    (("3" (USE "suffix_reflexive[nat]") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("4" (USE "cycles_from_TCC9")
                                (("4" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (USE "cycles_from_TCC13")
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE-ALL-BUT (-1 1))
        (("2" (TYPEPRED "C")
          (("2" (EXPAND "cdigraph")
            (("2" (FLATTEN) (("2" (INST -2 "w") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|prefix_length| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|int_times_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length_reverse| FORMULA-DECL NIL |list_props| NIL)
    (|prefix_eq| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_app| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append_null| FORMULA-DECL NIL |list_props| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cycles_from_TCC11| SUBTYPE-TCC NIL |c_digraph_all_cycles| NIL)
    (|suffix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|prefix_supl| FORMULA-DECL NIL |more_list_props| |structures|)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|append_assoc| FORMULA-DECL NIL |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cycles_from_TCC15| SUBTYPE-TCC NIL |c_digraph_all_cycles| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|ordstruct| TYPE-DECL NIL |ordstruct_adt| NIL)
    (< DEF-DECL "bool" |ordinals| NIL)
    (|ordinal?| DEF-DECL "bool" |ordinals| NIL)
    (|ordinal| NONEMPTY-TYPE-EQ-DECL NIL |ordinals| NIL)
    (|cycles_from_measure| CONST-DECL "ordinal" |c_digraph_all_cycles| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK
   (|cycles_from| SUBTYPE
    "list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].append(c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked), list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.w)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}"))
  (|cycles_from_TCC15-1| |nil| 3655550614
   ("" (SKEEP*)
    (("" (CASE "list_of_idxs[T](C)(nth[list[nat]](adjs(C), w))")
      (("1" (LABEL "loi_adjs_w" -1)
        (("1" (HIDE "loi_adjs_w")
          (("1" (SPLIT 3)
            (("1" (FLATTEN)
              (("1" (USE "member_append_fi[(cycle?(C))]")
                (("1" (ASSERT)
                  (("1" (HIDE -2)
                    (("1" (SPLIT -1)
                      (("1"
                        (TYPEPRED
                         "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (ASSERT)
                              (("1" (SKEEP -1)
                                (("1" (INST 1 "w")
                                  (("1" (REPLACE -4 1)
                                    (("1" (EXPAND "member" 1 1)
                                      (("1" (HIDE-ALL-BUT (-2 1))
                                        (("1" (LEMMA "prefix_supl[nat]")
                                          (("1" (INST? -1 :WHERE -2)
                                            (("1" (REPLACE -1 :HIDE? T)
                                              (("1" (SKEEP -1)
                                                (("1"
                                                  (REPLACE -1 :DIR RL :HIDE? T)
                                                  (("1"
                                                    (LEMMA "prefix_supl[nat]")
                                                    (("1" (INST? -1 :WHERE 1)
                                                      (("1"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("1"
                                                          (INST 1
                                                           "cons(w_1, L)")
                                                          (("1"
                                                            (EXPAND "reverse" 1
                                                                    2)
                                                            (("1"
                                                              (USE
                                                               "append_assoc[nat]")
                                                              (("1"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("1"
                                                                  (EXPAND
                                                                   "append" 1
                                                                   3)
                                                                  (("1"
                                                                    (EXPAND
                                                                     "append" 1
                                                                     3)
                                                                    (("1"
                                                                      (PROPAX)
                                                                      NIL NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL)
                                   ("2" (TYPEPRED "walking")
                                    (("2" (EXPAND "list_of_idxs" -2)
                                      (("2" (REPLACE -7 :HIDE? T)
                                        (("2" (INST -2 "0")
                                          (("1" (EXPAND "nth" -2)
                                            (("1" (PROPAX) NIL NIL)) NIL)
                                           ("2" (REVEAL -2)
                                            (("2" (REPLACES -1)
                                              (("2" (EXPAND "length" 1)
                                                (("2" (ASSERT) NIL NIL)) NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (HIDE-ALL-BUT 1)
                          (("2" (REVEAL "loi_adjs_w")
                            (("2" (ASSERT)
                              (("2" (USE "suffix_reflexive[nat]") NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("3" (USE "cycles_from_TCC9") (("3" (ASSERT) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (ASSERT)
                              (("1" (SKEEP -1)
                                (("1" (INST 1 "w_1")
                                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (USE "cycles_from_TCC13")
                          (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (USE "cycles_from_TCC13") (("2" (ASSERT) NIL NIL)) NIL)
                 ("3" (HIDE-ALL-BUT 1)
                  (("3" (REVEAL "loi_adjs_w")
                    (("3" (ASSERT)
                      (("3" (USE "suffix_reflexive[nat]") NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (USE "cycles_from_TCC9") (("4" (ASSERT) NIL NIL)) NIL))
                NIL))
              NIL)
             ("2" (FLATTEN)
              (("2" (SKEEP -1)
                (("2" (REPLACE -3 -1)
                  (("2" (EXPAND "member" -1)
                    (("2" (SPLIT -1)
                      (("1" (REPLACES -1)
                        (("1"
                          (TYPEPRED
                           "v1(C)(v)(cons[nat](w, walked), nth[list[nat]](adjs(C), w))")
                          (("1" (HIDE -1)
                            (("1" (INST -1 "cycle")
                              (("1" (USE "member_append_l[(cycle?(C))]")
                                (("1" (ASSERT)
                                  (("1" (TYPEPRED "cycle")
                                    (("1"
                                      (CASE
                                          "NOT reverse[nat](cons[nat](w, walked)) = cycle")
                                      (("1" (LABEL "cycle is incomplete" 1)
                                        (("1" (HIDE "cycle is incomplete")
                                          (("1"
                                            (INST 2
                                             "nth(cycle, length(walked) + 1)")
                                            (("1" (HIDE -1)
                                              (("1"
                                                (CASE
                                                    "nth(cycle, length(walked)) = w")
                                                (("1" (SPLIT 2)
                                                  (("1" (EXPAND "walk?")
                                                    (("1" (FLATTEN)
                                                      (("1"
                                                        (HIDE-ALL-BUT
                                                         (-1 -3 1))
                                                        (("1"
                                                          (INST -2
                                                           "length(walked)")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (REVEAL -5)
                                                            (("2"
                                                              (HIDE-ALL-BUT
                                                               (1 -1))
                                                              (("2" (ASSERT)
                                                                (("2"
                                                                  (USE
                                                                   "length_reverse[nat]")
                                                                  (("2"
                                                                    (EXPAND
                                                                     "length"
                                                                     -1 1)
                                                                    (("2"
                                                                      (CASE
                                                                          "1 + length[nat](walked) = length(cycle)")
                                                                      (("1"
                                                                        (HIDE
                                                                         -2 1)
                                                                        (("1"
                                                                          (REVEAL
                                                                           -10
                                                                           "cycle is incomplete")
                                                                          (("1"
                                                                            (USE
                                                                             "prefix_eq[nat]")
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (HIDE-ALL-BUT
                                                                                 (-2
                                                                                  1))
                                                                                (("1"
                                                                                  (USE
                                                                                   "length_reverse[nat]")
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     :HIDE?
                                                                                     T)
                                                                                    (("1"
                                                                                      (EXPAND
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (PROPAX)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL)
                                                                       ("2"
                                                                        (GRIND)
                                                                        NIL
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (HIDE-ALL-BUT (-6 1))
                                                    (("2" (EXPAND "reverse" 1)
                                                      (("2"
                                                        (LEMMA
                                                         "prefix_supl[nat]")
                                                        (("2"
                                                          (INST? -1 :WHERE -2)
                                                          (("2"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("2" (SKEEP)
                                                              (("2"
                                                                (REPLACE -1
                                                                         :DIR
                                                                         RL)
                                                                (("2"
                                                                  (USE
                                                                   "prefix_app[nat]")
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             :HIDE?
                                                                             T)
                                                                    (("2"
                                                                      (LEMMA
                                                                       "prefix_supl[nat]")
                                                                      (("2"
                                                                        (INST?
                                                                         -1
                                                                         :WHERE
                                                                         1)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (CASE
                                                                                "NOT null? (L)")
                                                                            (("1"
                                                                              (LABEL
                                                                               "L not null"
                                                                               1)
                                                                              (("1"
                                                                                (HIDE
                                                                                 "L not null")
                                                                                (("1"
                                                                                  (INST
                                                                                   1
                                                                                   "cdr(L)")
                                                                                  (("1"
                                                                                    (CASE
                                                                                        "car(L)= nth(append(reverse[nat](cons[nat](w, walked)), L),
                                                                                                                                                                                             1 + length(walked))
                                                                                                                                                                                         ")
                                                                                    (("1"
                                                                                      (REPLACES
                                                                                       -1
                                                                                       :DIR
                                                                                       RL
                                                                                       :HIDE?
                                                                                       T)
                                                                                      (("1"
                                                                                        (EXPAND
                                                                                         "append"
                                                                                         1)
                                                                                        (("1"
                                                                                          (EXPAND
                                                                                           "append"
                                                                                           1)
                                                                                          (("1"
                                                                                            (APPLY-EXTENSIONALITY
                                                                                             1)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (HIDE
                                                                                       2)
                                                                                      (("2"
                                                                                        (USE
                                                                                         "nth_append[nat]")
                                                                                        (("2"
                                                                                          (SPLIT
                                                                                           -1)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             :HIDE?
                                                                                             T)
                                                                                            (("1"
                                                                                              (USE
                                                                                               "length_reverse[nat]")
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 :HIDE?
                                                                                                 T)
                                                                                                (("1"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (EXPAND
                                                                                                     "length"
                                                                                                     1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (EXPAND
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (PROPAX)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (HIDE
                                                                                             2)
                                                                                            (("2"
                                                                                              (USE
                                                                                               "length_reverse[nat]")
                                                                                              (("2"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 :HIDE?
                                                                                                 T)
                                                                                                (("2"
                                                                                                  (EXPAND
                                                                                                   "length"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (REVEAL
                                                                                                     "L not null")
                                                                                                    (("2"
                                                                                                      (EXPAND
                                                                                                       "length"
                                                                                                       2
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (ASSERT)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (REVEAL
                                                                                     "L not null")
                                                                                    (("2"
                                                                                      (ASSERT)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL)
                                                                             ("2"
                                                                              (HIDE
                                                                               1)
                                                                              (("2"
                                                                                (REVEAL
                                                                                 "cycle is incomplete")
                                                                                (("2"
                                                                                  (USE
                                                                                   "append_null[nat]")
                                                                                  (("2"
                                                                                    (ASSERT)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("2" (HIDE-ALL-BUT (-5 1))
                                                  (("2" (EXPAND "reverse" -1)
                                                    (("2"
                                                      (USE "prefix_supl[nat]")
                                                      (("2"
                                                        (REPLACE -1 :HIDE? T)
                                                        (("2" (SKEEP)
                                                          (("2"
                                                            (REPLACE -1 :HIDE?
                                                                     T :DIR RL)
                                                            (("2"
                                                              (USE
                                                               "nth_append[nat]")
                                                              (("2" (SPLIT -1)
                                                                (("1"
                                                                  (REPLACE -1
                                                                           :HIDE?
                                                                           T)
                                                                  (("1"
                                                                    (USE
                                                                     "length_append[nat]")
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("1"
                                                                        (USE
                                                                         "length_reverse[nat]")
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("1"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("1"
                                                                              (ASSERT)
                                                                              (("1"
                                                                                (USE
                                                                                 "nth_append[nat]")
                                                                                (("1"
                                                                                  (ASSERT)
                                                                                  (("1"
                                                                                    (SPLIT
                                                                                     -1)
                                                                                    (("1"
                                                                                      (REPLACE
                                                                                       -1
                                                                                       :HIDE?
                                                                                       T)
                                                                                      (("1"
                                                                                        (USE
                                                                                         "length_reverse[nat]")
                                                                                        (("1"
                                                                                          (REPLACE
                                                                                           -1
                                                                                           :HIDE?
                                                                                           T)
                                                                                          (("1"
                                                                                            (ASSERT)
                                                                                            (("1"
                                                                                              (EXPAND
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (PROPAX)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL)
                                                                                     ("2"
                                                                                      (USE
                                                                                       "length_reverse[nat]")
                                                                                      (("2"
                                                                                        (ASSERT)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL)
                                                                 ("2" (HIDE 2)
                                                                  (("2"
                                                                    (USE
                                                                     "length_append[nat]")
                                                                    (("2"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE?
                                                                       T)
                                                                      (("2"
                                                                        (USE
                                                                         "length_reverse[nat]")
                                                                        (("2"
                                                                          (REPLACE
                                                                           -1
                                                                           :HIDE?
                                                                           T)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             1
                                                                             3)
                                                                            (("2"
                                                                              (ASSERT)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("3" (HIDE-ALL-BUT (1 -5))
                                                  (("3"
                                                    (USE "prefix_length[nat]")
                                                    (("3" (ASSERT)
                                                      (("3" (HIDE -2)
                                                        (("3"
                                                          (USE
                                                           "length_reverse[nat]")
                                                          (("3"
                                                            (REPLACE -1 :HIDE?
                                                                     T)
                                                            (("3"
                                                              (EXPAND "length"
                                                                      -1 1)
                                                              (("3" (ASSERT)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (HIDE-ALL-BUT (-2 1))
                                              (("2" (EXPAND "list_of_idxs")
                                                (("2"
                                                  (INST -1
                                                   "1 + length[nat](walked)")
                                                  NIL NIL))
                                                NIL))
                                              NIL)
                                             ("3" (HIDE-ALL-BUT (1 -6))
                                              (("3"
                                                (REVEAL "cycle is incomplete")
                                                (("3" (ASSERT)
                                                  (("3"
                                                    (CASE
                                                        "length(reverse[nat](cons[nat](w, walked))) = length(cycle)")
                                                    (("1" (HIDE -2 2)
                                                      (("1"
                                                        (USE "prefix_eq[nat]")
                                                        (("1" (ASSERT) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2"
                                                      (HIDE-ALL-BUT (-1 1 3))
                                                      (("2"
                                                        (USE
                                                         "prefix_length[nat]")
                                                        (("2" (ASSERT)
                                                          (("2"
                                                            (USE
                                                             "length_reverse[nat]")
                                                            (("2" (REPLACES -1)
                                                              (("2" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "walked")
                                        (("2" (HIDE-ALL-BUT (-6 -5 5 -10))
                                          (("2" (REPLACE -2 :DIR RL :HIDE? T)
                                            (("2" (EXPAND "circuit?")
                                              (("2" (FLATTEN)
                                                (("2"
                                                  (LEMMA "car_reverse[nat]")
                                                  (("2"
                                                    (INST -1 "cons(w, walked)")
                                                    (("2" (REPLACE -1 :HIDE? T)
                                                      (("2"
                                                        (USE "last_cons[nat]")
                                                        (("2"
                                                          (REPLACE -1 :HIDE? T)
                                                          (("2"
                                                            (LEMMA
                                                             "last_reverse[nat]")
                                                            (("2"
                                                              (INST -1
                                                               "cons(w, walked)")
                                                              (("2"
                                                                (REPLACE -1
                                                                         :HIDE?
                                                                         T)
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (USE "cycles_from_TCC13")
                                  (("2" (ASSERT) NIL NIL)) NIL)
                                 ("3" (HIDE-ALL-BUT 1)
                                  (("3" (REVEAL "loi_adjs_w")
                                    (("3" (ASSERT)
                                      (("3" (USE "suffix_reflexive[nat]") NIL
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("4" (USE "cycles_from_TCC9")
                                  (("4" (ASSERT) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (HIDE-ALL-BUT 1)
                            (("2" (REVEAL "loi_adjs_w")
                              (("2" (ASSERT)
                                (("2" (USE "suffix_reflexive[nat]") NIL NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("3" (USE "cycles_from_TCC9")
                            (("3" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL)
                       ("2" (TYPEPRED "v1(C)(v)(walked, ws)")
                        (("1" (HIDE -1)
                          (("1" (INST -1 "cycle")
                            (("1" (USE "member_append_r[(cycle?(C))]")
                              (("1" (ASSERT)
                                (("1" (INST 2 "w_1") (("1" (ASSERT) NIL NIL))
                                  NIL))
                                NIL)
                               ("2" (USE "cycles_from_TCC13")
                                (("2" (ASSERT) NIL NIL)) NIL)
                               ("3" (HIDE-ALL-BUT 1)
                                (("3" (REVEAL "loi_adjs_w")
                                  (("3" (ASSERT)
                                    (("3" (USE "suffix_reflexive[nat]") NIL
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("4" (USE "cycles_from_TCC9")
                                (("4" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT)
                          (("2" (USE "cycles_from_TCC13")
                            (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE-ALL-BUT (-1 1))
        (("2" (TYPEPRED "C")
          (("2" (EXPAND "cdigraph")
            (("2" (FLATTEN) (("2" (INST -2 "w") NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|prefix_length| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_eq| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_app| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|car_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_reverse| FORMULA-DECL NIL |more_list_props| |structures|)
    (|last_cons| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_l| FORMULA-DECL NIL |more_list_props| |structures|)
    (|member_append_r| FORMULA-DECL NIL |more_list_props| |structures|)
    (|suffix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|prefix_supl| FORMULA-DECL NIL |more_list_props| |structures|)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|member_append_fi| FORMULA-DECL NIL |more_list_props| |structures|))
   NIL
   (|cycles_from| SUBTYPE
    "list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].append(c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(list_adt[nat].cons(c_digraph_all_cycles.w, c_digraph_all_cycles.walked), list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.w)), c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)(c_digraph_all_cycles.walked, c_digraph_all_cycles.ws))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), EXISTS (w: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): booleans.AND(list_props[nat].member(w, c_digraph_all_cycles.walking), more_list_props[nat].prefix?(list_props[nat].reverse(list_adt[nat].cons(w, c_digraph_all_cycles.walked)), cycle)))}")))
 (|cycles_for_TCC1| 0
  (|cycles_for_TCC1-1| |nil| 3655811132 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|cycles_for| SUBTYPE "c_digraph_all_cycles.cycle"
    "(list_adt[nat].cons?)")))
 (|cycles_for_TCC2| 0
  (|cycles_for_TCC2-1| |nil| 3655811132
   ("" (SKEEP :PREDS? T) (("" (GRIND) NIL NIL)) NIL)
   ((T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL))
   NIL
   (|cycles_for| SUBTYPE "(: c_digraph_all_cycles.v :)"
    "{walked: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | booleans.AND(c_digraph_all_cycles.walk?(c_digraph_all_cycles.C)(list_props[nat].reverse(walked)), booleans.AND(more_list_props[nat].no_repetitions?(list_props[nat].reverse(walked)), more_list_props[nat].last(walked) = c_digraph_all_cycles.v))}")))
 (|cycles_for_TCC3| 0
  (|cycles_for_TCC3-1| |nil| 3655811132 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|cycles_for| SUBTYPE "c_digraph_all_cycles.v"
    "below[length[list[nat]](adjs(C))]")))
 (|cycles_for_TCC4| 0
  (|cycles_for_TCC4-1| |nil| 3655811132
   ("" (SKEEP)
    (("" (TYPEPRED "C")
      (("" (EXPAND "cdigraph")
        (("" (FLATTEN)
          (("" (INST -2 "v")
            (("1" (ASSERT) (("1" (USE "suffix_reflexive[nat]") NIL NIL)) NIL)
             ("2" (TYPEPRED "v") (("2" (GRIND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|suffix_reflexive| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|cycles_for| SUBTYPE
    "list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.v)"
    "{walking: (c_digraphs_def[c_digraph_all_cycles.T].list_of_idxs(c_digraph_all_cycles.C)) | more_list_props[nat].suffix?(walking, list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.v))}")))
 (|cycles_for_TCC5| 0
  (|cycles_for_TCC5-1| |nil| 3655811132
   ("" (SKEEP*)
    (("" (TYPEPRED "cycles_from(C)(v)((: v :), nth[list[nat]](adjs(C), v))")
      (("" (HIDE -1)
        (("" (INST -1 "cycle")
          (("" (REPLACE -1 :HIDE? T)
            (("" (SPLIT 1)
              (("1" (FLATTEN)
                (("1" (SKEEP -1)
                  (("1" (EXPAND "reverse" -2)
                    (("1" (EXPAND "reverse" -2)
                      (("1" (EXPAND "reverse" -2)
                        (("1" (EXPAND "append" -2 2)
                          (("1" (EXPAND "append" -2)
                            (("1" (EXPAND "append" -2)
                              (("1" (LEMMA "nnprefixes_same_head[nat]")
                                (("1" (INST -1 "cycle" "cons(v,cons(w,null))")
                                  (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)
                                   ("2" (EXPAND "prefixes")
                                    (("2" (USE "prefix_supl[nat]")
                                      (("2" (REPLACE -1 :HIDE? T)
                                        (("2" (PROPAX) NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (FLATTEN)
                (("2" (INST 1 "nth(cycle,1)")
                  (("1" (SPLIT 1)
                    (("1" (TYPEPRED "cycle")
                      (("1" (EXPAND "walk?")
                        (("1" (HIDE-ALL-BUT (1 -3 -6))
                          (("1" (FLATTEN)
                            (("1" (INST -1 "0")
                              (("1" (EXPAND "nth" -1 3)
                                (("1" (ASSERT) NIL NIL)) NIL)
                               ("2" (REVEAL -4)
                                (("2" (EXPAND "circuit?")
                                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (EXPAND "reverse" 1)
                      (("2" (EXPAND "reverse" 1)
                        (("2" (EXPAND "reverse" 1)
                          (("2" (EXPAND "append" 1 2)
                            (("2"
                              (CASE "cycle=append(cons(v,null),cdr(cycle))")
                              (("1" (REPLACE -1 1 :HIDE? T)
                                (("1" (EXPAND "append" 1)
                                  (("1" (EXPAND "nth" 1)
                                    (("1" (EXPAND "append" 1)
                                      (("1" (EXPAND "nth" 1)
                                        (("1"
                                          (CASE
                                              "cons(car(cdr(cycle)), null) = append((:car(cdr(cycle)):),null)")
                                          (("1" (REPLACE -1 :HIDE? T)
                                            (("1"
                                              (CASE
                                                  "cdr(cycle) = append((:car(cdr(cycle)):),cdr(cdr(cycle)))")
                                              (("1" (REPLACE -1 :HIDE? T)
                                                (("1" (EXPAND "append" 1 2)
                                                  (("1" (GRIND) NIL NIL)) NIL))
                                                NIL)
                                               ("2" (EXPAND "append")
                                                (("2" (APPLY-EXTENSIONALITY)
                                                  (("2" (EXPAND "append" 1)
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (EXPAND "append" 1)
                                            (("2" (EXPAND "append" 1)
                                              (("2" (PROPAX) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (EXPAND "append" 1)
                                (("2" (EXPAND "append" 1)
                                  (("2" (REPLACE -1 :DIR RL)
                                    (("2" (APPLY-EXTENSIONALITY) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (TYPEPRED "cycle")
                    (("2" (HIDE-ALL-BUT (-2 -4 1))
                      (("2" (EXPAND "list_of_idxs")
                        (("2" (INST -1 "1") NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("3" (TYPEPRED "cycle") (("3" (GRIND) NIL NIL)) NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cycles_from| DEF-DECL "{cs: list[(cycle?(C))] |
   FORALL (cycle: (cycle?(C))):
     member(cycle, cs) IFF
      EXISTS (w: below(size(C))):
        member(w, walking) AND prefix?(reverse(cons(w, walked)), cycle)}"
     |c_digraph_all_cycles| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|prefix?| DEF-DECL "bool" |more_list_props| |structures|)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|suffix?| DEF-DECL "bool" |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|reverse| DEF-DECL "list[T]" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|prefixes| CONST-DECL "bool" |more_list_props| |structures|)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|prefix_supl| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnprefixes_same_head| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   NIL
   (|cycles_for| SUBTYPE
    "c_digraph_all_cycles.cycles_from(c_digraph_all_cycles.C)(c_digraph_all_cycles.v)((: c_digraph_all_cycles.v :), list_props[list[nat]].nth(adjs(c_digraph_all_cycles.C), c_digraph_all_cycles.v))"
    "{cs: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, cs), list_adt[nat].car(cycle) = c_digraph_all_cycles.v)}")))
 (|all_cycles_rec_TCC1| 0
  (|all_cycles_rec_TCC1-1| |nil| 3656158837 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|all_cycles_rec| SUBTYPE "c_digraph_all_cycles.i"
    "below[length[list[(cycle?(C))]](cs)]")))
 (|all_cycles_rec_TCC2| 0
  (|all_cycles_rec_TCC3-1| |nil| 3656158837 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|all_cycles_rec| SUBTYPE "(number_fields.-)(c_digraph_all_cycles.n, 1)"
    "below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))")))
 (|all_cycles_rec_TCC3| 0
  (|all_cycles_rec_TCC4-2| "" 3790101860
   ("" (SKEEP*)
    (("" (CASE "n=0") (("1" (PROPAX) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL))
   SHOSTAK
   (|all_cycles_rec| TERMINATION
    "c_digraph_all_cycles.all_cycles_rec(c_digraph_all_cycles.C)((number_fields.-)(c_digraph_all_cycles.n, 1))"
    "NIL"))
  (|all_cycles_rec_TCC4-1| |nil| 3656158837
   ("" (SKEEP*)
    (("" (CASE "n=0")
      (("1" (REPLACE -1) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (ASSERT)
        (("2" (SPLIT 2)
          (("1" (TYPEPRED "v(C)(n - 1)") (("1" (GRIND) NIL NIL)) NIL)
           ("2" (SKEEP 1 :PREDS? T)
            (("2" (CASE "i=n-2")
              (("1" (HIDE -2) (("1" (POSTPONE) NIL NIL)) NIL)
               ("2" (POSTPONE) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL))
   NIL
   (|all_cycles_rec| TERMINATION
    "c_digraph_all_cycles.all_cycles_rec(c_digraph_all_cycles.C)((number_fields.-)(c_digraph_all_cycles.n, 1))"
    "NIL")))
 (|all_cycles_rec_TCC4| 0
  (|all_cycles_rec_TCC2-1| |nil| 3656158837
   ("" (SKEEP*)
    (("" (CASE "n=0")
      (("1" (REPLACE -1)
        (("1" (ASSERT)
          (("1" (SPLIT 1)
            (("1" (USE "length_append[list[(cycle?(C))]]")
              (("1" (REPLACE -1 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)) NIL)
             ("2" (SKEEP :PREDS? T)
              (("2" (REPLACE -2)
                (("2" (ASSERT)
                  (("2" (CASE "i=0")
                    (("1" (REPLACE -1 :HIDE? T)
                      (("1" (SKEEP)
                        (("1" (LEMMA "append_null_left[list[(cycle?(C))]]")
                          (("1" (INST -1 "(: cycles_for(C)(0) :)")
                            (("1" (REPLACE -1 :HIDE? T)
                              (("1" (EXPAND "nth" 1)
                                (("1" (TYPEPRED "cycles_for(C)(0)")
                                  (("1" (INST?) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (ASSERT) NIL NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (ASSERT)
        (("2" (SPLIT 2)
          (("1" (TYPEPRED "v(C)(n - 1)")
            (("1" (HIDE-ALL-BUT (1 -2))
              (("1" (USE "length_append[list[(cycle?(C))]]")
                (("1" (REPLACE -1 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (SKEEP :PREDS? T)
            (("2" (CASE "i=n")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (HIDE -1)
                  (("1" (SKEEP)
                    (("1" (LEMMA "nth_append[list[(cycle?(C))]]")
                      (("1"
                        (INST -1 "v(C)(n - 1)" "(: cycles_for(C)(n) :)" "n")
                        (("1" (ASSERT)
                          (("1" (REPLACE -1 :HIDE? T)
                            (("1" (TYPEPRED "v(C)(n-1)")
                              (("1" (REPLACE -2 :HIDE? T)
                                (("1" (ASSERT)
                                  (("1" (EXPAND "nth" 1)
                                    (("1" (HIDE -1 -2)
                                      (("1" (TYPEPRED "cycles_for(C)(n)")
                                        (("1" (INST -2 "cycle") NIL NIL)) NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (SKEEP 2)
                (("2" (USE "nth_append[list[(cycle?(C))]]")
                  (("2" (ASSERT)
                    (("2" (REPLACE -1 :HIDE? T)
                      (("2" (TYPEPRED "v(C)(n-1)")
                        (("2" (INST -3 "i") (("2" (INST -3 "cycle") NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|length_append| FORMULA-DECL NIL |list_props| NIL)
    (|cycles_for| CONST-DECL "{cs: list[(cycle?(C))] |
   FORALL (cycle: (cycle?(C))): member(cycle, cs) IFF car(cycle) = v}"
     |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|all_cycles_rec| SUBTYPE
    "list_props[list[(cycle?(C))]].append(IF c_digraph_all_cycles.n = 0 THEN list_adt[list[(cycle?(C))]].null ELSE c_digraph_all_cycles.all_cycles_rec(c_digraph_all_cycles.C)((number_fields.-)(c_digraph_all_cycles.n, 1)) ENDIF, (: c_digraph_all_cycles.cycles_for(c_digraph_all_cycles.C)(c_digraph_all_cycles.n) :))"
    "{cs: list_adt[list[(cycle?(C))]].list | booleans.AND(list_props[list[(cycle?(C))]].length(cs) = (number_fields.+)(1, c_digraph_all_cycles.n), FORALL (i: naturalnumbers.below((number_fields.+)(c_digraph_all_cycles.n, 1))): FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, list_props[list[(cycle?(C))]].nth(cs, i)), list_adt[nat].car(cycle) = i))}")))
 (|all_cycles_TCC1| 0
  (|all_cycles_TCC1-1| |nil| 3656158837 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL))
   NIL
   (|all_cycles| SUBTYPE "c_digraph_all_cycles.i"
    "below[length[list[(cycle?(C))]](cs)]")))
 (|all_cycles_TCC2| 0
  (|all_cycles_TCC2-1| |nil| 3656158837
   ("" (SKEEP :PREDS? T)
    (("" (SPLIT 1)
      (("1" (GRIND) NIL NIL)
       ("2" (SKEEP :PREDS? T) (("2" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL)
   ((|length| DEF-DECL "nat" |list_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|all_cycles| SUBTYPE "list_adt[list[(cycle?(C))]].null"
    "{cs: list_adt[list[(cycle?(C))]].list | booleans.AND(list_props[list[(cycle?(C))]].length(cs) = c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C), FORALL (i: naturalnumbers.below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))): FORALL (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, list_props[list[(cycle?(C))]].nth(cs, i)), list_adt[nat].car(cycle) = i))}")))
 (|all_cycles_TCC3| 0
  (|all_cycles_TCC3-1| |nil| 3656163383 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|all_cycles| SUBTYPE
    "(number_fields.-)(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C), 1)"
    "below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))")))
 (|w?2w_TCC1| 0
  (|w?2w_TCC1-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|w?2w| SUBTYPE
    "list_props[nat].nth(c_digraph_all_cycles.cw, c_digraph_all_cycles.i)"
    "below[length[T](data(C))]")))
 (|w?2w_TCC2| 0
  (|w?2w_TCC2-2| |nil| 3828697335
   ("" (SKEEP)
    (("" (TYPEPRED "cw")
      (("" (EXPAND "walk?" -3)
        (("" (FLATTEN)
          (("" (SPLIT 2)
            (("1" (GRIND) NIL NIL)
             ("2" (EXPAND "walk?")
              (("2" (EXPAND "finseq_appl")
                (("2" (EXPAND "verts_in?")
                  (("2" (EXPAND "digraph_verts")
                    (("2" (SPLIT 1)
                      (("1" (SKEEP)
                        (("1" (EXPAND "vert")
                          (("1" (USE "nth_member[T]") NIL NIL)) NIL))
                        NIL)
                       ("2" (SKEEP)
                        (("2" (EXPAND "edge?")
                          (("2" (EXPAND "digraph_edges")
                            (("2" (EXPAND "edges")
                              (("2" (ASSERT)
                                (("2" (EXPAND "vert")
                                  (("2" (SPLIT 1)
                                    (("1" (USE "nth_member[T]") NIL NIL)
                                     ("2" (USE "nth_member[T]") NIL NIL)
                                     ("3" (USE "idx_nth_no_rep[T]")
                                      (("1" (REPLACE -1 :HIDE? T)
                                        (("1" (USE "idx_nth_no_rep[T]")
                                          (("1" (REPLACE -1 :HIDE? T)
                                            (("1" (INST? -4 :WHERE 1) NIL NIL))
                                            NIL)
                                           ("2" (TYPEPRED "C")
                                            (("2" (EXPAND "cdigraph")
                                              (("2" (FLATTEN) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (TYPEPRED "C")
                                        (("2" (EXPAND "cdigraph")
                                          (("2" (FLATTEN) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("3" (GRIND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|edges| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|idx_nth_no_rep| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|w?2w| SUBTYPE
    "(# length := list_props[nat].length(c_digraph_all_cycles.cw), seq := (LAMBDA (i: naturalnumbers.below(list_props[nat].length(c_digraph_all_cycles.cw))): list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), list_props[nat].nth(c_digraph_all_cycles.cw, i))) #)"
    "{w: walks_[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make].Walk(c_digraph_all_cycles.C) | c_digraph_all_cycles.walk_eq(c_digraph_all_cycles.C)(w, c_digraph_all_cycles.cw)}"))
  (|w?2w_TCC2-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL
   (|w?2w| SUBTYPE
    "(# length := list_props[nat].length(c_digraph_all_cycles.cw), seq := (LAMBDA (i: naturalnumbers.below(list_props[nat].length(c_digraph_all_cycles.cw))): list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), list_props[nat].nth(c_digraph_all_cycles.cw, i))) #)"
    "{w: walks_[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make].Walk(c_digraph_all_cycles.C) | c_digraph_all_cycles.walk_eq(c_digraph_all_cycles.C)(w, c_digraph_all_cycles.cw)}")))
 (|w2w?_rec_TCC1| 0
  (|w2w?_rec_TCC1-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|edges| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|w2w?_rec| SUBTYPE
    "(number_fields.+)(c_digraph_all_cycles.i, c_digraph_all_cycles.offset)"
    "below[length(w)]")))
 (|w2w?_rec_TCC2| 0
  (|w2w?_rec_TCC2-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|w2w?_rec| SUBTYPE
    "(number_fields.-)(length(c_digraph_all_cycles.w), c_digraph_all_cycles.offset)"
    "naturalnumber")))
 (|w2w?_rec_TCC3| 0
  (|w2w?_rec_TCC3-1| |nil| 3828696916
   (""
    (THEN (SKEEP) (EXPAND "finseq_appl") (TYPEPRED "C") (TYPEPRED "w")
     (EXPAND "walk?") (FLATTEN) (EXPAND "verts_in?") (EXPAND "digraph_verts")
     (INST -2 "offset") (TYPEPRED "list2set(data(C::ComputableDigraph[T]))")
     (REPLACE -2 :HIDE? T) (ASSERT) (EXPAND "vert") (PROPAX))
    NIL NIL)
   ((|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|list2set| DEF-DECL "{s: finite_set[T] | s = {x | member(x, l)}}"
     |set_as_list| |structures|)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL))
   NIL
   (|w2w?_rec| SUBTYPE
    "finite_sequences[c_digraph_all_cycles.T].finseq_appl(c_digraph_all_cycles.w)(c_digraph_all_cycles.offset)"
    "{a: c_digraph_all_cycles.T | list_props[c_digraph_all_cycles.T].member(a, data(c_digraph_all_cycles.C))}")))
 (|w2w?_rec_TCC4| 0
  (|w2w?_rec_TCC5-1| |nil| 3828696916 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|verts_in?| CONST-DECL "bool" |walks_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|edges| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|w2w?_rec| SUBTYPE "(number_fields.+)(c_digraph_all_cycles.offset, 1)"
    "below(length(c_digraph_all_cycles.w))")))
 (|w2w?_rec_TCC5| 0
  (|w2w?_rec_TCC6-1| |nil| 3828696916 ("" (TERMINATION-TCC) NIL NIL)
   ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|w2w?_rec| TERMINATION
    "c_digraph_all_cycles.w2w?_rec(c_digraph_all_cycles.C)(c_digraph_all_cycles.w, (number_fields.+)(c_digraph_all_cycles.offset, 1))"
    "NIL")))
 (|w2w?_rec_TCC6| 0
  (|w2w?_rec_TCC4-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (LIFT-IF 1)
      (("" (SPLIT 1)
        (("1" (FLATTEN)
          (("1" (SPLIT 1)
            (("1" (EXPAND "list_of_idxs") (("1" (GRIND) NIL NIL)) NIL)
             ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL)
             ("4" (EXPAND "finseq_appl")
              (("4" (SKEEP)
                (("4" (TYPEPRED "i")
                  (("4" (ASSERT)
                    (("4" (CASE "i=0")
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (REPLACE -2 :HIDE? T)
                          (("1" (EXPAND "nth" 1 2) (("1" (GRIND) NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (ASSERT) NIL NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL)
         ("2" (FLATTEN)
          (("2" (TYPEPRED "v(C) (w, offset + 1)")
            (("1" (HIDE -1)
              (("1" (EXPAND "finseq_appl")
                (("1" (SPLIT 2)
                  (("1" (EXPAND "list_of_idxs")
                    (("1" (SKEEP)
                      (("1" (CASE "i=0")
                        (("1" (REPLACE -1 :HIDE? T)
                          (("1" (EXPAND "nth" 1)
                            (("1" (EXPAND "size") (("1" (GRIND) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "nth" 2)
                          (("2" (ASSERT) (("2" (INST -1 "i-1") NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "walk?")
                    (("2" (SKEEP 1)
                      (("2" (CASE "i=0")
                        (("1" (REPLACE -1 :HIDE? T)
                          (("1" (EXPAND "nth" 1 3)
                            (("1" (EXPAND "nth" 1 1)
                              (("1" (TYPEPRED "w")
                                (("1" (EXPAND "walk?")
                                  (("1" (FLATTEN)
                                    (("1" (INST -3 "offset")
                                      (("1" (ASSERT)
                                        (("1" (EXPAND "finseq_appl")
                                          (("1" (INST -7 "0")
                                            (("1" (ASSERT)
                                              (("1" (REPLACE -7 :HIDE? T)
                                                (("1" (EXPAND "edge?")
                                                  (("1"
                                                    (EXPAND "digraph_edges")
                                                    (("1" (EXPAND "edges")
                                                      (("1" (FLATTEN)
                                                        (("1"
                                                          (USE
                                                           "idx_nth_no_rep[T]")
                                                          (("1" (ASSERT) NIL
                                                            NIL)
                                                           ("2" (TYPEPRED "C")
                                                            (("2"
                                                              (EXPAND
                                                               "cdigraph")
                                                              (("2" (FLATTEN)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (EXPAND "nth" 2 3)
                          (("2" (ASSERT)
                            (("2" (EXPAND "nth" 2 1)
                              (("2" (INST -2 "i-1")
                                (("1" (ASSERT) NIL NIL)
                                 ("2" (TYPEPRED "i")
                                  (("2" (EXPAND "length" -1 1)
                                    (("2" (ASSERT) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (EXPAND "length" 1 1) (("3" (ASSERT) NIL NIL)) NIL)
                   ("4" (SKEEP)
                    (("4" (CASE "i=0")
                      (("1" (REPLACE -1 :HIDE? T)
                        (("1" (EXPAND "nth" 1 2) (("1" (GRIND) NIL NIL)) NIL))
                        NIL)
                       ("2" (EXPAND "nth" 2 2)
                        (("2" (ASSERT)
                          (("2" (INST -4 "i-1") (("2" (ASSERT) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (ASSERT) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|edge?| CONST-DECL "bool" |digraphs_| NIL)
    (|edges| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|idx_nth_no_rep| FORMULA-DECL NIL |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (IF CONST-DECL
        "[boolean, T, T -> T]"
        |if_def|
        NIL)
    (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|idx| DEF-DECL "{i: below(length(l)) | nth(l, i) = a}" |more_list_props|
     |structures|)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL))
   NIL
   (|w2w?_rec| SUBTYPE
    "list_adt[nat].cons(more_list_props[c_digraph_all_cycles.T].idx(data(c_digraph_all_cycles.C), finite_sequences[c_digraph_all_cycles.T].finseq_appl(c_digraph_all_cycles.w)(c_digraph_all_cycles.offset)), IF c_digraph_all_cycles.offset = (number_fields.-)(length(c_digraph_all_cycles.w), 1) THEN list_adt[nat].null ELSE c_digraph_all_cycles.w2w?_rec(c_digraph_all_cycles.C)(c_digraph_all_cycles.w, (number_fields.+)(c_digraph_all_cycles.offset, 1)) ENDIF)"
    "{wi: (c_digraph_all_cycles.walk?(c_digraph_all_cycles.C)) | booleans.AND((number_fields.+)(c_digraph_all_cycles.offset, list_props[nat].length(wi)) = length(c_digraph_all_cycles.w), FORALL (i: naturalnumbers.below(list_props[nat].length(wi))): finite_sequences[c_digraph_all_cycles.T].finseq_appl(c_digraph_all_cycles.w)((number_fields.+)(i, c_digraph_all_cycles.offset)) = list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), list_props[nat].nth(wi, i)))}")))
 (|w2w?_TCC1| 0
  (|w2w?_TCC1-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL (|w2w?| SUBTYPE "0" "below(length(c_digraph_all_cycles.w))")))
 (|w2w?_TCC2| 0
  (|w2w?_TCC2-1| |nil| 3828696916
   (""
    (THEN (SKEEP) (TYPEPRED "w2w?_rec(C)(w, 0)") (EXPAND "walk_eq") (ASSERT)
     (SKEEP) (INST -5 "i"))
    NIL NIL)
   ((|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|w2w?_rec| DEF-DECL "{wi: (walk?(C)) |
   length(wi) + offset = length(w) AND
    FORALL (i: below(length(wi))):
      finseq_appl[T](w)(i + offset) = nth(data(C), nth(wi, i))}"
     |c_digraph_all_cycles| NIL))
   NIL
   (|w2w?| SUBTYPE
    "c_digraph_all_cycles.w2w?_rec(c_digraph_all_cycles.C)(c_digraph_all_cycles.w, 0)"
    "{wi: (c_digraph_all_cycles.walk?(c_digraph_all_cycles.C)) | c_digraph_all_cycles.walk_eq(c_digraph_all_cycles.C)(c_digraph_all_cycles.w, wi)}")))
 (|w2w?_circuit| 0
  (|w2w?_circuit-1| |nil| 3828696936
   ("" (SKEEP)
    (("" (TYPEPRED "w2w?(C)(w)")
      (("" (HIDE -1)
        (("" (EXPAND "circuit?")
          (("" (FLATTEN)
            (("" (SPLIT 1)
              (("1" (EXPAND "pre_circuit?")
                (("1" (EXPAND "finseq_appl")
                  (("1" (EXPAND "walk_eq")
                    (("1" (FLATTEN)
                      (("1" (EXPAND "finseq_appl")
                        (("1" (INST? :COPY? T)
                          (("1" (EXPAND "last")
                            (("1" (INST -4 "length(w)-1")
                              (("1" (REPLACE -4 :HIDE? T)
                                (("1" (REPLACE -3 :HIDE? T)
                                  (("1" (REPLACE -3 :HIDE? T)
                                    (("1" (HIDE-ALL-BUT (-3 1))
                                      (("1" (EXPAND "nth" -1 2)
                                        (("1" (TYPEPRED "C")
                                          (("1" (EXPAND "cdigraph")
                                            (("1" (FLATTEN)
                                              (("1" (HIDE-ALL-BUT (-5 1 -3))
                                                (("1"
                                                  (EXPAND "no_repetitions?")
                                                  (("1"
                                                    (INST -1 "car(w2w?(C)(w))"
                                                     "nth(w2w?(C)(w), length(w2w?(C)(w)) - 1)")
                                                    (("1" (ASSERT) NIL NIL)
                                                     ("2"
                                                      (TYPEPRED "w2w?(C)(w)")
                                                      (("2" (EXPAND "walk?")
                                                        (("2" (FLATTEN)
                                                          (("2"
                                                            (EXPAND "length" 2)
                                                            (("2" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (TYPEPRED "w2w?(C)(w)")
                (("2" (EXPAND "walk_eq")
                  (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|w2w?| CONST-DECL "{wi: (walk?(C)) | walk_eq(C)(w, wi)}"
     |c_digraph_all_cycles| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |circuits_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   SHOSTAK))
 (|w2w?_cycle_TCC1| 0
  (|w2w?_cycle_TCC1-1| |nil| 3828696916
   ("" (THEN (SKEEP) (USE "w2w?_circuit") (ASSERT) (EXPAND "cycle?") (PROPAX))
    NIL NIL)
   ((|cycle?| CONST-DECL "bool" |cycles_| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|w2w?_circuit| FORMULA-DECL NIL |c_digraph_all_cycles| NIL))
   NIL
   (|w2w?_cycle| SUBTYPE
    "c_digraph_all_cycles.w2w?(c_digraph_all_cycles.C)(c_digraph_all_cycles.w)"
    "(c_digraph_all_cycles.circuit?(c_digraph_all_cycles.C))")))
 (|w2w?_cycle| 0
  (|w2w?_cycle-1| |nil| 3828696936
   ("" (SKEEP)
    (("" (TYPEPRED "w2w?(C)(w)")
      (("" (HIDE -1)
        (("" (EXPAND "cycle?")
          (("" (FLATTEN)
            (("" (EXPAND "finseq_appl")
              (("" (EXPAND "no_repetitions?")
                (("" (SKEEP :PREDS? T)
                  (("" (EXPAND "walk_eq")
                    (("" (FLATTEN)
                      (("" (EXPAND "finseq_appl")
                        (("" (EXPAND "length" -5)
                          (("" (LIFT-IF -5)
                            (("" (SPLIT -5)
                              (("1" (FLATTEN)
                                (("1" (EXPAND "walk?")
                                  (("1" (FLATTEN) NIL NIL)) NIL))
                                NIL)
                               ("2" (FLATTEN)
                                (("2" (CASE "i < length(w) -1")
                                  (("1" (HIDE -3)
                                    (("1" (CASE "j<length(w)-1")
                                      (("1" (HIDE -4)
                                        (("1" (CASE "i+1=length(w)-1")
                                          (("1" (EXPAND "circuit?")
                                            (("1" (FLATTEN)
                                              (("1" (EXPAND "pre_circuit?")
                                                (("1" (EXPAND "finseq_appl")
                                                  (("1" (INST -10 "0" "j+1")
                                                    (("1" (ASSERT)
                                                      (("1" (INST-CP -7 "j+1")
                                                        (("1"
                                                          (REPLACE -8 2 :HIDE?
                                                                   T)
                                                          (("1"
                                                            (EXPAND "nth" 2 2)
                                                            (("1"
                                                              (REPLACE -10 :DIR
                                                                       RL
                                                                       :HIDE?
                                                                       T)
                                                              (("1" (ASSERT)
                                                                (("1"
                                                                  (INST -7
                                                                   "length(w)-1")
                                                                  (("1"
                                                                    (REPLACE -7
                                                                             -8
                                                                             :HIDE?
                                                                             T)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE? T
                                                                       :DIR RL)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         -6 2)
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL)
                                                     ("2" (ASSERT) NIL NIL)
                                                     ("3" (ASSERT) NIL NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL)
                                           ("2" (CASE "j+1=length(w)-1")
                                            (("1" (EXPAND "circuit?")
                                              (("1" (FLATTEN)
                                                (("1" (EXPAND "pre_circuit?")
                                                  (("1" (EXPAND "finseq_appl")
                                                    (("1" (INST -10 "0" "i+1")
                                                      (("1" (ASSERT)
                                                        (("1"
                                                          (INST-CP -7 "i+1")
                                                          (("1"
                                                            (REPLACE -8 3
                                                                     :HIDE? T)
                                                            (("1"
                                                              (EXPAND "nth" 3
                                                                      2)
                                                              (("1"
                                                                (REPLACE -10
                                                                         :HIDE?
                                                                         T)
                                                                (("1"
                                                                  (INST -7
                                                                   "length(w)-1")
                                                                  (("1"
                                                                    (REPLACE -7
                                                                             -8
                                                                             :HIDE?
                                                                             T)
                                                                    (("1"
                                                                      (REPLACE
                                                                       -1
                                                                       :HIDE? T
                                                                       :DIR RL)
                                                                      (("1"
                                                                        (EXPAND
                                                                         "nth"
                                                                         -6 2)
                                                                        (("1"
                                                                          (PROPAX)
                                                                          NIL
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL)
                                                       ("2" (ASSERT) NIL NIL)
                                                       ("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (INST-CP -6 "i+1")
                                              (("1" (EXPAND "nth" -7 2)
                                                (("1" (INST -6 "j+1")
                                                  (("1" (EXPAND "nth" -6 2)
                                                    (("1" (INST -9 "i+1" "j+1")
                                                      (("1" (ASSERT) NIL NIL)
                                                       ("2" (ASSERT) NIL NIL)
                                                       ("3" (ASSERT) NIL NIL))
                                                      NIL))
                                                    NIL)
                                                   ("2" (ASSERT) NIL NIL))
                                                  NIL))
                                                NIL)
                                               ("2" (ASSERT) NIL NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL)
                                       ("2" (ASSERT) NIL NIL))
                                      NIL))
                                    NIL)
                                   ("2" (ASSERT) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|w2w?| CONST-DECL "{wi: (walk?(C)) | walk_eq(C)(w, wi)}"
     |c_digraph_all_cycles| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |cycles_| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL)
    (|circuit?| CONST-DECL "bool" |circuits_| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|))
   SHOSTAK))
 (|lc?2lw_TCC1| 0
  (|lc?2lw_TCC1-1| |nil| 3828696916
   (""
    (THEN (SKEEP) (TYPEPRED "nth(cycles,i)") (EXPAND "circuit?") (FLATTEN)
     (ASSERT))
    NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL))
   NIL
   (|lc?2lw| SUBTYPE "0" "below[length[nat](nth[(cycle?(C))](cycles, i))]")))
 (|lc?2lw_TCC2| 0
  (|lc?2lw_TCC2-1| |nil| 3828696916 ("" (SUBTYPE-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|lc?2lw| SUBTYPE "c_digraph_all_cycles.i"
    "below[length[(cycle?(C))](cycles)]")))
 (|lc?2lw_TCC3| 0
  (|lc?2lw_TCC4-1| "" 3884643054 ("" (GRIND) NIL NIL) NIL SHOSTAK
   (|lc?2lw| SUBTYPE
    "list_adt[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].null"
    "{cs: list_adt[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].list | booleans.AND(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(cs) = list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].length(c_digraph_all_cycles.cycles), FORALL (i: naturalnumbers.below(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(cs))): c_digraph_all_cycles.walk_eq(c_digraph_all_cycles.C)(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].nth(cs, i), list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].nth(c_digraph_all_cycles.cycles, i)))}"))
  (|lc?2lw_TCC6-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (REPLACE -1 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (SKEEP :PREDS? T)
        (("2" (EXPAND "length" -1)
          (("2" (TYPEPRED "v(C)(v_idx, cycles_)")
            (("1" (HIDE -1)
              (("1" (CASE "i=0")
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (EXPAND "nth" 1)
                    (("1" (REPLACE -4 :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2)
                  (("2" (ASSERT)
                    (("2" (INST -2 "i-1")
                      (("2" (ASSERT)
                        (("2" (REPLACE -4 :HIDE? T) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (TYPEPRED "cycles")
                (("2" (HIDE -1)
                  (("2" (SKEEP)
                    (("2" (REPLACE -3)
                      (("2" (INST -1 "i!1+1")
                        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|lc?2lw| SUBTYPE
    "list_adt[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].null"
    "{cs: list_adt[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].list | booleans.AND(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(cs) = list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].length(c_digraph_all_cycles.cycles), FORALL (i: naturalnumbers.below(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(cs))): c_digraph_all_cycles.walk_eq(c_digraph_all_cycles.C)(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].nth(cs, i), list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].nth(c_digraph_all_cycles.cycles, i)))}")))
 (|lc?2lw_TCC4| 0
  (|lc?2lw_TCC4-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "cycles")
        (("" (HIDE -1)
          (("" (REPLACE -2)
            (("" (INST -1 "i+1") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL))
   NIL
   (|lc?2lw| SUBTYPE "c_digraph_all_cycles.cycles_"
    "{cycles: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (i: naturalnumbers.below(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].length(cycles))): list_props[nat].nth(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].nth(cycles, i), 0) = c_digraph_all_cycles.v_idx}")))
 (|lc?2lw_TCC5| 0
  (|lc?2lw_TCC5-1| |nil| 3828696916 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|lc?2lw| TERMINATION
    "c_digraph_all_cycles.lc?2lw(c_digraph_all_cycles.C)(c_digraph_all_cycles.v_idx, c_digraph_all_cycles.cycles_)"
    "NIL")))
 (|lc?2lw_TCC6| 0
  (|lc?2lw_TCC7-1| |nil| 3884635194
   ("" (SKEEP)
    (("" (SPLIT 1)
      (("1" (REPLACE -1 :HIDE? T) (("1" (GRIND) NIL NIL)) NIL)
       ("2" (SKEEP :PREDS? T)
        (("2" (EXPAND "length" -1)
          (("2" (TYPEPRED "v(C)(v_idx, cycles_)")
            (("1" (HIDE -1)
              (("1" (CASE "i=0")
                (("1" (REPLACE -1 :HIDE? T)
                  (("1" (EXPAND "nth" 1)
                    (("1" (REPLACE -4 :HIDE? T) (("1" (ASSERT) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (EXPAND "nth" 2)
                  (("2" (ASSERT)
                    (("2" (INST -2 "i-1")
                      (("2" (ASSERT)
                        (("2" (REPLACE -4 :HIDE? T) (("2" (ASSERT) NIL NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (HIDE 2)
              (("2" (TYPEPRED "cycles")
                (("2" (HIDE -1)
                  (("2" (SKEEP)
                    (("2" (REPLACE -3)
                      (("2" (INST -1 "i!1+1")
                        (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|w?2w| CONST-DECL "{w: Walk(C) | walk_eq(C)(w, cw)}"
     |c_digraph_all_cycles| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL))
   NIL
   (|lc?2lw| SUBTYPE
    "list_adt[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].cons(c_digraph_all_cycles.w?2w(c_digraph_all_cycles.C)(c_digraph_all_cycles.cycle), c_digraph_all_cycles.lc?2lw(c_digraph_all_cycles.C)(c_digraph_all_cycles.v_idx, c_digraph_all_cycles.cycles_))"
    "{cs: list_adt[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].list | booleans.AND(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(cs) = list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].length(c_digraph_all_cycles.cycles), FORALL (i: naturalnumbers.below(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(cs))): c_digraph_all_cycles.walk_eq(c_digraph_all_cycles.C)(list_props[Walk[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].nth(cs, i), list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].nth(c_digraph_all_cycles.cycles, i)))}")))
 (|ac2vl_rec_TCC1| 0
  (|ac2vl_rec_TCC1-1| |nil| 3828696916
   (""
    (THEN (SKEEP) (TYPEPRED "C") (SKEEP :PREDS? T) (TYPEPRED "cs") (ASSERT)
     (EXPAND "size") (ASSERT))
    NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE
    "(number_fields.+)(c_digraph_all_cycles.n, c_digraph_all_cycles.offset)"
    "below[length[T](data(C))]")))
 (|ac2vl_rec_TCC2| 0
  (|ac2vl_rec_TCC2-1| |nil| 3828696916 ("" (GRIND) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|VertCycles| TYPE-EQ-DECL NIL |cycles_| NIL)
    (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| NIL)
    (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE
    "list_adt[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].null"
    "{l: list_adt[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].list | booleans.AND(list_props[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(l) = list_props[list[(cycle?(C))]].length(c_digraph_all_cycles.cs), FORALL (n: naturalnumbers.below(list_props[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(l))): list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), (number_fields.+)(n, c_digraph_all_cycles.offset)) = vert(list_props[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].nth(l, n)))}")))
 (|ac2vl_rec_TCC3| 0
  (|ac2vl_rec_TCC3-1| |nil| 3828696916
   (""
    (THEN (SKEEP) (TYPEPRED "cs") (HIDE -1) (EXPAND "size")
     (REPLACE -1 :DIR RL :HIDE? T) (GRIND))
    NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE "c_digraph_all_cycles.offset"
    "below[length[T](data(C))]")))
 (|ac2vl_rec_TCC4| 0
  (|ac2vl_rec_TCC4-1| |nil| 3828696916
   (""
    (THEN (SKEEP) (TYPEPRED "C") (EXPAND "vert?") (EXPAND "digraph_verts")
     (EXPAND "vert") (USE "nth_member[T]"))
    NIL NIL)
   ((|vert?| CONST-DECL "bool" |digraphs_| NIL)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE
    "list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), c_digraph_all_cycles.offset)"
    "vert[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)")))
 (|ac2vl_rec_TCC5| 0
  (|ac2vl_rec_TCC5-1| |nil| 3828696916
   ("" (THEN (SKEEP) (TYPEPRED "cs") (GRIND)) NIL NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE "c_digraph_all_cycles.offset"
    "below(c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C))")))
 (|ac2vl_rec_TCC6| 0
  (|ac2vl_rec_TCC6-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "cs")
        (("" (HIDE -1)
          (("" (REPLACE -3 :HIDE? T)
            (("" (INST -2 "0")
              (("1" (EXPAND "nth" -2)
                (("1" (EXPAND "nth" 1 1)
                  (("1" (INST -2 "nth(cycles,i)")
                    (("1" (ASSERT)
                      (("1" (USE "nth_member[(cycle?(C))]") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REVEAL -2)
                (("2" (REPLACE -1 :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE "c_digraph_all_cycles.cycles"
    "{cycles: list_adt[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].list | FORALL (i: naturalnumbers.below(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].length(cycles))): list_props[nat].nth(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].nth(cycles, i), 0) = c_digraph_all_cycles.offset}")))
 (|ac2vl_rec_TCC7| 0
  (|ac2vl_rec_TCC7-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (SKEEP)
      (("" (TYPEPRED "cs")
        (("" (HIDE -1)
          (("" (REPLACE -3 :HIDE? T)
            (("" (INST -2 "0")
              (("1" (EXPAND "nth" -2)
                (("1" (TYPEPRED "lc?2lw(C)(offset, cycles)")
                  (("1" (HIDE -1)
                    (("1" (EXPAND "cycle_at?")
                      (("1" (EXPAND "finseq_appl")
                        (("1" (SPLIT 1)
                          (("1" (FLATTEN)
                            (("1" (USE "member_nth[Walk(C)]")
                              (("1" (ASSERT)
                                (("1" (HIDE -2)
                                  (("1" (SKEEP -1)
                                    (("1" (INST -3 "i")
                                      (("1" (INST -5 "nth(cycles,i)")
                                        (("1" (USE "nth_member[(cycle?(C))]")
                                          (("1" (ASSERT)
                                            (("1" (EXPAND "walk_eq")
                                              (("1" (FLATTEN)
                                                (("1" (EXPAND "finseq_appl")
                                                  (("1" (REPLACE -2 :HIDE? T)
                                                    (("1" (INST -4 "0")
                                                      (("1"
                                                        (REPLACE -4 :HIDE? T)
                                                        (("1"
                                                          (EXPAND "nth" 1 2)
                                                          (("1"
                                                            (USE
                                                             "cycle_walk_eq")
                                                            (("1" (ASSERT) NIL
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (FLATTEN)
                            (("2"
                              (CASE
                                  "EXISTS(cc: (cycle?(C))): walk_eq(C)(walk,cc)")
                              (("1" (SKEEP -1)
                                (("1" (INST -7 "cc")
                                  (("1" (FLATTEN -7)
                                    (("1" (HIDE -7)
                                      (("1" (SPLIT -)
                                        (("1" (USE "member_nth[(cycle?(C))]")
                                          (("1" (ASSERT)
                                            (("1" (SKEEP -1)
                                              (("1" (INST -7 "i")
                                                (("1" (REPLACE -1 :HIDE? T)
                                                  (("1" (LEMMA "walk_eq_inj_1")
                                                    (("1" (INST? -1 :WHERE -3)
                                                      (("1"
                                                        (INST? -1 :WHERE -7)
                                                        (("1" (ASSERT)
                                                          (("1" (REPLACE -1)
                                                            (("1"
                                                              (USE
                                                               "nth_member[Walk(C)]")
                                                              NIL NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (EXPAND "walk_eq" -1)
                                          (("2" (FLATTEN)
                                            (("2" (INST -2 "0")
                                              (("2" (EXPAND "finseq_appl")
                                                (("2" (REPLACE -2 :HIDE? T)
                                                  (("2" (HIDE-ALL-BUT (-3 1))
                                                    (("2" (EXPAND "nth" -1 2)
                                                      (("2" (TYPEPRED "C")
                                                        (("2"
                                                          (EXPAND "cdigraph")
                                                          (("2" (FLATTEN)
                                                            (("2"
                                                              (EXPAND
                                                               "no_repetitions?"
                                                               -3)
                                                              (("2"
                                                                (INST -3
                                                                 "car(cc)"
                                                                 "offset")
                                                                (("2" (ASSERT)
                                                                  NIL NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (INST 1 "w2w?(C)(walk)")
                                (("1" (TYPEPRED "w2w?(C)(walk)")
                                  (("1" (PROPAX) NIL NIL)) NIL)
                                 ("2" (USE "w2w?_cycle")
                                  (("2" (ASSERT)
                                    (("2" (EXPAND "cycle?")
                                      (("2" (FLATTEN)
                                        (("2" (USE "w2w?_circuit")
                                          (("2" (ASSERT) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL)
               ("2" (REVEAL -2)
                (("2" (REPLACE -1 :HIDE? T) (("2" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|lc?2lw| DEF-DECL "{cs:
   list[Walk[T, digraph_type[T], digraph_verts, digraph_edges,
             digraph_size, digraph_make](C)] |
   length(cs) = length(cycles) AND
    FORALL (i: below(length(cs))): walk_eq(C)(nth(cs, i), nth(cycles, i))}"
     |c_digraph_all_cycles| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|cycle_at?| CONST-DECL "bool" |cycles_| NIL)
    (|member_nth| FORMULA-DECL NIL |more_list_props| |structures|)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (|cycle_walk_eq| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (|walk_eq_inj_1| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|w2w?_cycle| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |cycles_| NIL)
    (|w2w?_circuit| FORMULA-DECL NIL |c_digraph_all_cycles| NIL)
    (|w2w?| CONST-DECL "{wi: (walk?(C)) | walk_eq(C)(w, wi)}"
     |c_digraph_all_cycles| NIL)
    (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE
    "c_digraph_all_cycles.lc?2lw(c_digraph_all_cycles.C)(c_digraph_all_cycles.offset, c_digraph_all_cycles.cycles)"
    "CyclesAt[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C, list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), c_digraph_all_cycles.offset))")))
 (|ac2vl_rec_TCC8| 0
  (|ac2vl_rec_TCC8-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (TYPEPRED "cs")
      (("" (HIDE -1)
        (("" (REPLACE -1 :DIR RL)
          (("" (ASSERT)
            (("" (REPLACE -3)
              (("" (EXPAND "length" 1 2)
                (("" (SKEEP :PREDS? T)
                  (("" (INST -3 "i+1")
                    (("1" (SKEEP)
                      (("1" (INST?)
                        (("1" (ASSERT)
                          (("1" (REPLACE -3 :DIR RL)
                            (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (REPLACE -3) (("2" (GRIND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL))
   NIL
   (|ac2vl_rec| SUBTYPE "c_digraph_all_cycles.cs_"
    "{cs: list_adt[list[(cycle?(C))]].list | booleans.AND((number_fields.+)((number_fields.+)(1, c_digraph_all_cycles.offset), list_props[list[(cycle?(C))]].length(cs)) = c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C), FORALL (i: naturalnumbers.below(list_props[list[(cycle?(C))]].length(cs))) (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, list_props[list[(cycle?(C))]].nth(cs, i)), list_adt[nat].car(cycle) = (number_fields.+)((number_fields.+)(1, i), c_digraph_all_cycles.offset)))}")))
 (|ac2vl_rec_TCC9| 0
  (|ac2vl_rec_TCC9-1| |nil| 3828696916 ("" (TERMINATION-TCC) NIL NIL)
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL))
   NIL
   (|ac2vl_rec| TERMINATION
    "c_digraph_all_cycles.ac2vl_rec(c_digraph_all_cycles.C)((number_fields.+)(c_digraph_all_cycles.offset, 1), c_digraph_all_cycles.cs_)"
    "NIL")))
 (|ac2vl_rec_TCC10| 0
  (|ac2vl_rec_TCC10-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (TYPEPRED "v(C)(offset + 1, cs_)")
      (("1" (SPLIT 1)
        (("1" (REPLACE -3 :HIDE? T)
          (("1" (EXPAND "length" 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)
         ("2" (SKEEP :PREDS? T)
          (("2" (EXPAND "length" -1)
            (("2" (CASE "n=0")
              (("1" (REPLACE -1 :HIDE? T)
                (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
               ("2" (INST -3 "n-1")
                (("1" (ASSERT)
                  (("1" (EXPAND "nth" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)
                 ("2" (ASSERT) NIL NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2) (("2" (GRIND) NIL NIL)) NIL)
       ("3" (HIDE 2)
        (("3" (TYPEPRED "cs")
          (("3" (REPLACE -2 :DIR RL)
            (("3" (ASSERT)
              (("3" (REPLACE -4)
                (("3" (EXPAND "length" 1 2)
                  (("3" (SKEEP :PREDS? T)
                    (("3" (SKEEP)
                      (("3" (INST -4 "i+1")
                        (("1" (INST?)
                          (("1" (REPLACE -4 :DIR RL)
                            (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (GRIND) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VertCycles| TYPE-EQ-DECL NIL |cycles_| NIL)
    (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| NIL)
    (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|lc?2lw| DEF-DECL "{cs:
   list[Walk[T, digraph_type[T], digraph_verts, digraph_edges,
             digraph_size, digraph_make](C)] |
   length(cs) = length(cycles) AND
    FORALL (i: below(length(cs))): walk_eq(C)(nth(cs, i), nth(cycles, i))}"
     |c_digraph_all_cycles| NIL)
    (|walk_eq| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|Walk| TYPE-EQ-DECL NIL |walks_| NIL)
    (|walk?| CONST-DECL "bool" |walks_| NIL)
    (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL)
    (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|no_repetitions?| CONST-DECL "bool" |more_list_props| |structures|)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|last| CONST-DECL "T" |more_list_props| |structures|)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL))
   NIL
   (|ac2vl_rec| SUBTYPE
    "list_adt[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].cons((# vert := list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), c_digraph_all_cycles.offset), cycles := c_digraph_all_cycles.lc?2lw(c_digraph_all_cycles.C)(c_digraph_all_cycles.offset, c_digraph_all_cycles.cycles) #), c_digraph_all_cycles.ac2vl_rec(c_digraph_all_cycles.C)((number_fields.+)(c_digraph_all_cycles.offset, 1), c_digraph_all_cycles.cs_))"
    "{l: list_adt[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].list | booleans.AND(list_props[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(l) = list_props[list[(cycle?(C))]].length(c_digraph_all_cycles.cs), FORALL (n: naturalnumbers.below(list_props[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].length(l))): list_props[c_digraph_all_cycles.T].nth(data(c_digraph_all_cycles.C), (number_fields.+)(n, c_digraph_all_cycles.offset)) = vert(list_props[VertCycles[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)].nth(l, n)))}")))
 (|all_cycles_vl_TCC1| 0
  (|all_cycles_vl_TCC1-1| |nil| 3828696916
   (""
    (THEN (EXPAND "vert?") (EXPAND "digraph_verts") (ASSERT) (EXPAND "vert")
     (SKEEP) (USE "every_nth[T]") (ASSERT) (HIDE 2) (SKEEP)
     (USE "nth_member[T]"))
    NIL NIL)
   ((|vert?| CONST-DECL "bool" |digraphs_| NIL)
    (|nth_member| FORMULA-DECL NIL |more_list_props| |structures|)
    (< CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|every_nth| FORMULA-DECL NIL |list_props| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|vert| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL))
   NIL
   (|all_cycles_vl| SUBTYPE "data(c_digraph_all_cycles.C)"
    "list[vert[T, digraph_type[T], digraph_verts[T], digraph_edges[T], digraph_size[T], digraph_make[T]](C)]")))
 (|all_cycles_vl_TCC2| 0
  (|all_cycles_vl_TCC2-1| |nil| 3828696916 ("" (USE "data_vert_list") NIL NIL)
   ((T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|data_vert_list| JUDGEMENT-TCC NIL |c_digraphs| NIL))
   NIL
   (|all_cycles_vl| SUBTYPE "data(c_digraph_all_cycles.C)"
    "VertList[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C)")))
 (|all_cycles_vl_TCC3| 0
  (|all_cycles_vl_TCC3-1| |nil| 3828696916
   ("" (THEN (SKEEP*) (TYPEPRED "all_cycles(C)") (ASSERT) (SKEEP*) (INST? -3))
    NIL NIL)
   ((TRUE CONST-DECL "bool" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|all_cycles| CONST-DECL "{cs: list[list[(cycle?(C))]] |
   length(cs) = size(C) AND
    FORALL (i: below(size(C))):
      FORALL (cycle: (cycle?(C))):
        member(cycle, nth(cs, i)) IFF car(cycle) = i}"
     |c_digraph_all_cycles| NIL))
   NIL
   (|all_cycles_vl| SUBTYPE
    "c_digraph_all_cycles.all_cycles(c_digraph_all_cycles.C)"
    "{cs: list_adt[list[(cycle?(C))]].list | booleans.AND(list_props[list[(cycle?(C))]].length(cs) = c_digraphs_def[c_digraph_all_cycles.T].size(c_digraph_all_cycles.C), FORALL (i: naturalnumbers.below(list_props[list[(cycle?(C))]].length(cs))) (cycle: (c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))): booleans.IFF(list_props[(c_digraph_all_cycles.cycle?(c_digraph_all_cycles.C))].member(cycle, list_props[list[(cycle?(C))]].nth(cs, i)), list_adt[nat].car(cycle) = i))}")))
 (|all_cycles_vl_TCC4| 0
  (|all_cycles_vl_TCC4-1| |nil| 3828696916
   ("" (SKEEP)
    (("" (TYPEPRED "ac2vl_rec(C)(0, all_cycles(C))")
      (("1" (REPLACE -1 :HIDE? T)
        (("1" (TYPEPRED "all_cycles(C)")
          (("1" (ASSERT) (("1" (EXPAND "size") (("1" (ASSERT) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL)
       ("2" (HIDE 2)
        (("2" (TYPEPRED "all_cycles(C)")
          (("2" (ASSERT) (("2" (SKEEP*) (("2" (INST? -3) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   ((|all_cycles| CONST-DECL "{cs: list[list[(cycle?(C))]] |
   length(cs) = size(C) AND
    FORALL (i: below(size(C))):
      FORALL (cycle: (cycle?(C))):
        member(cycle, nth(cs, i)) IFF car(cycle) = i}"
     |c_digraph_all_cycles| NIL)
    (|ac2vl_rec| DEF-DECL "{l:
   list[VertCycles
            [T, digraph_type[T], digraph_verts, digraph_edges,
             digraph_size, digraph_make](C)] |
   length(l) = length(cs) AND
    FORALL (n: below(length(l))):
      nth[T](data(C), n + offset) = vert(nth(l, n))}"
     |c_digraph_all_cycles| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|member| DEF-DECL "bool" |list_props| NIL)
    (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|size| CONST-DECL "nat" |c_digraphs_def| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|cycle?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|circuit?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|walk?| CONST-DECL "bool" |c_digraph_all_cycles| NIL)
    (|list_of_idxs| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|VertCycles| TYPE-EQ-DECL NIL |cycles_| NIL)
    (|CyclesAt| TYPE-EQ-DECL NIL |cycles_| NIL)
    (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL)
    (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph_type]"
     |c_digraphs_imp| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|is_finite| CONST-DECL "bool" |finite_sets| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|digraph_size| CONST-DECL "[digraph_type -> nat]" |c_digraphs_imp| NIL)
    (|digraph_edges| CONST-DECL "[digraph_type -> [T, T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_verts| CONST-DECL "[digraph_type -> [T -> bool]]"
     |c_digraphs_imp| NIL)
    (|digraph_type| TYPE-EQ-DECL NIL |c_digraphs_imp| NIL)
    (|cdigraph| CONST-DECL "bool" |c_digraphs_def| NIL)
    (|ComputableDigraph| TYPE-EQ-DECL NIL |c_digraphs_def| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (T FORMAL-TYPE-DECL NIL |c_digraph_all_cycles| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL))
   NIL
   (|all_cycles_vl| SUBTYPE
    "c_digraph_all_cycles.ac2vl_rec(c_digraph_all_cycles.C)(0, c_digraph_all_cycles.all_cycles(c_digraph_all_cycles.C))"
    "VCList[c_digraph_all_cycles.T, digraph_type[T], c_digraphs_imp[c_digraph_all_cycles.T].digraph_verts, c_digraphs_imp[c_digraph_all_cycles.T].digraph_edges, c_digraphs_imp[c_digraph_all_cycles.T].digraph_size, c_digraphs_imp[c_digraph_all_cycles.T].digraph_make](c_digraph_all_cycles.C, data(c_digraph_all_cycles.C))"))))

