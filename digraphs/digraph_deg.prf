(|digraph_deg| (|incoming_edges_TCC1| 0 (|incoming_edges_TCC1-1| |nil| 3298281553 ("" (SKOSIMP*) (("" (LEMMA "finite_subset[edgetype[T]]") (("" (INST?) (("" (INST -1 "edges(G!1)") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|incoming_edges| SUBTYPE "{e: digraphs_utils[digraph_deg.T].edgetype | booleans.AND(edges(digraph_deg.G)(e), e`2 = digraph_deg.v)}" "finite_set[edgetype[T]]"))) (|outgoing_edges_TCC1| 0 (|outgoing_edges_TCC1-1| |nil| 3298281553 ("" (SKOSIMP*) (("" (LEMMA "finite_subset[edgetype[T]]") (("" (INST?) (("" (INST -1 "edges(G!1)") (("" (ASSERT) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|outgoing_edges| SUBTYPE "{e: digraphs_utils[digraph_deg.T].edgetype | booleans.AND(edges(digraph_deg.G)(e), e`1 = digraph_deg.v)}" "finite_set[edgetype[T]]"))) (|incident_edges_TCC1| 0 (|incident_edges_TCC1-1| |nil| 3298819375 ("" (SKOSIMP*) (("" (LEMMA "finite_subset[edgetype[T]]") (("" (INST?) (("" (INST -1 "edges(G!1)") (("" (ASSERT) (("" (HIDE 2) (("" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|pair| TYPE-EQ-DECL NIL |pairs| |structures|) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK (|incident_edges| SUBTYPE "{e: digraphs_utils[digraph_deg.T].edgetype | booleans.AND(edges(digraph_deg.G)(e), pairs[digraph_deg.T].in?(digraph_deg.v, e))}" "finite_set[edgetype[T]]"))) (|incoming_edges_subset| 0 (|incoming_edges_subset-1| |nil| 3298476069 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|outgoing_edges_subset| 0 (|outgoing_edges_subset-1| |nil| 3298476076 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|incident_edges_subset| 0 (|incident_edges_subset-1| |nil| 3298734919 ("" (GRIND) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|incident_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL)) SHOSTAK)) (|incoming_edges_emptyset| 0 (|incoming_edges_emptyset-1| |nil| 3298476249 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (EXPAND "emptyset") (("" (EXPAND "incoming_edges") (("" (FLATTEN) (("" (REPLACE -3) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|outgoing_edges_emptyset| 0 (|outgoing_edges_emptyset-1| |nil| 3298476557 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (EXPAND "emptyset") (("" (EXPAND "outgoing_edges") (("" (FLATTEN) (("" (REPLACE -3) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|incident_edges_emptyset| 0 (|incident_edges_emptyset-1| |nil| 3298734972 ("" (SKOSIMP*) (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (EXPAND "emptyset") (("" (EXPAND "incident_edges") (("" (FLATTEN) (("" (REPLACE -3) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|incident_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|deg_del_edge_incoming| 0 (|deg_del_edge_incoming-1| |nil| 3298474440 ("" (SKOSIMP*) (("" (EXPAND "in_deg") (("" (CASE-REPLACE "incoming_edges(y!1, del_edge(G!1,e!1)) =
                       remove(e!1,incoming_edges(y!1, G!1))") (("1" (REWRITE "card_remove[edgetype[T]]") (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE -1 2) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (PROP) (("1" (EXPAND "incoming_edges") (("1" (GROUND) (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (GROUND) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "del_edge_lem[T]") (("1" (INST?) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem2[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "incoming_edges") (("2" (EXPAND "remove") (("2" (FLATTEN) (("2" (EXPAND "member") (("2" (GROUND) (("2" (REWRITE "del_edge_lem3") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|del_edge_lem3| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem2| FORMULA-DECL NIL |digraph_ops| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|del_edge| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|deg_del_edge_outgoing| 0 (|deg_del_edge_outgoing-1| |nil| 3298475399 ("" (SKOSIMP*) (("" (EXPAND "out_deg") (("" (CASE-REPLACE "outgoing_edges(x!1, del_edge(G!1,e!1)) =
                       remove(e!1,outgoing_edges(x!1, G!1))") (("1" (REWRITE "card_remove[edgetype[T]]") (("1" (LIFT-IF) (("1" (GROUND) (("1" (HIDE -1 2) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (IFF 1) (("2" (PROP) (("1" (EXPAND "outgoing_edges") (("1" (GROUND) (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (GROUND) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (LEMMA "del_edge_lem[T]") (("1" (INST?) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem2[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "outgoing_edges") (("2" (EXPAND "remove") (("2" (FLATTEN) (("2" (EXPAND "member") (("2" (GROUND) (("2" (REWRITE "del_edge_lem3") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|del_edge_lem3| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem2| FORMULA-DECL NIL |digraph_ops| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|del_edge| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL)) SHOSTAK)) (|deg_del_non_edge| 0 (|deg_del_non_edge-1| |nil| 3298484996 ("" (SKOSIMP*) (("" (EXPAND "deg") (("" (EXPAND "in_deg") (("" (EXPAND "out_deg") (("" (CASE "incoming_edges(y!1, G!1) = incoming_edges(y!1, del_edge(G!1, e!1)) AND outgoing_edges(y!1, G!1) = outgoing_edges(y!1, del_edge(G!1, e!1))") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (SPLIT) (("1" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("1" (EXPAND "incoming_edges") (("1" (IFF 1) (("1" (GROUND) (("1" (LEMMA "del_edge_lem3[T]") (("1" (INST?) (("1" (ASSERT) (("1" (CASE "e!1 = (x!1,x!2)") (("1" (EXPAND "in?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in?") (("2" (LEMMA "del_edge_lem2[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "outgoing_edges") (("2" (IFF 1) (("2" (GROUND) (("1" (LEMMA "del_edge_lem3[T]") (("1" (INST?) (("1" (ASSERT) (("1" (CASE "e!1 = (x!1,x!2)") (("1" (EXPAND "in?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "in?") (("2" (LEMMA "del_edge_lem2[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg| CONST-DECL "nat" |digraph_deg| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|del_edge_lem2| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem3| FORMULA-DECL NIL |digraph_ops| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|del_edge| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL)) SHOSTAK)) (|deg_del_non_edge_incoming| 0 (|deg_del_non_edge_incoming-1| |nil| 3298488119 ("" (ASSERT) (("" (SKOSIMP*) (("" (EXPAND "in_deg") (("" (CASE "incoming_edges(y!1, G!1) = incoming_edges(y!1, del_edge(G!1, e!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "incoming_edges") (("2" (IFF 1) (("2" (GROUND) (("1" (LEMMA "del_edge_lem3[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem2[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|del_edge| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|del_edge_lem2| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem3| FORMULA-DECL NIL |digraph_ops| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL)) SHOSTAK)) (|deg_del_non_edge_outgoing| 0 (|deg_del_non_edge_outgoing-1| |nil| 3298488293 ("" (SKOSIMP*) (("" (EXPAND "out_deg") (("" (CASE "outgoing_edges(y!1, G!1) = outgoing_edges(y!1, del_edge(G!1, e!1))") (("1" (ASSERT) NIL NIL) ("2" (HIDE 3) (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (EXPAND "outgoing_edges") (("2" (IFF 1) (("2" (GROUND) (("1" (LEMMA "del_edge_lem3[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (LEMMA "del_edge_lem2[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|del_edge_lem3| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge_lem2| FORMULA-DECL NIL |digraph_ops| NIL) (|del_edge| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|deg_del_edge| 0 (|deg_del_edge-1| |nil| 3298478034 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (SPLIT) (("1" (EXPAND "self_loop?") (("1" (LEMMA "deg_del_edge_outgoing") (("1" (INST - "G!1" "e!1" "e!1`1" "e!1`2") (("1" (EXPAND "deg") (("1" (LEMMA "deg_del_non_edge_incoming") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "self_loop?") (("2" (LEMMA "deg_del_edge_incoming") (("2" (INST - "G!1" "e!1" "e!1`1" "e!1`2") (("2" (EXPAND "deg") (("2" (LEMMA "deg_del_non_edge_outgoing") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |pairs| |structures|) (|deg_del_non_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL) (|self_loop?| CONST-DECL "bool" |digraph_deg| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|deg_del_non_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|deg| CONST-DECL "nat" |digraph_deg| NIL) (|deg_del_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|deg_del_self_loop| 0 (|deg_del_self_loop-1| |nil| 3298491682 ("" (SKOSIMP*) (("" (EXPAND "in?") (("" (EXPAND "deg") (("" (LEMMA "deg_del_edge_incoming") (("" (INST - "G!1" "e!1" "e!1`1" "y!1") (("" (LEMMA "deg_del_edge_outgoing") (("" (INST - "G!1" "e!1" "y!1" "e!1`2") (("" (EXPAND "self_loop?") (("" (COPY -3) (("" (REPLACE -6 -1) (("" (REPLACE -6 -4 :DIR RL) (("" (BDDSIMP -1) (("" (BDDSIMP -4) (("" (REPLACE -1 -3) (("" (REPLACE -2 -4) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|in?| CONST-DECL "bool" |pairs| |structures|) (|deg_del_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL) (|self_loop?| CONST-DECL "bool" |digraph_deg| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|deg| CONST-DECL "nat" |digraph_deg| NIL)) SHOSTAK)) (|deg_del_edge_ge_incoming| 0 (|deg_del_edge_ge_incoming-1| |nil| 3298490074 ("" (SKOSIMP*) (("" (CASE "e!1 = (e!1`1, y!1)") (("1" (LEMMA "deg_del_edge_incoming") (("1" (INST - "G!1" "e!1" "e!1`1" "y!1") (("1" (ASSERT) (("1" (LEMMA "del_edge_lem5[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deg_del_non_edge_incoming") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|del_edge_lem5| FORMULA-DECL NIL |digraph_ops| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deg_del_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_non_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|deg_del_edge_ge_outgoing| 0 (|deg_del_edge_ge_outgoing-1| |nil| 3298491281 ("" (SKOSIMP*) (("" (CASE "e!1 = (y!1, e!1`2)") (("1" (LEMMA "deg_del_edge_outgoing") (("1" (INST - "G!1" "e!1" "y!1" "e!1`2") (("1" (ASSERT) (("1" (LEMMA "del_edge_lem5[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deg_del_non_edge_outgoing") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|del_edge_lem5| FORMULA-DECL NIL |digraph_ops| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deg_del_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_non_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|deg_del_edge_ge| 0 (|deg_del_edge_ge-1| |nil| 3298281514 ("" (SKOSIMP*) (("" (CASE "in?(y!1,e!1)") (("1" (LEMMA "deg_del_edge") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "del_edge_lem5[T]") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "deg_del_self_loop") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deg_del_non_edge") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|pair| TYPE-EQ-DECL NIL |pairs| |structures|) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|del_edge_lem5| FORMULA-DECL NIL |digraph_ops| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|deg_del_self_loop| FORMULA-DECL NIL |digraph_deg| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deg_del_edge| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_non_edge| FORMULA-DECL NIL |digraph_deg| NIL)) NIL)) (|deg_del_edge_le_incoming| 0 (|deg_del_edge_le_incoming-1| |nil| 3298636487 ("" (SKOSIMP*) (("" (CASE "e!1 = (e!1`1, y!1)") (("1" (LEMMA "deg_del_edge_incoming") (("1" (INST - "G!1" "e!1" "e!1`1" "y!1") (("1" (ASSERT) (("1" (LEMMA "del_edge_lem5[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deg_del_non_edge_incoming") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|del_edge_lem5| FORMULA-DECL NIL |digraph_ops| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deg_del_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_non_edge_incoming| FORMULA-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|deg_del_edge_le_outgoing| 0 (|deg_del_edge_le_outgoing-1| |nil| 3298636605 ("" (SKOSIMP*) (("" (CASE "e!1 = (y!1, e!1`2)") (("1" (LEMMA "deg_del_edge_outgoing") (("1" (INST - "G!1" "e!1" "y!1" "e!1`2") (("1" (ASSERT) (("1" (LEMMA "del_edge_lem5[T]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deg_del_non_edge_outgoing") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|del_edge_lem5| FORMULA-DECL NIL |digraph_ops| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deg_del_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_non_edge_outgoing| FORMULA-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|deg_del_edge_le| 0 (|deg_del_edge_le-1| |nil| 3298281514 ("" (SKOSIMP*) (("" (CASE "in?(y!1,e!1)") (("1" (LEMMA "deg_del_edge") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "del_edge_lem5[T]") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "deg_del_self_loop") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "deg_del_non_edge") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|pair| TYPE-EQ-DECL NIL |pairs| |structures|) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|del_edge_lem5| FORMULA-DECL NIL |digraph_ops| NIL) (|even_minus_even_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|deg_del_self_loop| FORMULA-DECL NIL |digraph_deg| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|deg_del_edge| FORMULA-DECL NIL |digraph_deg| NIL) (|deg_del_non_edge| FORMULA-DECL NIL |digraph_deg| NIL)) NIL)) (|in_deg_edge_exists| 0 (|in_deg_edge_exists-1| |nil| 3298636784 ("" (SKOSIMP*) (("" (EXPAND "in_deg") (("" (REWRITE "nonempty_card[edgetype[T]]" :DIR RL) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "incoming_edges") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST?) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|out_deg_edge_exists| 0 (|out_deg_edge_exists-1| |nil| 3298640405 ("" (SKOSIMP*) (("" (EXPAND "out_deg") (("" (REWRITE "nonempty_card[edgetype[T]]" :DIR RL) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (EXPAND "outgoing_edges") (("" (SKOSIMP*) (("" (EXPAND "member") (("" (INST?) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|deg_edge_exists| 0 (|deg_edge_exists-1| |nil| 3298281514 ("" (SKOSIMP*) (("" (EXPAND "deg") (("" (LEMMA "in_deg_edge_exists") (("" (INST?) (("" (LEMMA "out_deg_edge_exists") (("" (INST?) (("" (ASSERT) (("" (GROUND) (("1" (EXPAND "in?") (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (INST?) (("2" (PROP) (("2" (EXPAND "in?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (INST?) (("3" (EXPAND "in?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg| CONST-DECL "nat" |digraph_deg| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|out_deg_edge_exists| FORMULA-DECL NIL |digraph_deg| NIL) (|in_deg_edge_exists| FORMULA-DECL NIL |digraph_deg| NIL)) NIL)) (|deg_to_card| 0 (|deg_to_card-1| |nil| 3298281514 ("" (SKOSIMP*) (("" (LEMMA "deg_edge_exists") (("" (INST?) (("" (ASSERT) (("" (SKOSIMP*) (("" (HIDE -1 -3) (("" (TYPEPRED "SG!1") (("" (INST?) (("" (ASSERT) (("" (FLATTEN) (("" (CASE "subset?(add[T](proj_1(e!1),singleton(proj_2(e!1))),vert(SG!1))") (("1" (LEMMA "card_subset[T]") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -2) (("1" (LEMMA "card_add[T]") (("1" (INST?) (("1" (LEMMA "card_singleton[T]") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "singleton") (("1" (EXPAND "size") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg_edge_exists| FORMULA-DECL NIL |digraph_deg| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|card_add| FORMULA-DECL NIL |finite_sets| NIL) (|card_singleton| FORMULA-DECL NIL |finite_sets| NIL) (|size| CONST-DECL "nat" |digraph_def| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|add| CONST-DECL "(nonempty?)" |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|nonempty_add_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|simple_digraph| TYPE-EQ-DECL NIL |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL)) NIL)) (|del_vert_deg_0| 0 (|del_vert_deg_0-1| |nil| 3298281514 ("" (SKOSIMP*) (("" (EXPAND "deg") (("" (EXPAND "in_deg") (("" (EXPAND "out_deg") (("" (LEMMA "card_empty?[edgetype[T]]") (("" (INST?) (("" (IFF) (("" (ASSERT) (("" (LEMMA "card_empty?[edgetype[T]]") (("" (INST - "outgoing_edges(v!1, G!1)") (("" (IFF) (("" (ASSERT) (("" (HIDE -3) (("" (EXPAND "outgoing_edges") (("" (EXPAND "incoming_edges") (("" (EXPAND "empty?") (("" (EXPAND "member") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (EXPAND "del_vert") (("" (INST?) (("" (INST?) (("" (IFF 1) (("" (EXPAND "in?") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg| CONST-DECL "nat" |digraph_deg| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|del_vert| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|member| CONST-DECL "bool" |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL)) NIL)) (|singleton_loops| 0 (|singleton_loops-1| |nil| 3298653367 ("" (SKOSIMP*) (("" (EXPAND "singleton?") (("" (EXPAND "self_loop?") (("" (EXPAND "digraph_size") (("" (EXPAND "size") (("" (TYPEPRED! "e!1") (("" (LEMMA "edge_in_card_gt_1") (("" (ASSERT) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|simple_digraph| TYPE-EQ-DECL NIL |digraphs_| NIL) (|edge_in_card_gt_1| FORMULA-DECL NIL |digraphs_| NIL) (|size| CONST-DECL "nat" |digraph_def| NIL) (|self_loop?| CONST-DECL "bool" |digraph_deg| NIL)) SHOSTAK)) (|singleton_edges| 0 (|singleton_edges-1| |nil| 3298651751 ("" (SKOSIMP*) (("" (LEMMA "singleton_loops") (("" (INST?) (("" (ASSERT) (("" (EXPAND "self_loop?") (("" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("" (INST -1 "(x!1, x!2)") (("1" (EXPAND "incoming_edges") (("1" (EXPAND "outgoing_edges") (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton_loops| FORMULA-DECL NIL |digraph_deg| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (SG!1 SKOLEM-CONST-DECL "simple_digraph
    [T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make]" |digraph_deg| NIL) (|x!1| SKOLEM-CONST-DECL "T" |digraph_deg| NIL) (|x!2| SKOLEM-CONST-DECL "T" |digraph_deg| NIL) (|self_loop?| CONST-DECL "bool" |digraph_deg| NIL) (|simple_digraph| TYPE-EQ-DECL NIL |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|singleton_deg| 0 (|singleton_deg-1| |nil| 3298281514 ("" (SKOSIMP*) (("" (LEMMA "singleton_edges") (("" (INST - "v!1" "SG!1") (("" (ASSERT) (("" (EXPAND "in_deg") (("" (EXPAND "out_deg") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|singleton_edges| FORMULA-DECL NIL |digraph_deg| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|simple_digraph| TYPE-EQ-DECL NIL |digraphs_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL)) NIL)) (|in_deg_1_sing| 0 (|in_deg_1_sing-1| |nil| 3298727916 ("" (SKOSIMP*) (("" (EXPAND "in_deg") (("" (LEMMA "card_one[edgetype[T]]") (("" (INST?) (("" (FLATTEN) (("" (ASSERT) (("" (HIDE -2) (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) (("" (CASE-REPLACE "incoming_edges(v!1, G!1)(x!1) = singleton(x!1)(x!1)") (("1" (HIDE -2) (("1" (EXPAND "incoming_edges") (("1" (EXPAND "singleton") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|out_deg_1_sing| 0 (|out_deg_1_sing-1| |nil| 3298728100 ("" (SKOSIMP*) (("" (EXPAND "out_deg") (("" (LEMMA "card_one[edgetype[T]]") (("" (INST?) (("" (FLATTEN) (("" (ASSERT) (("" (HIDE -2) (("" (SKOSIMP*) (("" (INST?) (("" (ASSERT) (("" (CASE-REPLACE "outgoing_edges(v!1, G!1)(x!1) = singleton(x!1)(x!1)") (("1" (HIDE -2) (("1" (EXPAND "outgoing_edges") (("1" (EXPAND "singleton") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL)) SHOSTAK)) (|deg_1_sing| 0 (|deg_1_sing-1| |nil| 3298735089 ("" (SKOSIMP*) (("" (EXPAND "deg") (("" (CASE "in_deg(v!1, G!1) = 1 AND out_deg(v!1, G!1) = 0") (("1" (FLATTEN) (("1" (LEMMA "in_deg_1_sing") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "in_deg") (("1" (LEMMA "card_one[edgetype[T]]") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (CASE "incoming_edges(v!1, G!1) = incident_edges(v!1, G!1)") (("1" (CASE-REPLACE "incident_edges(v!1, G!1)(x!1) = singleton(x!1)(x!1)") (("1" (ASSERT) (("1" (EXPAND "incident_edges") (("1" (EXPAND "singleton") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "out_deg") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (BDDSIMP 2) (("2" (EXPAND "incoming_edges" 1) (("2" (EXPAND "incident_edges" 1) (("2" (EXPAND "in?") (("2" (REWRITE "card_empty?") (("2" (EXPAND "outgoing_edges") (("2" (EXPAND "empty?") (("2" (INST -6 "(x!2, x!3)") (("2" (EXPAND "member") (("2" (BDDSIMP 1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "in_deg(v!1, G!1) = 0 AND out_deg(v!1, G!1) = 1") (("1" (FLATTEN) (("1" (LEMMA "out_deg_1_sing") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (EXPAND "out_deg") (("1" (LEMMA "card_one[edgetype[T]]") (("1" (INST?) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST?) (("1" (ASSERT) (("1" (CASE "outgoing_edges(v!1, G!1) = incident_edges(v!1, G!1)") (("1" (CASE-REPLACE "incident_edges(v!1, G!1)(x!1) = singleton(x!1)(x!1)") (("1" (ASSERT) (("1" (EXPAND "incident_edges") (("1" (EXPAND "singleton") (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "in_deg") (("2" (APPLY-EXTENSIONALITY 1 :HIDE? T) (("2" (BDDSIMP 2) (("2" (BDDSIMP 2) (("2" (EXPAND "outgoing_edges" 1) (("2" (EXPAND "incident_edges" 1) (("2" (EXPAND "in?") (("2" (REWRITE "card_empty?") (("2" (EXPAND "incoming_edges") (("2" (EXPAND "empty?") (("2" (INST -5 "(x!2, x!3)") (("2" (EXPAND "member") (("2" (BDDSIMP 1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "in_deg(v!1, G!1)") (("2" (TYPEPRED "out_deg(v!1, G!1)") (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg| CONST-DECL "nat" |digraph_deg| NIL) (|out_deg_1_sing| FORMULA-DECL NIL |digraph_deg| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL) (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|singleton?| CONST-DECL "bool" |sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|incident_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|in_deg_1_sing| FORMULA-DECL NIL |digraph_deg| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|deg_1_in_out| 0 (|deg_1_in_out-1| |nil| 3298904312 ("" (SKOSIMP*) (("" (EXPAND "deg") (("" (TYPEPRED "in_deg(v!1, G!1)") (("" (TYPEPRED "out_deg(v!1, G!1)") (("" (BDDSIMP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg| CONST-DECL "nat" |digraph_deg| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK)) (|deg_1_edge| 0 (|deg_1_edge-1| |nil| 3298905263 ("" (SKOSIMP*) (("" (LEMMA "deg_1_in_out") (("" (INST?) (("" (ASSERT) (("" (SPLIT) (("1" (FLATTEN) (("1" (EXPAND "out_deg") (("1" (REWRITE "card_empty?") (("1" (EXPAND "empty?") (("1" (EXPAND "member") (("1" (EXPAND "outgoing_edges") (("1" (LEMMA "in_deg_1_sing") (("1" (INST?) (("1" (ASSERT) (("1" (SKOSIMP*) (("1" (INST?) (("1" (INST?) (("1" (INST + "e!1`1") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "edges_to_pair") (("2" (INST?) (("2" (ASSERT) (("2" (TYPEPRED "G!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "in_deg") (("2" (REWRITE "card_empty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (EXPAND "incoming_edges") (("2" (LEMMA "out_deg_1_sing") (("2" (INST?) (("2" (ASSERT) (("2" (SKOSIMP*) (("2" (INST?) (("2" (INST?) (("2" (INST + "e!1`2") (("1" (ASSERT) NIL NIL) ("2" (TYPEPRED "G!1") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|deg_1_in_out| FORMULA-DECL NIL |digraph_deg| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|out_deg_1_sing| FORMULA-DECL NIL |digraph_deg| NIL) (|e!1| SKOLEM-CONST-DECL "edgetype[T]" |digraph_deg| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|in_deg_1_sing| FORMULA-DECL NIL |digraph_deg| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|edges_to_pair| FORMULA-DECL NIL |digraphs_| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|e!1| SKOLEM-CONST-DECL "edgetype[T]" |digraph_deg| NIL) (G!1 SKOLEM-CONST-DECL "digraph[T]" |digraph_deg| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL)) SHOSTAK)) (|in_deg_pos| 0 (|in_deg_pos-2| "" 3884655661 ("" (SKEEP) (("" (TYPEPRED "G") (("" (EXPAND "in_deg") (("" (LEMMA "nonempty_card[edgetype]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKEEP) (("" (EXPAND "member") (("" (INST -2 "x") (("" (EXPAND "incoming_edges") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|in_deg_pos-1| |nil| 3805639699 ("" (SKEEP) (("" (TYPEPRED G) (("" (EXPAND IN_DEG) (("" (LEMMA NONEMPTY_CARD[EDGETYPE]) (("" (INST?) (("" (ASSERT) (("" (EXPAND NONEMPTY?) (("" (EXPAND EMPTY?) (("" (SKEEP) (("" (EXPAND MEMBER) (("" (INST -2 X) (("" (EXPAND INCOMING_EDGES) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL)) SHOSTAK)) (|out_deg_pos| 0 (|out_deg_pos-2| "" 3884655705 ("" (SKEEP) (("" (TYPEPRED "G") (("" (EXPAND "out_deg") (("" (LEMMA "nonempty_card[edgetype]") (("" (INST?) (("" (ASSERT) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (SKEEP) (("" (EXPAND "member") (("" (INST -2 "x") (("" (EXPAND "outgoing_edges") (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|out_deg_pos-1| |nil| 3805639776 ("" (SKEEP) (("" (TYPEPRED G) (("" (EXPAND OUT_DEG) (("" (LEMMA NONEMPTY_CARD[EDGETYPE]) (("" (INST?) (("" (ASSERT) (("" (EXPAND NONEMPTY?) (("" (EXPAND EMPTY?) (("" (SKEEP) (("" (EXPAND MEMBER) (("" (INST -2 X) (("" (EXPAND OUTGOING_EDGES) (("" (FLATTEN) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |digraph_deg| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL)) NIL)))
