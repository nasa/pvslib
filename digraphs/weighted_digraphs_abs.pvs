%==============================================================================%
%                                                                              %
% This theory has the same role for weighted digraphs than "digraphs_abs.pvs"  %
% has for (conventional) digraphs.                                             %
%                                                                              %
%            Mariano Moscato (NIA) 2015                                        %
%                                                                              %
%==============================================================================%
weighted_digraphs_abs[
  T : TYPE,

  Weight : TYPE,
  add_w  : {f : [[Weight, Weight] -> Weight] | associative?(f) },
  zero_w : {zero: Weight | identity?(add_w)(zero)},

  ConcreteDigraph: TYPE,
  vert : [ConcreteDigraph-> [T -> bool]],
  edges: [ConcreteDigraph -> [T,T -> bool]],
  size : [ConcreteDigraph -> nat],
  make : [ v:(is_finite[T]),
              {e: (is_finite[[T,T]]) | FORALL(x,y:T):
       	          e(x,y) IMPLIES v(x) AND v(y) } -> ConcreteDigraph],

  wdg    : TYPE,
  dg     : [wdg -> ConcreteDigraph],
  get_wgt: [W: wdg, (edges(dg(W))) -> Weight],

  WeightsMap    : TYPE,
  weighted_edge?: [WeightsMap->[[T,T]->bool]],  % ~ has_key?
  get_weight    : [map0:WeightsMap,(weighted_edge?(map0))->Weight], % ~ get_value

  weight_map?   : [ConcreteDigraph->[WeightsMap-> bool ]],

  make_wdg: [cd:ConcreteDigraph,map2:(weight_map?(cd))->wdg] ]: THEORY
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a
    % correct interpretation for (uninterpreted) digraphs. That is checked using
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs_abs[T,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation
  ENDASSUMING


  correct_implementation: bool =
    % weight_map?_ok
    (FORALL(cd:ConcreteDigraph,map1:WeightsMap):
      weight_map?(cd)(map1) IFF FORALL(e:(edges(cd))): weighted_edge?(map1)(e))
    AND
    % make_wdg_ok
    (FORALL(cd:ConcreteDigraph,wmap:(weight_map?(cd))):
      dg(make_wdg(cd,wmap)) = cd AND
      FORALL(e:(edges(cd))): get_wgt(make_wdg(cd,wmap),e) = get_weight(wmap,e))

END weighted_digraphs_abs
