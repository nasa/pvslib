(dags
 (IMP_dags__TCC1 0
  (IMP_dags__TCC1-1 nil 3817038063
   ("" (assert) (("" (grind) nil nil)) nil)
   ((correct_implementation const-decl "bool" digraphs_abs nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (predigraph type-eq-decl nil digraph_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (digraph_type type-eq-decl nil digraphs_imp nil)
    (digraph type-eq-decl nil digraph_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (digraph_size const-decl "[digraph -> nat]" digraphs_imp nil)
    (size const-decl "nat" digraph_def nil)
    (make const-decl "digraph" digraph_def nil)
    (digraph_edges const-decl "[digraph -> [T, T -> bool]]"
     digraphs_imp nil)
    (digraph_verts const-decl "[digraph -> [T -> bool]]" digraphs_imp
     nil)
    (digraph_make const-decl
     "[v: (is_finite[T]), {e: (is_finite[[T, T]]) | FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} -> digraph]"
     digraphs_imp nil)
    (T formal-nonempty-type-decl nil dags nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (IMP_dags_ assuming
    "dags_[dags.T, digraph_type[T], digraphs_imp[dags.T].digraph_verts, digraphs_imp[dags.T].digraph_edges, digraphs_imp[dags.T].digraph_size, digraphs_imp[dags.T].digraph_make].dags_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[dags_.T, dags_.ConcreteDigraph, dags_.vert, dags_.edges, dags_.size, dags_.make].correct_implementation"))))

