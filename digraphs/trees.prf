(|trees| (|tree?_TCC1| 0 (|tree?_TCC1-1| |nil| 3300198183 ("" (SKOSIMP*) (("" (EXPAND "size") (("" (ASSERT) (("" (EXPAND "del_vert") (("" (REWRITE "card_remove") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|size| CONST-DECL "nat" |digraph_def| NIL) (|del_vert| CONST-DECL "digraph[T]" |digraph_ops| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|tree?| TERMINATION "trees.tree?(digraph_ops[trees.T].del_vert(trees.G, trees.v))" "NIL"))) (|tree_nonempty| 0 (|tree_nonempty-4| "" 3300809694 ("" (SKOSIMP*) (("" (EXPAND "empty?") (("" (USE "card_empty?[T]") (("" (IFF) (("" (ASSERT) (("" (EXPAND "tree?") (("" (SKOSIMP*) (("" (EXPAND "root?") (("" (LEMMA "deg_1_sing") (("" (INST?) (("" (INST - "v!1") (("" (ASSERT) (("" (EXPAND "in?") (("" (EXPAND "empty?") (("" (INST?) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|empty?| CONST-DECL "bool" |digraphs_| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|deg_1_sing| FORMULA-DECL NIL |digraph_deg| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|member| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|card_empty?| FORMULA-DECL NIL |finite_sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|tree_nonempty-3| "" 3300462180 ("" (SKOSIMP*) (("" (EXPAND "empty?") (("" (USE "card_empty?[T]") (("" (IFF) (("" (ASSERT) (("" (EXPAND "tree?") (("" (SPLIT) (("1" (FLATTEN) (("1" (USE "nonempty_singleton[T]") (("1" (ASSERT) (("1" (EXPAND "nonempty?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (EXPAND "tree?") (("2" (SPLIT) (("1" (FLATTEN) (("1" (USE "nonempty_singleton[T]") (("1" (ASSERT) (("1" (EXPAND "nonempty?") (("1" (EXPAND "del_vert") (("1" (EXPAND "remove") (("1" (EXPAND "member") (("1" (USE "nonempty_singleton[T]") (("1" (ASSERT) (("1" (EXPAND "nonempty?") (("1" (EXPAND "empty?") (("1" (SKOSIMP*) (("1" (INST?) (("1" (EXPAND "member") (("1" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "empty?") (("2" (SKOSIMP*) (("2" (INST?) (("2" (EXPAND "member") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|tree_nonempty-2| "" 3300130046 ("" (INDUCT "G" 1 "tree?_induction[T]") (("" (SKOSIMP*) (("" (SPLIT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "empty?") (("1" (EXPAND "singleton?") (("1" (SKOSIMP* T) (("1" (EXPAND "empty?") (("1" (EXPAND "member") (("1" (INST?) (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (ASSERT) (("2" (EXPAND "empty?") (("2" (EXPAND "empty?") (("2" (EXPAND "member") (("2" (SKOSIMP*) (("2" (INST - "x!1") (("2" (EXPAND "del_vert") (("2" (EXPAND "remove") (("2" (EXPAND "member") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|tree_nonempty-1| |nil| 3300116030 ("" (SKOSIMP*) (("" (EXPAND "empty?") (("" (USE "card_empty?[T]") (("" (IFF) (("" (ASSERT) (("" (EXPAND "tree?") (("" (SKOSIMP*) (("" (LEMMA "deg_1_sing") (("" (INST?) (("" (INST - "v!1") (("" (ASSERT) (("" (EXPAND "in?") (("" (EXPAND "empty?") (("" (INST?) (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|tree_size_pos| 0 (|tree_size_pos-2| "" 3884652031 ("" (SKEEP) (("" (LEMMA "tree_nonempty") (("" (EXPAND "size") (("" (EXPAND "empty?") (("" (INST -1 "G") (("" (ASSERT) (("" (EXPAND "empty?") (("" (SKEEP) (("" (LEMMA "nonempty_card[T]") (("" (INST?) (("" (EXPAND "member") (("" (ASSERT) (("" (EXPAND "nonempty?") (("" (EXPAND "empty?") (("" (INST -1 "x") (("" (EXPAND "member") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|tree_size_pos-1| |nil| 3805637204 ("" (SKEEP) (("" (LEMMA TREE_NONEMPTY) (("" (EXPAND SIZE) (("" (EXPAND EMPTY?) (("" (INST -1 G) (("" (ASSERT) (("" (EXPAND EMPTY?) (("" (SKEEP) (("" (LEMMA "nonempty_card[T]") (("" (INST?) (("" (EXPAND MEMBER) (("" (ASSERT) (("" (EXPAND NONEMPTY?) (("" (EXPAND EMPTY?) (("" (INST -1 X) (("" (EXPAND MEMBER) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|tree_nonempty| FORMULA-DECL NIL |trees| NIL) (|empty?| CONST-DECL "bool" |digraphs_| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|nonempty?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|nonempty_card| FORMULA-DECL NIL |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (|size| CONST-DECL "nat" |digraph_def| NIL)) SHOSTAK)) (|tree_no_self_loops| 0 (|tree_no_self_loops-2| "" 3884652324 ("" (SKEEP) (("" (NAME "n" "size(G)") (("" (GENERALIZE "G" "G") (("" (GENERALIZE "n" "n") (("" (INDUCT "n") (("1" (SKEEP) (("1" (LEMMA "tree_size_pos") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "tree?" -3) (("2" (SPLIT -3) (("1" (EXPAND "no_self_loops?") (("1" (SKEEP) (("1" (CASE "emptyset[edgetype](e)") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL) ("2" (LEMMA "card_is_0[edgetype]") (("2" (INST?) (("2" (IFF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!1,v)") (("2" (ASSERT) (("2" (SPLIT -3) (("1" (EXPAND "no_self_loops?") (("1" (SKEEP) (("1" (INST -1 "e") (("1" (FLATTEN) NIL NIL) ("2" (EXPAND "del_vert") (("2" (EXPAND "in?") (("2" (EXPAND "leaf?") (("2" (FLATTEN) (("2" (EXPAND "in_deg") (("2" (EXPAND "out_deg") (("2" (EXPAND "incoming_edges") (("2" (EXPAND "outgoing_edges") (("2" (REPLACE -6 -1 RL) (("2" (ASSERT) (("2" (CASE "v=e`1") (("1" (DELETE -2) (("1" (DELETE -2) (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (ASSERT) (("1" (CASE "emptyset[edgetype](e)") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_subset[edgetype]") (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "size") (("2" (EXPAND "del_vert" 1) (("2" (LEMMA "card_remove[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|tree_no_self_loops-1| |nil| 3805636770 ("" (SKEEP) (("" (NAME N "size(G)") (("" (GENERALIZE G G) (("" (GENERALIZE N N) (("" (INDUCT N) (("1" (SKEEP) (("1" (LEMMA TREE_SIZE_POS) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND TREE? -3) (("2" (SPLIT -3) (("1" (EXPAND NO_SELF_LOOPS?) (("1" (SKEEP) (("1" (CASE "emptyset[edgetype](e)") (("1" (EXPAND EMPTYSET) (("1" (PROPAX) NIL NIL)) NIL) ("2" (LEMMA CARD_IS_0[EDGETYPE]) (("2" (INST?) (("2" (IFF) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!1,v)") (("2" (ASSERT) (("2" (SPLIT -3) (("1" (EXPAND NO_SELF_LOOPS?) (("1" (SKEEP) (("1" (INST -1 E) (("1" (FLATTEN) NIL NIL) ("2" (EXPAND DEL_VERT) (("2" (EXPAND IN?) (("2" (EXPAND LEAF?) (("2" (FLATTEN) (("2" (EXPAND IN_DEG) (("2" (EXPAND OUT_DEG) (("2" (EXPAND INCOMING_EDGES) (("2" (EXPAND OUTGOING_EDGES) (("2" (REPLACE -6 -1 RL) (("2" (ASSERT) (("2" (CASE "v=e`1") (("1" (DELETE -2) (("1" (DELETE -2) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (ASSERT) (("1" (CASE "emptyset[edgetype](e)") (("1" (EXPAND EMPTYSET) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA FINITE_SUBSET[EDGETYPE]) (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND SIZE) (("2" (EXPAND DEL_VERT 1) (("2" (LEMMA CARD_REMOVE[T]) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|size| CONST-DECL "nat" |digraph_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|e| SKOLEM-CONST-DECL "(edges(G!1))" |trees| NIL) (|v| SKOLEM-CONST-DECL "(vert(G!1))" |trees| NIL) (G!1 SKOLEM-CONST-DECL "digraph[T]" |trees| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|leaf?| CONST-DECL "bool" |trees| NIL) (|del_vert| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|card_is_0| FORMULA-DECL NIL |finite_sets| NIL) (|tree_size_pos| FORMULA-DECL NIL |trees| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|no_self_loops?| CONST-DECL "bool" |trees| NIL)) SHOSTAK)) (|root_unique| 0 (|root_unique-3| "" 3884654861 ("" (SKEEP) (("" (NAME "n" "size(G)") (("" (GENERALIZE "G" "G") (("" (GENERALIZE "n" "n") (("" (INDUCT "n") (("1" (SKEEP) (("1" (LEMMA "tree_size_pos") (("1" (INST -1 "G!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (COPY -3) (("2" (HIDE -1) (("2" (EXPAND "tree?" -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (DELETE -3) (("1" (DELETE -3) (("1" (LEMMA "card_is_0[edgetype]") (("1" (LEMMA "card_one[T]") (("1" (INST?) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE -3 -4) (("1" (SKEEP) (("1" (EXPAND "exists1") (("1" (SPLIT 1) (("1" (INST 1 "x") (("1" (EXPAND "root?") (("1" (REPLACE -1) (("1" (EXPAND "singleton") (("1" (EXPAND "in_deg") (("1" (EXPAND "incoming_edges") (("1" (REPLACE -2) (("1" (EXPAND "emptyset") (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (IFF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "is_finite" 1) (("2" (INST 1 0 "LAMBDA (x:{e: edgetype[T] | FALSE}) : 0") (("1" (EXPAND "injective?") (("1" (SKEEP) NIL NIL)) NIL) ("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "unique?") (("2" (SKEEP) (("2" (EXPAND "root?") (("2" (FLATTEN) (("2" (REPLACE -5) (("2" (EXPAND "singleton") (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert[T](G!1,v)") (("2" (ASSERT) (("2" (CASE "size(del_vert[T](G!1, v)) = j") (("1" (ASSERT) (("1" (EXPAND "exists1") (("1" (FLATTEN) (("1" (SKEEP) (("1" (CASE "j=1") (("1" (REPLACE -1) (("1" (DELETE -1) (("1" (SIMPLIFY) (("1" (EXPAND "size") (("1" (CASE "singleton?(vert(del_vert[T](G!1,v)))") (("1" (CASE "FORALL (x:T) : vert(G!1)(x) IMPLIES (x=v OR x=singleton_elt(vert(del_vert(G!1,v))))") (("1" (SPLIT 1) (("1" (INST 1 "singleton_elt(vert(del_vert(G!1, v)))") (("1" (EXPAND "root?" 1) (("1" (SPLIT 1) (("1" (EXPAND "in_deg") (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (ASSERT) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE 2) (("1" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (IFF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "incoming_edges") (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (REVEAL -4) (("1" (LEMMA "tree_no_self_loops") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "no_self_loops?") (("1" (INST -1 "(x!1, singleton_elt(vert(del_vert(G!1, v))))") (("1" (FLATTEN) (("1" (INST -4 "x!1") (("1" (TYPEPRED "G!1") (("1" (INST -1 "(x!1, singleton_elt(vert(del_vert(G!1, v))))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -6) (("1" (EXPAND "leaf?") (("1" (FLATTEN) (("1" (EXPAND "out_deg") (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (CASE "emptyset((x!1, singleton_elt(vert(del_vert(G!1, v)))))") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (EXPAND "outgoing_edges") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "emptyset") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "singleton_singleton[T]") (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (REPLACE -1) (("2" (REWRITE "singleton_rew") (("2" (EXPAND "del_vert" -1) (("2" (EXPAND "singleton" -1) (("2" (EXPAND "remove" -1) (("2" (CASE "{y: T | v /= y AND member(y, vert(G!1))}(x!1)") (("1" (ASSERT) (("1" (EXPAND "member") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "unique?") (("2" (EXPAND "root?" 1) (("2" (SKEEP) (("2" (INST-CP -5 "x!1") (("2" (INST-CP -5 "y") (("2" (DELETE -5) (("2" (ASSERT) (("2" (EXPAND "root?" -11) (("2" (FLATTEN) (("2" (EXPAND "leaf?") (("2" (FLATTEN) (("2" (SPLIT -5) (("1" (REPLACE -1) (("1" (REPLACE -4 -9) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SPLIT -6) (("1" (REPLACE -1) (("1" (REPLACE -3 -9) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "x!1 = v OR remove(v,vert(G!1))(x!1)") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "del_vert" 2) (("2" (LEMMA "singleton_elt_lem[T]") (("2" (INST?) (("2" (EXPAND "del_vert" -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "remove" 2) (("2" (ASSERT) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) NIL NIL)) NIL) ("2" (EXPAND "singleton?") (("2" (LEMMA "card_one[T]") (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST 1 "x!1") (("1" (SKEEP) (("1" (TYPEPRED "y") (("1" (REPLACE -2 -1) (("1" (EXPAND "singleton") (("1" (REPLACE -1 1 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "singleton") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "root?(G!1)(x)") (("1" (SPLIT 2) (("1" (INST 1 "x") NIL NIL) ("2" (EXPAND "unique?" 1) (("2" (SKEEP) (("2" (EXPAND "root?") (("2" (FLATTEN) (("2" (REVEAL -2) (("2" (DELETE -6 -7 -8 -9 -10 -11 -12 -13 -14 2) (("2" (NAME "m" "size(G!1)") (("2" (GENERALIZE "x!1" "x") (("2" (GENERALIZE "y" "y") (("2" (GENERALIZE "G!1" "G") (("2" (GENERALIZE "m" "m") (("2" (INDUCT "m") (("1" (SKEEP) (("1" (LEMMA "tree_size_pos") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "tree?" -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (LEMMA "card_one[T]") (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (REPLACE -1) (("1" (EXPAND "singleton") (("1" (REPLACE -7) (("1" (REPLACE -9) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!2,v!1)" "y!1" "x!2") (("2" (ASSERT) (("2" (CASE "v!1 /= x!2 AND v!1 /= y!1") (("1" (FLATTEN) (("1" (EXPAND "size" 3) (("1" (EXPAND "del_vert" 3 (1)) (("1" (LEMMA "card_remove[T]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (EXPAND "size" -4) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (DELETE -1 -4) (("1" (EXPAND "in_deg") (("1" (LEMMA "card_subset[edgetype]") (("1" (INST-CP -1 "incoming_edges(x!2, del_vert(G!2, v!1))" "incoming_edges(x!2,G!2)") (("1" (INST-CP -1 "incoming_edges(y!1, del_vert(G!2, v!1))" "incoming_edges(y!1,G!2)") (("1" (DELETE -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (DELETE -1 -2) (("1" (EXPAND "del_vert" 3) (("1" (EXPAND "remove" 3) (("1" (EXPAND "member" 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (EXPAND "incoming_edges") (("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "del_vert" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (EXPAND "incoming_edges") (("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND "del_vert" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "leaf?") (("2" (FLATTEN) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REPLACE -2 -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (REPLACE -2 -8) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE 3) (("2" (EXPAND "root?" 1) (("2" (SPLIT 1) (("1" (EXPAND "root?" -4) (("1" (FLATTEN) (("1" (EXPAND "in_deg") (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE 2) (("1" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE -5) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (DELETE 1) (("1" (EXPAND "incoming_edges" -1) (("1" (FLATTEN) (("1" (REPLACE -2 -1) (("1" (CASE "emptyset(x!1,x)") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (DELETE -3) (("2" (EXPAND "incoming_edges" 1) (("2" (EXPAND "del_vert" 1) (("2" (ASSERT) (("2" (EXPAND "in?") (("2" (EXPAND "leaf?" -5) (("2" (FLATTEN) (("2" (EXPAND "in_deg") (("2" (EXPAND "out_deg") (("2" (LEMMA "card_one[edgetype]") (("2" (LEMMA "card_is_0[edgetype]") (("2" (INST?) (("2" (INST?) (("2" (IFF) (("2" (ASSERT) (("2" (SKEEP) (("2" (DELETE -7 -8) (("2" (SPLIT -3) (("1" (REPLACE -1) (("1" (EXPAND "outgoing_edges") (("1" (CASE "emptyset(x!1,x)") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "outgoing_edges") (("2" (EXPAND "incoming_edges") (("2" (EXPAND "del_vert" -8) (("2" (EXPAND "remove" -8) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "root?" -4) (("2" (FLATTEN) (("2" (CASE "subset?(vert(del_vert(G!1,v)),vert(G!1))") (("1" (EXPAND "subset?") (("1" (INST -1 "x") (("1" (EXPAND "member") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKEEP) (("2" (EXPAND "del_vert" -1) (("2" (EXPAND "remove" -1) (("2" (FLATTEN) (("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "del_vert") (("2" (EXPAND "size") (("2" (LEMMA "card_remove[T]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|root_unique-2| |nil| 3805636756 ("" (SKEEP) (("" (NAME N "size(G)") (("" (GENERALIZE G G) (("" (GENERALIZE N N) (("" (INDUCT N) (("1" (SKEEP) (("1" (LEMMA TREE_SIZE_POS) (("1" (INST -1 "G!1") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (COPY -3) (("2" (HIDE -1) (("2" (EXPAND TREE? -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (DELETE -3) (("1" (DELETE -3) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (LEMMA CARD_ONE[T]) (("1" (INST?) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE -3 -4) (("1" (SKEEP) (("1" (EXPAND EXISTS1) (("1" (SPLIT 1) (("1" (INST 1 X) (("1" (EXPAND ROOT?) (("1" (REPLACE -1) (("1" (EXPAND SINGLETON) (("1" (EXPAND IN_DEG) (("1" (EXPAND INCOMING_EDGES) (("1" (REPLACE -2) (("1" (EXPAND EMPTYSET) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND IS_FINITE 1) (("2" (INST 1 0 "LAMBDA (x:{e: edgetype[T] | FALSE}) : 0") (("1" (EXPAND INJECTIVE?) (("1" (SKEEP) NIL NIL)) NIL) ("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND UNIQUE?) (("2" (SKEEP) (("2" (EXPAND ROOT?) (("2" (FLATTEN) (("2" (REPLACE -5) (("2" (EXPAND SINGLETON) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert[T](G!1,v)") (("2" (ASSERT) (("2" (CASE "size(del_vert[T](G!1, v)) = j") (("1" (ASSERT) (("1" (EXPAND EXISTS1) (("1" (FLATTEN) (("1" (SKEEP) (("1" (CASE "j=1") (("1" (REPLACE -1) (("1" (DELETE -1) (("1" (SIMPLIFY) (("1" (EXPAND SIZE) (("1" (CASE "singleton?(vert(del_vert[T](G!1,v)))") (("1" (CASE "FORALL (x:T) : vert(G!1)(x) IMPLIES (x=v OR x=singleton_elt(vert(del_vert(G!1,v))))") (("1" (SPLIT 1) (("1" (INST 1 "singleton_elt(vert(del_vert(G!1, v)))") (("1" (EXPAND ROOT? 1) (("1" (SPLIT 1) (("1" (EXPAND IN_DEG) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (ASSERT) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE 2) (("1" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (IFF) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND INCOMING_EDGES) (("1" (FLATTEN) (("1" (REPLACE -2) (("1" (REVEAL -4) (("1" (LEMMA "tree_no_self_loops") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND NO_SELF_LOOPS?) (("1" (INST -1 "(x!1, singleton_elt(vert(del_vert(G!1, v))))") (("1" (FLATTEN) (("1" (INST -4 "x!1") (("1" (TYPEPRED "G!1") (("1" (INST -1 "(x!1, singleton_elt(vert(del_vert(G!1, v))))") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (REPLACE -6) (("1" (EXPAND LEAF?) (("1" (FLATTEN) (("1" (EXPAND OUT_DEG) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (CASE "emptyset((x!1, singleton_elt(vert(del_vert(G!1, v)))))") (("1" (EXPAND EMPTYSET) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (EXPAND OUTGOING_EDGES) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND EMPTYSET) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SINGLETON_SINGLETON[T]) (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (REPLACE -1) (("2" (REWRITE SINGLETON_REW) (("2" (EXPAND DEL_VERT -1) (("2" (EXPAND SINGLETON -1) (("2" (EXPAND REMOVE -1) (("2" (CASE "{y: T | v /= y AND member(y, vert(G!1))}(x!1)") (("1" (ASSERT) (("1" (EXPAND MEMBER) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND UNIQUE?) (("2" (EXPAND ROOT? 1) (("2" (SKEEP) (("2" (INST-CP -5 "x!1") (("2" (INST-CP -5 "y") (("2" (DELETE -5) (("2" (ASSERT) (("2" (EXPAND ROOT? -11) (("2" (FLATTEN) (("2" (EXPAND LEAF?) (("2" (FLATTEN) (("2" (SPLIT -5) (("1" (REPLACE -1) (("1" (REPLACE -4 -9) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SPLIT -6) (("1" (REPLACE -1) (("1" (REPLACE -3 -9) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (REPLACE -2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "x!1 = v OR remove(v,vert(G!1))(x!1)") (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND DEL_VERT 2) (("2" (LEMMA SINGLETON_ELT_LEM[T]) (("2" (INST?) (("2" (EXPAND DEL_VERT -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND REMOVE 2) (("2" (ASSERT) (("2" (EXPAND MEMBER) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) NIL NIL)) NIL) ("2" (EXPAND SINGLETON?) (("2" (LEMMA CARD_ONE[T]) (("2" (INST?) (("2" (ASSERT) (("2" (SKEEP) (("2" (INST 1 "x!1") (("1" (SKEEP) (("1" (TYPEPRED Y) (("1" (REPLACE -2 -1) (("1" (EXPAND SINGLETON) (("1" (REPLACE -1 1 RL) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND SINGLETON) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "root?(G!1)(x)") (("1" (SPLIT 2) (("1" (INST 1 X) NIL NIL) ("2" (EXPAND UNIQUE? 1) (("2" (SKEEP) (("2" (EXPAND ROOT?) (("2" (FLATTEN) (("2" (REVEAL -2) (("2" (DELETE -6 -7 -8 -9 -10 -11 -12 -13 -14 2) (("2" (NAME M "size(G!1)") (("2" (GENERALIZE "x!1" X) (("2" (GENERALIZE Y Y) (("2" (GENERALIZE "G!1" G) (("2" (GENERALIZE M M) (("2" (INDUCT M) (("1" (SKEEP) (("1" (LEMMA TREE_SIZE_POS) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND TREE? -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (LEMMA CARD_ONE[T]) (("1" (INST?) (("1" (ASSERT) (("1" (SKEEP) (("1" (REPLACE -1) (("1" (EXPAND SINGLETON) (("1" (REPLACE -7) (("1" (REPLACE -9) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!2,v!1)" "y!1" "x!2") (("2" (ASSERT) (("2" (CASE "v!1 /= x!2 AND v!1 /= y!1") (("1" (FLATTEN) (("1" (EXPAND SIZE 3) (("1" (EXPAND DEL_VERT 3 (1)) (("1" (LEMMA CARD_REMOVE[T]) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (EXPAND SIZE -4) (("1" (REPLACE -4) (("1" (ASSERT) (("1" (DELETE -1 -4) (("1" (EXPAND IN_DEG) (("1" (LEMMA CARD_SUBSET[EDGETYPE]) (("1" (INST-CP -1 "incoming_edges(x!2, del_vert(G!2, v!1))" "incoming_edges(x!2,G!2)") (("1" (INST-CP -1 "incoming_edges(y!1, del_vert(G!2, v!1))" "incoming_edges(y!1,G!2)") (("1" (DELETE -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (DELETE -1 -2) (("1" (EXPAND DEL_VERT 3) (("1" (EXPAND REMOVE 3) (("1" (EXPAND MEMBER 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (EXPAND INCOMING_EDGES) (("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND DEL_VERT -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (EXPAND INCOMING_EDGES) (("2" (SKEEP) (("2" (ASSERT) (("2" (EXPAND DEL_VERT -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND LEAF?) (("2" (FLATTEN) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -1) (("1" (REPLACE -2 -6) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1) (("2" (REPLACE -2 -8) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DELETE 3) (("2" (EXPAND ROOT? 1) (("2" (SPLIT 1) (("1" (EXPAND ROOT? -4) (("1" (FLATTEN) (("1" (EXPAND IN_DEG) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE 2) (("1" (APPLY-EXTENSIONALITY 1) (("1" (DELETE 2) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (DELETE -5) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (DELETE 1) (("1" (EXPAND INCOMING_EDGES -1) (("1" (FLATTEN) (("1" (REPLACE -2 -1) (("1" (CASE "emptyset(x!1,x)") (("1" (EXPAND EMPTYSET) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -3 1 RL) (("2" (DELETE -3) (("2" (EXPAND INCOMING_EDGES 1) (("2" (EXPAND DEL_VERT 1) (("2" (ASSERT) (("2" (EXPAND IN?) (("2" (EXPAND LEAF? -5) (("2" (FLATTEN) (("2" (EXPAND IN_DEG) (("2" (EXPAND OUT_DEG) (("2" (LEMMA CARD_ONE[EDGETYPE]) (("2" (LEMMA CARD_IS_0[EDGETYPE]) (("2" (INST?) (("2" (INST?) (("2" (IFF) (("2" (ASSERT) (("2" (SKEEP) (("2" (DELETE -7 -8) (("2" (SPLIT -3) (("1" (REPLACE -1) (("1" (EXPAND OUTGOING_EDGES) (("1" (CASE "emptyset(x!1,x)") (("1" (EXPAND EMPTYSET) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -2 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND OUTGOING_EDGES) (("2" (EXPAND INCOMING_EDGES) (("2" (EXPAND DEL_VERT -8) (("2" (EXPAND REMOVE -8) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ROOT? -4) (("2" (FLATTEN) (("2" (CASE "subset?(vert(del_vert(G!1,v)),vert(G!1))") (("1" (EXPAND SUBSET?) (("1" (INST -1 X) (("1" (EXPAND MEMBER) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) (("2" (EXPAND DEL_VERT -1) (("2" (EXPAND REMOVE -1) (("2" (FLATTEN) (("2" (EXPAND MEMBER) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND DEL_VERT) (("2" (EXPAND SIZE) (("2" (LEMMA CARD_REMOVE[T]) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|size| CONST-DECL "nat" |digraph_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|x!1| SKOLEM-CONST-DECL "T" |trees| NIL) (|singleton_elt| CONST-DECL "T" |sets| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|v| SKOLEM-CONST-DECL "(vert(G!1))" |trees| NIL) (G!1 SKOLEM-CONST-DECL "digraph[T]" |trees| NIL) (|no_self_loops?| CONST-DECL "bool" |trees| NIL) (|leaf?| CONST-DECL "bool" |trees| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|tree_no_self_loops| FORMULA-DECL NIL |trees| NIL) (|singleton_rew| FORMULA-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|remove| CONST-DECL "set" |sets| NIL) (|singleton_singleton| FORMULA-DECL NIL |sets| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|singleton_elt_lem| FORMULA-DECL NIL |sets| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|del_vert| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|card_one| FORMULA-DECL NIL |finite_sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (FALSE CONST-DECL "bool" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|injective?| CONST-DECL "bool" |functions| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL) (|unique?| CONST-DECL "bool" |exists1| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|card_is_0| FORMULA-DECL NIL |finite_sets| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|tree_size_pos| FORMULA-DECL NIL |trees| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|exists1| CONST-DECL "bool" |exists1| NIL) (|root?| CONST-DECL "bool" |trees| NIL)) NIL) (|root_unique-1| |nil| 3805636744 ("" (POSTPONE) NIL NIL) NIL SHOSTAK)) (|root_TCC1| 0 (|root_TCC1-2| "" 3884654955 ("" (SKEEP) (("" (TYPEPRED "G") (("" (LEMMA "root_unique") (("" (INST -1 "G") (("" (ASSERT) (("" (EXPAND "singleton?") (("" (EXPAND "exists1") (("" (FLATTEN) (("" (SKEEP) (("" (INST 1 "x") (("" (EXPAND "unique?") (("" (SKEEP) (("" (INST -2 "x" "y") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|root| SUBTYPE "{v | trees.root?(trees.G)(trees.v)}" "(sets[trees.T].singleton?)")) (|root_TCC1-1| |nil| 3805646664 ("" (SKEEP) (("" (TYPEPRED G) (("" (LEMMA ROOT_UNIQUE) (("" (INST -1 G) (("" (ASSERT) (("" (EXPAND SINGLETON?) (("" (EXPAND EXISTS1) (("" (FLATTEN) (("" (SKEEP) (("" (INST 1 X) (("" (EXPAND UNIQUE?) (("" (SKEEP) (("" (INST -2 X Y) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|Tree| TYPE-EQ-DECL NIL |trees| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|singleton?| CONST-DECL "bool" |sets| NIL) (|root?| CONST-DECL "bool" |trees| NIL) (G SKOLEM-CONST-DECL "Tree" |trees| NIL) (|x| SKOLEM-CONST-DECL "T" |trees| NIL) (|unique?| CONST-DECL "bool" |exists1| NIL) (|exists1| CONST-DECL "bool" |exists1| NIL) (|root_unique| FORMULA-DECL NIL |trees| NIL)) NIL (|root| SUBTYPE "{v | trees.root?(trees.G)(trees.v)}" "(sets[trees.T].singleton?)"))) (|tree_in_deg_max| 0 (|tree_in_deg_max-3| "" 3884655298 ("" (SKEEP) (("" (NAME "n" "size(G)") (("" (GENERALIZE "v" "v") (("" (GENERALIZE "G" "G") (("" (GENERALIZE "n" "n") (("" (INDUCT "n") (("1" (SKEEP) (("1" (LEMMA "tree_size_pos") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (COPY -3) (("2" (HIDE -1) (("2" (EXPAND "tree?" -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (EXPAND "in_deg") (("1" (EXPAND "incoming_edges") (("1" (LEMMA "card_subset[edgetype]") (("1" (INST -1 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}" "edges(G!1)") (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (EXPAND "subset?") (("2" (SKEEP) (("2" (EXPAND "member") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_subset[edgetype]") (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!1,v!2)" "v!1") (("2" (SPLIT) (("1" (EXPAND "in_deg") (("1" (EXPAND "incoming_edges") (("1" (EXPAND "del_vert") (("1" (LEMMA "card_subset[edgetype]") (("1" (INST -1 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}" "{e: edgetype[T] |
                      (edges(G!1)(e) AND NOT in?(v!2, e)) AND e`2 = v!1}") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (EXPAND "in?") (("2" (SKEEP) (("2" (ASSERT) (("2" (SPLIT -3) (("1" (EXPAND "leaf?") (("1" (EXPAND "out_deg") (("1" (FLATTEN) (("1" (EXPAND "outgoing_edges") (("1" (LEMMA "card_is_0[edgetype]") (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (CASE "emptyset[edgetype](x)") (("1" (EXPAND "emptyset") (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_subset[edgetype]") (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 -1) (("2" (REPLACE -1) (("2" (DELETE -1) (("2" (EXPAND "leaf?") (("2" (FLATTEN) (("2" (EXPAND "out_deg") (("2" (EXPAND "outgoing_edges") (("2" (EXPAND "in_deg" -4) (("2" (EXPAND "incoming_edges" -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "finite_subset[edgetype]") (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "subset?") (("2" (EXPAND "member") (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "finite_subset[edgetype]") (("3" (INST -1 "edges(G!1)" _) (("3" (INST?) (("3" (ASSERT) (("3" (EXPAND "subset?") (("3" (EXPAND "member") (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "size") (("2" (EXPAND "del_vert") (("2" (LEMMA "card_remove[T]") (("2" (INST?) (("2" (EXPAND "leaf?") (("2" (FLATTEN) (("2" (LEMMA "in_deg_pos") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|tree_in_deg_max-2| |nil| 3805649349 ("" (SKEEP) (("" (NAME N "size(G)") (("" (GENERALIZE V V) (("" (GENERALIZE G G) (("" (GENERALIZE N N) (("" (INDUCT N) (("1" (SKEEP) (("1" (LEMMA TREE_SIZE_POS) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (COPY -3) (("2" (HIDE -1) (("2" (EXPAND TREE? -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (EXPAND IN_DEG) (("1" (EXPAND INCOMING_EDGES) (("1" (LEMMA CARD_SUBSET[EDGETYPE]) (("1" (INST -1 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}" "edges(G!1)") (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (EXPAND SUBSET?) (("2" (SKEEP) (("2" (EXPAND MEMBER) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA FINITE_SUBSET[EDGETYPE]) (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!1,v!2)" "v!1") (("2" (SPLIT) (("1" (EXPAND IN_DEG) (("1" (EXPAND INCOMING_EDGES) (("1" (EXPAND DEL_VERT) (("1" (LEMMA CARD_SUBSET[EDGETYPE]) (("1" (INST -1 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}" "{e: edgetype[T] |
                      (edges(G!1)(e) AND NOT in?(v!2, e)) AND e`2 = v!1}") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (EXPAND IN?) (("2" (SKEEP) (("2" (ASSERT) (("2" (SPLIT -3) (("1" (EXPAND LEAF?) (("1" (EXPAND OUT_DEG) (("1" (FLATTEN) (("1" (EXPAND OUTGOING_EDGES) (("1" (LEMMA CARD_IS_0[EDGETYPE]) (("1" (INST?) (("1" (IFF) (("1" (ASSERT) (("1" (CASE "emptyset[edgetype](x)") (("1" (EXPAND EMPTYSET) (("1" (PROPAX) NIL NIL)) NIL) ("2" (REPLACE -1 1 RL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA FINITE_SUBSET[EDGETYPE]) (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -3 -1) (("2" (REPLACE -1) (("2" (DELETE -1) (("2" (EXPAND LEAF?) (("2" (FLATTEN) (("2" (EXPAND OUT_DEG) (("2" (EXPAND OUTGOING_EDGES) (("2" (EXPAND IN_DEG -4) (("2" (EXPAND INCOMING_EDGES -4) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA FINITE_SUBSET[EDGETYPE]) (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA FINITE_SUBSET[EDGETYPE]) (("3" (INST -1 "edges(G!1)" _) (("3" (INST?) (("3" (ASSERT) (("3" (EXPAND SUBSET?) (("3" (EXPAND MEMBER) (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND SIZE) (("2" (EXPAND DEL_VERT) (("2" (LEMMA CARD_REMOVE[T]) (("2" (INST?) (("2" (EXPAND LEAF?) (("2" (FLATTEN) (("2" (LEMMA IN_DEG_POS) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|size| CONST-DECL "nat" |digraph_def| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (T FORMAL-TYPE-DECL NIL |trees| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|tree_size_pos| FORMULA-DECL NIL |trees| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|edgetype| TYPE-EQ-DECL NIL |digraphs_utils| NIL) (|card_subset| FORMULA-DECL NIL |finite_sets| NIL) (|finite_subset| FORMULA-DECL NIL |finite_sets| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|subset?| CONST-DECL "bool" |sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (G!1 SKOLEM-CONST-DECL "digraph[T]" |trees| NIL) (|v!1| SKOLEM-CONST-DECL "T" |trees| NIL) (|incoming_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|del_vert| CONST-DECL "digraph[T]" |digraph_ops| NIL) (|card_remove| FORMULA-DECL NIL |finite_sets| NIL) (|in_deg_pos| FORMULA-DECL NIL |digraph_deg| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|v!2| SKOLEM-CONST-DECL "(vert(G!1))" |trees| NIL) (|in?| CONST-DECL "bool" |pairs| |structures|) (|pair| TYPE-EQ-DECL NIL |pairs| |structures|) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|leaf?| CONST-DECL "bool" |trees| NIL) (|card_is_0| FORMULA-DECL NIL |finite_sets| NIL) (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])" |sets_lemmas| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|outgoing_edges| CONST-DECL "finite_set[edgetype[T]]" |digraph_deg| NIL) (|out_deg| CONST-DECL "nat" |digraph_deg| NIL) (|finite_remove| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|tree?| DEF-DECL "bool" |trees| NIL) (<= CONST-DECL "bool" |reals| NIL) (|in_deg| CONST-DECL "nat" |digraph_deg| NIL)) NIL) (|tree_in_deg_max-1| |nil| 3805648068 ("" (SKEEP) (("" (NAME N "size(G)") (("" (GENERALIZE V V) (("" (GENERALIZE G G) (("" (GENERALIZE N N) (("" (INDUCT N) (("1" (SKEEP) (("1" (LEMMA TREE_SIZE_POS) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND TREE? -3) (("2" (SPLIT -3) (("1" (FLATTEN) (("1" (EXPAND IN_DEG) (("1" (EXPAND INCOMING_EDGES) (("1" (LEMMA CARD_SUBSET[EDGETYPE]) (("1" (INST -1 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}" "edges(G!1)") (("1" (SPLIT) (("1" (GRIND) NIL NIL) ("2" (EXPAND SUBSET?) (("2" (SKEEP) (("2" (EXPAND MEMBER) (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA FINITE_SUBSET[EDGETYPE]) (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (SPLIT) (("1" (PROPAX) NIL NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (INST -3 "del_vert(G!1,v!2)" "v!1") (("2" (SPLIT) (("1" (EXPAND IN_DEG) (("1" (EXPAND INCOMING_EDGES) (("1" (EXPAND DEL_VERT) (("1" (LEMMA CARD_SUBSET[EDGETYPE]) (("1" (INST -1 "{e: edgetype[T] | edges(G!1)(e) AND e`2 = v!1}" "{e: edgetype[T] |
              (edges(G!1)(e) AND NOT in?(v!2, e)) AND e`2 = v!1}") (("1" (SPLIT) (("1" (ASSERT) NIL NIL) ("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (EXPAND IN?) (("2" (SKEEP) (("2" (ASSERT) (("2" (SPLIT -3) (("1" (LEMMA TREE_NO_SELF_LOOPS) (("1" (INST -1 "G!1") (("1" (POSTPONE) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA FINITE_SUBSET[EDGETYPE]) (("2" (INST -1 "edges(G!1)" _) (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND SUBSET?) (("2" (EXPAND MEMBER) (("2" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA FINITE_SUBSET[EDGETYPE]) (("3" (INST -1 "edges(G!1)" _) (("3" (INST?) (("3" (ASSERT) (("3" (EXPAND SUBSET?) (("3" (EXPAND MEMBER) (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND SIZE) (("2" (EXPAND DEL_VERT) (("2" (LEMMA CARD_REMOVE[T]) (("2" (INST?) (("2" (EXPAND LEAF?) (("2" (FLATTEN) (("2" (LEMMA IN_DEG_POS) (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)))
