(|reduce_walks| (|reduce_TCC1| 0 (|reduce_TCC1-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|reduce| SUBTYPE "(number_fields.-)(reduce_walks.k, 1)" "below[length(w)]"))) (|reduce_TCC2| 0 (|reduce_TCC2-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|reduce| SUBTYPE "(number_fields.+)(reduce_walks.k, 1)" "below[length(w)]"))) (|reduce_TCC3| 0 (|reduce_TCC3-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|reduce| SUBTYPE "(number_fields.-)(length(reduce_walks.w), 2)" "nat"))) (|reduce_TCC4| 0 (|reduce_TCC4-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|reduce| SUBTYPE "reduce_walks.i" "below[length(w)]"))) (|reduce_TCC5| 0 (|reduce_TCC5-2| "" 3790101509 ("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (TYPEPRED "w!1") (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (FLATTEN) (("" (HIDE -3) (("" (EXPAND "verts_in?") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Long_walk| TYPE-EQ-DECL NIL |reduce_walks| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |reduce_walks| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|reduce| SUBTYPE "(number_fields.+)(reduce_walks.i, 2)" "below[length(w)]")) (|reduce_TCC5-1| |nil| 3253624247 ("" (SKOSIMP*) (("" (EXPAND "finseq_appl") (("" (TYPEPRED "w!1") (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (FLATTEN) (("" (SPLIT +) (("1" (HIDE -3) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (TYPEPRED "k!1") (("2" (LIFT-IF) (("2" (GROUND) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE-REPLACE "k!1=n!1+1") (("1" (ASSERT) (("1" (REPLACE -10) (("1" (HIDE -10) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL) ("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|reduce| SUBTYPE "(number_fields.+)(reduce_walks.i, 2)" "below[length(w)]"))) (|reduce_TCC6| 0 (|reduce_TCC6-1| |nil| 3254570698 ("" (SKOSIMP*) (("" (TYPEPRED "w!1") (("" (ASSERT) (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (PROP) (("1" (EXPAND "verts_in?") (("1" (SKOSIMP*) (("1" (GROUND) (("1" (INST?) NIL NIL) ("2" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (LIFT-IF) (("2" (GROUND) (("1" (LIFT-IF) (("1" (GROUND) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (CASE-REPLACE "k!1 = n!1+1") (("1" (ASSERT) (("1" (REPLACE -8) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |reduce_walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|Long_walk| TYPE-EQ-DECL NIL |reduce_walks| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|reduce| SUBTYPE "(# length := (number_fields.-)(length(reduce_walks.w), 2), seq := (LAMBDA (i: naturalnumbers.below((number_fields.-)(length(reduce_walks.w), 2))): IF reals.<(i, reduce_walks.k) THEN finite_sequences[reduce_walks.T].finseq_appl(reduce_walks.w)(i) ELSE finite_sequences[reduce_walks.T].finseq_appl(reduce_walks.w)((number_fields.+)(i, 2)) ENDIF) #)" "Walk[reduce_walks.T, digraph_type[T], digraphs_imp[reduce_walks.T].digraph_verts, digraphs_imp[reduce_walks.T].digraph_edges, digraphs_imp[reduce_walks.T].digraph_size, digraphs_imp[reduce_walks.T].digraph_make](reduce_walks.G)"))) (|reduce_lem_TCC1| 0 (|reduce_lem_TCC1-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|reduce_lem| SUBTYPE "(number_fields.-)(reduce_walks.k, 1)" "below[length(w)]"))) (|reduce_lem_TCC2| 0 (|reduce_lem_TCC2-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|reduce_lem| SUBTYPE "(number_fields.+)(reduce_walks.k, 1)" "below[length(w)]"))) (|reduce_lem_TCC3| 0 (|reduce_lem_TCC3-1| |nil| 3253624247 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|reduce_lem| SUBTYPE "(number_fields.-)(reduce_walks.k, 1)" "nat"))) (|reduce_lem_TCC4| 0 (|reduce_lem_TCC4-1| |nil| 3559414012 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL)) NIL (|reduce_lem| SUBTYPE "(number_fields.-)(length(reduce_walks.w), 1)" "nat"))) (|reduce_lem| 0 (|reduce_lem-2| "" 3884655598 ("" (SKOSIMP*) (("" (EXPAND "o ") (("" (EXPAND "^") (("" (EXPAND "min") (("" (AUTO-REWRITE "finseq_appl") (("" (TYPEPRED "k!1") (("" (TYPEPRED "w!1") (("" (ASSERT) (("" (EXPAND "reduce") (("" (LIFT-IF) (("" (PROP) (("1" (DECOMPOSE-EQUALITY) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND "empty_seq") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "empty_seq") (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (SKOSIMP*) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROP) (("1" (LIFT-IF) (("1" (EXPAND "empty_seq") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "empty_seq") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED "n!1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "empty_seq") (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE 2) (("3" (TYPEPRED "n!1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (EXPAND "empty_seq") (("3" (LIFT-IF) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (EXPAND* "^" "min" "empty_seq") (("3" (LIFT-IF) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (TYPEPRED "n!1") (("4" (EXPAND* "^" "min" "empty_seq") (("4" (LIFT-IF) (("4" (PROP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) (("5" (TYPEPRED "n!1") (("5" (EXPAND* "^" "min" "empty_seq") (("5" (LIFT-IF) (("5" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKOSIMP*) (("6" (TYPEPRED "n!1") (("6" (EXPAND* "^" "min" "empty_seq") (("6" (LIFT-IF) (("6" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|reduce_lem-1| |nil| 3253624247 ("" (SKOSIMP*) (("" (EXPAND "o ") (("" (EXPAND "^") (("" (EXPAND "min") (("" (AUTO-REWRITE "finseq_appl") (("" (TYPEPRED "k!1") (("" (TYPEPRED W!1) (("" (ASSERT) (("" (EXPAND REDUCE) (("" (LIFT-IF) (("" (PROP) (("1" (DECOMPOSE-EQUALITY) (("1" (LIFT-IF) (("1" (PROP) (("1" (EXPAND EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND EMPTY_SEQ) (("2" (ASSERT) NIL NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY) (("1" (SKOSIMP*) (("1" (EXPAND ^) (("1" (EXPAND MIN) (("1" (PROP) (("1" (LIFT-IF) (("1" (EXPAND EMPTY_SEQ) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND EMPTY_SEQ) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOSIMP*) (("2" (TYPEPRED N!1) (("2" (EXPAND ^) (("2" (EXPAND MIN) (("2" (EXPAND EMPTY_SEQ) (("2" (LIFT-IF) (("2" (PROP) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKOSIMP*) (("3" (HIDE 2) (("3" (TYPEPRED N!1) (("3" (EXPAND ^) (("3" (EXPAND MIN) (("3" (EXPAND EMPTY_SEQ) (("3" (LIFT-IF) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKOSIMP*) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKOSIMP*) (("3" (EXPAND* ^ MIN EMPTY_SEQ) (("3" (LIFT-IF) (("3" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (HIDE 2) (("4" (SKOSIMP*) (("4" (TYPEPRED N!1) (("4" (EXPAND* ^ MIN EMPTY_SEQ) (("4" (LIFT-IF) (("4" (PROP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (HIDE 2) (("5" (SKOSIMP*) (("5" (TYPEPRED N!1) (("5" (EXPAND* ^ MIN EMPTY_SEQ) (("5" (LIFT-IF) (("5" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL) ("4" (ASSERT) NIL NIL) ("5" (ASSERT) NIL NIL) ("6" (ASSERT) NIL NIL) ("7" (ASSERT) NIL NIL) ("8" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (HIDE 2) (("6" (SKOSIMP*) (("6" (TYPEPRED N!1) (("6" (EXPAND* ^ MIN EMPTY_SEQ) (("6" (LIFT-IF) (("6" (PROP) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((O CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |reduce_walks| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|predigraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|digraph_type| TYPE-EQ-DECL NIL |digraphs_imp| NIL) (|digraph| TYPE-EQ-DECL NIL |digraph_def| NIL) (|digraph_verts| CONST-DECL "[digraph -> [T -> bool]]" |digraphs_imp| NIL) (|digraph_edges| CONST-DECL "[digraph -> [T, T -> bool]]" |digraphs_imp| NIL) (|digraph_size| CONST-DECL "[digraph -> nat]" |digraphs_imp| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|digraph_make| CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   digraph]" |digraphs_imp| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|empty_seq| CONST-DECL "finseq" |finite_sequences| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (G!1 SKOLEM-CONST-DECL "digraph[T]" |reduce_walks| NIL) (|w!1| SKOLEM-CONST-DECL "Walk[T, digraph_type[T], digraph_verts, digraph_edges, digraph_size,
     digraph_make](G!1)" |reduce_walks| NIL) (|k!1| SKOLEM-CONST-DECL "{n: nat | n > 0 AND n < length(w!1) - 1}" |reduce_walks| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|reduce| CONST-DECL "Walk(G)" |reduce_walks| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)))
