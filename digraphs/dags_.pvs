dags_[
T              : TYPE,
 ConcreteDigraph: TYPE,
 vert           : [ConcreteDigraph-> [T -> bool]],
 edges          : [ConcreteDigraph -> [T,T -> bool]],
 size           : [ConcreteDigraph -> nat],
 make           : [ v:(is_finite[T]),
                   {e: (is_finite[[T,T]]) |
		     FORALL(x,y:T): e(x,y) IMPLIES v(x) AND v(y) }
		   -> ConcreteDigraph] ]: THEORY
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a
    % correct interpretation for (uninterpreted) digraphs. That is checked using
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs_abs[T,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation
  ENDASSUMING

  AUTO_REWRITE+ concretedigraph_implements_abstractdigraph

  IMPORTING paths_[T, ConcreteDigraph,vert,edges,size,make],
             structures@seq_extras[T]

   G: VAR ConcreteDigraph
   acyclic_digraph: TYPE = {G | (FORALL (w: Walk(G)): path?(G,w))}

   dag: TYPE = acyclic_digraph

   DG: VAR dag
   dag_no_self_loops: LEMMA FORALL (e: edgetype): edges(DG)(e) IMPLIES
                                  LET (x,y) = e IN x /= y
END dags_
