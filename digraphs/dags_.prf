(dags_
 (IMP_paths__TCC1 0
  (IMP_paths__TCC1-1 nil 3817024873 ("" (assert) nil nil)
   ((concretedigraph_implements_abstractdigraph formula-decl nil dags_
     nil))
   nil
   (IMP_paths_ assuming
    "paths_[dags_.T, dags_.ConcreteDigraph, dags_.vert, dags_.edges, dags_.size, dags_.make].paths_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[paths_.T, paths_.ConcreteDigraph, paths_.vert, paths_.edges, paths_.size, paths_.make].correct_implementation")))
 (dag_no_self_loops 0
  (dag_no_self_loops-1 nil 3817024899
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (typepred "DG")
          (("" (case "walk?(DG, gen_seq2(DG, e`1, e`2))")
            (("1" (inst? -)
              (("1" (expand "gen_seq2")
                (("1" (expand "path?")
                  (("1" (assert)
                    (("1" (inst - "0" "1") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (expand "walk?")
                (("2" (expand "verts_in?")
                  (("2" (expand "gen_seq2")
                    (("2" (expand "finseq_appl")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (assert)
                            (("2" (expand "edge?")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind)
              (("3"
                (lemma "concretedigraph_implements_abstractdigraph")
                (("3" (expand "correct_implementation")
                  (("3" (expand "correct_implementation_")
                    (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (lemma "concretedigraph_implements_abstractdigraph")
              (("4" (expand "correct_implementation")
                (("4" (expand "correct_implementation_")
                  (("4" (flatten)
                    (("4" (inst -3 "e`1" "e`2")
                      (("4" (inst -3 "DG") (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dag type-eq-decl nil dags_ nil)
    (path? const-decl "bool" paths_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (make formal-const-decl
     "[v: (is_finite[T]), {e: (is_finite[[T, T]]) | FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} -> ConcreteDigraph]"
     dags_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" dags_ nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     dags_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" dags_
     nil)
    (ConcreteDigraph formal-type-decl nil dags_ nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil dags_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (vert_is_finite formula-decl nil digraphs_abs nil)
    (edges_is_finite formula-decl nil digraphs_abs nil)
    (correct_implementation const-decl "bool" digraphs_abs nil)
    (injective? const-decl "bool" functions nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil paths_
     nil)
    (make_ok_v formula-decl nil digraphs_abs nil)
    (make_ok_e formula-decl nil digraphs_abs nil)
    (size_def formula-decl nil digraphs_abs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (correct_implementation_ const-decl "bool" digraphs_abs nil)
    (concretedigraph_implements_abstractdigraph formula-decl nil dags_
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (e skolem-const-decl "edgetype[T]" dags_ nil)
    (DG skolem-const-decl "dag" dags_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences
     nil)
    (verts_in? const-decl "bool" walks_ nil)
    (Seq type-eq-decl nil walks_ nil)
    (gen_seq2 const-decl "Seq(G)" walks_ nil)
    (edgetype type-eq-decl nil digraphs_utils nil))
   shostak)))

