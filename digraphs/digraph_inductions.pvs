digraph_inductions[T: TYPE]: THEORY

BEGIN


  IMPORTING digraphs[T]

  G,GG,GGG: VAR digraph[T]
  P: VAR pred[digraph[T]]
  n: VAR nat

  size_prep              : LEMMA (FORALL G : P(G)) IFF
                                      (FORALL n, G : size(G) = n IMPLIES P(G))


  digraph_induction_vert    : THEOREM (FORALL G:
                                (FORALL GG: size(GG) < size(G) IMPLIES P(GG))
                                                IMPLIES P(G))
                                  IMPLIES (FORALL G: P(G))


  digraph_induction_vert_not: THEOREM (FORALL G: P(G)
                               IMPLIES
                             (EXISTS GG: size(GG) < size(G) AND
                                            P(GG)))
                           IMPLIES (FORALL G: NOT P(G))

  IMPORTING digraph_ops[T]

  num_edges_prep         : LEMMA (FORALL G : P(G)) IFF
                                   (FORALL n, G : num_edges(G) = n IMPLIES P(G))

  digraph_induction_edge   : THEOREM (FORALL G:
                          (FORALL GG: num_edges(GG) < num_edges(G) IMPLIES P(GG))
                                                IMPLIES P(G))
                                  IMPLIES (FORALL G: P(G))

END digraph_inductions
