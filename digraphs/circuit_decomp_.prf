(|circuit_decomp_| (|IMP_cycles__TCC1| 0 (|IMP_cycles__TCC1-1| |nil| 3659809429 ("" (USE "concretedigraph_implements_abstractdigraph") NIL NIL) ((|concretedigraph_implements_abstractdigraph| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|IMP_cycles_| ASSUMING "cycles_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].cycles_" "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[cycles_.T, cycles_.ConcreteDigraph, cycles_.vert, cycles_.edges, cycles_.size, cycles_.make].correct_implementation"))) (|vert_circ_TCC1| 0 (|vert_circ_TCC1-1| |nil| 3656844379 ("" (SKEEP) (("" (TYPEPRED "vc`v") (("" (EXPAND "vert?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|vert_circ| SUBTYPE "circuit_decomp_.vc`v" "(circuit_decomp_.vert(circuit_decomp_.G))"))) (|walk_decomp_TCC1| 0 (|walk_decomp_TCC1-2| |nil| 3656844808 ("" (SKEEP) (("" (EXPAND "list2finseq") (("" (WITH-TCCS (LEMMA "map_length[vert_circ(G), vert(G)]")) (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL)) NIL (|walk_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]")) (|walk_decomp_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|walk_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))) (|drop_circuits_TCC1| 0 (|drop_circuits_TCC1-2| |nil| 3656844881 ("" (SKEEP) (("" (WITH-TCCS (LEMMA "map_length[vert_circ(G), vert(G)]")) (("" (INST?) (("" (GROUND) (("1" (EXPAND "list2finseq") (("1" (GROUND) NIL NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (> CONST-DECL "bool" |reals| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL)) NIL (|drop_circuits| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))" "{W: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | length(W) = list_props[vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd)}")) (|drop_circuits_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|drop_circuits| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))" "{W: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | length(W) = list_props[vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd)}"))) (|cdr_decomp_TCC1| 0 (|cdr_decomp_TCC1-2| |nil| 3656844959 ("" (SKEEP) (("" (GROUND) (("" (EXPAND "length") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|cdr_decomp| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)")) (|cdr_decomp_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cdr_decomp| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)"))) (|cdr_decomp_TCC2| 0 (|cdr_decomp_TCC2-2| |nil| 3656845024 ("" (SKEEP) (("" (EXPAND "list2finseq") (("" (WITH-TCCS (LEMMA "map_length[vert_circ(G), vert(G)]")) (("" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cdr(cd)") (("1" (REPLACES -1) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL)) NIL (|cdr_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]")) (|cdr_decomp_TCC2-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|cdr_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))) (|cdr_decomp| 0 (|cdr_decomp-3| "" 3884644802 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "length" (-1 2)) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "cd") (("2" (HIDE -4) (("2" (CASE "list2finseq[vert(G)]
                                          (map[vert_circ(G), vert(G)]
                                               (LAMBDA (vc: vert_circ(G)): vc`v)
                                               (cdr[vert_circ(G)](cd))) = list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))^(1,length(cd)-1)") (("1" (REPLACE -1) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G" "1" "length(cd) -1" "list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))") (("1" (GROUND) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE 2) (("1" (HIDE -3) (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "length" 1 2) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "list2finseq") (("1" (HIDE 2) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST-CP -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cdr(cd)" "x!1") (("1" (REPLACES -2) (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "1+x!1") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (< CONST-DECL "bool" |reals| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|x!1| SKOLEM-CONST-DECL "below[list2finseq[vert[T, ConcreteDigraph, vert, edges, size, make](G)]
          (map[vert_circ(G),
               vert[T, ConcreteDigraph, vert, edges, size, make](G)]
               (LAMBDA (vc: vert_circ(G)): vc`v)
               (cdr[vert_circ(G)](cd)))`length]" |circuit_decomp_| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|cdr_decomp-2| "" 3744348211 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "length" (-1 2)) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "cd") (("2" (HIDE -4) (("2" (CASE "list2finseq[vert(G)]
                                          (map[vert_circ(G), vert(G)]
                                               (LAMBDA (vc: vert_circ(G)): vc`v)
                                               (cdr[vert_circ(G)](cd))) = list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))^(1,length(cd)-1)") (("1" (REPLACE -1) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G" "1" "length(cd) -1" "list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))") (("1" (GROUND) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE 2) (("1" (HIDE -3) (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "length" 1 2) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "list2finseq") (("1" (HIDE 2) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST-CP -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cdr(cd)" "x!1") (("1" (REPLACES -2) (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "1+x!1") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (HIDE 2) (("3" (EXPAND "list2finseq") (("3" (EXPAND "^") (("3" (SPLIT 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "1+x1") (("1" (REPLACE -1) (("1" (TYPEPRED "nth(cd, 1 + x1)`v") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|cdr_decomp-1| |nil| 3656845083 ("" (SKEEP) (("" (GROUND) (("1" (EXPAND "length" (-1 2)) (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "cd") (("2" (HIDE -4) (("2" (CASE "list2finseq[vert(G)]
                                 (map[vert_circ(G), vert(G)]
                                      (LAMBDA (vc: vert_circ(G)): vc`v)
                                      (cdr[vert_circ(G)](cd))) = list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))^(1,length(cd)-1)") (("1" (REPLACE -1) (("1" (LEMMA "walk?_caret") (("1" (INST -1 "G" "1" "length(cd) -1" "list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))") (("1" (GROUND) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (GROUND) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (HIDE 2) (("1" (HIDE -3) (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "length" 1 2) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "list2finseq") (("1" (HIDE 2) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST-CP -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cdr(cd)" "x!1") (("1" (REPLACES -2) (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "1+x!1") (("1" (REPLACES -1) (("1" (EXPAND "nth" 2 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "length" 1) (("2" (LIFT-IF 1) (("2" (ASSERT) (("2" (GROUND) (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "x!1") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (HIDE 2) (("3" (EXPAND "list2finseq") (("3" (EXPAND "^") (("3" (SPLIT 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "1+x1") (("1" (REPLACE -1) (("1" (TYPEPRED "nth(cd, 1 + x1)`v") (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP :PREDS? T) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|decomp_to_walk_TCC1| 0 (|decomp_to_walk_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.ww" "not_empty_seq[T]"))) (|decomp_to_walk_TCC2| 0 (|decomp_to_walk_TCC2-1| |nil| 3656844379 ("" (SKEEP :PREDS? T) (("" (TYPEPRED "drop_circuits(G, cd)") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)" "not_empty_seq[T]"))) (|decomp_to_walk_TCC3| 0 (|decomp_to_walk_TCC3-2| |nil| 3656845150 ("" (SKEEP) (("" (TYPEPRED "vc`v") (("" (EXPAND "vert?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ((|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.vc`v" "(circuit_decomp_.vert(circuit_decomp_.z`1))")) (|decomp_to_walk_TCC3-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.vc`v" "(circuit_decomp_.vert(circuit_decomp_.z`1))"))) (|decomp_to_walk_TCC4| 0 (|decomp_to_walk_TCC4-2| |nil| 3656845200 ("" (SKEEP) (("" (EXPAND "length") (("" (LIFT-IF -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)")) (|decomp_to_walk_TCC4-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)"))) (|decomp_to_walk_TCC5| 0 (|decomp_to_walk_TCC5-4| "" 3884656197 ("" (SKEEP) (("" (TYPEPRED "drop_circuits(G,cd)") (("" (EXPAND "first") (("" (EXPAND "last") (("" (EXPAND "finseq_appl") (("" (EXPAND "drop_circuits") (("" (EXPAND "list2finseq") (("" (EXPAND "nth") (("" (GROUND) (("1" (EXPAND "map") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GROUND) (("2" (TYPEPRED ("cd")) (("2" (EXPAND "every") (("2" (FLATTEN) (("2" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(G), vert(G)]")) (("2" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "0") (("2" (EXPAND "nth") (("2" (REPLACES -1) (("2" (GROUND) (("2" (TYPEPRED ("cd")) (("2" (EXPAND "every") (("2" (LIFT-IF -1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (REPLACES -1 :DIR RL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|decomp_to_walk| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c" "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}")) (|decomp_to_walk_TCC5-3| "" 3744348420 ("" (SKEEP) (("" (TYPEPRED "drop_circuits(G,cd)") (("" (EXPAND "first") (("" (EXPAND "last") (("" (EXPAND "finseq_appl") (("" (EXPAND "drop_circuits") (("" (EXPAND "list2finseq") (("" (EXPAND "nth") (("" (GROUND) (("1" (EXPAND "map") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) (("1" (EXPAND "length" -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (GROUND) (("2" (TYPEPRED (CD)) (("2" (EXPAND "every") (("2" (FLATTEN) (("2" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (WITH-TCCS (LEMMA "map_nth_rw[vert_circ(G), vert(G)]")) (("2" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "0") (("2" (EXPAND "nth") (("2" (REPLACES -1) (("2" (GROUND) (("2" (TYPEPRED (CD)) (("2" (EXPAND "every") (("2" (LIFT-IF -1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (REPLACES -1 :DIR RL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|nth| DEF-DECL "T" |list_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (< CONST-DECL "bool" |reals| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|)) SHOSTAK (|decomp_to_walk| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c" "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}")) (|decomp_to_walk_TCC5-2| |nil| 3656845274 ("" (SKEEP) (("" (TYPEPRED "drop_circuits(G,cd)") (("" (EXPAND "first") (("" (EXPAND "last") (("" (EXPAND "finseq_appl") (("" (EXPAND "drop_circuits") (("" (EXPAND "list2finseq") (("" (EXPAND "nth") (("" (GROUND) (("1" (EXPAND "map") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (TYPEPRED (CD)) (("2" (EXPAND "every") (("2" (FLATTEN) (("2" (GROUND) (("1" (REPLACE -1) (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "0") (("2" (EXPAND "nth") (("2" (REPLACES -1) (("2" (GROUND) (("2" (TYPEPRED (CD)) (("2" (EXPAND "every") (("2" (LIFT-IF -1) (("2" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (FLATTEN) (("3" (EXPAND "finseq_appl") (("3" (REPLACES -1 :DIR RL) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|decomp_to_walk| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c" "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}")) (|decomp_to_walk_TCC5-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c" "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}"))) (|decomp_to_walk_TCC6| 0 (|decomp_to_walk_TCC6-2| |nil| 3656845323 ("" (SKEEP :PREDS? T) (("" (EXPAND "length") (("" (GROUND) NIL NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)")) (|decomp_to_walk_TCC6-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)"))) (|decomp_to_walk_TCC7| 0 (|decomp_to_walk_TCC7-2| |nil| 3656845377 ("" (LEMMA "cdr_decomp") (("" (SKEEP :PREDS? T) (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|decomp_to_walk| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)" "walk_decomp(circuit_decomp_.G)")) (|decomp_to_walk_TCC7-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)" "walk_decomp(circuit_decomp_.G)"))) (|decomp_to_walk_TCC8| 0 (|decomp_to_walk_TCC8-2| |nil| 3656845430 ("" (SKEEP) (("" (TYPEPRED "cd") (("" (EXPAND "length" 2 2) (("" (LIFT-IF 2) (("" (SPLIT 2) (("1" (GROUND) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|decomp_to_walk| TERMINATION "circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd))" "NIL")) (|decomp_to_walk_TCC8-1| |nil| 3656844379 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|decomp_to_walk| TERMINATION "circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd))" "NIL"))) (|decomp_to_walk_TCC9| 0 (|decomp_to_walk_TCC9-2| |nil| 3656845478 ("" (SKEEP :PREDS? T) (("" (GROUND) (("1" (EXPAND "o") (("1" (TYPEPRED "car[vert_circ(G)](cd)`c") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "v(G, cdr[vert_circ(G)](cd))") (("1" (LEMMA "walk_o_edge") (("1" (INST -1 " G" "car[vert_circ(G)](cd)`c" "v(G, cdr[vert_circ(G)](cd))") (("1" (GROUND) (("1" (EXPAND "finseq_appl") (("1" (HIDE 2) (("1" (CASE "car[vert_circ(G)](cd)`c`seq
                                          (length(car[vert_circ(G)](cd)`c) - 1) = car(cd)`v") (("1" (REPLACES -1) (("1" (EXPAND "first" -3) (("1" (EXPAND "finseq_appl") (("1" (REPLACE -3) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "                   cdr[vert_circ(G)](cd)" "                0") (("1" (REPLACES -1) (("1" (EXPAND "walk?" -7) (("1" (FLATTEN) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -8) (("1" (INST -8 "0") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (HIDE (-5 -8)) (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "_") (("1" (INST-CP -1 "0") (("1" (INST -1 "1") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (EXPAND "nth" -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "every") (("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (FLATTEN) (("2" (EXPAND "pre_circuit?") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cdr_decomp") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "first") (("3" (EXPAND "finseq_appl") (("3" (EXPAND "o") (("3" (EXPAND "every") (("3" (LIFT-IF -1) (("3" (SPLIT -1) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "car[vert_circ(G)](cd)`c`seq(0) = car(cd)`v") (("1" (REPLACES -1) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "0") (("1" (REPLACES -1) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED "v(G, cdr[vert_circ(G)](cd))") (("1" (EXPAND "last" -4 2) (("1" (EXPAND "last" 1 2) (("1" (EXPAND "finseq_appl") (("1" (HIDE -3) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "map" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "list2finseq") (("2" (EXPAND "nth" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (EXPAND "length" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (GROUND) (("1" (EXPAND "length" (-7 3)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "length" 2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -3) (("2" (REPLACES -3 :DIR RL) (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "o") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cdr_decomp") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_o_edge| FORMULA-DECL NIL |walks_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL)) NIL (|decomp_to_walk| SUBTYPE "finite_sequences[circuit_decomp_.T].o(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c, circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))" "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}")) (|decomp_to_walk_TCC9-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk| SUBTYPE "finite_sequences[circuit_decomp_.T].o(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c, circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))" "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}"))) (|decomp_to_walk_length_TCC1| 0 (|decomp_to_walk_length_TCC1-2| |nil| 3656845538 ("" (SKEEP) (("" (EXPAND "decomp_to_walk") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|decomp_to_walk_length| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length" "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}")) (|decomp_to_walk_length_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk_length| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length" "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}"))) (|decomp_to_walk_length_TCC2| 0 (|decomp_to_walk_length_TCC2-2| |nil| 3656845586 ("" (SKEEP :PREDS? T) (("" (EXPAND "decomp_to_walk") (("" (ASSERT) (("" (EXPAND "o ") (("" (TYPEPRED "v(G, cdr[vert_circ(G)](cd))") (("1" (PROPAX) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|decomp_to_walk_length| SUBTYPE "(number_fields.+)(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length, circuit_decomp_.decomp_to_walk_length(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))" "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}")) (|decomp_to_walk_length_TCC2-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_to_walk_length| SUBTYPE "(number_fields.+)(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length, circuit_decomp_.decomp_to_walk_length(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))" "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}"))) (|decomp_to_walk_rw| 0 (|decomp_to_walk_rw-1| |nil| 3656845645 ("" (SKEEP) (("" (TYPEPRED "decomp_to_walk_length(G, cd)") (("" (GROUND) NIL NIL)) NIL)) NIL) ((|decomp_to_walk_length| DEF-DECL "{n: posnat | n = length(decomp_to_walk(G, cd))}" |circuit_decomp_| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL)) (|decomp_to_walk_length_bnd| 0 (|decomp_to_walk_length_bnd-2| "" 3884656301 ("" (CASE " FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), n: below(length(cd))):
                      N = length(cd) IMPLIES decomp_to_walk_length(G, cd) >= nth(cd, n)`c`length") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(cd)") (("1" (SKEEP) (("1" (TYPEPRED "vc`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (TYPEPRED ("cd")) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "j=0") (("1" (HIDE -2) (("1" (TYPEPRED ("n")) (("1" (REPLACE -2) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "decomp_to_walk_length") (("1" (GROUND) (("1" (EXPAND "nth") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "n=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (EXPAND "decomp_to_walk_length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "G" "cdr(cd)" "n-1") (("1" (GROUND) (("1" (EXPAND "nth" +) (("1" (EXPAND "decomp_to_walk_length" +) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cdr_decomp") (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (GROUND) (("5" (EXPAND "length") (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|decomp_to_walk_length_bnd-1| |nil| 3656845693 ("" (CASE " FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), n: below(length(cd))):
                      N = length(cd) IMPLIES decomp_to_walk_length(G, cd) >= nth(cd, n)`c`length") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(cd)") (("1" (SKEEP) (("1" (TYPEPRED "vc`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (TYPEPRED (CD)) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (CASE "j=0") (("1" (HIDE -2) (("1" (TYPEPRED (N)) (("1" (REPLACE -2) (("1" (REPLACE -3 :DIR RL) (("1" (EXPAND "decomp_to_walk_length") (("1" (GROUND) (("1" (EXPAND "nth") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "n=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (EXPAND "decomp_to_walk_length") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "G" "cdr(cd)" "n-1") (("1" (GROUND) (("1" (EXPAND "nth" +) (("1" (EXPAND "decomp_to_walk_length" +) (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cdr_decomp") (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (GROUND) (("5" (EXPAND "length") (("5" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|n| SKOLEM-CONST-DECL "below(length(cd))" |circuit_decomp_| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|decomp_to_walk_length| DEF-DECL "{n: posnat | n = length(decomp_to_walk(G, cd))}" |circuit_decomp_| NIL) (|nth| DEF-DECL "T" |list_props| NIL)) NIL)) (|caret_decomp_TCC1| 0 (|caret_decomp_TCC1-2| |nil| 3656845779 ("" (SKEEP) (("" (EXPAND "list2finseq") (("" (WITH-TCCS (LEMMA "map_length[vert_circ(G), vert(G)]")) (("" (INST?) (("1" (REPLACE -1) (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL)) NIL (|caret_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)((more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j)))))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]")) (|caret_decomp_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|caret_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)((more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j)))))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))) (|caret_decomp| 0 (|caret_decomp-4| "" 3884656453 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                   N = j-i AND i <= j AND j < length(cd) IMPLIES
                                     length(^(cd, (i, j))) > 0 AND
                                      walk?(G,
                                            list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                                           (^(cd, (i, j)))))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST -1 "cd" "(i,j)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (EXPAND " ^ " 1) (("1" (EXPAND "list2finseq") (("1" (EXPAND " map " 1) (("1" (EXPAND "map") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, j)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (SKEEP :PREDS? T) (("2" (CASE "i<j") (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (INST -9 "G" "cd" "1+i" "j") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "walk?" 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP :PREDS? T) (("1" (CASE-REPLACE "i_1 = 0") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map") (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, i)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (HIDE -14) (("2" (INST -12 "i_1-1") (("1" (EXPAND "list2finseq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (HIDE -7) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "map" 1) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "walk?" -8) (("1" (FLATTEN) (("1" (INST -9 "i") (("1" (GROUND) (("1" (EXPAND "map" 1) (("1" (EXPAND "finseq_appl" -1) (("1" (EXPAND "list2finseq" -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "_") (("1" (INST-CP -1 "i") (("1" (INST -1 "1+i") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "walk?" -12) (("2" (FLATTEN) (("2" (INST -13 "n-1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -13) (("1" (EXPAND "list2finseq" -13) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (EXPAND "length" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq" 1) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq") (("3" (HIDE 2) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|caret_decomp-3| "" 3744349035 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                   N = j-i AND i <= j AND j < length(cd) IMPLIES
                                     length(^(cd, (i, j))) > 0 AND
                                      walk?(G,
                                            list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                                           (^(cd, (i, j)))))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST -1 "cd" "(i,j)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (EXPAND " ^ " 1) (("1" (EXPAND "list2finseq") (("1" (EXPAND " map " 1) (("1" (EXPAND "map") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, j)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (SKEEP :PREDS? T) (("2" (CASE "i<j") (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (INST -9 "G" "cd" "1+i" "j") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "walk?" 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP :PREDS? T) (("1" (CASE-REPLACE "i_1 = 0") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map") (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, i)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (HIDE -14) (("2" (INST -12 "i_1-1") (("1" (EXPAND "list2finseq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (HIDE -7) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (EXPAND "length" -1) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "map" 1) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "walk?" -8) (("1" (FLATTEN) (("1" (INST -9 "i") (("1" (GROUND) (("1" (EXPAND "map" 1) (("1" (EXPAND "finseq_appl" -1) (("1" (EXPAND "list2finseq" -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "_") (("1" (INST-CP -1 I) (("1" (INST -1 "1+i") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "walk?" -12) (("2" (FLATTEN) (("2" (INST -13 "n-1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -13) (("1" (EXPAND "list2finseq" -13) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (EXPAND "length" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 4) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq" 1) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq") (("3" (HIDE 2) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|i_1| SKOLEM-CONST-DECL "below(length
        (list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                        (cons[vert_circ(G)]
                             (nth[vert_circ(G)](cd, i),
                              (cd ^ (1 + i, j)))))))" |circuit_decomp_| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|i| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|n| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|caret_length| FORMULA-DECL NIL |more_list_props| |structures|) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|caret_decomp-2| |nil| 3659862380 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                            N = j-i AND i <= j AND j < length(cd) IMPLIES
                              length(^(cd, (i, j))) > 0 AND
                               walk?(G,
                                     list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                                    (^(cd, (i, j)))))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST -1 "cd" "(i,j)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (EXPAND " ^ " 1) (("1" (EXPAND "list2finseq") (("1" (EXPAND " map " 1) (("1" (EXPAND "map") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, j)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (SKEEP :PREDS? T) (("2" (CASE "i<j") (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (INST -9 "G" "cd" "1+i" "j") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "walk?" 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP :PREDS? T) (("1" (CASE-REPLACE "i_1 = 0") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map") (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, i)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (HIDE -14) (("2" (INST -12 "i_1-1") (("1" (EXPAND "list2finseq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (HIDE -7) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "map" 1) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "walk?" -8) (("1" (FLATTEN) (("1" (INST -9 "i") (("1" (GROUND) (("1" (EXPAND "map" 1) (("1" (EXPAND "finseq_appl" -1) (("1" (EXPAND "list2finseq" -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "_") (("1" (INST-CP -1 I) (("1" (INST -1 "1+i") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "walk?" -12) (("2" (FLATTEN) (("2" (INST -13 "n-1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -13) (("1" (EXPAND "list2finseq" -13) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (EXPAND "length" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 4) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq" 1) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("3" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq") (("3" (HIDE 2) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("3" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|caret_decomp-1| |nil| 3656845836 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                     N = j-i AND i <= j AND j < length(cd) IMPLIES
                       length(^(cd, (i, j))) > 0 AND
                        walk?(G,
                              list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                             (^(cd, (i, j)))))") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (SKEEP) (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST -1 "cd" "(i,j)") (("1" (ASSERT) (("1" (REPLACE -2) (("1" (EXPAND " ^ " 1) (("1" (EXPAND "list2finseq") (("1" (EXPAND " map " 1) (("1" (EXPAND "map") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, j)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (SKEEP :PREDS? T) (("2" (CASE "i<j") (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (INST -10 "G" "cd" "1+i" "j") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "walk?" 1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP :PREDS? T) (("1" (CASE-REPLACE "i_1 = 0") (("1" (EXPAND "list2finseq") (("1" (EXPAND "map") (("1" (EXPAND "nth" 1 1) (("1" (TYPEPRED "nth(cd, i)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (ASSERT) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (EXPAND "verts_in?") (("2" (HIDE -14) (("2" (INST -13 "i_1-1") (("1" (EXPAND "list2finseq") (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (HIDE -8) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (CASE "n=0") (("1" (REPLACE -1 1) (("1" (EXPAND "finseq_appl" 1) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "map" 1) (("1" (EXPAND "^" 1 2) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "walk?" -9) (("1" (FLATTEN) (("1" (INST -10 "i") (("1" (GROUND) (("1" (EXPAND "map" 1) (("1" (EXPAND "finseq_appl" -1) (("1" (EXPAND "list2finseq" -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "_") (("1" (INST-CP -1 I) (("1" (INST -1 "1+i") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth" 2 2) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (EXPAND "list2finseq" 2) (("2" (EXPAND "nth" 2) (("2" (LIFT-IF 2) (("2" (SPLIT 2) (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) (("2" (EXPAND "walk?" -13) (("2" (FLATTEN) (("2" (INST -14 "n-1") (("1" (ASSERT) (("1" (EXPAND "finseq_appl" -14) (("1" (EXPAND "list2finseq" -14) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (EXPAND "length" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" 4) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq" 1) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("3" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "list2finseq") (("3" (HIDE 2) (("3" (LEMMA "map_length[vert_circ(G), vert(G)]") (("3" (INST?) (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|walk_index_TCC1| 0 (|walk_index_TCC1-1| |nil| 3656844379 ("" (LEMMA "caret_decomp") (("" (SKEEP) (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|caret_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|walk_index| SUBTYPE "more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))" "walk_decomp(circuit_decomp_.G)"))) (|walk_index_TCC2| 0 (|walk_index_TCC2-1| |nil| 3656844379 ("" (SKEEP :PREDS? T) (("" (ASSERT) (("" (EXPAND "length") (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|walk_index| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)"))) (|walk_index_TCC3| 0 (|walk_index_TCC3-1| |nil| 3656844379 ("" (SKEEP) (("" (REPLACE -1) (("" (EXPAND "^") (("" (EXPAND "decomp_to_walk") (("" (LIFT-IF 1) (("" (EXPAND "length" 1 1) (("" (EXPAND "length" 1 1) (("" (EXPAND "nth") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|)) NIL (|walk_index| SUBTYPE "length(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c)" "{n: naturalnumbers.nat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))))}"))) (|walk_index_TCC4| 0 (|walk_index_TCC4-1| |nil| 3656844379 ("" (SKEEP :PREDS? T) (("" (GROUND) (("" (EXPAND "length") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) NIL (|walk_index| SUBTYPE "circuit_decomp_.cd" "(list_adt[vert_circ(circuit_decomp_.G)].cons?)"))) (|walk_index_TCC5| 0 (|walk_index_TCC5-1| |nil| 3656844379 ("" (SKEEP) (("" (LEMMA "cdr_decomp") (("" (INST?) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ((|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL)) NIL (|walk_index| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)" "walk_decomp(circuit_decomp_.G)"))) (|walk_index_TCC6| 0 (|walk_index_TCC6-2| "" 3884656477 ("" (SKEEP) (("" (GROUND) (("" (TYPEPRED ("i")) (("" (EXPAND " length" -1) (("" (LIFT-IF -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|walk_index| SUBTYPE "(number_fields.-)(circuit_decomp_.i, 1)" "below(list_props[vert_circ(circuit_decomp_.G)].length(list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))")) (|walk_index_TCC6-1| |nil| 3656844379 ("" (SKEEP) (("" (GROUND) (("" (TYPEPRED (I)) (("" (EXPAND " length" -1) (("" (LIFT-IF -1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (< CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL (|walk_index| SUBTYPE "(number_fields.-)(circuit_decomp_.i, 1)" "below(list_props[vert_circ(circuit_decomp_.G)].length(list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"))) (|walk_index_TCC7| 0 (|walk_index_TCC7-1| |nil| 3656844379 ("" (TERMINATION-TCC) NIL NIL) NIL NIL (|walk_index| TERMINATION "circuit_decomp_.walk_index(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd), (number_fields.-)(circuit_decomp_.i, 1))" "NIL"))) (|walk_index_TCC8| 0 (|walk_index_TCC8-2| "" 3884656582 ("" (SKEEP) (("" (TYPEPRED ("cd")) (("" (CASE "length(cd) =1") (("1" (TYPEPRED ("i")) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED "v(G, cdr[vert_circ(G)](cd), i - 1)") (("1" (HIDE -2) (("1" (LEMMA "caret_cdr[vert_circ(G)]") (("1" (EXPAND "^" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "length" (-4 1)) (("1" (LIFT-IF -4) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (MOVE-TERMS -1 R 2) (("1" (SWAP-REL -1) (("1" (REPLACE -1) (("1" (REWRITE "decomp_to_walk_rw" 5) (("1" (EXPAND "^" 5) (("1" (EXPAND "^" 5) (("1" (EXPAND "decomp_to_walk_length" 5) (("1" (GROUND) (("1" (LIFT-IF 5) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "decomp_to_walk_length" 5) (("1" (LIFT-IF 5) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (REPLACE -2) (("1" (REWRITE "decomp_to_walk_rw" 5) (("1" (EXPAND "decomp_to_walk_length" 5) (("1" (LIFT-IF 5) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "nth" 5 2) (("1" (EXPAND "nth" 5 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "decomp_to_walk_rw" 6) (("2" (EXPAND "^" 6) (("2" (EXPAND "decomp_to_walk_length" 6) (("2" (LIFT-IF 6) (("2" (EXPAND "length" 6 1) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "nth" 6) (("2" (REPLACE -2) (("2" (REWRITE "decomp_to_walk_rw" 6) (("2" (INST -3 "cd" "(1, i)") (("2" (ASSERT) (("2" (REPLACE -3 :DIR RL) (("2" (CASE-REPLACE "nth(cdr(cd), 0) = nth(cd^(1,i), 0)") (("1" (EXPAND "nth") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nth " 1 2) (("2" (EXPAND "nth") (("2" (EXPAND "^") (("2" (EXPAND "nth") (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GROUND) (("2" (TYPEPRED ("i")) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cdr_decomp") (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|walk_index| SUBTYPE "(number_fields.+)(length(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c), circuit_decomp_.walk_index(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd), (number_fields.-)(circuit_decomp_.i, 1)))" "{n: naturalnumbers.nat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))))}")) (|walk_index_TCC8-1| |nil| 3656844379 ("" (SKEEP) (("" (TYPEPRED (CD)) (("" (CASE "length(cd) =1") (("1" (TYPEPRED (I)) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED "v(G, cdr[vert_circ(G)](cd), i - 1)") (("1" (HIDE -2) (("1" (LEMMA "caret_cdr[vert_circ(G)]") (("1" (EXPAND "^" -2) (("1" (LIFT-IF -2) (("1" (SPLIT -2) (("1" (GROUND) (("1" (EXPAND "length" (-4 1)) (("1" (LIFT-IF -4) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (MOVE-TERMS -1 R 2) (("1" (SWAP-REL -1) (("1" (REPLACE -1) (("1" (REWRITE "decomp_to_walk_rw" 5) (("1" (EXPAND "^" 5) (("1" (EXPAND "^" 5) (("1" (EXPAND "decomp_to_walk_length" 5) (("1" (GROUND) (("1" (LIFT-IF 5) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "decomp_to_walk_length" 5) (("1" (LIFT-IF 5) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (REPLACE -2) (("1" (REWRITE "decomp_to_walk_rw" 5) (("1" (EXPAND "decomp_to_walk_length" 5) (("1" (LIFT-IF 5) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "length" 5 1) (("1" (EXPAND "nth" 5 2) (("1" (EXPAND "nth" 5 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "decomp_to_walk_rw" 6) (("2" (EXPAND "^" 6) (("2" (EXPAND "decomp_to_walk_length" 6) (("2" (LIFT-IF 6) (("2" (EXPAND "length" 6 1) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "nth" 6) (("2" (REPLACE -2) (("2" (REWRITE "decomp_to_walk_rw" 6) (("2" (INST -3 "cd" "(1, i)") (("2" (ASSERT) (("2" (REPLACE -3 :DIR RL) (("2" (CASE-REPLACE "nth(cdr(cd), 0) = nth(cd^(1,i), 0)") (("1" (EXPAND "nth") (("1" (ASSERT) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "nth " 1 2) (("2" (EXPAND "nth") (("2" (EXPAND "^") (("2" (EXPAND "nth") (("2" (EXPAND "nth") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("2" (GROUND) (("2" (TYPEPRED (I)) (("2" (EXPAND "length" -1) (("2" (LIFT-IF -1) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "cdr_decomp") (("3" (INST?) (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|caret_cdr| FORMULA-DECL NIL |more_list_props| |structures|) (|decomp_to_walk_rw| FORMULA-DECL NIL |circuit_decomp_| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|decomp_to_walk_length| DEF-DECL "{n: posnat | n = length(decomp_to_walk(G, cd))}" |circuit_decomp_| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|caret_length| FORMULA-DECL NIL |more_list_props| |structures|) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|odd_plus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_index| SUBTYPE "(number_fields.+)(length(list_adt[vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c), circuit_decomp_.walk_index(circuit_decomp_.G, list_adt[vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd), (number_fields.-)(circuit_decomp_.i, 1)))" "{n: naturalnumbers.nat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))))}"))) (|walk_index_ub| 0 (|walk_index_ub-2| |nil| 3659862989 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), j: below(length(cd))):
                      n=j IMPLIES walk_index(G, cd, j) <= decomp_to_walk(G, cd)`length") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "decomp_to_walk") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (EXPAND "o ") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND " decomp_to_walk" 2 1) (("2" (EXPAND "o ") (("2" (INST -1 "G " "cdr(cd)" "j-1") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL)) NIL) (|walk_index_ub-1| |nil| 3656846486 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), j: below(length(cd))):
               n=j IMPLIES walk_index(G, cd, j) <= decomp_to_walk(G, cd)`length") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "j") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "decomp_to_walk") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (GROUND) NIL NIL) ("2" (GROUND) (("2" (EXPAND "o ") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND " decomp_to_walk" 2 1) (("2" (EXPAND "o ") (("2" (INST -1 "G " "cdr(cd)" "j-1") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|walk_index_incr| 0 (|walk_index_incr-2| |nil| 3659863018 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat,  cd: walk_decomp(G), i, j: below(length(cd))):
                      n=j AND  i <= j IMPLIES walk_index(G, cd, i) <= walk_index(G, cd, j)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (EXPAND "walk_index") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (INST -1 "G" "cdr(cd)" "i-1" "j-1") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (<= CONST-DECL "bool" |reals| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL)) NIL) (|walk_index_incr-1| |nil| 3656846525 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat,  cd: walk_decomp(G), i, j: below(length(cd))):
               n=j AND  i <= j IMPLIES walk_index(G, cd, i) <= walk_index(G, cd, j)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (EXPAND "walk_index") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (INST -1 "G" "cdr(cd)" "i-1" "j-1") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|walk_index_sincr| 0 (|walk_index_sincr-1| |nil| 3656846560 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i, j: below(length(cd))):
               n=j and i < j IMPLIES walk_index(G, cd, i) < walk_index(G, cd, j)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "walk_index") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "G" "cdr(cd)" "i-1" "j-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL)) NIL)) (|walk_index_last_TCC1| 0 (|walk_index_last_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_index_last| SUBTYPE "(number_fields.+)(circuit_decomp_.i, 1)" "below(list_props[vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd))"))) (|walk_index_last_TCC2| 0 (|walk_index_last_TCC2-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|walk_index_last| SUBTYPE "circuit_decomp_.i" "below(list_props[vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd))"))) (|walk_index_last_TCC3| 0 (|walk_index_last_TCC3-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_index_last| SUBTYPE "(number_fields.+)(1, circuit_decomp_.i)" "below[length[vert_circ(G)](cd)]"))) (|walk_index_last| 0 (|walk_index_last-2| "" 3884656628 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd) - 1)): n=i IMPLIES
               walk_index(G, cd, i + 1) =
                walk_index(G, cd, i) + nth(cd, 1 + i)`c`length") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1) (("2" (GROUND) (("2" (INST -1 "G" "cdr(cd)" "i-1") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("i")) (("2" (TYPEPRED ("cd")) (("2" (EXPAND "length" -) (("2" (GROUND) (("2" (LIFT-IF -4) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|walk_index_last-1| |nil| 3656846628 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd) - 1)): n=i IMPLIES
               walk_index(G, cd, i + 1) =
                walk_index(G, cd, i) + nth(cd, 1 + i)`c`length") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1) (("2" (GROUND) (("2" (INST -1 "G" "cdr(cd)" "i-1") (("1" (GROUND) (("1" (REPLACES -1) (("1" (EXPAND "nth" 1 2) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (I)) (("2" (TYPEPRED (CD)) (("2" (EXPAND "length" -) (("2" (GROUND) (("2" (LIFT-IF -4) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|i| SKOLEM-CONST-DECL "below(length(cd) - 1)" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|even_minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL)) (|walk_index_bound_TCC1| 0 (|walk_index_bound_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|walk_index_bound| SUBTYPE "circuit_decomp_.i" "below(list_props[vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd))"))) (|walk_index_bound| 0 (|walk_index_bound-1| |nil| 3656846671 ("" (INDUCT "i") (("1" (SKEEP) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "walk_index" 1) (("2" (EXPAND "nth" 1) (("2" (INST -1 "G" "cdr(cd)" "j-1") (("1" (GROUND) (("1" (EXPAND "length" -2) (("1" (TYPEPRED "cd") (("1" (LIFT-IF -5) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED "j_1") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (GROUND) (("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)) NIL)) (|walk_index_pos| 0 (|walk_index_pos-1| |nil| 3656846720 ("" (SKEEP) (("" (EXPAND "walk_index") (("" (GROUND) (("" (LIFT-IF 1) (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL)) NIL)) (|decomp_walk_index_TCC1| 0 (|decomp_walk_index_TCC1-2| |nil| 3656846779 ("" (SKEEP) (("" (LEMMA "walk_index_bound") (("" (INST?) (("" (INST - "i") (("" (ASSERT) (("" (LEMMA "walk_index_ub") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|walk_index_bound| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_ub| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL)) NIL (|decomp_walk_index| SUBTYPE "(number_fields.+)((number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length), circuit_decomp_.x)" "below[decomp_to_walk(G, cd)`length]")) (|decomp_walk_index_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|decomp_walk_index| SUBTYPE "(number_fields.+)((number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length), circuit_decomp_.x)" "below[decomp_to_walk(G, cd)`length]"))) (|decomp_walk_index| 0 (|decomp_walk_index-4| "" 3884656906 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                            x: below(nth(cd, i)`c`length)):
                      n=i IMPLIES nth(cd, i)`c`seq(x) =
                       decomp_to_walk(G, cd)`seq
                           (walk_index(G, cd, i) - nth(cd, i)`c`length + x)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "decomp_to_walk") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "o ") (("1" (GROUND) (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (TYPEPRED ("x")) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (EXPAND "walk_index" 1) (("2" (INST -1 "G" "cdr(cd)" "j" "x") (("1" (EXPAND "decomp_to_walk" 1) (("1" (TYPEPRED ("i")) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST - "j") (("1" (ASSERT) (("1" (REPLACE -4 -2 :DIR RL) (("1" (EXPAND "length" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("x")) (("2" (REPLACE -2 -1 :DIR RL) (("2" (EXPAND "nth" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST - "i") (("3" (ASSERT) (("3" (TYPEPRED ("x")) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index_TCC1") (("3" (HIDE 2) (("3" (SKEEP) (("3" (INST?) (("3" (INST - "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|decomp_walk_index-3| "" 3790100772 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                            x: below(nth(cd, i)`c`length)):
                      n=i IMPLIES nth(cd, i)`c`seq(x) =
                       decomp_to_walk(G, cd)`seq
                           (walk_index(G, cd, i) - nth(cd, i)`c`length + x)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "decomp_to_walk") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "o ") (("1" (GROUND) (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (TYPEPRED (X)) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (EXPAND "walk_index" 1) (("2" (INST -1 "G" "cdr(cd)" "j" "x") (("1" (EXPAND "decomp_to_walk" 1) (("1" (TYPEPRED (I)) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST - "j") (("1" (ASSERT) (("1" (REPLACE -4 -2 :DIR RL) (("1" (EXPAND "length" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (REPLACE -2 -1 :DIR RL) (("2" (EXPAND "nth" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST - "i") (("3" (ASSERT) (("3" (TYPEPRED (X)) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index_TCC1") (("3" (HIDE 2) (("3" (SKEEP) (("3" (INST?) (("3" (INST - "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|decomp_walk_index_TCC1| SUBTYPE-TCC NIL |circuit_decomp_| NIL) (|walk_index_ub| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|walk_index_bound| FORMULA-DECL NIL |circuit_decomp_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|i| SKOLEM-CONST-DECL "below(length(cd))" |circuit_decomp_| NIL) (|x| SKOLEM-CONST-DECL "below(nth(cd, i)`c`length)" |circuit_decomp_| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|decomp_walk_index-2| "" 3744351291 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                            x: below(nth(cd, i)`c`length)):
                      n=i IMPLIES nth(cd, i)`c`seq(x) =
                       decomp_to_walk(G, cd)`seq
                           (walk_index(G, cd, i) - nth(cd, i)`c`length + x)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "decomp_to_walk") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "o ") (("1" (GROUND) (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (TYPEPRED (X)) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (EXPAND "walk_index" 1) (("2" (INST -1 "G" "cdr(cd)" "j" "x") (("1" (EXPAND "decomp_to_walk" 1) (("1" (TYPEPRED (I)) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST - "j") (("1" (ASSERT) (("1" (REPLACE -4 -2 :DIR RL) (("1" (EXPAND "length" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (REPLACE -2 -1 :DIR RL) (("2" (EXPAND "nth" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST - "i") (("3" (ASSERT) (("3" (TYPEPRED (X)) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index_TCC1") (("3" (HIDE 2) (("3" (SKEEP) (("3" (INST?) (("3" (INST - "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|decomp_walk_index-1| |nil| 3656846859 ("" (CASE "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                     x: below(nth(cd, i)`c`length)):
               n=i IMPLIES nth(cd, i)`c`seq(x) =
                decomp_to_walk(G, cd)`seq
                    (walk_index(G, cd, i) - nth(cd, i)`c`length + x)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "decomp_to_walk") (("1" (GROUND) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "o ") (("1" (GROUND) (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (TYPEPRED (X)) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "nth") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (EXPAND "walk_index" 1) (("2" (INST -1 "G" "cdr(cd)" "j" "x") (("1" (EXPAND "decomp_to_walk" 1) (("1" (TYPEPRED (I)) (("1" (LIFT-IF 1) (("1" (ASSERT) (("1" (EXPAND "o ") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST - "j") (("1" (ASSERT) (("1" (REPLACE -4 -2 :DIR RL) (("1" (EXPAND "length" -2) (("1" (LIFT-IF -2) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (X)) (("2" (REPLACE -2 -1 :DIR RL) (("2" (EXPAND "nth" -1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (SKEEP) (("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST - "i") (("3" (ASSERT) (("3" (TYPEPRED (X)) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index_TCC1") (("3" (HIDE 2) (("3" (SKEEP) (("3" (INST?) (("3" (INST - "x") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|caret_commute_TCC1| 0 (|caret_commute_TCC1-2| |nil| 3656846916 ("" (LEMMA "caret_decomp") (("" (PROPAX) NIL NIL)) NIL) ((|caret_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|caret_commute| SUBTYPE "more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j))" "walk_decomp(circuit_decomp_.G)")) (|caret_commute_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|caret_commute| SUBTYPE "more_list_props[vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j))" "walk_decomp(circuit_decomp_.G)"))) (|caret_commute_TCC2| 0 (|caret_commute_TCC2-2| |nil| 3656846955 ("" (LEMMA "walk_index_bound") (("" (PROPAX) NIL NIL)) NIL) ((|walk_index_bound| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|caret_commute| SUBTYPE "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length)" "nat")) (|caret_commute_TCC2-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|caret_commute| SUBTYPE "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length)" "nat"))) (|caret_commute_TCC3| 0 (|caret_commute_TCC3-2| |nil| 3656846996 ("" (LEMMA "walk_index_pos") (("" (PROPAX) NIL NIL)) NIL) ((|walk_index_pos| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|caret_commute| SUBTYPE "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.j), 1)" "nat")) (|caret_commute_TCC3-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|caret_commute| SUBTYPE "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.j), 1)" "nat"))) (|caret_commute| 0 (|caret_commute-4| "" 3884657860 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                           N = j-i AND i <= j AND j < length(cd) IMPLIES
                                            decomp_to_walk(G, cd ^ (i, j)) =
                                             decomp_to_walk(G, cd) ^
                                              (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (INDUCT "i") (("1" (SKEEP) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "decomp_to_walk") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "min") (("1" (EXPAND "nth") (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (SKEEP) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "^") (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (EXPAND "min") (("2" (EXPAND "nth") (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (MOVE-TERMS -2 R 2) (("2" (MOVE-TERMS -2 R 2) (("2" (SIMPLIFY -2) (("2" (REPLACE -2 1 :DIR RL) (("2" (INST -1 "G" "cdr(cd)" "j_1") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "walk_index" 1) (("1" (EXPAND "^" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (REPLACE -3 -5 :DIR RL) (("1" (TYPEPRED ("cd")) (("1" (EXPAND "length" -8) (("1" (LIFT-IF -8) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "decomp_to_walk" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "decomp_to_walk" 2) (("2" (EXPAND "o" 2) (("2" (REPLACE -1 2) (("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "min") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "walk_index_ub") (("2" (INST?) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "^" -3) (("1" (EXPAND "min") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("1" (EXPAND "min") (("1" (GROUND) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("8" (LEMMA "walk_index_pos") (("8" (INST?) (("1" (INST -1 "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (LEMMA "walk_index_bound") (("9" (INST?) (("1" (INST -1 "j-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (SKEEP) (("10" (TYPEPRED "vc`v") (("10" (EXPAND "vert?") (("10" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -3) (("2" (LIFT-IF -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cdr_decomp") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED ("cd")) (("4" (EXPAND "length" -2) (("4" (LIFT-IF -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1 1) (("2" (ASSERT) (("2" (INST -1 "G" "cd" "i+1" "j") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 1 1) (("2" (EXPAND "length" 1 1) (("2" (REWRITE "caret_length[vert_circ(G)]" 1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o") (("1" (EXPAND "^" 1 1) (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i+1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (EXPAND "min") (("1" (ASSERT) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i") (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "walk_index_last") (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "o") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (CASE "i=0") (("1" (REPLACE -1 -2) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2) (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "walk_index" -1) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (LEMMA "walk_index_incr") (("1" (LEMMA "walk_index_sincr") (("1" (HIDE -2) (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_sincr") (("2" (INST?) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (LEMMA "walk_index_ub") (("2" (INST -1 "G" "cd" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_bound") (("2" (INST?) (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (INST?) (("3" (INST - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (INST?) (("4" (INST - "1+i") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST -1 "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_pos") (("4" (INST?) (("4" (INST - "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "walk_index_bound") (("5" (INST?) (("5" (INST - "1+i") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|caret_commute-3| "" 3791887689 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                           N = j-i AND i <= j AND j < length(cd) IMPLIES
                                            decomp_to_walk(G, cd ^ (i, j)) =
                                             decomp_to_walk(G, cd) ^
                                              (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (INDUCT "i") (("1" (SKEEP) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "decomp_to_walk") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "min") (("1" (EXPAND "nth") (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (SKEEP) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "^") (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (EXPAND "min") (("2" (EXPAND "nth") (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (MOVE-TERMS -2 R 2) (("2" (MOVE-TERMS -2 R 2) (("2" (SIMPLIFY -2) (("2" (REPLACE -2 1 :DIR RL) (("2" (INST -1 "G" "cdr(cd)" "j_1") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "walk_index" 1) (("1" (EXPAND "^" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (REPLACE -3 -5 :DIR RL) (("1" (TYPEPRED (CD)) (("1" (EXPAND "length" -8) (("1" (LIFT-IF -8) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "decomp_to_walk" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "decomp_to_walk" 2) (("2" (EXPAND "o" 2) (("2" (REPLACE -1 2) (("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "min") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "walk_index_ub") (("2" (INST?) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "^" -3) (("1" (EXPAND "min") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("1" (EXPAND "min") (("1" (GROUND) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("8" (LEMMA "walk_index_pos") (("8" (INST?) (("1" (INST -1 "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (LEMMA "walk_index_bound") (("9" (INST?) (("1" (INST -1 "j-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (SKEEP) (("10" (TYPEPRED "vc`v") (("10" (EXPAND "vert?") (("10" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -3) (("2" (LIFT-IF -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cdr_decomp") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED (CD)) (("4" (EXPAND "length" -2) (("4" (LIFT-IF -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1 1) (("2" (ASSERT) (("2" (INST -1 "G" "cd" "i+1" "j") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 1 1) (("2" (EXPAND "length" 1 1) (("2" (REWRITE "caret_length[vert_circ(G)]" 1) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o") (("1" (EXPAND "^" 1 1) (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i+1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (EXPAND "min") (("1" (ASSERT) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i") (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "walk_index_last") (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "o") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (CASE "i=0") (("1" (REPLACE -1 -2) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2) (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "walk_index" -1) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (LEMMA "walk_index_incr") (("1" (LEMMA "walk_index_sincr") (("1" (HIDE -2) (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_sincr") (("2" (INST?) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (LEMMA "walk_index_ub") (("2" (INST -1 "G" "cd" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_bound") (("2" (INST?) (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (INST?) (("3" (INST - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (INST?) (("4" (INST - "1+i") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST -1 "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_pos") (("4" (INST?) (("4" (INST - "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "walk_index_bound") (("5" (INST?) (("5" (INST - "1+i") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|caret_length| FORMULA-DECL NIL |more_list_props| |structures|) (TRUE CONST-DECL "bool" |booleans| NIL) (|decomp_walk_index| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_sincr| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_incr| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_last| FORMULA-DECL NIL |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|i| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_pos| FORMULA-DECL NIL |circuit_decomp_| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|walk_index_bound| FORMULA-DECL NIL |circuit_decomp_| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|walk_index_ub| FORMULA-DECL NIL |circuit_decomp_| NIL) (|j_1| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|caret_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|i| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (< CONST-DECL "bool" |reals| NIL) (<= CONST-DECL "bool" |reals| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK) (|caret_commute-2| "" 3744359439 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                           N = j-i AND i <= j AND j < length(cd) IMPLIES
                                            decomp_to_walk(G, cd ^ (i, j)) =
                                             decomp_to_walk(G, cd) ^
                                              (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (INDUCT "i") (("1" (SKEEP) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "decomp_to_walk") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "min") (("1" (EXPAND "nth") (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (SKEEP) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "^") (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (EXPAND "min") (("2" (EXPAND "nth") (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (MOVE-TERMS -2 R 2) (("2" (MOVE-TERMS -2 R 2) (("2" (SIMPLIFY -2) (("2" (REPLACE -2 1 :DIR RL) (("2" (INST -1 "G" "cdr(cd)" "j_1") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "walk_index" 1) (("1" (EXPAND "^" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (REPLACE -3 -5 :DIR RL) (("1" (TYPEPRED (CD)) (("1" (EXPAND "length" -8) (("1" (LIFT-IF -8) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "decomp_to_walk" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "decomp_to_walk" 2) (("2" (EXPAND "o" 2) (("2" (REPLACE -1 2) (("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "min") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "walk_index_ub") (("2" (INST?) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "^" -3) (("1" (EXPAND "min") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("1" (EXPAND "min") (("1" (GROUND) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("8" (LEMMA "walk_index_pos") (("8" (INST?) (("1" (INST -1 "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (LEMMA "walk_index_bound") (("9" (INST?) (("1" (INST -1 "j-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (SKEEP) (("10" (TYPEPRED "vc`v") (("10" (EXPAND "vert?") (("10" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -3) (("2" (LIFT-IF -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cdr_decomp") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED (CD)) (("4" (EXPAND "length" -2) (("4" (LIFT-IF -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1 1) (("2" (ASSERT) (("2" (INST -1 "G" "cd" "i+1" "j") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 1 1) (("2" (EXPAND "length" 1 1) (("2" (REWRITE "caret_length[vert_circ(G)]" 1) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o") (("1" (EXPAND "^" 1 1) (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i+1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (EXPAND "min") (("1" (ASSERT) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i") (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "walk_index_last") (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "o") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (CASE "i=0") (("1" (REPLACE -1 -2) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2) (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "walk_index" -1) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (LEMMA "walk_index_incr") (("1" (LEMMA "walk_index_sincr") (("1" (HIDE -2) (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_sincr") (("2" (INST?) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (LEMMA "walk_index_ub") (("2" (INST -1 "G" "cd" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_bound") (("2" (INST?) (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (INST?) (("3" (INST - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (INST?) (("4" (INST - "1+i") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST -1 "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_pos") (("4" (INST?) (("4" (INST - "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "walk_index_bound") (("5" (INST?) (("5" (INST - "1+i") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|caret_commute-1| |nil| 3656847041 ("" (CASE "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                    N = j-i AND i <= j AND j < length(cd) IMPLIES
                                     decomp_to_walk(G, cd ^ (i, j)) =
                                      decomp_to_walk(G, cd) ^
                                       (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "j-i") (("1" (GROUND) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "N") (("1" (INDUCT "i") (("1" (SKEEP) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 :DIR RL) (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "decomp_to_walk") (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "min") (("1" (EXPAND "nth") (("1" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (SKEEP) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "o ") (("2" (EXPAND "^") (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (EXPAND "min") (("2" (EXPAND "nth") (("2" (DECOMPOSE-EQUALITY 3) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (MOVE-TERMS -2 R 2) (("2" (MOVE-TERMS -2 R 2) (("2" (SIMPLIFY -2) (("2" (REPLACE -2 1 :DIR RL) (("2" (INST -1 "G" "cdr(cd)" "j_1") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "^" 1 1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "length" 1 1) (("1" (EXPAND "nth" 1) (("1" (EXPAND "walk_index" 1) (("1" (EXPAND "^" -1 1) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (REPLACE -3 -5 :DIR RL) (("1" (TYPEPRED (CD)) (("1" (EXPAND "length" -8) (("1" (LIFT-IF -8) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "decomp_to_walk" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "length" -1 1) (("2" (EXPAND "decomp_to_walk" 2) (("2" (EXPAND "o" 2) (("2" (REPLACE -1 2) (("2" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "min") (("1" (EXPAND "^" 1 1) (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "walk_index_ub") (("2" (INST?) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "^" -3) (("1" (EXPAND "min") (("1" (GROUND) (("1" (REPLACE -3) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "^" 1) (("3" (LEMMA "walk_index_ub") (("3" (INST?) (("1" (EXPAND "min") (("1" (GROUND) (("1" (LEMMA "walk_index_bound") (("1" (INST?) (("1" (INST -1 "j_1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("8" (LEMMA "walk_index_pos") (("8" (INST?) (("1" (INST -1 "0") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("9" (LEMMA "walk_index_bound") (("9" (INST?) (("1" (INST -1 "j-1") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("10" (SKEEP) (("10" (TYPEPRED "vc`v") (("10" (EXPAND "vert?") (("10" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length" -3) (("2" (LIFT-IF -3) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "cdr_decomp") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED (CD)) (("4" (EXPAND "length" -2) (("4" (LIFT-IF -2) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "^" 1 1) (("2" (ASSERT) (("2" (INST -1 "G" "cd" "i+1" "j") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 1 1) (("2" (EXPAND "length" 1 1) (("2" (REWRITE "caret_length[vert_circ(G)]" 1) (("2" (ASSERT) (("2" (REPLACE -1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o") (("1" (EXPAND "^" 1 1) (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i+1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (EXPAND "min") (("1" (ASSERT) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i") (("1" (REPLACE -1 1) (("1" (SIMPLIFY 1) (("1" (LEMMA "walk_index_incr") (("1" (INST -1 "G" "cd" "i" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "walk_index_last") (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (REPLACES -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "o") (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (CASE "i=0") (("1" (REPLACE -1 -2) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2) (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) NIL NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (GROUND) NIL NIL)) NIL) ("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("2" (CASE "i=0") (("1" (REPLACES -1) (("1" (EXPAND "walk_index" -1) (("1" (EXPAND "nth") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i-1" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "decomp_walk_index") (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^" 2) (("2" (GROUND) (("2" (LIFT-IF 2) (("2" (GROUND) (("1" (LEMMA "walk_index_incr") (("1" (LEMMA "walk_index_sincr") (("1" (HIDE -2) (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_sincr") (("2" (INST?) (("2" (INST -1 "j") (("2" (ASSERT) (("2" (LEMMA "walk_index_ub") (("2" (INST -1 "G" "cd" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_bound") (("2" (INST?) (("2" (INST - "i") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (INST?) (("3" (INST - "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (INST?) (("4" (INST - "1+i") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_bound") (("3" (INST?) (("3" (INST -1 "i") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_pos") (("4" (INST?) (("4" (INST - "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (LEMMA "walk_index_bound") (("5" (INST?) (("5" (INST - "1+i") (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "walk_index_pos") (("3" (SKEEP) (("3" (INST - "G" "cd" "i" "j") (("3" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("4" (LEMMA "walk_index_bound") (("4" (SKEEP) (("4" (INST - "G" "cd" "i" "j") (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (LEMMA "caret_decomp") (("6" (SKEEP) (("6" (INST?) (("6" (GROUND) NIL NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)) (|append_decomp_TCC1| 0 (|append_decomp_TCC1-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) ((|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|append_decomp| SUBTYPE "(number_fields.-)(list_props[vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd1), 1)" "below[length[vert_circ(G)](cd1)]"))) (|append_decomp_TCC2| 0 (|append_decomp_TCC2-1| |nil| 3656844379 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|append_decomp| SUBTYPE "0" "below[length[vert_circ(G)](cd2)]"))) (|append_decomp_TCC3| 0 (|append_decomp_TCC3-1| |nil| 3656844379 ("" (SKEEP) (("" (EXPAND "list2finseq") (("" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("" (SKEEP) (("" (TYPEPRED "vc`v") (("" (EXPAND "vert?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|append_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_props[vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd1, circuit_decomp_.cd2)))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))) (|append_decomp| 0 (|append_decomp-5| "" 3884658014 ("" (SKEEP) (("" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (TYPEPRED ("cd1")) (("1" (TYPEPRED ("cd2")) (("1" (TYPEPRED ("i")) (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (FLATTEN) (("1" (EXPAND "list2finseq") (("1" (INST -11 "i") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-7 -8 -9)) (("2" (HIDE -4) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -6) (("2" (EXPAND "verts_in?") (("2" (INST -5 "i - length(cd1)") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" "i- length(cd1)") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "append[vert_circ(G)](cd1, cd2)" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "cd1" "cd2" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED ("cd1")) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " n") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " 1+n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("cd2")) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (INST - "n- length(cd1)") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " n- length(cd1)") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " 1- length(cd1)+n") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|append_decomp-4| "" 3791887699 ("" (SKEEP) (("" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (TYPEPRED (CD1)) (("1" (TYPEPRED (CD2)) (("1" (TYPEPRED (I)) (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (FLATTEN) (("1" (EXPAND "list2finseq") (("1" (INST -11 "i") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-7 -8 -9)) (("2" (HIDE -4) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -6) (("2" (EXPAND "verts_in?") (("2" (INST -5 "i - length(cd1)") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" "i- length(cd1)") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "append[vert_circ(G)](cd1, cd2)" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "cd1" "cd2" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (CD1)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " n") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " 1+n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (CD2)) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (INST - "n- length(cd1)") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " n- length(cd1)") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " 1- length(cd1)+n") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length_append| FORMULA-DECL NIL |list_props| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|n| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|i| SKOLEM-CONST-DECL "below(length
        (list2finseq[vert[T, ConcreteDigraph, vert, edges, size, make](G)]
             (map[vert_circ(G),
                  vert[T, ConcreteDigraph, vert, edges, size, make](G)]
                  (LAMBDA (vc: vert_circ(G)): vc`v)
                  (append[vert_circ(G)](cd1, cd2)))))" |circuit_decomp_| NIL) (|cd2| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|cd1| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL)) SHOSTAK) (|append_decomp-3| "" 3744385519 ("" (SKEEP) (("" (REWRITE "length_append[vert_circ(G)]") (("" (ASSERT) (("" (EXPAND "walk?") (("" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (TYPEPRED (CD1)) (("1" (TYPEPRED (CD2)) (("1" (TYPEPRED (I)) (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (FLATTEN) (("1" (EXPAND "list2finseq") (("1" (INST -11 "i") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" "i") (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-7 -8 -9)) (("2" (HIDE -4) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -6) (("2" (EXPAND "verts_in?") (("2" (INST -5 "i - length(cd1)") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" "i- length(cd1)") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "append[vert_circ(G)](cd1, cd2)" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "cd1" "cd2" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (CD1)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " n") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " 1+n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (CD2)) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (INST - "n- length(cd1)") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " n- length(cd1)") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " 1- length(cd1)+n") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|append_decomp-2| |nil| 3656857268 ("" (SKEEP) (("" (REWRITE "length_append[vert_circ(G)]") (("" (ASSERT) (("" (EXPAND "walk?") (("" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (TYPEPRED (CD1)) (("1" (TYPEPRED (CD2)) (("1" (TYPEPRED (I)) (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (FLATTEN) (("1" (EXPAND "list2finseq") (("1" (INST -11 "i") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" "i") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE (-7 -8 -9)) (("2" (HIDE -4) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (HIDE -6) (("2" (EXPAND "verts_in?") (("2" (INST -5 "i - length(cd1)") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" "i- length(cd1)") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" 1) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST -1 "LAMBDA (vc: vert_circ(G)): vc`v" "append[vert_circ(G)](cd1, cd2)" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "cd1" "cd2" "_") (("1" (INST-CP -1 "n") (("1" (INST -1 "1+n") (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (TYPEPRED (CD1)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST - "n") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " n") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd1" " 1+n") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (CD2)) (("2" (EXPAND "walk?") (("2" (FLATTEN) (("2" (INST - "n- length(cd1)") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -) (("1" (ASSERT) (("1" (HIDE -3) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST-CP - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " n- length(cd1)") (("1" (INST - "LAMBDA (vc: vert_circ(G)): vc`v" "cd2" " 1- length(cd1)+n") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL) (|append_decomp-1| |nil| 3656856160 ("" (CASE "FORALL (G: ConcreteDigraph, n: posnat, cd1, cd2: walk_decomp(G)):
       n=length(cd1) AND  edge?(G)(nth(cd1, length(cd1) - 1)`v, nth(cd2, 0)`v) IMPLIES
         decomp_to_walk(G, append[vert_circ(G)](cd1, cd2)) =
          decomp_to_walk(G, cd1) o decomp_to_walk(G, cd2)") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK)) (|append_commute_TCC1| 0 (|append_commute_TCC1-1| |nil| 3656857083 ("" (LEMMA "append_decomp") (("" (PROPAX) NIL NIL)) NIL) ((|append_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|append_commute| SUBTYPE "list_props[vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd1, circuit_decomp_.cd2)" "walk_decomp(circuit_decomp_.G)"))) (|append_commute| 0 (|append_commute-1| |nil| 3656857307 ("" (CASE "FORALL (G: ConcreteDigraph, n: posnat, cd1, cd2: walk_decomp(G)):
       n=length(cd1) AND  edge?(G)(nth(cd1, length(cd1) - 1)`v, nth(cd2, 0)`v) IMPLIES
         decomp_to_walk(G, append[vert_circ(G)](cd1, cd2)) =
          decomp_to_walk(G, cd1) o decomp_to_walk(G, cd2)") (("1" (SKEEP) (("1" (INST?) (("1" (INST -1 "length(cd1)") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (CASE "j=0") (("1" (REPLACE -1) (("1" (REPLACE -4 :DIR RL) (("1" (SIMPLIFY) (("1" (HIDE -2) (("1" (EXPAND "append " 1) (("1" (LIFT-IF 1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "decomp_to_walk" 2 1) (("2" (EXPAND "length" 2 1) (("2" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "append" 2) (("1" (LIFT-IF 2) (("1" (GROUND) (("1" (EXPAND "decomp_to_walk" 1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "append" 2) (("2" (LIFT-IF 2) (("2" (ASSERT) (("2" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (EXPAND "decomp_to_walk" 2 1) (("2" (EXPAND "length" 2) (("2" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "decomp_to_walk" 2 2) (("1" (INST -1 "G" "cdr(cd1)" "cd2") (("1" (ASSERT) (("1" (EXPAND "length" -3) (("1" (EXPAND "length" -4) (("1" (EXPAND "nth" -4 1) (("1" (LIFT-IF -4) (("1" (SPLIT -4) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (REPLACE -2) (("2" (REWRITE "o_assoc") (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (LEMMA "append_decomp") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "append_decomp") (("3" (SKEEP) (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|append_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|even_plus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL) (|o_assoc| FORMULA-DECL NIL |finite_sequences| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (> CONST-DECL "bool" |reals| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)) SHOSTAK)) (|circuit_vertex_TCC1| 0 (|circuit_vertex_TCC1-1| |nil| 3656931646 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL)) NIL (|circuit_vertex| SUBTYPE "0" "below[nth[vert_circ(G)](cd, i)`c`length]"))) (|circuit_vertex| 0 (|circuit_vertex-4| "" 3884658054 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                             n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " n") (("1" (SKEEP) (("1" (TYPEPRED ("cd")) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (GROUND) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (INST -1 " G" "cdr(cd)" "j") (("1" (LEMMA " cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|circuit_vertex-3| "" 3744401639 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                             n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " n") (("1" (SKEEP) (("1" (TYPEPRED (CD)) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (GROUND) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (INST -1 " G" "cdr(cd)" "j") (("1" (LEMMA " cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|circuit_vertex-2| "" 3744386324 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
               n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " n") (("1" (SKEEP) (("1" (TYPEPRED (CD)) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (GROUND) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (INST -1 " G" "cdr(cd)" "j") (("1" (LEMMA " cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|circuit_vertex-1| |nil| 3656931713 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
        n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " n") (("1" (SKEEP) (("1" (TYPEPRED (CD)) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (GROUND) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACE -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (INST -1 " G" "cdr(cd)" "j") (("1" (LEMMA " cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|circuit_first_last_TCC1| 0 (|circuit_first_last_TCC1-1| |nil| 3656932865 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (> CONST-DECL "bool" |reals| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|circuit_first_last| SUBTYPE "(number_fields.-)(list_props[vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length, 1)" "below[nth[vert_circ(G)](cd, i)`c`length]"))) (|circuit_first_last| 0 (|circuit_first_last-3| "" 3744401699 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                      n=i implies nth(cd, i)`c`seq(0) = nth(cd, i)`c`seq(nth(cd, i)`c`length - 1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP :PREDS? T) (("1" (REPLACE -5 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth " 1) (("2" (INST?) (("1" (LEMMA "cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|cdr_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK) (|circuit_first_last-2| "" 3744386425 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                      n=i implies nth(cd, i)`c`seq(0) = nth(cd, i)`c`seq(nth(cd, i)`c`length - 1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP :PREDS? T) (("1" (REPLACE -5 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth " 1) (("2" (INST?) (("1" (LEMMA "cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|circuit_first_last-1| |nil| 3656932866 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
               n=i implies nth(cd, i)`c`seq(0) = nth(cd, i)`c`seq(nth(cd, i)`c`length - 1)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (SKEEP :PREDS? T) (("1" (REPLACE -5 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "every") (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REPLACES -1) (("2" (EXPAND "gen_seq1") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (EXPAND "finseq_appl") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth " 1) (("2" (INST?) (("1" (LEMMA "cdr_decomp") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|shrink_repeat| 0 (|shrink_repeat-4| "" 3884658694 ("" (SKEEP) (("" (SKOLETIN) (("1" (FLATTEN) (("1" (SKEEP) (("1" (CASE "j<length(cd)") (("1" (EXPAND "finseq_appl") (("1" (NAME "vc_ij" "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)") (("1" (NAME "scd_fr" "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF") (("1" (NAME "scd_ba" "cd^(1+j, length(cd)-1)") (("1" (NAME "scd" "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)") (("1" (CASE "length[vert_circ(G)](scd) = i+length(cd) -j") (("1" (CASE "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
                                       walk?(G,
                                                 list2finseq[vert(G)]
                                                     (map[vert_circ(G), vert(G)]
                                                          (LAMBDA (vc: vert_circ(G)): vc`v)
                                                          (append[vert_circ(G)](scd_fr, (: vc_ij :))
                                                                )))") (("1" (CASE "length[vert_circ(G)](scd) >0 AND walk?(G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                                                               (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))") (("1" (INST + "scd") (("1" (REPLACE -11 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (TYPEPRED ("W")) (("1" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -9) (("1" (SIMPLIFY -9) (("1" (EXPAND "^" -9) (("1" (REPLACE -9 -8 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (LIFT-IF -10) (("1" (SPLIT -10) (("1" (FLATTEN) (("1" (REPLACE -2 -11 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "decomp_to_walk" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vc_ij") (("1" (CASE "cd = cd^(i,j)") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST?) (("2" (INST - "(i,j)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 -10 :DIR RL) (("2" (REPLACE -10 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND " nth" 3) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "min") (("2" (LEMMA " walk_index_ub") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 3 2) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "vc_ij") (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACE -1 3) (("2" (EXPAND "^" 3) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (HIDE (-2 -3 -4 -5 -11 -12 -13)) (("1" (LEMMA "walk_index_sincr") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "walk_index_last") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (MOVE-TERMS -1 R 1) (("2" (REPLACE -1 2 :DIR RL) (("2" (SIMPLIFY 2) (("2" (REPLACE -7 2) (("2" (HIDE (-13 -14 -15 -17)) (("2" (HIDE (-11 -12)) (("2" (HIDE -5) (("2" (HIDE (-2 -4)) (("2" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("2" (REPLACES -1) (("2" (CASE "cd = cd^(0, length(cd)-1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (SKEEP) (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_index" 1 1) (("2" (EXPAND "nth" 1) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o" 1) (("2" (EXPAND "^" 1 1) (("2" (LEMMA "walk_index_ub") (("2" (INST -1 "G" "cd" "i-1") (("2" (ASSERT) (("2" (EXPAND "min" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "decomp_to_walk" 2 2) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "^" 2) (("2" (EXPAND "min" 2) (("2" (EXPAND "vc_ij") (("2" (HIDE (-2 -3 -9 -10 -11)) (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("2" (MOVE-TERMS -1 R 2) (("2" (SIMPLIFY -1) (("2" (REPLACES -1 2) (("2" (EXPAND "^" 2) (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (LEMMA "walk_index_sincr") (("2" (INST -1 "G" "cd" "i-1" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "length(cd ^ (0, i - 1)) - 1" "(0, i-1)") (("1" (ASSERT) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vc_ij") (("1" (HIDE (-8 -9 -10 -11 -12)) (("1" (TYPEPRED ("cd")) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (EXPAND "list2finseq") (("1" (EXPAND "finseq_appl") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "i-1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?" 1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "map") (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "caret_decomp") (("3" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LIFT-IF -11) (("1" (SPLIT -11) (("1" (FLATTEN) (("1" (REPLACE -2 2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "append_null_left[vert_circ(G)]") (("1" (INST -1 "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -2 2) (("1" (REPLACE -13 2 :DIR RL) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "j " "length(cd) -1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "walk_index_ub") (("2" (INST - "G" "cd" "length(cd)-1") (("1" (EXPAND "min" 3) (("1" (ASSERT) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (REPLACE -1 3) (("1" (SIMPLIFY 3) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACE -1) (("1" (REWRITE "subl_idemp" 3) (("1" (TYPEPRED "cd") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (MOVE-TERMS -1 R 1) (("1" (REPLACES -1 1) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACES -1 1) (("1" (REWRITE "subl_idemp" 1) (("1" (LEMMA "caret_o") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "append_commute") (("2" (INST - "G" "scd_fr" "(: vc_ij :)") (("1" (GROUND) (("1" (EXPAND "decomp_to_walk" -1 3) (("1" (EXPAND "length" -1) (("1" (EXPAND "length" -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -2 3 :DIR RL) (("1" (LEMMA "caret_o_caret") (("1" (EXPAND "vc_ij" -2 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 -3) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACES -1 -3) (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (HIDE (-2 -4)) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "i" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST - "G" "cd" "i" "i") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "walk_index_incr") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "j") (("1" (ASSERT) (("1" (REVEAL -9) (("1" (REPLACE -3 -1 :DIR RL) (("1" (REPLACE -1 3) (("1" (REPLACE -13 3 :DIR RL) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 -2) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REWRITE "subl_idemp" -1) (("1" (REPLACES -1 -2) (("1" (REPLACES -1 3) (("1" (LEMMA "caret_o") (("1" (INST -1 " walk_index(G, cd, j) - 1" "decomp_to_walk(G, cd)") (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd) -1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_pos") (("2" (INST?) (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "i-1" "(0, i-1)") (("2" (ASSERT) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST - "cd" "(0, i-1)") (("2" (ASSERT) (("2" (REPLACE -1 1) (("2" (REPLACES -2 1 :DIR RL) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vc_ij" 1) (("2" (TYPEPRED ("cd")) (("2" (HIDE (-1 -2)) (("2" (EXPAND "walk?" -1) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (INST - "i-1") (("2" (ASSERT) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1 1) (("2" (EXPAND "map" 1 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1 1) (("2" (EXPAND "length" 1 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "caret_decomp") (("3" (REPLACE -2 :DIR RL) (("3" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (LEMMA "nth_append[vert_circ(G)]") (("2" (INST?) (("1" (EXPAND "length" -1 3) (("1" (EXPAND "length" -1 2) (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij" 1) (("1" (REPLACE -10 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1+j, length(cd)-1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (TYPEPRED ("cd")) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "j") (("1" (EXPAND "list2finseq" -1) (("1" (EXPAND "finseq_appl" -1) (("1" (REPLACE -17 -16) (("1" (EXPAND "drop_circuits" -16) (("1" (EXPAND "list2finseq" -16) (("1" (REPLACE -16 -1 :DIR RL) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -8 :DIR RL) (("2" (LEMMA "caret_decomp") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -5) (("1" (SIMPLIFY -5) (("1" (EXPAND "^" -5) (("1" (REPLACE -5 -4 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "append_decomp") (("2" (INST - "G " "append[vert_circ(G)](scd_fr, (: vc_ij :))" " scd_ba") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (REPLACE -2 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1 + j, length(cd) - 1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -8 -7) (("1" (EXPAND "drop_circuits" -7) (("1" (EXPAND "list2finseq" -7) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -6 1) (("1" (TYPEPRED ("cd")) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "j") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "caret_decomp") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "list2finseq") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (GROUND) (("1" (EXPAND "nth") (("1" (GROUND) (("1" (TYPEPRED "vc_ij`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND "walk?") (("2" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("i!1")) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (SIMPLIFY -2) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "scd_fr" "(: vc_ij :)" "_") (("1" (INST-CP -1 "n") (("1" (INST - "1+n") (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -6 1 :DIR RL) (("1" (LEMMA "caret_decomp") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -2 "n") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "n = length(scd_fr)-1") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACE -1 2 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "vc_ij") (("1" (REPLACE -6 2 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST -1 "cd" "n" "(0, i-1)") (("1" (ASSERT) (("1" (REPLACE -7 :DIR RL) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -2 :DIR RL) (("1" (REPLACE -1) (("1" (MOVE-TERMS -2 L 1) (("1" (REPLACE -2) (("1" (HIDE (-3 -4)) (("1" (TYPEPRED ("cd")) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "i-1") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "length_append[vert_circ(G)]") (("2" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "length_append[vert_circ(G)]") (("1" (INST - "scd_fr" "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 1) (("1" (CASE "length[vert_circ(G)](scd_fr) = i") (("1" (REPLACE -1) (("1" (REPLACE -5 :DIR RL) (("1" (CASE "j=length(cd) -1") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "^") (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "caret_decomp") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("j")) (("2" (REPLACE -4) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|shrink_repeat-3| "" 3744391278 ("" (SKEEP) (("" (SKOLETIN) (("1" (FLATTEN) (("1" (SKEEP) (("1" (CASE "j<length(cd)") (("1" (EXPAND "finseq_appl") (("1" (NAME "vc_ij" "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)") (("1" (NAME "scd_fr" "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF") (("1" (NAME "scd_ba" "cd^(1+j, length(cd)-1)") (("1" (NAME "scd" "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)") (("1" (CASE "length[vert_circ(G)](scd) = i+length(cd) -j") (("1" (CASE "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
                                       walk?(G,
                                                 list2finseq[vert(G)]
                                                     (map[vert_circ(G), vert(G)]
                                                          (LAMBDA (vc: vert_circ(G)): vc`v)
                                                          (append[vert_circ(G)](scd_fr, (: vc_ij :))
                                                                )))") (("1" (CASE "length[vert_circ(G)](scd) >0 AND walk?(G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                                                               (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))") (("1" (INST + "scd") (("1" (REPLACE -11 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (TYPEPRED (W)) (("1" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -9) (("1" (SIMPLIFY -9) (("1" (EXPAND "^" -9) (("1" (REPLACE -9 -8 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (LIFT-IF -10) (("1" (SPLIT -10) (("1" (FLATTEN) (("1" (REPLACE -2 -11 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "decomp_to_walk" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vc_ij") (("1" (CASE "cd = cd^(i,j)") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST?) (("2" (INST - "(i,j)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 -10 :DIR RL) (("2" (REPLACE -10 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND " nth" 3) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "min") (("2" (LEMMA " walk_index_ub") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 3 2) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "vc_ij") (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACE -1 3) (("2" (EXPAND "^" 3) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (HIDE (-2 -3 -4 -5 -11 -12 -13)) (("1" (LEMMA "walk_index_sincr") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "walk_index_last") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (MOVE-TERMS -1 R 1) (("2" (REPLACE -1 2 :DIR RL) (("2" (SIMPLIFY 2) (("2" (REPLACE -7 2) (("2" (HIDE (-13 -14 -15 -17)) (("2" (HIDE (-11 -12)) (("2" (HIDE -5) (("2" (HIDE (-2 -4)) (("2" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("2" (REPLACES -1) (("2" (CASE "cd = cd^(0, length(cd)-1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (SKEEP) (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_index" 1 1) (("2" (EXPAND "nth" 1) (("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o" 1) (("2" (EXPAND "^" 1 1) (("2" (LEMMA "walk_index_ub") (("2" (INST -1 "G" "cd" "i-1") (("2" (ASSERT) (("2" (EXPAND "min" 1) (("2" (LIFT-IF 1) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "decomp_to_walk" 2 2) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "^" 2) (("2" (EXPAND "min" 2) (("2" (EXPAND "vc_ij") (("2" (HIDE (-2 -3 -9 -10 -11)) (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("2" (MOVE-TERMS -1 R 2) (("2" (SIMPLIFY -1) (("2" (REPLACES -1 2) (("2" (EXPAND "^" 2) (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (LEMMA "walk_index_sincr") (("2" (INST -1 "G" "cd" "i-1" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (GRIND) NIL NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "length(cd ^ (0, i - 1)) - 1" "(0, i-1)") (("1" (ASSERT) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vc_ij") (("1" (HIDE (-8 -9 -10 -11 -12)) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (EXPAND "list2finseq") (("1" (EXPAND "finseq_appl") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "i-1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?" 1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "map") (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "caret_decomp") (("3" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LIFT-IF -11) (("1" (SPLIT -11) (("1" (FLATTEN) (("1" (REPLACE -2 2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "append_null_left[vert_circ(G)]") (("1" (INST -1 "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -2 2) (("1" (REPLACE -13 2 :DIR RL) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "j " "length(cd) -1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "walk_index_ub") (("2" (INST - "G" "cd" "length(cd)-1") (("1" (EXPAND "min" 3) (("1" (ASSERT) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (REPLACE -1 3) (("1" (SIMPLIFY 3) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACE -1) (("1" (REWRITE "subl_idemp" 3) (("1" (TYPEPRED "cd") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (MOVE-TERMS -1 R 1) (("1" (REPLACES -1 1) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACES -1 1) (("1" (REWRITE "subl_idemp" 1) (("1" (LEMMA "caret_o") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "append_commute") (("2" (INST - "G" "scd_fr" "(: vc_ij :)") (("1" (GROUND) (("1" (EXPAND "decomp_to_walk" -1 3) (("1" (EXPAND "length" -1) (("1" (EXPAND "length" -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -2 3 :DIR RL) (("1" (LEMMA "caret_o_caret") (("1" (EXPAND "vc_ij" -2 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 -3) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACES -1 -3) (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (HIDE (-2 -4)) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "i" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST - "G" "cd" "i" "i") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "walk_index_incr") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "j") (("1" (ASSERT) (("1" (REVEAL -9) (("1" (REPLACE -3 -1 :DIR RL) (("1" (REPLACE -1 3) (("1" (REPLACE -13 3 :DIR RL) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 -2) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REWRITE "subl_idemp" -1) (("1" (REPLACES -1 -2) (("1" (REPLACES -1 3) (("1" (LEMMA "caret_o") (("1" (INST -1 " walk_index(G, cd, j) - 1" "decomp_to_walk(G, cd)") (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd) -1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_pos") (("2" (INST?) (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "i-1" "(0, i-1)") (("2" (ASSERT) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST - "cd" "(0, i-1)") (("2" (ASSERT) (("2" (REPLACE -1 1) (("2" (REPLACES -2 1 :DIR RL) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vc_ij" 1) (("2" (TYPEPRED (CD)) (("2" (HIDE (-1 -2)) (("2" (EXPAND "walk?" -1) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (INST - "i-1") (("2" (ASSERT) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1 1) (("2" (EXPAND "map" 1 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1 1) (("2" (EXPAND "length" 1 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (LEMMA "caret_decomp") (("3" (REPLACE -2 :DIR RL) (("3" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (LEMMA "nth_append[vert_circ(G)]") (("2" (INST?) (("1" (EXPAND "length" -1 3) (("1" (EXPAND "length" -1 2) (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij" 1) (("1" (REPLACE -10 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1+j, length(cd)-1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "j") (("1" (EXPAND "list2finseq" -1) (("1" (EXPAND "finseq_appl" -1) (("1" (REPLACE -17 -16) (("1" (EXPAND "drop_circuits" -16) (("1" (EXPAND "list2finseq" -16) (("1" (REPLACE -16 -1 :DIR RL) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -8 :DIR RL) (("2" (LEMMA "caret_decomp") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -5) (("1" (SIMPLIFY -5) (("1" (EXPAND "^" -5) (("1" (REPLACE -5 -4 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "append_decomp") (("2" (INST - "G " "append[vert_circ(G)](scd_fr, (: vc_ij :))" " scd_ba") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (REPLACE -2 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1 + j, length(cd) - 1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -8 -7) (("1" (EXPAND "drop_circuits" -7) (("1" (EXPAND "list2finseq" -7) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -6 1) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "j") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 :DIR RL) (("2" (LEMMA "caret_decomp") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "list2finseq") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (GROUND) (("1" (EXPAND "nth") (("1" (GROUND) (("1" (TYPEPRED "vc_ij`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND "walk?") (("2" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (I!1)) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (SIMPLIFY -2) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "scd_fr" "(: vc_ij :)" "_") (("1" (INST-CP -1 "n") (("1" (INST - "1+n") (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -6 1 :DIR RL) (("1" (LEMMA "caret_decomp") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -2 "n") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "n = length(scd_fr)-1") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACE -1 2 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "vc_ij") (("1" (REPLACE -6 2 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST -1 "cd" "n" "(0, i-1)") (("1" (ASSERT) (("1" (REPLACE -7 :DIR RL) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -2 :DIR RL) (("1" (REPLACE -1) (("1" (MOVE-TERMS -2 L 1) (("1" (REPLACE -2) (("1" (HIDE (-3 -4)) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "i-1") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "length_append[vert_circ(G)]") (("2" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "length_append[vert_circ(G)]") (("1" (INST - "scd_fr" "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 1) (("1" (CASE "length[vert_circ(G)](scd_fr) = i") (("1" (REPLACE -1) (("1" (REPLACE -5 :DIR RL) (("1" (CASE "j=length(cd) -1") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "^") (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "caret_decomp") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (J)) (("2" (REPLACE -4) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|id| CONST-DECL "(bijective?[T, T])" |identity| NIL) (|bijective?| CONST-DECL "bool" |functions| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|append_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|scd| SKOLEM-CONST-DECL "list[vert_circ(G)]" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|i| SKOLEM-CONST-DECL "below(length(ww))" |circuit_decomp_| NIL) (|ww| SKOLEM-CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|j| SKOLEM-CONST-DECL "below(length(ww))" |circuit_decomp_| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (|walk_index_ub| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_plus_real_is_real| APPLICATION-JUDGEMENT "real" |reals| NIL) (|walk_index_last| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_sincr| FORMULA-DECL NIL |circuit_decomp_| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|nat_min| APPLICATION-JUDGEMENT "{k: nat | k <= i AND k <= j}" |real_defs| NIL) (|caret_commute| FORMULA-DECL NIL |circuit_decomp_| NIL) (|caret_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|append_commute| FORMULA-DECL NIL |circuit_decomp_| NIL) (|append_null_left| FORMULA-DECL NIL |more_list_props| |structures|) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|caret_nth| FORMULA-DECL NIL |more_list_props| |structures|) (|caret_length| FORMULA-DECL NIL |more_list_props| |structures|) (|list_extensionality| FORMULA-DECL NIL |more_list_props| |structures|) (|vc_ij| SKOLEM-CONST-DECL "[# c:
     {ww: Walk(G) |
        first(ww) = first(drop_circuits(G, cd ^ (i, j))) AND
         last(ww) = last(drop_circuits(G, cd ^ (i, j)))},
   v: vert[T, ConcreteDigraph, vert, edges, size, make](G) #]" |circuit_decomp_| NIL) (|append_null_right| FORMULA-DECL NIL |more_list_props| |structures|) (|walk_index_pos| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_incr| FORMULA-DECL NIL |circuit_decomp_| NIL) (|caret_o_caret| FORMULA-DECL NIL |seq_extras| |structures|) (|caret_o| FORMULA-DECL NIL |seq_extras| |structures|) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|subl_idemp| FORMULA-DECL NIL |more_list_props| |structures|) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|scd_ba| SKOLEM-CONST-DECL "list[vert_circ(G)]" |circuit_decomp_| NIL) (|scd_fr| SKOLEM-CONST-DECL "list[vert_circ(G)]" |circuit_decomp_| NIL) (|i!1| SKOLEM-CONST-DECL "below(length
        (list2finseq[vert[T, ConcreteDigraph, vert, edges, size, make](G)]
             (map[vert_circ(G),
                  vert[T, ConcreteDigraph, vert, edges, size, make](G)]
                  (LAMBDA (vc: vert_circ(G)): vc`v)
                  (append[vert_circ(G)](scd_fr, (: vc_ij :))))))" |circuit_decomp_| NIL) (|n| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (|nth| DEF-DECL "T" |list_props| NIL)) SHOSTAK) (|shrink_repeat-2| |nil| 3659863649 ("" (SKEEP) (("" (SKOLETIN) (("1" (FLATTEN) (("1" (SKEEP) (("1" (CASE "j<length(cd)") (("1" (EXPAND "finseq_appl") (("1" (NAME "vc_ij" "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)") (("1" (NAME "scd_fr" "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF") (("1" (NAME "scd_ba" "cd^(1+j, length(cd)-1)") (("1" (NAME "scd" "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)") (("1" (CASE "length[vert_circ(G)](scd) = i+length(cd) -j") (("1" (CASE "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
                    walk?(G,
                              list2finseq[vert(G)]
                                  (map[vert_circ(G), vert(G)]
                                       (LAMBDA (vc: vert_circ(G)): vc`v)
                                       (append[vert_circ(G)](scd_fr, (: vc_ij :))
                                             )))") (("1" (CASE "length[vert_circ(G)](scd) >0 AND walk?(G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                                          (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))") (("1" (INST + "scd") (("1" (REPLACE -11 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (TYPEPRED (W)) (("1" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -9) (("1" (SIMPLIFY -9) (("1" (EXPAND "^" -9) (("1" (REPLACE -9 -8 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (LIFT-IF -10) (("1" (SPLIT -10) (("1" (FLATTEN) (("1" (REPLACE -2 -11 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "decomp_to_walk" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vc_ij") (("1" (CASE "cd = cd^(i,j)") (("1" (ASSERT) NIL) ("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL))))) ("2" (SKEEP) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST?) (("2" (INST - "(i,j)") (("2" (ASSERT) NIL))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (REPLACE -1 -10 :DIR RL) (("2" (REPLACE -10 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (ASSERT) NIL))))))))))) ("2" (FLATTEN) (("2" (EXPAND " nth" 3) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "min") (("2" (LEMMA " walk_index_ub") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 3 2) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "vc_ij") (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACE -1 3) (("2" (EXPAND "^" 3) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (HIDE (-2 -3 -4 -5 -11 -12 -13)) (("1" (LEMMA "walk_index_sincr") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL))))))))))))))))))) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL))))))))) ("2" (FLATTEN) (("2" (LEMMA "walk_index_last") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (MOVE-TERMS -1 R 1) (("2" (REPLACE -1 2 :DIR RL) (("2" (SIMPLIFY 2) (("2" (REPLACE -7 2) (("2" (HIDE (-13 -14 -15 -17)) (("2" (HIDE (-11 -12)) (("2" (HIDE -5) (("2" (HIDE (-2 -4)) (("2" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("2" (REPLACES -1) (("2" (CASE "cd = cd^(0, length(cd)-1)") (("1" (ASSERT) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (SKEEP) (("2" (INST?) (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "walk_index" 1 1) (("2" (EXPAND "nth" 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o" 1) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "i-1") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL))))) ("2" (FLATTEN) (("2" (EXPAND "decomp_to_walk" 2 2) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "^" 2) (("2" (EXPAND "min" 2) (("2" (EXPAND "vc_ij") (("2" (HIDE (-2 -3 -9 -10 -11)) (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("2" (MOVE-TERMS -1 R 2) (("2" (SIMPLIFY -1) (("2" (REPLACES -1 2) (("2" (EXPAND "^" 2) (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (LEMMA "walk_index_sincr") (("2" (INST -1 "G" "cd" "i-1" "j") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))) ("7" (LEMMA "walk_index_bound") (("7" (INST?) (("7" (INST - "0") (("7" (ASSERT) NIL))))))) ("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL))))))))))))))))))))) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "length(cd ^ (0, i - 1)) - 1" "(0, i-1)") (("1" (ASSERT) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vc_ij") (("1" (HIDE (-8 -9 -10 -11 -12)) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (EXPAND "list2finseq") (("1" (EXPAND "finseq_appl") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "i-1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("2" (ASSERT) NIL))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))))))))) ("2" (EXPAND "walk?" 1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "map") (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))) ("7" (LEMMA "caret_decomp") (("7" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))) ("8" (ASSERT) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL))))))))) ("9" (ASSERT) NIL))))))))))))))))))))))))) ("2" (REPLACE -7 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LIFT-IF -11) (("1" (SPLIT -11) (("1" (FLATTEN) (("1" (REPLACE -2 2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "append_null_left[vert_circ(G)]") (("1" (INST -1 "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -2 2) (("1" (REPLACE -13 2 :DIR RL) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "j " "length(cd) -1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))) ("2" (FLATTEN) (("2" (LEMMA "walk_index_ub") (("2" (INST - "G" "cd" "length(cd)-1") (("1" (EXPAND "min" 3) (("1" (ASSERT) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (REPLACE -1 3) (("1" (SIMPLIFY 3) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACE -1) (("1" (REWRITE "subl_idemp" 3) (("1" (TYPEPRED "cd") (("1" (EXPAND "length") (("1" (ASSERT) NIL))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (MOVE-TERMS -1 R 1) (("1" (REPLACES -1 1) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACES -1 1) (("1" (REWRITE "subl_idemp" 1) (("1" (LEMMA "caret_o") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))) ("2" (EXPAND "length") (("2" (ASSERT) NIL))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))))))))) ("2" (FLATTEN) (("2" (LEMMA "append_commute") (("2" (INST - "G" "scd_fr" "(: vc_ij :)") (("1" (GROUND) (("1" (EXPAND "decomp_to_walk" -1 3) (("1" (EXPAND "length" -1) (("1" (EXPAND "length" -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -2 3 :DIR RL) (("1" (LEMMA "caret_o_caret") (("1" (EXPAND "vc_ij" -2 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 -3) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACES -1 -3) (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (HIDE (-2 -4)) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "i" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST - "G" "cd" "i" "i") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "walk_index_incr") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "j") (("1" (ASSERT) (("1" (REVEAL -9) (("1" (REPLACE -3 -1 :DIR RL) (("1" (REPLACE -1 3) (("1" (REPLACE -13 3 :DIR RL) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 -2) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REWRITE "subl_idemp" -1) (("1" (REPLACES -1 -2) (("1" (REPLACES -1 3) (("1" (LEMMA "caret_o") (("1" (INST -1 " walk_index(G, cd, j) - 1" "decomp_to_walk(G, cd)") (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd) -1") (("1" (ASSERT) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))) ("2" (EXPAND "length") (("2" (ASSERT) NIL))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (LEMMA "walk_index_pos") (("2" (INST?) (("2" (INST - "j") (("2" (ASSERT) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "i-1" "(0, i-1)") (("2" (ASSERT) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST - "cd" "(0, i-1)") (("2" (ASSERT) (("2" (REPLACE -1 1) (("2" (REPLACES -2 1 :DIR RL) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vc_ij" 1) (("2" (TYPEPRED (CD)) (("2" (HIDE (-1 -2)) (("2" (EXPAND "walk?" -1) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (INST - "i-1") (("2" (ASSERT) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (EXPAND "map" 1 1) (("2" (EXPAND "map" 1 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1 1) (("2" (EXPAND "length" 1 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))) ("8" (REPLACE -1 1 :DIR RL) (("8" (LEMMA "caret_decomp") (("8" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))))))))) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (LEMMA "nth_append[vert_circ(G)]") (("2" (INST?) (("1" (EXPAND "length" -1 3) (("1" (EXPAND "length" -1 2) (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij" 1) (("1" (REPLACE -10 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1+j, length(cd)-1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "j") (("1" (EXPAND "list2finseq" -1) (("1" (EXPAND "finseq_appl" -1) (("1" (REPLACE -17 -16) (("1" (EXPAND "drop_circuits" -16) (("1" (EXPAND "list2finseq" -16) (("1" (REPLACE -16 -1 :DIR RL) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL))))))))))))))))))))))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "caret_decomp") (("2" (INST - "G" "cd" "1 + j" "length(cd) - 1") (("1" (ASSERT) (("1" (REPLACE -9 -1) (("1" (PROPAX) NIL))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (ASSERT) (("2" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -5) (("1" (SIMPLIFY -5) (("1" (EXPAND "^" -5) (("1" (REPLACE -5 -4 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (ASSERT) NIL))))))))))) ("2" (LEMMA "append_decomp") (("2" (INST - "G " "append[vert_circ(G)](scd_fr, (: vc_ij :))" " scd_ba") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (REPLACE -2 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1 + j, length(cd) - 1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -8 -7) (("1" (EXPAND "drop_circuits" -7) (("1" (EXPAND "list2finseq" -7) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -6 1) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "j") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))))))))))) ("2" (LEMMA "caret_decomp") (("2" (INST?) (("1" (ASSERT) (("1" (REPLACE -5) (("1" (PROPAX) NIL))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))))))))))) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL))))) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))))) ("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "list2finseq") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (GROUND) (("1" (EXPAND "nth") (("1" (GROUND) (("1" (TYPEPRED "vc_ij`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL))))))))))))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND "walk?") (("2" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL))))))) ("2" (TYPEPRED (I!1)) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))))))))))))) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (SIMPLIFY -2) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "scd_fr" "(: vc_ij :)" "_") (("1" (INST-CP -1 "n") (("1" (INST - "1+n") (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -6 1 :DIR RL) (("1" (LEMMA "caret_decomp") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -2 "n") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (CASE "n = length(scd_fr)-1") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACE -1 2 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "vc_ij") (("1" (REPLACE -6 2 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST -1 "cd" "n" "(0, i-1)") (("1" (ASSERT) (("1" (REPLACE -7 :DIR RL) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -2 :DIR RL) (("1" (REPLACE -1) (("1" (MOVE-TERMS -2 L 1) (("1" (REPLACE -2) (("1" (HIDE (-3 -4)) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "i-1") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ("2" (ASSERT) NIL))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))))) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))))))))) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))) ("4" (SKEEP) (("4" (ASSERT) NIL))) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL))))))))) ("6" (SKEEP) (("6" (ASSERT) NIL))) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL))))))))))))))))))))))))))))))))))))))) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL))))) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (FLATTEN) (("5" (SKEEP) (("5" (ASSERT) NIL))))) ("6" (FLATTEN) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))) ("7" (FLATTEN) (("7" (SKEEP) (("7" (ASSERT) NIL))))) ("8" (FLATTEN) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL))))))))))) ("2" (HIDE 2) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "length_append[vert_circ(G)]") (("2" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "length_append[vert_circ(G)]") (("1" (INST - "scd_fr" "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 1) (("1" (CASE "length[vert_circ(G)](scd_fr) = i") (("1" (REPLACE -1) (("1" (REPLACE -5 :DIR RL) (("1" (CASE "j=length(cd) -1") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "^") (("1" (EXPAND "length") (("1" (PROPAX) NIL))))))))) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL))) ("2" (ASSERT) NIL) ("3" (ASSERT) NIL))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))))))))))) ("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "length") (("1" (ASSERT) NIL))))))) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (ASSERT) NIL) ("2" (ASSERT) NIL))))))))))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))))) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))) ("3" (SKEEP) (("3" (ASSERT) NIL))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (ASSERT) NIL))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))))))))))))) ("2" (ASSERT) (("2" (EXPAND "every") (("2" (PROPAX) NIL))))) ("3" (SKEEP) (("3" (EXPAND "drop_circuits") (("3" (EXPAND "list2finseq") (("3" (HIDE -1) (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("3" (LEMMA "caret_length[vert_circ(G)]") (("3" (INST?) (("3" (ASSERT) NIL))))))))))))))) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL))))))))) ("5" (SKEEP) (("5" (EXPAND "drop_circuits") (("5" (EXPAND "list2finseq") (("5" (REWRITE "map_length[vert_circ(G), vert(G)]") (("5" (LEMMA "caret_length[vert_circ(G)]") (("5" (INST?) (("5" (ASSERT) NIL))))))))))))) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL))))))) ("7" (CASE "circuit_at?(G, vc_ij`c, vc_ij`v)") (("1" (ASSERT) NIL) ("2" (HIDE 2) (("2" (EXPAND "circuit_at?") (("2" (EXPAND "finseq_appl") (("2" (GROUND) (("1" (EXPAND "vc_ij") (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "circuit?") (("1" (EXPAND "pre_circuit?") (("1" (HIDE 2) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "^" 1) (("1" (CASE "walk_index(G, cd, i) - nth(cd, i)`c`length <=
                                walk_index(G, cd, j)-1  AND walk_index(G, cd, i) - nth(cd, i)`c`length <
                                 decomp_to_walk(G, cd)`length") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE "min(nth(cd, i)`c`length + walk_index(G, cd, j) -
                                   walk_index(G, cd, i),
                                  nth(cd, i)`c`length + decomp_to_walk(G, cd)`length -
                                   walk_index(G, cd, i)) = nth(cd, i)`c`length + walk_index(G, cd, j) -
                                   walk_index(G, cd, i)") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i" "j") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (HIDE (-1 -2)) (("1" (LEMMA "decomp_walk_index") (("1" (INST -1 "G" "cd" "_" "_") (("1" (INST-CP -1 "i" "0") (("1" (REPLACES -2 :DIR RL) (("1" (INST -1 " j" "nth(cd, j)`c`length -1") (("1" (SIMPLIFY -1) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "circuit_first_last") (("1" (INST - "G" "cd" "j") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LEMMA "circuit_vertex") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "circuit_vertex") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -6) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL))))))))))))))))))))))))))))))))))))))))) ("2" (ASSERT) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))))))))))))))))))))))))))) ("2" (HIDE 2) (("2" (LEMMA " walk_index_ub") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "min") (("2" (PROPAX) NIL))))))))))))))))))) ("2" (HIDE 2) (("2" (LEMMA "walk_index_sincr") (("2" (INST?) (("2" (INST - "j") (("2" (ASSERT) (("2" (GROUND) (("2" (LEMMA "walk_index_ub") (("2" (INST?) (("2" (GROUND) NIL))))))))))))))))) ("3" (HIDE 2) (("3" (FLATTEN) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))))))))))))))))))))))))))))) ("2" (EXPAND "vc_ij") (("2" (EXPAND "decomp_to_walk" 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "^" 1) (("1" (TYPEPRED (CD)) (("1" (LEMMA " circuit_vertex") (("1" (INST?) NIL))))))) ("2" (EXPAND "o ") (("2" (EXPAND "^" 2) (("2" (LEMMA " circuit_vertex") (("2" (INST?) NIL))))))))))))))))))))))))))))))) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL))))))))) ("3" (FLATTEN) (("3" (ASSERT) NIL))))) ("2" (ASSERT) NIL) ("3" (LEMMA "caret_decomp") (("3" (INST?) (("3" (ASSERT) NIL))))))))) ("2" (TYPEPRED (J)) (("2" (REPLACE -4) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL))))))))) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL))))))))))))) ("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL)))))))))))) NIL) NIL NIL) (|shrink_repeat-1| |nil| 3656859422 ("" (SKEEP) (("" (SKOLETIN) (("1" (FLATTEN) (("1" (SKEEP) (("1" (CASE "j<length(cd)") (("1" (EXPAND "finseq_appl") (("1" (NAME "vc_ij" "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)") (("1" (NAME "scd_fr" "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF") (("1" (NAME "scd_ba" "cd^(1+j, length(cd)-1)") (("1" (NAME "scd" "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)") (("1" (CASE "length[vert_circ(G)](scd) = i+length(cd) -j") (("1" (CASE "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
 walk?[T](G,
           list2finseq[vert(G)]
               (map[vert_circ(G), vert(G)]
                    (LAMBDA (vc: vert_circ(G)): vc`v)
                    (append[vert_circ(G)](scd_fr, (: vc_ij :))
                          )))") (("1" (CASE "length[vert_circ(G)](scd) >0 AND walk?[T](G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                     (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))") (("1" (INST + "scd") (("1" (REPLACE -11 1) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (TYPEPRED (W)) (("1" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -9) (("1" (SIMPLIFY -9) (("1" (EXPAND "^" -9) (("1" (REPLACE -9 -8 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (LIFT-IF -10) (("1" (SPLIT -10) (("1" (FLATTEN) (("1" (REPLACE -2 -11 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (REPLACE -11 1 :DIR RL) (("1" (EXPAND "decomp_to_walk" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vc_ij") (("1" (CASE "cd = cd^(i,j)") (("1" (ASSERT) NIL NIL) ("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST?) (("2" (INST - "(i,j)") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 -10 :DIR RL) (("2" (REPLACE -10 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1 2) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (EXPAND "walk_index" -1 1) (("1" (EXPAND "nth" -1 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND " nth" 3) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "walk_index" 3 2) (("2" (EXPAND "min") (("2" (LEMMA " walk_index_ub") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (EXPAND "decomp_to_walk" 3 2) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "length" 3 1) (("2" (EXPAND "vc_ij") (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACE -1 3) (("2" (EXPAND "^" 3) (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (HIDE (-2 -3 -4 -5 -11 -12 -13)) (("1" (LEMMA "walk_index_sincr") (("1" (INST?) (("1" (INST -1 "j") (("1" (ASSERT) (("1" (GROUND) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "min") (("2" (LIFT-IF 3) (("2" (SPLIT 3) (("1" (ASSERT) (("1" (FLATTEN) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "walk_index_last") (("2" (INST - "G" "cd" "i-1") (("2" (ASSERT) (("2" (MOVE-TERMS -1 R 1) (("2" (REPLACE -1 2 :DIR RL) (("2" (SIMPLIFY 2) (("2" (REPLACE -7 2) (("2" (HIDE (-13 -14 -15 -17)) (("2" (HIDE (-11 -12)) (("2" (HIDE -5) (("2" (HIDE (-2 -4)) (("2" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("2" (REPLACES -1) (("2" (CASE "cd = cd^(0, length(cd)-1)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (LEMMA "list_extensionality[vert_circ(G)]") (("2" (INST?) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (GROUND) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (SKEEP) (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk_index" 1 1) (("2" (EXPAND "nth" 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o" 1) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "cd" "i-1") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "^" 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "decomp_to_walk" 2 2) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "length" 2 1) (("2" (EXPAND "^" 2) (("2" (EXPAND "min" 2) (("2" (EXPAND "vc_ij") (("2" (HIDE (-2 -3 -9 -10 -11)) (("2" (LEMMA "caret_commute") (("2" (INST -1 "G" "cd" "i" "j") (("2" (ASSERT) (("2" (REPLACES -1) (("2" (LEMMA "walk_index_last") (("2" (INST -1 "G" "cd" "i-1") (("2" (MOVE-TERMS -1 R 2) (("2" (SIMPLIFY -1) (("2" (REPLACES -1 2) (("2" (EXPAND "^" 2) (("2" (LIFT-IF 2) (("2" (GROUND) (("2" (LEMMA "walk_index_sincr") (("2" (INST -1 "G" "cd" "i-1" "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("7" (LEMMA "walk_index_bound") (("7" (INST?) (("7" (INST - "0") (("7" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "length(cd ^ (0, i - 1)) - 1" "(0, i-1)") (("1" (ASSERT) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -2 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vc_ij") (("1" (HIDE (-8 -9 -10 -11 -12)) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (EXPAND "list2finseq") (("1" (EXPAND "finseq_appl") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "i-1") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "walk?" 1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "map") (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("7" (LEMMA "caret_decomp") (("7" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (ASSERT) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("9" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -7 2 :DIR RL) (("2" (LEMMA "append_commute") (("2" (INST?) (("1" (GROUND) (("1" (REPLACE -1 2) (("1" (LIFT-IF -11) (("1" (SPLIT -11) (("1" (FLATTEN) (("1" (REPLACE -2 2 :DIR RL) (("1" (REPLACE -2 :DIR RL) (("1" (LEMMA "append_null_left[vert_circ(G)]") (("1" (INST -1 "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "decomp_to_walk" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "length" 2 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -2 2) (("1" (REPLACE -13 2 :DIR RL) (("1" (REPLACE -7 2) (("1" (DECOMPOSE-EQUALITY 2) (("1" (EXPAND "o" 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "^" 1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (EXPAND "min" 1) (("1" (EXPAND "^" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACE -1 1 :DIR RL) (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "j " "length(cd) -1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "walk_index_ub") (("2" (INST - "G" "cd" "length(cd)-1") (("1" (EXPAND "min" 3) (("1" (ASSERT) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (REPLACE -1 3) (("1" (SIMPLIFY 3) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACE -1) (("1" (REWRITE "subl_idemp" 3) (("1" (TYPEPRED "cd") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "walk_index" 1 1) (("1" (EXPAND "nth" 1 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (ASSERT) (("1" (MOVE-TERMS -1 R 1) (("1" (REPLACES -1 1) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REPLACES -1 1) (("1" (REWRITE "subl_idemp" 1) (("1" (LEMMA "caret_o") (("1" (INST?) (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd)-1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "append_commute") (("2" (INST - "G" "scd_fr" "(: vc_ij :)") (("1" (GROUND) (("1" (EXPAND "decomp_to_walk" -1 3) (("1" (EXPAND "length" -1) (("1" (EXPAND "length" -1) (("1" (REPLACE -2 -1 :DIR RL) (("1" (REPLACE -2 3 :DIR RL) (("1" (LEMMA "caret_o_caret") (("1" (EXPAND "vc_ij" -2 2) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1 -3) (("1" (EXPAND "walk_index" -2 1) (("1" (EXPAND "nth" -2 1) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "walk_index_last") (("1" (INST -1 "G" "cd" "i-1") (("1" (MOVE-TERMS -1 R 2) (("1" (SIMPLIFY -1) (("1" (REPLACES -1 -3) (("1" (INST?) (("1" (SIMPLIFY -1) (("1" (HIDE (-2 -4)) (("1" (LEMMA "walk_index_ub") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE -1) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "i" "j") (("1" (ASSERT) (("1" (LEMMA "walk_index_pos") (("1" (INST - "G" "cd" "i" "i") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "walk_index_incr") (("1" (INST?) (("1" (ASSERT) (("1" (INST - "j") (("1" (ASSERT) (("1" (REVEAL -9) (("1" (REPLACE -3 -1 :DIR RL) (("1" (REPLACE -1 3) (("1" (REPLACE -13 3 :DIR RL) (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (HIDE (-2 -3 -4)) (("1" (LEMMA "walk_index_last") (("1" (INST - "G" "cd" "j") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 -2) (("1" (TYPEPRED "walk_index(G, cd, length(cd) - 1)") (("1" (REWRITE "subl_idemp" -1) (("1" (REPLACES -1 -2) (("1" (REPLACES -1 3) (("1" (LEMMA "caret_o") (("1" (INST -1 " walk_index(G, cd, j) - 1" "decomp_to_walk(G, cd)") (("1" (ASSERT) (("1" (LEMMA "walk_index_sincr") (("1" (INST - "G" "cd" "j" "length(cd)-1") (("1" (ASSERT) (("1" (LEMMA "walk_index_ub") (("1" (INST - "G" "cd" "length(cd) -1") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "length") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_pos") (("2" (INST?) (("2" (INST - "j") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -1 1 :DIR RL) (("2" (LEMMA "caret_nth[vert_circ(G)]") (("2" (INST - "cd" "i-1" "(0, i-1)") (("2" (ASSERT) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST - "cd" "(0, i-1)") (("2" (ASSERT) (("2" (REPLACE -1 1) (("2" (REPLACES -2 1 :DIR RL) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vc_ij" 1) (("2" (TYPEPRED (CD)) (("2" (HIDE (-1 -2)) (("2" (EXPAND "walk?" -1) (("2" (FLATTEN) (("2" (HIDE -1) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -1) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("2" (INST - "i-1") (("2" (ASSERT) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("2" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map" 1 1) (("2" (EXPAND "map" 1 1) (("2" (EXPAND "list2finseq") (("2" (EXPAND "length" 1 1) (("2" (EXPAND "length" 1 1) (("2" (EXPAND "walk?" 1) (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vc_ij`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("8" (REPLACE -1 1 :DIR RL) (("8" (LEMMA "caret_decomp") (("8" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (LEMMA "nth_append[vert_circ(G)]") (("2" (INST?) (("1" (EXPAND "length" -1 3) (("1" (EXPAND "length" -1 2) (("1" (REPLACE -1) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij" 1) (("1" (REPLACE -10 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1+j, length(cd)-1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "j") (("1" (EXPAND "list2finseq" -1) (("1" (EXPAND "finseq_appl" -1) (("1" (REPLACE -17 -16) (("1" (EXPAND "drop_circuits" -16) (("1" (EXPAND "list2finseq" -16) (("1" (REPLACE -16 -1 :DIR RL) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -1) (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_decomp") (("2" (INST - "G" "cd" "1 + j" "length(cd) - 1") (("1" (ASSERT) (("1" (REPLACE -9 -1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (CASE "j=length(cd)-1") (("1" (REPLACE -1 -5) (("1" (SIMPLIFY -5) (("1" (EXPAND "^" -5) (("1" (REPLACE -5 -4 :DIR RL) (("1" (REWRITE "append_null_right[vert_circ(G)]") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "append_decomp") (("2" (INST - "G " "append[vert_circ(G)](scd_fr, (: vc_ij :))" " scd_ba") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (REPLACES -1 1) (("1" (REPLACE -2 1 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST - "cd" "1+j" "(1 + j, length(cd) - 1)") (("1" (ASSERT) (("1" (REPLACES -1 1 :DIR RL) (("1" (EXPAND "nth" 1 1) (("1" (EXPAND "vc_ij") (("1" (REPLACE -8 -7) (("1" (EXPAND "drop_circuits" -7) (("1" (EXPAND "list2finseq" -7) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -6 1) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?" -1) (("1" (FLATTEN) (("1" (HIDE -1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq" -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (INST -1 "j") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_decomp") (("2" (INST?) (("1" (ASSERT) (("1" (REPLACE -5) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -4) (("2" (SPLIT -4) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (REWRITE "append_null_left[vert_circ(G)]") (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "list2finseq") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (GROUND) (("1" (EXPAND "nth") (("1" (GROUND) (("1" (TYPEPRED "vc_ij`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) (("2" (HIDE 3) (("2" (EXPAND "walk?") (("2" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (TYPEPRED "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (I!1)) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (SIMPLIFY -2) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST -1 "scd_fr" "(: vc_ij :)" "_") (("1" (INST-CP -1 "n") (("1" (INST - "1+n") (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -2) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (REPLACE -6 1 :DIR RL) (("1" (LEMMA "caret_decomp") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -2 "n") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "n = length(scd_fr)-1") (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACE -1 2 :DIR RL) (("1" (SIMPLIFY 2) (("1" (EXPAND "nth" 2 2) (("1" (EXPAND "vc_ij") (("1" (REPLACE -6 2 :DIR RL) (("1" (LEMMA "caret_nth[vert_circ(G)]") (("1" (INST -1 "cd" "n" "(0, i-1)") (("1" (ASSERT) (("1" (REPLACE -7 :DIR RL) (("1" (LEMMA "caret_length[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -2 :DIR RL) (("1" (REPLACE -1) (("1" (MOVE-TERMS -2 L 1) (("1" (REPLACE -2) (("1" (HIDE (-3 -4)) (("1" (TYPEPRED (CD)) (("1" (HIDE (-1 -2)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (HIDE -1) (("1" (INST -1 "i-1") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (ASSERT) NIL NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (ASSERT) NIL NIL)) NIL) ("7" (SKEEP) (("7" (TYPEPRED "vc`v") (("7" (EXPAND "vert?") (("7" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("4" (FLATTEN) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (FLATTEN) (("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL)) NIL) ("6" (FLATTEN) (("6" (SKEEP) (("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (FLATTEN) (("7" (SKEEP) (("7" (ASSERT) NIL NIL)) NIL)) NIL) ("8" (FLATTEN) (("8" (SKEEP) (("8" (TYPEPRED "vc`v") (("8" (EXPAND "vert?") (("8" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "length_append[vert_circ(G)]") (("2" (INST?) (("1" (REPLACE -1) (("1" (LEMMA "length_append[vert_circ(G)]") (("1" (INST - "scd_fr" "(: vc_ij :)") (("1" (REPLACE -1) (("1" (EXPAND "length" 1 2) (("1" (EXPAND "length" 1 1) (("1" (CASE "length[vert_circ(G)](scd_fr) = i") (("1" (REPLACE -1) (("1" (REPLACE -5 :DIR RL) (("1" (CASE "j=length(cd) -1") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (EXPAND "^") (("1" (EXPAND "length") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (SPLIT -1) (("1" (REPLACE -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LIFT-IF -5) (("2" (SPLIT -5) (("1" (FLATTEN) (("1" (REPLACE -2 :DIR RL) (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (REPLACE -1 :DIR RL) (("2" (LEMMA "caret_length[vert_circ(G)]") (("2" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (ASSERT) NIL NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) (("2" (EXPAND "every") (("2" (PROPAX) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "drop_circuits") (("3" (EXPAND "list2finseq") (("3" (HIDE -1) (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("3" (LEMMA "caret_length[vert_circ(G)]") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (EXPAND "drop_circuits") (("5" (EXPAND "list2finseq") (("5" (REWRITE "map_length[vert_circ(G), vert(G)]") (("5" (LEMMA "caret_length[vert_circ(G)]") (("5" (INST?) (("5" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (TYPEPRED "vc`v") (("6" (EXPAND "vert?") (("6" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("7" (CASE "circuit_at?[T](G, vc_ij`c, vc_ij`v)") (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (EXPAND "circuit_at?") (("2" (EXPAND "finseq_appl") (("2" (GROUND) (("1" (EXPAND "vc_ij") (("1" (LEMMA "caret_commute") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (EXPAND "circuit?") (("1" (EXPAND "pre_circuit?") (("1" (HIDE 2) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "^" 1) (("1" (CASE "walk_index(G, cd, i) - nth(cd, i)`c`length <=
           walk_index(G, cd, j)-1  AND walk_index(G, cd, i) - nth(cd, i)`c`length <
            decomp_to_walk(G, cd)`length") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (CASE "min(nth(cd, i)`c`length + walk_index(G, cd, j) -
            walk_index(G, cd, i),
           nth(cd, i)`c`length + decomp_to_walk(G, cd)`length -
            walk_index(G, cd, i)) = nth(cd, i)`c`length + walk_index(G, cd, j) -
            walk_index(G, cd, i)") (("1" (REPLACE -1) (("1" (SIMPLIFY 1) (("1" (LEMMA "walk_index_sincr") (("1" (INST -1 "G" "cd" "i" "j") (("1" (ASSERT) (("1" (HIDE (-1 -2)) (("1" (HIDE (-1 -2)) (("1" (LEMMA "decomp_walk_index") (("1" (INST -1 "G" "cd" "_" "_") (("1" (INST-CP -1 "i" "0") (("1" (REPLACES -2 :DIR RL) (("1" (INST -1 " j" "nth(cd, j)`c`length -1") (("1" (SIMPLIFY -1) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "circuit_first_last") (("1" (INST - "G" "cd" "j") (("1" (REPLACE -1 :DIR RL) (("1" (HIDE -1) (("1" (LEMMA "circuit_vertex") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "circuit_vertex") (("1" (INST?) (("1" (REPLACES -1) (("1" (REPLACES -6) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA " walk_index_ub") (("2" (INST?) (("2" (ASSERT) (("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (LEMMA "walk_index_sincr") (("2" (INST?) (("2" (INST - "j") (("2" (ASSERT) (("2" (GROUND) (("2" (LEMMA "walk_index_ub") (("2" (INST?) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (FLATTEN) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "vc_ij") (("2" (EXPAND "decomp_to_walk" 1) (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "^" 1) (("1" (TYPEPRED (CD)) (("1" (LEMMA " circuit_vertex") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "o ") (("2" (EXPAND "^" 2) (("2" (LEMMA " circuit_vertex") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (FLATTEN) (("3" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (LEMMA "caret_decomp") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (J)) (("2" (REPLACE -4) (("2" (EXPAND "drop_circuits") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|circuit_decomp_prep| 0 (|circuit_decomp_prep-4| "" 3791887892 ("" (DEFTACTIC VERT (THEN (SKEEP) (SKEEP) (TYPEPRED "vc`v") (EXPAND "vert?"))) (("" (INDUCT "n" 1 "NAT_induction") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (NAME "p1" "drop_circuits(G, cd)") (("3" (CASE "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)") (("1" (INST 1 "cd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "shrink_repeat") (("2" (INST?) (("2" (INST - "w") (("1" (GROUND) (("1" (GROUND) (("1" (SKEEP) (("1" (INST -14 "length(scd)") (("1" (EXPAND "drop_circuits" -2) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (ASSERT) (("1" (INST -14 "G" "v" "w" "scd") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "k" "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (VERT) NIL NIL)) NIL)) NIL) ((|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|NAT_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|shrink_repeat| FORMULA-DECL NIL |circuit_decomp_| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) SHOSTAK) (|circuit_decomp_prep-3| "" 3744392011 ("" (DEFTACTIC VERT (THEN (SKEEP) (SKEEP) (TYPEPRED "vc`v") (EXPAND "vert?"))) (("" (INDUCT "n" 1 "NAT_induction") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (NAME "p1" "drop_circuits(G, cd)") (("3" (CASE "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)") (("1" (INST 1 "cd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "shrink_repeat") (("2" (INST?) (("2" (INST - "w") (("1" (GROUND) (("1" (GROUND) (("1" (SKEEP) (("1" (INST -14 "length(scd)") (("1" (EXPAND "drop_circuits" -2) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (ASSERT) (("1" (INST -14 "G" "v" "w" "scd") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST 1 "k" "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (VERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK) (|circuit_decomp_prep-2| |nil| 3660504672 ("" (DEFTACTIC VERT (THEN (SKEEP) (SKEEP) (TYPEPRED "vc`v") (EXPAND "vert?"))) (("" (INDUCT "n" 1 "NAT_induction") (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (NAME "p1" "drop_circuits(G, cd)") (("3" (CASE "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)") (("1" (INST 1 "cd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "shrink_repeat") (("2" (INST?) (("2" (INST - "w") (("1" (GROUND) (("1" (GROUND) (("1" (SKEEP) (("1" (INST -14 "length(scd)") (("1" (EXPAND "drop_circuits" -2) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (ASSERT) (("1" (INST -14 "G" "v" "w" "scd") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (VERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "k" "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (VERT) NIL NIL)) NIL)) NIL) NIL NIL) (|circuit_decomp_prep-1| |nil| 3657038988 ("" (DEFTACTIC VERT (THEN (SKEEP) (SKEEP) (TYPEPRED "vc`v") (EXPAND "vert?"))) (("" (INDUCT "n" 1 NAT_INDUCTION) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (SKEEP :PREDS? T) (("3" (NAME "p1" "drop_circuits(G, cd)") (("3" (CASE "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)") (("1" (INST 1 "cd") (("1" (ASSERT) (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "shrink_repeat") (("2" (INST?) (("2" (INST - "w") (("1" (GROUND) (("1" (GROUND) (("1" (SKEEP) (("1" (INST -15 "length(scd)") (("1" (EXPAND "drop_circuits" -2) (("1" (EXPAND "list2finseq" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]" -2) (("1" (ASSERT) (("1" (INST -15 "G" "v" "w" "scd") (("1" (ASSERT) (("1" (SKEEP :PREDS? T) (("1" (INST 1 "scd_1") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (VERT) NIL NIL)) NIL)) NIL) ("2" (INST 1 "k" "l") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (VERT) NIL NIL)) NIL)) NIL) NIL SHOSTAK)) (|vert2vc_TCC1| 0 (|vert2vc_TCC1-1| |nil| 3657278006 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL)) NIL (|vert2vc| SUBTYPE "circuit_decomp_.v" "(circuit_decomp_.vert(circuit_decomp_.G))"))) (|vert2vc_TCC2| 0 (|vert2vc_TCC2-1| |nil| 3657278006 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL)) NIL (|vert2vc| SUBTYPE "walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].gen_seq1(circuit_decomp_.G, circuit_decomp_.v)" "Walk[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)"))) (|trivial_decomp_TCC1| 0 (|trivial_decomp_TCC1-1| |nil| 3657277273 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|trivial_decomp| SUBTYPE "0" "below[length(w)]"))) (|trivial_decomp_TCC2| 0 (|trivial_decomp_TCC2-1| |nil| 3657277273 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL)) NIL (|trivial_decomp| SUBTYPE "finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)" "vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)"))) (|trivial_decomp_TCC3| 0 (|trivial_decomp_TCC3-4| "" 3884658782 ("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "decomp_to_walk") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "vert2vc") (("" (EXPAND "gen_seq1") (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (EXPAND "list2finseq") (("" (EXPAND "map") (("" (EXPAND "length") (("" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "map") (("1" (EXPAND "verts_in?") (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (TYPEPRED ("w")) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED ("w")) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED ("w")) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (ASSERT) (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "drop_circuits") (("4" (EXPAND "list2finseq") (("4" (EXPAND "map") (("4" (EXPAND "map") (("4" (EXPAND "length") (("4" (EXPAND "length") (("4" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED ("x!1")) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "vert?") (("3" (TYPEPRED ("w")) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (INST?) (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED ("w")) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (EXPAND "map") (("3" (EXPAND "map") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED ("w")) (("4" (EXPAND "vert?") (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|trivial_decomp| SUBTYPE "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")) (|trivial_decomp_TCC3-3| "" 3790101319 ("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "decomp_to_walk") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "vert2vc") (("" (EXPAND "gen_seq1") (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (EXPAND "list2finseq") (("" (EXPAND "map") (("" (EXPAND "length") (("" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "map") (("1" (EXPAND "verts_in?") (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (W)) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (ASSERT) (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "drop_circuits") (("4" (EXPAND "list2finseq") (("4" (EXPAND "map") (("4" (EXPAND "map") (("4" (EXPAND "length") (("4" (EXPAND "length") (("4" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "vert?") (("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (INST?) (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (W)) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (EXPAND "map") (("3" (EXPAND "map") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED (W)) (("4" (EXPAND "vert?") (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (NIL APPLICATION-JUDGEMENT "above(n)" |exp2| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|odd?| CONST-DECL "bool" |integers| NIL) (|uint8| TYPE-EQ-DECL NIL |integertypes| NIL) (|exp2| DEF-DECL "posnat" |exp2| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL)) SHOSTAK (|trivial_decomp| SUBTYPE "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")) (|trivial_decomp_TCC3-2| "" 3744392657 ("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "decomp_to_walk") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "vert2vc") (("" (EXPAND "gen_seq1") (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (EXPAND "list2finseq") (("" (EXPAND "map") (("" (EXPAND "length") (("" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "map") (("1" (EXPAND "verts_in?") (("1" (GROUND) (("1" (SKEEP :PREDS? T) (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GRIND) NIL NIL) ("3" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (W)) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (ASSERT) (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "drop_circuits") (("4" (EXPAND "list2finseq") (("4" (EXPAND "map") (("4" (EXPAND "map") (("4" (EXPAND "length") (("4" (EXPAND "length") (("4" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "vert?") (("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (INST?) (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (TYPEPRED (W)) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (ASSERT) (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (EXPAND "map") (("3" (EXPAND "map") (("3" (EXPAND "length" -1) (("3" (EXPAND "length" -1) (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED (W)) (("4" (EXPAND "vert?") (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|trivial_decomp| SUBTYPE "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")) (|trivial_decomp_TCC3-1| |nil| 3657285561 ("" (SKEEP) (("" (EXPAND "finseq_appl") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "decomp_to_walk") (("" (EXPAND "length") (("" (EXPAND "length") (("" (EXPAND "vert2vc") (("" (EXPAND "gen_seq1") (("" (EXPAND "walk?") (("" (EXPAND "finseq_appl") (("" (EXPAND "list2finseq") (("" (EXPAND "map") (("" (EXPAND "length") (("" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "map") (("1" (EXPAND "verts_in?") (("1" (GROUND) (("1" (SKEEP) (("1" (GROUND) (("1" (EXPAND "nth") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?") (("1" (EXPAND "verts_in?") (("1" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) NIL NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (GROUND) NIL NIL)) NIL) ("2" (TYPEPRED (W)) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (ASSERT) (("3" (SKEEP) (("3" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "drop_circuits") (("3" (EXPAND "list2finseq") (("3" (EXPAND "map") (("3" (EXPAND "map") (("3" (EXPAND "length") (("3" (EXPAND "length") (("3" (DECOMPOSE-EQUALITY 1) (("1" (DECOMPOSE-EQUALITY 1) (("1" (TYPEPRED (X!1)) (("1" (EXPAND "map") (("1" (EXPAND "map") (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (EXPAND "nth") (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "vert?") (("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (INST?) (("3" (SKEEP) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("5" (EXPAND "gen_seq1") (("5" (PROPAX) NIL NIL)) NIL) ("6" (TYPEPRED (W)) (("6" (EXPAND "vert?") (("6" (EXPAND "walk?") (("6" (EXPAND "verts_in?") (("6" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("7" (EXPAND "walk?") (("7" (EXPAND "verts_in?") (("7" (TYPEPRED (W)) (("7" (EXPAND "walk?") (("7" (EXPAND "verts_in?") (("7" (SKEEP) (("7" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (GROUND) (("1" (SKEEP) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (GROUND) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("3" (TYPEPRED (W)) (("3" (EXPAND "walk?") (("3" (EXPAND "verts_in?") (("3" (INST?) (("3" (ASSERT) (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (SKEEP) (("4" (TYPEPRED (W)) (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "vert?") (("2" (TYPEPRED (W)) (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP :PREDS? T) (("3" (EXPAND "map") (("3" (EXPAND "map") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED (W)) (("4" (EXPAND "vert?") (("4" (EXPAND "walk?") (("4" (EXPAND "verts_in?") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (TYPEPRED "vc`v") (("5" (EXPAND "vert?") (("5" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("6" (EXPAND "gen_seq1") (("6" (PROPAX) NIL NIL)) NIL) ("7" (TYPEPRED (W)) (("7" (EXPAND "vert?") (("7" (EXPAND "walk?") (("7" (EXPAND "verts_in?") (("7" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("8" (EXPAND "walk?") (("8" (EXPAND "verts_in?") (("8" (SKEEP) (("8" (TYPEPRED (W)) (("8" (EXPAND "walk?") (("8" (EXPAND "verts_in?") (("8" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|trivial_decomp| SUBTYPE "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}"))) (|trivial_decomp_TCC4| 0 (|trivial_decomp_TCC4-1| |nil| 3657285561 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|trivial_decomp| SUBTYPE "0" "below[length(w)]"))) (|trivial_decomp_TCC5| 0 (|trivial_decomp_TCC5-1| |nil| 3657285561 ("" (SUBTYPE-TCC) NIL NIL) ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (< CONST-DECL "bool" |reals| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL)) NIL (|trivial_decomp| SUBTYPE "finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)" "vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)"))) (|trivial_decomp_TCC6| 0 (|trivial_decomp_TCC6-1| |nil| 3657285561 ("" (SKEEP) (("" (GROUND) NIL NIL)) NIL) ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|trivial_decomp| SUBTYPE "(number_fields.-)(length(circuit_decomp_.w), 1)" "nat"))) (|trivial_decomp_TCC7| 0 (|trivial_decomp_TCC7-1| |nil| 3657285561 ("" (SKEEP) (("" (LEMMA "walk?_caret") (("" (INST?) (("" (ASSERT) (("" (EXPAND "^") (("" (EXPAND "min") (("" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|trivial_decomp| SUBTYPE "finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))" "Walk[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)"))) (|trivial_decomp_TCC8| 0 (|trivial_decomp_TCC8-1| |nil| 3657285561 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) NIL (|trivial_decomp| TERMINATION "circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1))))" "NIL"))) (|trivial_decomp_TCC9| 0 (|trivial_decomp_TCC9-3| "" 3884658904 ("" (SKEEP) (("" (EXPAND "length" 2 1) (("" (ASSERT) (("" (ASSERT) (("" (TYPEPRED "v1(G, ^[T](w, (1, length(w) - 1)))") (("1" (EXPAND "decomp_to_walk" 2) (("1" (EXPAND "length" 2) (("1" (EXPAND "map" 2) (("1" (GROUND) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "length" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (TYPEPRED "vert2vc(G, w`seq(0))`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (ASSERT) (("2" (EXPAND "list2finseq") (("2" (INST -3 "i-1") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "n=0") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1) (("1" (TYPEPRED "decomp_to_walk(G, v1(G, ^[T](w, (1, length(w) - 1))))") (("1" (REPLACE -11 -3) (("1" (EXPAND "drop_circuits" -3) (("1" (EXPAND "first") (("1" (EXPAND "list2finseq" -3) (("1" (EXPAND "finseq_appl" -3) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "vert2vc") (("1" (EXPAND "^") (("1" (HIDE -) (("1" (TYPEPRED ("w")) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "0") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (ASSERT) (("2" (INST -5 "n-1") (("2" (EXPAND "list2finseq" -5 1) (("2" (ASSERT) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (EXPAND "list2finseq") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "vert2vc") (("2" (EXPAND "gen_seq1") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "o") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o") (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "length" 1) (("1" (CASE "length(v1(G, ^[T](w, (1, length(w) - 1)))) = ^[T](w, (1, length(w) - 1))`length") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "LL" "length(v1(G, ^[T](w, (1, length(w) - 1))))") (("2" (REPLACE -5 1 :DIR RL) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (EXPAND "LL") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits" 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "map" 1) (("1" (CASE "x!1=0") (("1" (REPLACE -1) (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "vert2vc") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "w`seq(x!1) = ^[T](w, (1, length(w) - 1))`seq(x!1-1)") (("1" (REPLACE -1 2) (("1" (REPLACE -6 2 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth" 2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL) ("3" (ASSERT) (("3" (REPLACE -5 1 :DIR RL) (("3" (ASSERT) (("3" (TYPEPRED ("x!1")) (("3" (EXPAND "drop_circuits") (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (LEMMA "trivial_decomp_TCC7") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK (|trivial_decomp| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].cons(circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)), circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))))" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")) (|trivial_decomp_TCC9-2| "" 3744393039 ("" (SKEEP) (("" (EXPAND "length" 2 1) (("" (ASSERT) (("" (ASSERT) (("" (TYPEPRED "v1(G, ^[T](w, (1, length(w) - 1)))") (("1" (EXPAND "decomp_to_walk" 2) (("1" (EXPAND "length" 2) (("1" (EXPAND "map" 2) (("1" (GROUND) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "length" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (TYPEPRED "vert2vc(G, w`seq(0))`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (ASSERT) (("2" (EXPAND "list2finseq") (("2" (INST -3 "i-1") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "n=0") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1) (("1" (TYPEPRED "decomp_to_walk(G, v1(G, ^[T](w, (1, length(w) - 1))))") (("1" (REPLACE -11 -3) (("1" (EXPAND "drop_circuits" -3) (("1" (EXPAND "first") (("1" (EXPAND "list2finseq" -3) (("1" (EXPAND "finseq_appl" -3) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "vert2vc") (("1" (EXPAND "^") (("1" (HIDE -) (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "0") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (ASSERT) (("2" (INST -5 "n-1") (("2" (EXPAND "list2finseq" -5 1) (("2" (ASSERT) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) (("1" (EXPAND "list2finseq") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (SKEEP :PREDS? T) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "vert2vc") (("2" (EXPAND "gen_seq1") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "o") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o") (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "length" 1) (("1" (CASE "length(v1(G, ^[T](w, (1, length(w) - 1)))) = ^[T](w, (1, length(w) - 1))`length") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "LL" "length(v1(G, ^[T](w, (1, length(w) - 1))))") (("2" (REPLACE -5 1 :DIR RL) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (EXPAND "LL") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits" 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "map" 1) (("1" (CASE "x!1=0") (("1" (REPLACE -1) (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "vert2vc") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "w`seq(x!1) = ^[T](w, (1, length(w) - 1))`seq(x!1-1)") (("1" (REPLACE -1 2) (("1" (REPLACE -6 2 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth" 2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL) ("3" (ASSERT) (("3" (REPLACE -5 1 :DIR RL) (("3" (ASSERT) (("3" (TYPEPRED (X!1)) (("3" (EXPAND "drop_circuits") (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (LEMMA "trivial_decomp_TCC7") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|length| DEF-DECL "nat" |list_props| NIL) (|trivial_decomp_TCC7| SUBTYPE-TCC NIL |circuit_decomp_| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (LL SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (|i| SKOLEM-CONST-DECL "below(1 + length(v1(G, ^[T](w, (1, length(w) - 1)))))" |circuit_decomp_| NIL) (|v1| SKOLEM-CONST-DECL "[d1:
   {z:
      [G: ConcreteDigraph,
       Walk[T, ConcreteDigraph, vert, edges, size, make](G)] |
      length(z`2) < length(w)} ->
   {cd: walk_decomp(d1`1) |
      decomp_to_walk(d1`1, cd) = d1`2 AND drop_circuits(d1`1, cd) = d1`2}]" |circuit_decomp_| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL)) SHOSTAK (|trivial_decomp| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].cons(circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)), circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))))" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")) (|trivial_decomp_TCC9-1| |nil| 3657286467 ("" (SKEEP) (("" (EXPAND "length" 2 1) (("" (ASSERT) (("" (ASSERT) (("" (TYPEPRED "v1(G, ^[T](w, (1, length(w) - 1)))") (("1" (EXPAND "decomp_to_walk" 2) (("1" (EXPAND "length" 2) (("1" (EXPAND "map" 2) (("1" (GROUND) (("1" (EXPAND "list2finseq" 1) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "length" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "walk?") (("1" (GROUND) (("1" (EXPAND "verts_in?") (("1" (SKEEP) (("1" (CASE "i=0") (("1" (REPLACE -1) (("1" (EXPAND "nth") (("1" (TYPEPRED "vert2vc(G, w`seq(0))`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth") (("2" (ASSERT) (("2" (EXPAND "list2finseq") (("2" (INST -3 "i-1") (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "n=0") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -1) (("1" (EXPAND "nth" 1) (("1" (TYPEPRED "decomp_to_walk(G, v1(G, ^[T](w, (1, length(w) - 1))))") (("1" (REPLACE -11 -3) (("1" (EXPAND "drop_circuits" -3) (("1" (EXPAND "first") (("1" (EXPAND "list2finseq" -3) (("1" (EXPAND "finseq_appl" -3) (("1" (REPLACE -3 1 :DIR RL) (("1" (EXPAND "vert2vc") (("1" (EXPAND "^") (("1" (HIDE -) (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?") (("1" (FLATTEN) (("1" (INST -3 "0") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 2) (("2" (EXPAND "finseq_appl" 2) (("2" (ASSERT) (("2" (INST -5 "n-1") (("2" (EXPAND "list2finseq" -5 1) (("2" (ASSERT) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) (("2" (EXPAND "list2finseq") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "vert2vc") (("2" (EXPAND "gen_seq1") (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "^") (("1" (EXPAND "o") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o") (("2" (GROUND) (("2" (LIFT-IF 1) (("2" (GROUND) (("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq" 1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "length" 1) (("1" (CASE "length(v1(G, ^[T](w, (1, length(w) - 1)))) = ^[T](w, (1, length(w) - 1))`length") (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (NAME-REPLACE "LL" "length(v1(G, ^[T](w, (1, length(w) - 1))))") (("2" (REPLACE -5 1 :DIR RL) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (EXPAND "LL") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits" 1) (("2" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "map" 1) (("1" (CASE "x!1=0") (("1" (REPLACE -1) (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "vert2vc") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "w`seq(x!1) = ^[T](w, (1, length(w) - 1))`seq(x!1-1)") (("1" (REPLACE -1 2) (("1" (REPLACE -6 2 :DIR RL) (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (EXPAND "nth" 2 1) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (PROPAX) NIL NIL)) NIL) ("3" (ASSERT) (("3" (REPLACE -5 1 :DIR RL) (("3" (ASSERT) (("3" (TYPEPRED (X!1)) (("3" (EXPAND "drop_circuits") (("3" (EXPAND "list2finseq") (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (EXPAND "length" -1) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (LEMMA "trivial_decomp_TCC7") (("3" (INST?) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL (|trivial_decomp| SUBTYPE "list_adt[vert_circ(circuit_decomp_.G)].cons(circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)), circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))))" "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}"))) (|trivial_decomp_idemp| 0 (|trivial_decomp_idemp-1| |nil| 3657284250 ("" (SKEEP) (("" (TYPEPRED "trivial_decomp(G, w)") (("" (ASSERT) NIL NIL)) NIL)) NIL) ((|trivial_decomp| DEF-DECL "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" |circuit_decomp_| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK)) (|trivial_decomp_length| 0 (|trivial_decomp_length-1| |nil| 3657292813 ("" (CASE "FORALL (G: ConcreteDigraph, n: nat, w: Walk(G)):
        n=length(trivial_decomp(G, w)) IMPLIES length(trivial_decomp(G, w)) = length(w)") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "length(trivial_decomp(G, w))") (("1" (SKEEP) (("1" (TYPEPRED "vc`v") (("1" (EXPAND "vert?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT "n") (("1" (GROUND) (("1" (SKEEP) (("1" (EXPAND "length") (("1" (GROUND) (("1" (LIFT-IF -1) (("1" (GROUND) (("1" (EXPAND "trivial_decomp") (("1" (LIFT-IF -1) (("1" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (CASE "j=0") (("1" (SKEEP) (("1" (EXPAND "trivial_decomp" 1) (("1" (LIFT-IF 1) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "length") (("1" (EXPAND "length") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (INST -2 "G" "w^(1, length(w)-1)") (("2" (EXPAND "trivial_decomp" -3) (("2" (GROUND) (("1" (EXPAND "length" 2 1) (("1" (REPLACE -1) (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (MOVE-TERMS -2 L 1) (("1" (REPLACE -2) (("1" (EXPAND "length" 1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "trivial_decomp" -2) (("2" (LIFT-IF -2) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (EXPAND "trivial_decomp") (("1" (GROUND) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "length" -1) (("2" (INST -2 "G" "w^(1, length(w)-1)") (("2" (ASSERT) (("2" (EXPAND "trivial_decomp" 3) (("2" (EXPAND "length" 3) (("2" (REPLACES -2) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (TYPEPRED "vc`v") (("4" (EXPAND "vert?") (("4" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((TRUE CONST-DECL "bool" |booleans| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|trivial_decomp| DEF-DECL "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" |circuit_decomp_| NIL)) SHOSTAK)) (|trivial_decomp_circuit_length_TCC1| 0 (|trivial_decomp_circuit_length_TCC1-1| |nil| 3657292811 ("" (SKEEP :PREDS? T) (("" (LEMMA "trivial_decomp_length") (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ((|trivial_decomp_length| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL)) NIL (|trivial_decomp_circuit_length| SUBTYPE "circuit_decomp_.i" "below[length[vert_circ(G)](trivial_decomp(G, w))]"))) (|trivial_decomp_circuit_length| 0 (|trivial_decomp_circuit_length-2| "" 3884659003 ("" (CASE " FORALL (G: ConcreteDigraph, n: nat, w: Walk(G), i: below(length(w))):
        n=i IMPLIES nth(trivial_decomp(G, w), i)`c`length = 1") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " n") (("1" (SKEEP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "trivial_decomp") (("1" (GROUND) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "vert2vc") (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (EXPAND "trivial_decomp" 1) (("2" (TYPEPRED ("i")) (("2" (ASSERT) (("2" (INST - "G" " w ^ (1, length(w) - 1)" "j") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP :PREDS? T) (("4" (LEMMA "trivial_decomp_length") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (LEMMA "trivial_decomp_length") (("4" (INST?) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|trivial_decomp_circuit_length-1| |nil| 3657294161 ("" (CASE " FORALL (G: ConcreteDigraph, n: nat, w: Walk(G), i: below(length(w))):
        n=i IMPLIES nth(trivial_decomp(G, w), i)`c`length = 1") (("1" (SKEEP) (("1" (INST?) (("1" (INST - "i") NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (INDUCT " n") (("1" (SKEEP) (("1" (REPLACES -1 :DIR RL) (("1" (EXPAND "nth") (("1" (EXPAND "trivial_decomp") (("1" (GROUND) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "vert2vc") (("1" (EXPAND "gen_seq1") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (REPLACE -2 :DIR RL) (("2" (EXPAND "nth" 1) (("2" (EXPAND "trivial_decomp" 1) (("2" (TYPEPRED (I)) (("2" (ASSERT) (("2" (INST - "G" " w ^ (1, length(w) - 1)" "j") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP :PREDS? T) (("4" (LEMMA "trivial_decomp_length") (("4" (INST?) (("4" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("4" (SKEEP) (("4" (LEMMA "trivial_decomp_length") (("4" (INST?) (("4" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ((|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|trivial_decomp_length| FORMULA-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|j| SKOLEM-CONST-DECL "nat" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|w| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|nat_induction| FORMULA-DECL NIL |naturalnumbers| NIL) (|pred| TYPE-EQ-DECL NIL |defined_types| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (> CONST-DECL "bool" |reals| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|trivial_decomp| DEF-DECL "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" |circuit_decomp_| NIL)) SHOSTAK)) (|trunk_decomp_TCC1| 0 (|trunk_decomp_TCC1-1| |nil| 3657301293 ("" (SUBTYPE-TCC) NIL NIL) ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (> CONST-DECL "bool" |reals| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|edge?| CONST-DECL "bool" |digraphs_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) NIL (|trunk_decomp| SUBTYPE "circuit_decomp_.w" "Longprewalk[T, ConcreteDigraph, vert, edges, size, make]"))) (|trunk_decomp_TCC2| 0 (|trunk_decomp_TCC2-2| "" 3744398703 ("" (SKEEP) (("" (EXPAND "list2finseq") (("" (REWRITE "map_length[vert_circ(G), vert(G)]") (("" (SKEEP) (("" (TYPEPRED "vc`v") (("" (EXPAND "vert?") (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (> CONST-DECL "bool" |reals| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK (|trunk_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_props[vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd, (: circuit_decomp_.vert2vc(circuit_decomp_.G, seq_extras[circuit_decomp_.T].last(circuit_decomp_.w)) :))))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]")) (|trunk_decomp_TCC2-1| |nil| 3657301293 ("" (SUBTYPE-TCC) NIL NIL) NIL NIL (|trunk_decomp| SUBTYPE "list2finseq[vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].list2finseq(list_adt_map[vert_circ(circuit_decomp_.G), vert[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make](circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_props[vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd, (: circuit_decomp_.vert2vc(circuit_decomp_.G, seq_extras[circuit_decomp_.T].last(circuit_decomp_.w)) :))))" "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))) (|trunk_decomp| 0 (|trunk_decomp-4| "" 3884659046 ("" (LEMMA "append_decomp") (("" (SKEEP) (("" (INST?) (("1" (ASSERT) (("1" (GROUND) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc") (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (EXPAND "list2finseq" -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACE -6 -4) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "last") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED ("w")) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST - "length(w)-2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|trunk_decomp-3| "" 3791887913 ("" (LEMMA "append_decomp") (("" (SKEEP) (("" (INST?) (("1" (ASSERT) (("1" (GROUND) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc") (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (EXPAND "list2finseq" -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACE -6 -4) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "last") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST - "length(w)-2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|trunc1| CONST-DECL "prewalk" |walks_| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (< CONST-DECL "bool" |reals| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|w| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|append_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL)) SHOSTAK) (|trunk_decomp-2| "" 3744398834 ("" (LEMMA "append_decomp") (("" (SKEEP) (("" (INST?) (("1" (ASSERT) (("1" (GROUND) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 1) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc") (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (EXPAND "list2finseq" -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACE -6 -4) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "last") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST - "length(w)-2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|trunk_decomp-1| |nil| 3657362796 ("" (LEMMA "append_decomp") (("" (SKEEP) (("" (INST?) (("1" (ASSERT) (("1" (GROUND) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 1) (("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc") (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (EXPAND "list2finseq" -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACE -1) (("1" (HIDE -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACE -6 -4) (("1" (REPLACE -4 :DIR RL) (("1" (EXPAND "last") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST - "length(w)-2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (TYPEPRED (W)) (("4" (EXPAND "length") (("4" (HIDE 2) (("4" (EXPAND "walk?") (("4" (FLATTEN) (("4" (EXPAND "verts_in?") (("4" (EXPAND "vert?") (("4" (EXPAND "last") (("4" (EXPAND "finseq_appl") (("4" (INST?) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|trunc_decomp_def_TCC1| 0 (|trunc_decomp_def_TCC1-1| |nil| 3657301293 ("" (LEMMA "trunk_decomp") (("" (PROPAX) NIL NIL)) NIL) ((|trunk_decomp| FORMULA-DECL NIL |circuit_decomp_| NIL)) NIL (|trunc_decomp_def| SUBTYPE "list_props[vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd, (: circuit_decomp_.vert2vc(circuit_decomp_.G, seq_extras[circuit_decomp_.T].last(circuit_decomp_.w)) :))" "walk_decomp(circuit_decomp_.G)"))) (|trunc_decomp_def| 0 (|trunc_decomp_def-4| "" 3884659109 ("" (SKEEP) (("" (LEMMA "append_commute") (("" (INST?) (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE -1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vert2vc") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "trunc1" 1 1) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (TYPEPRED ("x!1")) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc" 1) (("2" (TYPEPRED ("cd")) (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (REPLACE -9 -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -4) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACES -4 :DIR RL) (("1" (EXPAND "trunc1" 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (EXPAND "last" 1) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED ("w")) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST -3 "length(w) -2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|trunc_decomp_def-3| "" 3791887916 ("" (SKEEP) (("" (LEMMA "append_commute") (("" (INST?) (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE -1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vert2vc") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "trunc1" 1 1) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (TYPEPRED (X!1)) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc" 1) (("2" (TYPEPRED (CD)) (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (REPLACE -9 -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -4) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACES -4 :DIR RL) (("1" (EXPAND "trunc1" 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (EXPAND "last" 1) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST -3 "length(w) -2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|append_commute| FORMULA-DECL NIL |circuit_decomp_| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|trunc1| CONST-DECL "prewalk" |walks_| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks_| NIL) (O CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|int_min| APPLICATION-JUDGEMENT "{k: int | k <= i AND k <= j}" |real_defs| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|cd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (> CONST-DECL "bool" |reals| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (/= CONST-DECL "boolean" |notequal| NIL) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (|last| CONST-DECL "T" |seq_extras| |structures|) (|w| SKOLEM-CONST-DECL "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL)) SHOSTAK) (|trunc_decomp_def-2| "" 3744398993 ("" (SKEEP) (("" (LEMMA "append_commute") (("" (INST?) (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE -1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vert2vc") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "trunc1" 1 1) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (TYPEPRED (X!1)) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc" 1) (("2" (TYPEPRED (CD)) (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (REPLACE -9 -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -4) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACES -4 :DIR RL) (("1" (EXPAND "trunc1" 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (EXPAND "last" 1) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST -3 "length(w) -2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (ASSERT) NIL NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|trunc_decomp_def-1| |nil| 3657301450 ("" (SKEEP) (("" (LEMMA "append_commute") (("" (INST?) (("1" (GROUND) (("1" (REPLACE -1) (("1" (REPLACE -3) (("1" (HIDE -1) (("1" (EXPAND "decomp_to_walk" 1 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "length" 1) (("1" (EXPAND "vert2vc") (("1" (DECOMPOSE-EQUALITY 1) (("1" (EXPAND "o ") (("1" (EXPAND "gen_seq1") (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) (("2" (EXPAND "o ") (("2" (EXPAND "trunc1" 1 1) (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (LIFT-IF 1) (("2" (GROUND) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (TYPEPRED (X!1)) (("2" (EXPAND "o ") (("2" (EXPAND "gen_seq1") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "nth" 1 2) (("2" (EXPAND "vert2vc" 1) (("2" (TYPEPRED (CD)) (("2" (TYPEPRED "decomp_to_walk(G, cd)") (("2" (EXPAND "drop_circuits" -4) (("2" (REPLACE -9 -4) (("2" (EXPAND "last" -4 2) (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq" -4) (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REPLACES -4 :DIR RL) (("1" (EXPAND "trunc1" 1) (("1" (EXPAND "^" 1) (("1" (EXPAND "min") (("1" (EXPAND "last" 1) (("1" (EXPAND "finseq_appl") (("1" (TYPEPRED (W)) (("1" (EXPAND "walk?" -2) (("1" (FLATTEN) (("1" (INST -3 "length(w) -2") (("1" (ASSERT) (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (ASSERT) NIL NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "map") (("2" (EXPAND "map") (("2" (EXPAND "list2finseq") (("2" (EXPAND "length") (("2" (EXPAND "length") (("2" (EXPAND "walk?") (("2" (EXPAND "verts_in?") (("2" (SKEEP) (("2" (EXPAND "nth") (("2" (TYPEPRED "vert2vc(G, last[T](w))`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK)) (|circuit_decomposition| 0 (|circuit_decomposition-3| "" 3790101422 ("" (SKEEP :PREDS? T) (("" (CASE "cycle_at?(G, circ, v)") (("1" (INST + "trivial_decomp(G, circ)") (("1" (TYPEPRED "trivial_decomp(G, circ)") (("1" (ASSERT) (("1" (LEMMA "trivial_decomp_circuit_length") (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (EXPAND "circuit_at?") (("1" (EXPAND "circuit?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cycle_at?" 1) (("2" (EXPAND "cycle?" 1) (("2" (GROUND) (("1" (EXPAND "circuit_at?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (CASE "FORALL (i, j: below(length(trunc1(circ)))):
                                         i < j IMPLIES finseq_appl(trunc1(circ))(i) /= finseq_appl(trunc1(circ))(j)") (("1" (SKEEP) (("1" (CASE "i<j") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (ASSERT) (("1" (EXPAND "^" -2) (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j" "i") (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (LEMMA " circuit_decomp_prep") (("2" (INST - "G" "v" "trunc1(circ)" "trivial_decomp(G, trunc1(circ))" "length(trivial_decomp(G, trunc1(circ)))") (("1" (REWRITE "trivial_decomp_idemp" :DIR RL) (("1" (SKEEP) (("1" (ASSERT) (("1" (LEMMA "trunc_decomp_def") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "circuit_at?") (("1" (EXPAND "circuit?") (("1" (EXPAND "pre_circuit?") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST 1 "append[vert_circ(G)]
                                                 (scd, (: vert2vc(G, last(circ)) :))") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "cycle_at?") (("1" (GROUND) (("1" (EXPAND "cycle?") (("1" (GROUND) (("1" (TYPEPRED "drop_circuits(G,
                                                                     append[vert_circ(G)]
                                                                         (scd, (: vert2vc(G, last(circ)) :)))") (("1" (EXPAND "circuit?") (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "pre_circuit?") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (SIMPLIFY 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vert2vc") (("1" (CASE "trunc1(circ)`seq(0) = last(circ)") (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "decomp_to_walk(G, scd)") (("1" (HIDE (-5 -6 -7 -8)) (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -5 -3) (("1" (REPLACE -3) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (i,
                                                                j:
                                                                  below(length
                                                                          (drop_circuits(G,
                                                                                         append[vert_circ(G)]
                                                                                         (scd,
                                                                                          (: vert2vc(G, last(circ)) :))))
                                                                         - 1)):
                                                          i < j IMPLIES
                                                           finseq_appl                                      (drop_circuits(G,
                                                                              append[vert_circ(G)]
                                                                                  (scd, (: vert2vc(G, last(circ)) :))))
                                                               (i)
                                                            /=
                                                            finseq_appl
                                                                (drop_circuits(G,
                                                                               append[vert_circ(G)]
                                                                                   (scd, (: vert2vc(G, last(circ)) :))))
                                                                (j)") (("1" (SKEEP) (("1" (CASE "i!1<j!1") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "j!1" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (EXPAND "drop_circuits" -1) (("2" (EXPAND "drop_circuits" -2) (("2" (EXPAND "list2finseq" -1) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (SIMPLIFY) (("1" (INST -7 "i!1" "j!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits" 1) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "drop_circuits" 1) (("3" (EXPAND "list2finseq" 1) (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (TYPEPRED "decomp_to_walk(G, scd)") (("1" (EXPAND "drop_circuits" -3) (("1" (REPLACE -6 -3) (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "trunc1" -3) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (CASE "i!1=0") (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "scd" "0") (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (REPLACE -6 -1) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 " G" "scd" "i!1-1") (("1" (SIMPLIFY -1) (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "scd" "i!1") (("1" (REPLACE -5 -1) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (EXPAND "vert2vc") (("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "trivial_decomp_length") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "trunc1") (("4" (EXPAND "circuit_at?") (("4" (EXPAND "circuit?") (("4" (EXPAND "pre_circuit?") (("4" (FLATTEN) (("4" (LEMMA "walk?_caret") (("4" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ((|circuit_at?| CONST-DECL "bool" |circuits_| NIL) (|cycle_at?| CONST-DECL "bool" |cycles_| NIL) (|vert| TYPE-EQ-DECL NIL |digraphs_| NIL) (|vert?| CONST-DECL "bool" |digraphs_| NIL) (|prewalk| TYPE-EQ-DECL NIL |walks_| NIL) (|make| FORMAL-CONST-DECL "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" |circuit_decomp_| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|size| FORMAL-CONST-DECL "[ConcreteDigraph -> nat]" |circuit_decomp_| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|edges| FORMAL-CONST-DECL "[ConcreteDigraph -> [T, T -> bool]]" |circuit_decomp_| NIL) (|vert| FORMAL-CONST-DECL "[ConcreteDigraph -> [T -> bool]]" |circuit_decomp_| NIL) (> CONST-DECL "bool" |reals| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|finseq| TYPE-EQ-DECL NIL |finite_sequences| NIL) (T FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|ConcreteDigraph| FORMAL-TYPE-DECL NIL |circuit_decomp_| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|trivial_decomp_circuit_length| FORMULA-DECL NIL |circuit_decomp_| NIL) (|real_lt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (< CONST-DECL "bool" |reals| NIL) (|below| TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|circuit?| CONST-DECL "bool" |circuits_| NIL) (|real_gt_is_strict_total_order| NAME-JUDGEMENT "(strict_total_order?[real])" |real_props| NIL) (|trivial_decomp| DEF-DECL "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" |circuit_decomp_| NIL) (|decomp_to_walk| DEF-DECL "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" |circuit_decomp_| NIL) (|last| CONST-DECL "T" |seq_extras| |structures|) (|drop_circuits| CONST-DECL "{W: Walk(G) | length(W) = length(cd)}" |circuit_decomp_| NIL) (|first| CONST-DECL "T" |seq_extras| |structures|) (|not_empty_seq| TYPE-EQ-DECL NIL |seq_extras| |structures|) (/= CONST-DECL "boolean" |notequal| NIL) (|walk_decomp| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|map| ADT-DEF-DECL "list[T1]" |list_adt_map| NIL) (|list2finseq| CONST-DECL "finseq[T]" |list2finseq| NIL) (|walk?| CONST-DECL "bool" |walks_| NIL) (|length| DEF-DECL "nat" |list_props| NIL) (|vert_circ| TYPE-EQ-DECL NIL |circuit_decomp_| NIL) (|gen_seq1| CONST-DECL "Seq(G)" |walks_| NIL) (|Seq| TYPE-EQ-DECL NIL |walks_| NIL) (|verts_in?| CONST-DECL "bool" |walks_| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|Walk| TYPE-EQ-DECL NIL |walks_| NIL) (|minus_nzint_is_nzint| APPLICATION-JUDGEMENT "nzint" |integers| NIL) (|cycle?| CONST-DECL "bool" |cycles_| NIL) (|finseq_appl| CONST-DECL "[below[length(fs)] -> T]" |finite_sequences| NIL) (|trunc1| CONST-DECL "prewalk" |walks_| NIL) (|Longprewalk| TYPE-EQ-DECL NIL |walks_| NIL) (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL) (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (|min| CONST-DECL "{p: real | p <= m AND p <= n}" |real_defs| NIL) (^ CONST-DECL "finseq" |finite_sequences| NIL) (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers| NIL) (|j| SKOLEM-CONST-DECL "below(length(circ) - 1)" |circuit_decomp_| NIL) (G SKOLEM-CONST-DECL "ConcreteDigraph" |circuit_decomp_| NIL) (|v| SKOLEM-CONST-DECL "vert[T, ConcreteDigraph, vert, edges, size, make](G)" |circuit_decomp_| NIL) (|circ| SKOLEM-CONST-DECL "{circ: prewalk | circuit_at?(G, circ, v)}" |circuit_decomp_| NIL) (|i| SKOLEM-CONST-DECL "below(length(circ) - 1)" |circuit_decomp_| NIL) (|nonneg_int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|posnat| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|trunc_decomp_def| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk_index_last| FORMULA-DECL NIL |circuit_decomp_| NIL) (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL) (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL) (^ DEF-DECL "list[T]" |more_list_props| |structures|) (IFF CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|i!1| SKOLEM-CONST-DECL "below(length(append[vert_circ(G)](scd, (: vert2vc(G, last(circ)) :))))" |circuit_decomp_| NIL) (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|walk_index| DEF-DECL "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" |circuit_decomp_| NIL) (|walk_index_ub| FORMULA-DECL NIL |circuit_decomp_| NIL) (|i!1| SKOLEM-CONST-DECL "below(length
        (drop_circuits(G,
                       append[vert_circ(G)]
                           (scd, (: vert2vc(G, last(circ)) :))))
       - 1)" |circuit_decomp_| NIL) (|j!1| SKOLEM-CONST-DECL "below(length
        (drop_circuits(G,
                       append[vert_circ(G)]
                           (scd, (: vert2vc(G, last(circ)) :))))
       - 1)" |circuit_decomp_| NIL) (|length_append| FORMULA-DECL NIL |list_props| NIL) (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers| NIL) (|length_singleton| FORMULA-DECL NIL |more_list_props| |structures|) (|map_nth_rw| FORMULA-DECL NIL |more_map_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|scd| SKOLEM-CONST-DECL "walk_decomp(G)" |circuit_decomp_| NIL) (|nth_append| FORMULA-DECL NIL |more_list_props| |structures|) (|map_length| FORMULA-DECL NIL |more_map_props| NIL) (|nth| DEF-DECL "T" |list_props| NIL) (|vert2vc| CONST-DECL "vert_circ(G)" |circuit_decomp_| NIL) (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|append| DEF-DECL "list[T]" |list_props| NIL) (|pre_circuit?| CONST-DECL "bool" |circuits_| NIL) (|trivial_decomp_idemp| FORMULA-DECL NIL |circuit_decomp_| NIL) (|trivial_decomp_length| FORMULA-DECL NIL |circuit_decomp_| NIL) (|walk?_caret| FORMULA-DECL NIL |walks_| NIL) (|circuit_decomp_prep| FORMULA-DECL NIL |circuit_decomp_| NIL)) SHOSTAK) (|circuit_decomposition-2| "" 3744400073 ("" (SKEEP :PREDS? T) (("" (CASE "cycle_at?(G, circ, v)") (("1" (INST + "trivial_decomp(G, circ)") (("1" (TYPEPRED "trivial_decomp(G, circ)") (("1" (ASSERT) (("1" (LEMMA "trivial_decomp_circuit_length") (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (EXPAND "circuit_at?") (("1" (EXPAND "circuit?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cycle_at?" 1) (("2" (EXPAND "cycle?" 1) (("2" (GROUND) (("1" (EXPAND "circuit_at?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (CASE "FORALL (i, j: below(length(trunc1(circ)))):
                                         i < j IMPLIES finseq_appl(trunc1(circ))(i) /= finseq_appl(trunc1(circ))(j)") (("1" (SKEEP) (("1" (CASE "i<j") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (ASSERT) (("1" (EXPAND "^" -2) (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j" "i") (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (LEMMA " circuit_decomp_prep") (("2" (INST - "G" "v" "trunc1(circ)" "trivial_decomp(G, trunc1(circ))" "length(trivial_decomp(G, trunc1(circ)))") (("1" (REWRITE "trivial_decomp_idemp" :DIR RL) (("1" (SKEEP) (("1" (ASSERT) (("1" (LEMMA "trunc_decomp_def") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "circuit_at?") (("1" (EXPAND "circuit?") (("1" (EXPAND "pre_circuit?") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST 1 "append[vert_circ(G)]
                                                 (scd, (: vert2vc(G, last(circ)) :))") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "cycle_at?") (("1" (GROUND) (("1" (EXPAND "cycle?") (("1" (GROUND) (("1" (TYPEPRED "drop_circuits(G,
                                                                     append[vert_circ(G)]
                                                                         (scd, (: vert2vc(G, last(circ)) :)))") (("1" (EXPAND "circuit?") (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "pre_circuit?") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (SIMPLIFY 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vert2vc") (("1" (CASE "trunc1(circ)`seq(0) = last(circ)") (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "decomp_to_walk(G, scd)") (("1" (HIDE (-5 -6 -7 -8)) (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -5 -3) (("1" (REPLACE -3) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (i,
                                                                j:
                                                                  below(length
                                                                          (drop_circuits(G,
                                                                                         append[vert_circ(G)]
                                                                                         (scd,
                                                                                          (: vert2vc(G, last(circ)) :))))
                                                                         - 1)):
                                                          i < j IMPLIES
                                                           finseq_appl                                      (drop_circuits(G,
                                                                              append[vert_circ(G)]
                                                                                  (scd, (: vert2vc(G, last(circ)) :))))
                                                               (i)
                                                            /=
                                                            finseq_appl
                                                                (drop_circuits(G,
                                                                               append[vert_circ(G)]
                                                                                   (scd, (: vert2vc(G, last(circ)) :))))
                                                                (j)") (("1" (SKEEP) (("1" (CASE "i!1<j!1") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "j!1" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (EXPAND "drop_circuits" -1) (("2" (EXPAND "drop_circuits" -2) (("2" (EXPAND "list2finseq" -1) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (SIMPLIFY) (("1" (INST -7 "i!1" "j!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits" 1) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "drop_circuits" 1) (("3" (EXPAND "list2finseq" 1) (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (TYPEPRED "decomp_to_walk(G, scd)") (("1" (EXPAND "drop_circuits" -3) (("1" (REPLACE -6 -3) (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "trunc1" -3) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (CASE "i!1=0") (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "scd" "0") (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (REPLACE -6 -1) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 " G" "scd" "i!1-1") (("1" (SIMPLIFY -1) (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "scd" "i!1") (("1" (REPLACE -5 -1) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (EXPAND "vert2vc") (("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "trivial_decomp_length") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "trunc1") (("4" (EXPAND "circuit_at?") (("4" (EXPAND "circuit?") (("4" (EXPAND "pre_circuit?") (("4" (FLATTEN) (("4" (LEMMA "walk?_caret") (("4" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL SHOSTAK) (|circuit_decomposition-1| |nil| 3659867783 ("" (SKEEP :PREDS? T) (("" (CASE "cycle_at?(G, circ, v)") (("1" (INST + "trivial_decomp(G, circ)") (("1" (TYPEPRED "trivial_decomp(G, circ)") (("1" (ASSERT) (("1" (LEMMA "trivial_decomp_circuit_length") (("1" (SKEEP) (("1" (INST?) (("1" (ASSERT) (("1" (REPLACE -1) (("1" (EXPAND "circuit_at?") (("1" (EXPAND "circuit?") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (FLATTEN) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "cycle_at?" 1) (("2" (EXPAND "cycle?" 1) (("2" (GROUND) (("1" (EXPAND "circuit_at?") (("1" (PROPAX) NIL NIL)) NIL) ("2" (CASE "FORALL (i, j: below(length(trunc1(circ)))):
                              i < j IMPLIES finseq_appl(trunc1(circ))(i) /= finseq_appl(trunc1(circ))(j)") (("1" (SKEEP) (("1" (CASE "i<j") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (ASSERT) (("1" (EXPAND "^" -2) (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -1 "j" "i") (("1" (ASSERT) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (EXPAND "finseq_appl") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "trunc1") (("3" (EXPAND "^") (("3" (EXPAND "min") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (LEMMA " circuit_decomp_prep") (("2" (INST - "G" "v" "trunc1(circ)" "trivial_decomp(G, trunc1(circ))" "length(trivial_decomp(G, trunc1(circ)))") (("1" (REWRITE "trivial_decomp_idemp" :DIR RL) (("1" (SKEEP) (("1" (ASSERT) (("1" (LEMMA "trunc_decomp_def") (("1" (INST?) (("1" (ASSERT) (("1" (EXPAND "circuit_at?") (("1" (EXPAND "circuit?") (("1" (EXPAND "pre_circuit?") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST 1 "append[vert_circ(G)]
                                     (scd, (: vert2vc(G, last(circ)) :))") (("1" (ASSERT) (("1" (GROUND) (("1" (EXPAND "cycle_at?") (("1" (GROUND) (("1" (EXPAND "cycle?") (("1" (GROUND) (("1" (TYPEPRED "drop_circuits(G,
                                                 append[vert_circ(G)]
                                                     (scd, (: vert2vc(G, last(circ)) :)))") (("1" (EXPAND "circuit?") (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (ASSERT) (("1" (EXPAND "pre_circuit?") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq" 1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (SIMPLIFY 1) (("1" (EXPAND "nth" 1 2) (("1" (EXPAND "vert2vc") (("1" (CASE "trunc1(circ)`seq(0) = last(circ)") (("1" (REPLACES -1 :DIR RL) (("1" (TYPEPRED "decomp_to_walk(G, scd)") (("1" (HIDE (-5 -6 -7 -8)) (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (REPLACE -5 -3) (("1" (REPLACE -3) (("1" (EXPAND "drop_circuits" 1) (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "last") (("2" (EXPAND "finseq_appl") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("2" (REWRITE "length_append[vert_circ(G)]") (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "FORALL (i,
                                       j:
                                         below(length
                                                 (drop_circuits(G,
                                                                append[vert_circ(G)]
                                                                (scd,
                                                                 (: vert2vc(G, last(circ)) :))))
                                                - 1)):
                                 i < j IMPLIES
                                  finseq_appl                                      (drop_circuits(G,
                                                     append[vert_circ(G)]
                                                         (scd, (: vert2vc(G, last(circ)) :))))
                                      (i)
                                   /=
                                   finseq_appl
                                       (drop_circuits(G,
                                                      append[vert_circ(G)]
                                                          (scd, (: vert2vc(G, last(circ)) :))))
                                       (j)") (("1" (SKEEP) (("1" (CASE "i!1<j!1") (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL) ("2" (INST - "j!1" "i!1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (SKEEP :PREDS? T) (("2" (EXPAND "drop_circuits" -1) (("2" (EXPAND "drop_circuits" -2) (("2" (EXPAND "list2finseq" -1) (("2" (EXPAND "list2finseq" -2) (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (SIMPLIFY) (("1" (INST -7 "i!1" "j!1") (("1" (ASSERT) (("1" (FLATTEN) (("1" (EXPAND "finseq_appl") (("1" (EXPAND "drop_circuits") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (REPLACES -1) NIL NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits" 1) (("2" (EXPAND "list2finseq") (("2" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL) ("3" (EXPAND "drop_circuits" 1) (("3" (EXPAND "list2finseq" 1) (("3" (REWRITE "map_length[vert_circ(G), vert(G)]") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "drop_circuits") (("2" (EXPAND "finseq_appl") (("2" (EXPAND "list2finseq") (("2" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("2" (INST?) (("1" (REPLACES -1) (("1" (LEMMA "nth_append[vert_circ(G)]") (("1" (INST?) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (TYPEPRED "decomp_to_walk(G, scd)") (("1" (EXPAND "drop_circuits" -3) (("1" (REPLACE -6 -3) (("1" (EXPAND "first") (("1" (EXPAND "finseq_appl") (("1" (EXPAND "list2finseq") (("1" (LEMMA "map_nth_rw[vert_circ(G), vert(G)]") (("1" (INST?) (("1" (REPLACES -1) (("1" (EXPAND "trunc1" -3) (("1" (EXPAND "^") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP :PREDS? T) (("2" (LEMMA "nth_append[vert_circ(G)]") (("2" (INST?) (("1" (REWRITE "length_append[vert_circ(G)]") (("1" (EXPAND "length" -1 2) (("1" (EXPAND "length" -1 1) (("1" (ASSERT) (("1" (REPLACES -1) (("1" (LIFT-IF 1) (("1" (SPLIT) (("1" (FLATTEN) (("1" (CASE "i!1=0") (("1" (REPLACE -1 1) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "scd" "0") (("1" (EXPAND "walk_index") (("1" (EXPAND "nth") (("1" (REPLACE -6 -1) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "walk_index_last") (("2" (INST -1 " G" "scd" "i!1-1") (("1" (SIMPLIFY -1) (("1" (MOVE-TERMS -1 R 2) (("1" (REPLACES -1 :DIR RL) (("1" (LEMMA "walk_index_ub") (("1" (INST -1 "G" "scd" "i!1") (("1" (REPLACE -5 -1) (("1" (EXPAND "trunc1") (("1" (EXPAND "^") (("1" (EXPAND "min") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND "nth") (("2" (ASSERT) (("2" (EXPAND "vert2vc") (("2" (EXPAND "gen_seq1") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (TYPEPRED "vc`v") (("2" (EXPAND "vert?") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "trivial_decomp_length") (("2" (EXPAND "trunc1") (("2" (EXPAND "^") (("2" (EXPAND "min") (("2" (EXPAND "circuit_at?") (("2" (EXPAND "circuit?") (("2" (EXPAND "pre_circuit?") (("2" (ASSERT) (("2" (GROUND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (TYPEPRED "vc`v") (("3" (EXPAND "vert?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("4" (EXPAND "trunc1") (("4" (EXPAND "circuit_at?") (("4" (EXPAND "circuit?") (("4" (EXPAND "pre_circuit?") (("4" (FLATTEN) (("4" (LEMMA "walk?_caret") (("4" (INST?) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "circuit_at?") (("3" (EXPAND "circuit?") (("3" (EXPAND "pre_circuit?") (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (EXPAND "circuit_at?") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL)))
