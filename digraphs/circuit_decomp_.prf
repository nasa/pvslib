(circuit_decomp_
 (IMP_cycles__TCC1 0
  (IMP_cycles__TCC1-1 nil 3659809429
   ("" (use "concretedigraph_implements_abstractdigraph") nil nil)
   ((concretedigraph_implements_abstractdigraph formula-decl nil
     circuit_decomp_ nil))
   nil
   (IMP_cycles_ assuming
    "cycles_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].cycles_"
    "concretedigraph_implements_abstractdigraph: ASSUMPTION digraphs_abs[cycles_.T, cycles_.ConcreteDigraph, cycles_.vert, cycles_.edges, cycles_.size, cycles_.make].correct_implementation")))
 (vert_circ_TCC1 0
  (vert_circ_TCC1-1 nil 3656844379
   ("" (skeep)
    (("" (typepred "vc`v") (("" (expand "vert?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (vert_circ subtype "circuit_decomp_.vc`v"
    "(circuit_decomp_.vert(circuit_decomp_.G))")))
 (walk_decomp_TCC1 0
  (walk_decomp_TCC1-2 nil 3656844808
   ("" (skeep)
    (("" (expand "list2finseq")
      (("" (with-tccs (lemma "map_length[vert_circ(G), vert(G)]"))
        (("" (inst?) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil))
   nil
   (walk_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))
  (walk_decomp_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (walk_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (drop_circuits_TCC1 0
  (drop_circuits_TCC1-2 nil 3656844881
   ("" (skeep)
    (("" (with-tccs (lemma "map_length[vert_circ(G), vert(G)]"))
      (("" (inst?)
        (("" (ground)
          (("1" (expand "list2finseq") (("1" (ground) nil nil)) nil)
           ("2" (expand "list2finseq") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (vert? const-decl "bool" digraphs_ nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (map_length formula-decl nil more_map_props nil))
   nil
   (drop_circuits subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))"
    "{W: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | length(W) = list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd)}"))
  (drop_circuits_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (drop_circuits subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(circuit_decomp_.cd))"
    "{W: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | length(W) = list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd)}")))
 (cdr_decomp_TCC1 0
  (cdr_decomp_TCC1-2 nil 3656844959
   ("" (skeep)
    (("" (ground) (("" (expand "length") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (cdr_decomp subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)"))
  (cdr_decomp_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (cdr_decomp subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)")))
 (cdr_decomp_TCC2 0
  (cdr_decomp_TCC2-2 nil 3656845024
   ("" (skeep)
    (("" (expand "list2finseq")
      (("" (with-tccs (lemma "map_length[vert_circ(G), vert(G)]"))
        (("" (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cdr(cd)")
          (("1" (replaces -1) nil nil)
           ("2" (skeep)
            (("2" (typepred "vc`v")
              (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (map_length formula-decl nil more_map_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil))
   nil
   (cdr_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))
  (cdr_decomp_TCC2-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (cdr_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (cdr_decomp 0
  (cdr_decomp-2 "" 3744348211
   ("" (skeep)
    (("" (ground)
      (("1" (expand "length" (-1 2))
        (("1" (lift-if -1) (("1" (ground) nil nil)) nil)) nil)
       ("2" (typepred "cd")
        (("2" (hide -4)
          (("2"
            (case "list2finseq[vert(G)]
                                          (map[vert_circ(G), vert(G)]
                                               (LAMBDA (vc: vert_circ(G)): vc`v)
                                               (cdr[vert_circ(G)](cd))) = list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))^(1,length(cd)-1)")
            (("1" (replace -1)
              (("1" (lemma "walk?_caret")
                (("1"
                  (inst -1 "G" "1" "length(cd) -1"
                   "list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))")
                  (("1" (ground)
                    (("1" (expand "list2finseq" 1)
                      (("1" (lemma "map_length[vert_circ(G), vert(G)]")
                        (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (ground)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (decompose-equality 1)
              (("1" (hide 2)
                (("1" (hide -3)
                  (("1" (expand "list2finseq")
                    (("1" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
                      (("1" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (expand "length" 1 2)
                              (("1" (lift-if 1)
                                (("1" (ground)
                                  (("1" (expand "length")
                                    (("1" (ground) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                (("2" (decompose-equality 1)
                  (("1" (expand "list2finseq")
                    (("1" (hide 2)
                      (("1" (expand "^")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (rewrite "map_length[vert_circ(G), vert(G)]"
                                 -1)
                                (("1" (ground) nil nil)) nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst-cp -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                                 "cdr(cd)" "x!1")
                                (("1" (replaces -2)
                                  (("1"
                                    (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                                     "cd" "1+x!1")
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand "nth" 2 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "x!1")
                                      (("2"
                                        (expand "list2finseq" -1)
                                        (("2"
                                          (rewrite
                                           "map_length[vert_circ(G), vert(G)]"
                                           -1)
                                          (("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (expand "length")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "x!1")
                                  (("2" (expand "list2finseq" -1)
                                    (("2"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]"
                                       -1)
                                      nil nil))
                                    nil))
                                  nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep :preds? t)
                (("3" (hide 2)
                  (("3" (expand "list2finseq")
                    (("3" (expand "^")
                      (("3" (split 1)
                        (("1" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
                          (("1" (ground) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                            (("2"
                              (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd"
                               "1+x1")
                              (("1" (replace -1)
                                (("1" (typepred "nth(cd, 1 + x1)`v")
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2"
                                (rewrite "map_length[vert_circ(G), vert(G)]"
                                 -1)
                                (("2" (expand "min") (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep)
                (("4" (typepred "vc`v")
                  (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "vc`v")
                (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x1 skolem-const-decl
     "below[(list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd)) ^
        (1, length(cd) - 1))`length]" circuit_decomp_ nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (x!1 skolem-const-decl
     "below[list2finseq[vert[T, ConcreteDigraph, vert, edges, size, make](G)]
          (map[vert_circ(G),
               vert[T, ConcreteDigraph, vert, edges, size, make](G)]
               (LAMBDA (vc: vert_circ(G)): vc`v)
               (cdr[vert_circ(G)](cd)))`length]" circuit_decomp_ nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (walk?_caret formula-decl nil walks_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (cdr_decomp-1 nil 3656845083
   ("" (skeep)
    (("" (ground)
      (("1" (expand "length" (-1 2))
        (("1" (lift-if -1) (("1" (ground) nil nil)) nil)) nil)
       ("2" (typepred "cd")
        (("2" (hide -4)
          (("2"
            (case "list2finseq[vert(G)]
                                 (map[vert_circ(G), vert(G)]
                                      (LAMBDA (vc: vert_circ(G)): vc`v)
                                      (cdr[vert_circ(G)](cd))) = list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))^(1,length(cd)-1)")
            (("1" (replace -1)
              (("1" (lemma "walk?_caret")
                (("1"
                  (inst -1 "G" "1" "length(cd) -1"
                   "list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)(cd))")
                  (("1" (ground)
                    (("1" (expand "list2finseq" 1)
                      (("1" (lemma "map_length[vert_circ(G), vert(G)]")
                        (("1" (inst?) (("1" (ground) nil nil)) nil)) nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (ground)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (decompose-equality 1)
              (("1" (hide 2)
                (("1" (hide -3)
                  (("1" (expand "list2finseq")
                    (("1" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
                      (("1" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (expand "length" 1 2)
                              (("1" (lift-if 1)
                                (("1" (ground)
                                  (("1" (expand "length")
                                    (("1" (ground) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                (("2" (decompose-equality 1)
                  (("1" (expand "list2finseq")
                    (("1" (hide 2)
                      (("1" (expand "^")
                        (("1" (lift-if 1)
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (rewrite "map_length[vert_circ(G), vert(G)]"
                                 -1)
                                (("1" (ground) nil nil)) nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (inst-cp -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                                 "cdr(cd)" "x!1")
                                (("1" (replaces -2)
                                  (("1"
                                    (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                                     "cd" "1+x!1")
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand "nth" 2 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (typepred "x!1")
                                      (("2"
                                        (expand "list2finseq" -1)
                                        (("2"
                                          (rewrite
                                           "map_length[vert_circ(G), vert(G)]"
                                           -1)
                                          (("2"
                                            (expand "length" 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (ground)
                                                  (("2"
                                                    (expand "length")
                                                    (("2" (ground) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (typepred "x!1")
                                  (("2" (expand "list2finseq" -1)
                                    (("2"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]"
                                       -1)
                                      nil nil))
                                    nil))
                                  nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (typepred "vc`v")
                  (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
                nil))
              nil)
             ("3" (skeep :preds? t)
              (("3" (hide 2)
                (("3" (expand "list2finseq")
                  (("3" (expand "^")
                    (("3" (split 1)
                      (("1" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
                        (("1" (ground) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                          (("2"
                            (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd"
                             "1+x1")
                            (("1" (replace -1)
                              (("1" (typepred "nth(cd, 1 + x1)`v")
                                (("1" (propax) nil nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (rewrite "map_length[vert_circ(G), vert(G)]" -1)
                              (("2" (expand "min") (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (skeep :preds? t)
              (("4" (typepred "vc`v")
                (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk?_caret formula-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil))
 (decomp_to_walk_TCC1 0
  (decomp_to_walk_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype "circuit_decomp_.ww" "not_empty_seq[T]")))
 (decomp_to_walk_TCC2 0
  (decomp_to_walk_TCC2-1 nil 3656844379
   ("" (skeep :preds? t)
    (("" (typepred "drop_circuits(G, cd)") (("" (assert) nil nil)) nil)) nil)
   ((drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (decomp_to_walk subtype
    "circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)"
    "not_empty_seq[T]")))
 (decomp_to_walk_TCC3 0
  (decomp_to_walk_TCC3-2 nil 3656845150
   ("" (skeep)
    (("" (typepred "vc`v") (("" (expand "vert?") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert? const-decl "bool" digraphs_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (decomp_to_walk subtype "circuit_decomp_.vc`v"
    "(circuit_decomp_.vert(circuit_decomp_.z`1))"))
  (decomp_to_walk_TCC3-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype "circuit_decomp_.vc`v"
    "(circuit_decomp_.vert(circuit_decomp_.z`1))")))
 (decomp_to_walk_TCC4 0
  (decomp_to_walk_TCC4-2 nil 3656845200
   ("" (skeep)
    (("" (expand "length") (("" (lift-if -1) (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (decomp_to_walk subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)"))
  (decomp_to_walk_TCC4-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)")))
 (decomp_to_walk_TCC5 0
  (decomp_to_walk_TCC5-3 "" 3744348420
   ("" (skeep)
    (("" (typepred "drop_circuits(G,cd)")
      (("" (expand "first")
        (("" (expand "last")
          (("" (expand "finseq_appl")
            (("" (expand "drop_circuits")
              (("" (expand "list2finseq")
                (("" (expand "nth")
                  (("" (ground)
                    (("1" (expand "map")
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (ground)
                            (("1" (expand "length" -2)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (ground)
                            (("2" (typepred (cd))
                              (("2" (expand "every")
                                (("2" (flatten)
                                  (("2" (ground)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "gen_seq1")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "circuit_at?")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2"
                        (with-tccs
                         (lemma "map_nth_rw[vert_circ(G), vert(G)]"))
                        (("2"
                          (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "0")
                          (("2" (expand "nth")
                            (("2" (replaces -1)
                              (("2" (ground)
                                (("2" (typepred (cd))
                                  (("2" (expand "every")
                                    (("2" (lift-if -1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "length")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (expand "gen_seq1")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "circuit_at?")
                                          (("3"
                                            (expand "circuit?")
                                            (("3"
                                              (expand "pre_circuit?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "finseq_appl")
                                                  (("3"
                                                    (replaces -1 :dir rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (last const-decl "T" seq_extras structures)
    (nth def-decl "T" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (first const-decl "T" seq_extras structures))
   shostak
   (decomp_to_walk subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c"
    "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}"))
  (decomp_to_walk_TCC5-2 nil 3656845274
   ("" (skeep)
    (("" (typepred "drop_circuits(G,cd)")
      (("" (expand "first")
        (("" (expand "last")
          (("" (expand "finseq_appl")
            (("" (expand "drop_circuits")
              (("" (expand "list2finseq")
                (("" (expand "nth")
                  (("" (ground)
                    (("1" (expand "map")
                      (("1" (lift-if 1)
                        (("1" (split 1)
                          (("1" (ground) nil nil)
                           ("2" (ground)
                            (("2" (typepred (cd))
                              (("2" (expand "every")
                                (("2" (flatten)
                                  (("2" (ground)
                                    (("1" (replace -1)
                                      (("1"
                                        (expand "gen_seq1")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2" (expand "circuit_at?")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                        (("2"
                          (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v" "cd" "0")
                          (("2" (expand "nth")
                            (("2" (replaces -1)
                              (("2" (ground)
                                (("2" (typepred (cd))
                                  (("2" (expand "every")
                                    (("2" (lift-if -1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "length")
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (replaces -1)
                                          (("2"
                                            (expand "gen_seq1")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "circuit_at?")
                                          (("3"
                                            (expand "circuit?")
                                            (("3"
                                              (expand "pre_circuit?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "finseq_appl")
                                                  (("3"
                                                    (replaces -1 :dir rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (last const-decl "T" seq_extras structures)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (first const-decl "T" seq_extras structures))
   nil
   (decomp_to_walk subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c"
    "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}"))
  (decomp_to_walk_TCC5-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c"
    "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}")))
 (decomp_to_walk_TCC6 0
  (decomp_to_walk_TCC6-2 nil 3656845323
   ("" (skeep :preds? t) (("" (expand "length") (("" (ground) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (decomp_to_walk subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)"))
  (decomp_to_walk_TCC6-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)")))
 (decomp_to_walk_TCC7 0
  (decomp_to_walk_TCC7-2 nil 3656845377
   ("" (lemma "cdr_decomp")
    (("" (skeep :preds? t) (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (cdr_decomp formula-decl nil circuit_decomp_ nil))
   nil
   (decomp_to_walk subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)"))
  (decomp_to_walk_TCC7-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)")))
 (decomp_to_walk_TCC8 0
  (decomp_to_walk_TCC8-2 nil 3656845430
   ("" (skeep)
    (("" (typepred "cd")
      (("" (expand "length" 2 2)
        (("" (lift-if 2)
          (("" (split 2)
            (("1" (ground)
              (("1" (expand "length") (("1" (ground) nil nil)) nil)) nil)
             ("2" (ground) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (decomp_to_walk termination
    "circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd))"
    "nil"))
  (decomp_to_walk_TCC8-1 nil 3656844379 ("" (termination-tcc) nil nil) nil nil
   (decomp_to_walk termination
    "circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd))"
    "nil")))
 (decomp_to_walk_TCC9 0
  (decomp_to_walk_TCC9-2 nil 3656845478
   ("" (skeep :preds? t)
    (("" (ground)
      (("1" (expand "o")
        (("1" (typepred "car[vert_circ(G)](cd)`c")
          (("1" (ground) nil nil)
           ("2" (skeep)
            (("2" (typepred "vc`v")
              (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (typepred "v(G, cdr[vert_circ(G)](cd))")
        (("1" (lemma "walk_o_edge")
          (("1"
            (inst -1 " G" "car[vert_circ(G)](cd)`c"
             "v(G, cdr[vert_circ(G)](cd))")
            (("1" (ground)
              (("1" (expand "finseq_appl")
                (("1" (hide 2)
                  (("1"
                    (case "car[vert_circ(G)](cd)`c`seq
                                          (length(car[vert_circ(G)](cd)`c) - 1) = car(cd)`v")
                    (("1" (replaces -1)
                      (("1" (expand "first" -3)
                        (("1" (expand "finseq_appl")
                          (("1" (replace -3)
                            (("1" (expand "drop_circuits")
                              (("1" (expand "list2finseq")
                                (("1"
                                  (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                                  (("1"
                                    (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                                     "                   cdr[vert_circ(G)](cd)"
                                     "                0")
                                    (("1" (replaces -1)
                                      (("1"
                                        (expand "walk?" -7)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (rewrite
                                             "map_length[vert_circ(G), vert(G)]"
                                             -8)
                                            (("1"
                                              (inst -8 "0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "finseq_appl")
                                                  (("1"
                                                    (lemma
                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                    (("1"
                                                      (hide (-5 -8))
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "LAMBDA (vc: vert_circ(G)): vc`v"
                                                         "cd"
                                                         "_")
                                                        (("1"
                                                          (inst-cp -1 "0")
                                                          (("1"
                                                            (inst -1 "1")
                                                            (("1"
                                                              (replaces -1)
                                                              (("1"
                                                                (replaces -1)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -6)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skeep)
                                      (("2"
                                        (typepred "vc`v")
                                        (("2"
                                          (expand "vert?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "every")
                      (("2" (lift-if -5)
                        (("2" (split -5)
                          (("1" (expand "length") (("1" (ground) nil nil))
                            nil)
                           ("2" (flatten)
                            (("2" (ground)
                              (("1" (replaces -1)
                                (("1" (expand "gen_seq1")
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2" (expand "circuit_at?")
                                (("2" (expand "circuit?")
                                  (("2" (flatten)
                                    (("2" (expand "pre_circuit?")
                                      (("2"
                                        (expand "finseq_appl")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "vc`v")
                (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (lemma "cdr_decomp")
          (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
         ("3" (skeep)
          (("3" (typepred "vc`v")
            (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("3" (expand "first")
        (("3" (expand "finseq_appl")
          (("3" (expand "o")
            (("3" (expand "every")
              (("3" (lift-if -1)
                (("3" (split -1)
                  (("1" (expand "length") (("1" (ground) nil nil)) nil)
                   ("2" (flatten)
                    (("2" (case "car[vert_circ(G)](cd)`c`seq(0) = car(cd)`v")
                      (("1" (replaces -1)
                        (("1" (expand "drop_circuits")
                          (("1" (expand "list2finseq")
                            (("1" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("1"
                                (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                                 "cd" "0")
                                (("1" (replaces -1)
                                  (("1" (expand "nth")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (ground)
                        (("1" (replaces -1)
                          (("1" (expand "gen_seq1") (("1" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (expand "circuit_at?")
                          (("2" (expand "circuit?")
                            (("2" (expand "pre_circuit?")
                              (("2" (flatten)
                                (("2" (expand "finseq_appl")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "vc`v")
                          (("3" (expand "vert?") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (typepred "v(G, cdr[vert_circ(G)](cd))")
        (("1" (expand "last" -4 2)
          (("1" (expand "last" 1 2)
            (("1" (expand "finseq_appl")
              (("1" (hide -3)
                (("1" (expand "drop_circuits")
                  (("1" (expand "map" 1)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "length") (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "list2finseq")
                            (("2" (expand "nth" 2)
                              (("2" (lift-if 2)
                                (("2" (split 2)
                                  (("1" (flatten)
                                    (("1" (expand "length" -1)
                                      (("1"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]"
                                         -1)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "length" (-7 3))
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "length" 2)
                                      (("2"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]"
                                         -3)
                                        (("2"
                                          (replaces -3 :dir rl)
                                          (("2"
                                            (expand "last")
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand "o")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "cdr_decomp")
          (("2" (inst?) (("2" (ground) nil nil)) nil)) nil)
         ("3" (skeep)
          (("3" (typepred "vc`v")
            (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr_decomp formula-decl nil circuit_decomp_ nil)
    (walk_o_edge formula-decl nil walks_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (TRUE const-decl "bool" booleans nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_length formula-decl nil more_map_props nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil) (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (O const-decl "finseq" finite_sequences nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (decomp_to_walk subtype
    "finite_sequences[circuit_decomp_.T].o(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c, circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"
    "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}"))
  (decomp_to_walk_TCC9-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_to_walk subtype
    "finite_sequences[circuit_decomp_.T].o(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c, circuit_decomp_.decomp_to_walk(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"
    "{ww: walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G) | booleans.AND(seq_extras[circuit_decomp_.T].first(ww) = seq_extras[circuit_decomp_.T].first(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)), seq_extras[circuit_decomp_.T].last(ww) = seq_extras[circuit_decomp_.T].last(circuit_decomp_.drop_circuits(circuit_decomp_.G, circuit_decomp_.cd)))}")))
 (decomp_to_walk_length_TCC1 0
  (decomp_to_walk_length_TCC1-2 nil 3656845538
   ("" (skeep) (("" (expand "decomp_to_walk") (("" (assert) nil nil)) nil))
    nil)
   ((decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (decomp_to_walk_length subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length"
    "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}"))
  (decomp_to_walk_length_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil
   nil
   (decomp_to_walk_length subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length"
    "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}")))
 (decomp_to_walk_length_TCC2 0
  (decomp_to_walk_length_TCC2-2 nil 3656845586
   ("" (skeep :preds? t)
    (("" (expand "decomp_to_walk")
      (("" (assert)
        (("" (expand "o ")
          (("" (typepred "v(G, cdr[vert_circ(G)](cd))")
            (("1" (propax) nil nil)
             ("2" (skeep)
              (("2" (typepred "vc`v")
                (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (O const-decl "finseq" finite_sequences nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil
   (decomp_to_walk_length subtype
    "(number_fields.+)(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length, circuit_decomp_.decomp_to_walk_length(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"
    "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}"))
  (decomp_to_walk_length_TCC2-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil
   nil
   (decomp_to_walk_length subtype
    "(number_fields.+)(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c`length, circuit_decomp_.decomp_to_walk_length(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))"
    "{n: integers.posnat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, circuit_decomp_.cd))}")))
 (decomp_to_walk_rw 0
  (decomp_to_walk_rw-1 nil 3656845645
   ("" (skeep)
    (("" (typepred "decomp_to_walk_length(G, cd)") (("" (ground) nil nil))
      nil))
    nil)
   ((decomp_to_walk_length def-decl
     "{n: posnat | n = length(decomp_to_walk(G, cd))}" circuit_decomp_ nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (decomp_to_walk_length_bnd 0
  (decomp_to_walk_length_bnd-1 nil 3656845693
   (""
    (case " FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), n: below(length(cd))):
                      N = length(cd) IMPLIES decomp_to_walk_length(G, cd) >= nth(cd, n)`c`length")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "length(cd)")
          (("1" (skeep)
            (("1" (typepred "vc`v")
              (("1" (expand "vert?") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (skeep) (("1" (typepred (cd)) (("1" (ground) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "j=0")
              (("1" (hide -2)
                (("1" (typepred (n))
                  (("1" (replace -2)
                    (("1" (replace -3 :dir rl)
                      (("1" (expand "decomp_to_walk_length")
                        (("1" (ground)
                          (("1" (expand "nth") (("1" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "n=0")
                (("1" (replace -1)
                  (("1" (expand "nth")
                    (("1" (expand "decomp_to_walk_length")
                      (("1" (ground) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (inst -1 "G" "cdr(cd)" "n-1")
                  (("1" (ground)
                    (("1" (expand "nth" +)
                      (("1" (expand "decomp_to_walk_length" +)
                        (("1" (ground) nil nil)) nil))
                      nil)
                     ("2" (expand "length" -1)
                      (("2" (lift-if -1) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "length" -1)
                      (("2" (lift-if -1) (("2" (assert) nil nil)) nil)) nil))
                    nil)
                   ("3" (lemma "cdr_decomp")
                    (("3" (inst?) (("3" (ground) nil nil)) nil)) nil)
                   ("4" (skeep)
                    (("4" (typepred "vc`v")
                      (("4" (expand "vert?") (("4" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (ground)
                    (("5" (expand "length") (("5" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (typepred "vc`v")
            (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (decomp_to_walk_length def-decl
     "{n: posnat | n = length(decomp_to_walk(G, cd))}" circuit_decomp_ nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cdr_decomp formula-decl nil circuit_decomp_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (n skolem-const-decl "below(length(cd))" circuit_decomp_ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (caret_decomp_TCC1 0
  (caret_decomp_TCC1-2 nil 3656845779
   ("" (skeep)
    (("" (expand "list2finseq")
      (("" (with-tccs (lemma "map_length[vert_circ(G), vert(G)]"))
        (("" (inst?)
          (("1" (replace -1) (("1" (propax) nil nil)) nil)
           ("2" (skeep)
            (("2" (typepred "vc`v")
              (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil))
   nil
   (caret_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)((more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j)))))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))
  (caret_decomp_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (caret_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)((more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j)))))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (caret_decomp 0
  (caret_decomp-3 "" 3744349035
   (""
    (case "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                   N = j-i AND i <= j AND j < length(cd) IMPLIES
                                     length(^(cd, (i, j))) > 0 AND
                                      walk?(G,
                                            list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                                           (^(cd, (i, j)))))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "j-i") (("1" (ground) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (skeep)
          (("1" (move-terms -1 r 2)
            (("1" (simplify -1)
              (("1" (lemma "caret_length[vert_circ(G)]")
                (("1" (inst -1 "cd" "(i,j)")
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (expand " ^ " 1)
                        (("1" (expand "list2finseq")
                          (("1" (expand " map " 1)
                            (("1" (expand "map")
                              (("1" (expand "length" 1)
                                (("1" (expand "length" 1)
                                  (("1" (expand "walk?")
                                    (("1" (expand "verts_in?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1"
                                            (typepred "nth(cd, j)`v")
                                            (("1"
                                              (expand "vert?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "vc`v")
                    (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep :preds? t)
          (("2" (skeep :preds? t)
            (("2" (case "i<j")
              (("1" (lemma "caret_length[vert_circ(G)]")
                (("1" (inst?)
                  (("1" (ground)
                    (("1" (expand "^" 1)
                      (("1" (inst -9 "G" "cd" "1+i" "j")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "walk?" 1)
                              (("1" (assert)
                                (("1" (ground)
                                  (("1" (expand "verts_in?")
                                    (("1" (skeep :preds? t)
                                      (("1"
                                        (case-replace "i_1 = 0")
                                        (("1"
                                          (expand "list2finseq")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "nth" 1 1)
                                              (("1"
                                                (typepred "nth(cd, i)`v")
                                                (("1"
                                                  (expand "vert?")
                                                  (("1" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "map" 2)
                                          (("2"
                                            (expand "list2finseq" 2)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "walk?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "verts_in?")
                                                      (("2"
                                                        (hide -14)
                                                        (("2"
                                                          (inst -12 "i_1-1")
                                                          (("1"
                                                            (expand
                                                             "list2finseq")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "list2finseq")
                                                            (("2"
                                                              (hide -7)
                                                              (("2"
                                                                (rewrite
                                                                 "map_length[vert_circ(G), vert(G)]"
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep :preds? t)
                                    (("2" (case "n=0")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "finseq_appl" 1)
                                          (("1"
                                            (expand "list2finseq" 1)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (expand "^" 1 2)
                                                (("1"
                                                  (expand "nth" 1 1)
                                                  (("1"
                                                    (expand "nth" 1 2)
                                                    (("1"
                                                      (expand "walk?" -8)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst -9 "i")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand "map" 1)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq"
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                       "cd"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "1+i")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 1)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2
                                                                                       2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   1)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (expand "finseq_appl" 2)
                                          (("2"
                                            (expand "list2finseq" 2)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1" (flatten) nil nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "walk?" -12)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst -13 "n-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl"
                                                               -13)
                                                              (("1"
                                                                (expand
                                                                 "list2finseq"
                                                                 -13)
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq"
                                                                   -2)
                                                                  (("1"
                                                                    (rewrite
                                                                     "map_length[vert_circ(G), vert(G)]"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "vc`v")
                    (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "list2finseq" 1)
            (("3" (lemma "map_length[vert_circ(G), vert(G)]")
              (("1" (inst?)
                (("1" (ground) nil nil)
                 ("2" (skeep)
                  (("2" (typepred "vc`v")
                    (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (typepred "vc`v")
                  (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (typepred "vc`v")
              (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (typepred "vc`v")
              (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (expand "list2finseq")
        (("3" (hide 2)
          (("3" (lemma "map_length[vert_circ(G), vert(G)]")
            (("1" (inst?)
              (("1" (ground) nil nil)
               ("2" (skeep)
                (("2" (typepred "vc`v")
                  (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (typepred "vc`v")
                (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "vc`v")
          (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "vc`v")
          (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((^ def-decl "list[T]" more_list_props structures)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (i skolem-const-decl "nat" circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (TRUE const-decl "bool" booleans nil)
    (n skolem-const-decl "nat" circuit_decomp_ nil)
    (map_length formula-decl nil more_map_props nil)
    (i_1 skolem-const-decl "below(length
        (list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                        (cons(nth(cd, i), (cd ^ (1 + i, j)))))))"
     circuit_decomp_ nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (i skolem-const-decl "nat" circuit_decomp_ nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (caret_length formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil))
   shostak)
  (caret_decomp-2 nil 3659862380
   (""
    (case "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                            N = j-i AND i <= j AND j < length(cd) IMPLIES
                              length(^(cd, (i, j))) > 0 AND
                               walk?(G,
                                     list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                                    (^(cd, (i, j)))))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "j-i") (("1" (ground) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (skeep)
          (("1" (move-terms -1 r 2)
            (("1" (simplify -1)
              (("1" (lemma "caret_length[vert_circ(G)]")
                (("1" (inst -1 "cd" "(i,j)")
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (expand " ^ " 1)
                        (("1" (expand "list2finseq")
                          (("1" (expand " map " 1)
                            (("1" (expand "map")
                              (("1" (expand "length" 1)
                                (("1" (expand "length" 1)
                                  (("1" (expand "walk?")
                                    (("1" (expand "verts_in?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1"
                                            (typepred "nth(cd, j)`v")
                                            (("1"
                                              (expand "vert?")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred "vc`v")
                                                (("2"
                                                  (expand "vert?")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep :preds? t)
          (("2" (skeep :preds? t)
            (("2" (case "i<j")
              (("1" (lemma "caret_length[vert_circ(G)]")
                (("1" (inst?)
                  (("1" (ground)
                    (("1" (expand "^" 1)
                      (("1" (inst -9 "G" "cd" "1+i" "j")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "walk?" 1)
                              (("1" (assert)
                                (("1" (ground)
                                  (("1" (expand "verts_in?")
                                    (("1" (skeep :preds? t)
                                      (("1"
                                        (case-replace "i_1 = 0")
                                        (("1"
                                          (expand "list2finseq")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "nth" 1 1)
                                              (("1"
                                                (typepred "nth(cd, i)`v")
                                                (("1"
                                                  (expand "vert?")
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "map" 2)
                                          (("2"
                                            (expand "list2finseq" 2)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "walk?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "verts_in?")
                                                      (("2"
                                                        (hide -14)
                                                        (("2"
                                                          (inst -12 "i_1-1")
                                                          (("1"
                                                            (expand
                                                             "list2finseq")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "list2finseq")
                                                            (("2"
                                                              (hide -7)
                                                              (("2"
                                                                (rewrite
                                                                 "map_length[vert_circ(G), vert(G)]"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep :preds? t)
                                    (("2" (case "n=0")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "finseq_appl" 1)
                                          (("1"
                                            (expand "list2finseq" 1)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (expand "^" 1 2)
                                                (("1"
                                                  (expand "nth" 1 1)
                                                  (("1"
                                                    (expand "nth" 1 2)
                                                    (("1"
                                                      (expand "walk?" -8)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst -9 "i")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand "map" 1)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq"
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                       "cd"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "1+i")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 1)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2
                                                                                       2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   1)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (expand "finseq_appl" 2)
                                          (("2"
                                            (expand "list2finseq" 2)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1" (flatten) nil nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "walk?" -12)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst -13 "n-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl"
                                                               -13)
                                                              (("1"
                                                                (expand
                                                                 "list2finseq"
                                                                 -13)
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq"
                                                                   -2)
                                                                  (("1"
                                                                    (rewrite
                                                                     "map_length[vert_circ(G), vert(G)]"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("2"
                                                                              (expand
                                                                               "vert?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("2"
                                                                          (expand
                                                                           "vert?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "list2finseq" 1)
            (("3" (lemma "map_length[vert_circ(G), vert(G)]")
              (("3" (inst?)
                (("1" (ground) nil nil)
                 ("2" (skeep)
                  (("2" (typepred "vc`v")
                    (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (typepred "vc`v")
              (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (typepred "vc`v")
              (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (expand "list2finseq")
        (("3" (hide 2)
          (("3" (lemma "map_length[vert_circ(G), vert(G)]")
            (("3" (inst?)
              (("1" (ground) nil nil)
               ("2" (skeep)
                (("2" (typepred "vc`v")
                  (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "vc`v")
          (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "vc`v")
          (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((caret_length formula-decl nil more_list_props structures)
    (is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil)
  (caret_decomp-1 nil 3656845836
   (""
    (case "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                     N = j-i AND i <= j AND j < length(cd) IMPLIES
                       length(^(cd, (i, j))) > 0 AND
                        walk?(G,
                              list2finseq(map(LAMBDA (vc: vert_circ(G)): vc`v)
                                             (^(cd, (i, j)))))")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "j-i") (("1" (ground) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (skeep)
          (("1" (move-terms -1 r 2)
            (("1" (simplify -1)
              (("1" (lemma "caret_length[vert_circ(G)]")
                (("1" (inst -1 "cd" "(i,j)")
                  (("1" (assert)
                    (("1" (replace -2)
                      (("1" (expand " ^ " 1)
                        (("1" (expand "list2finseq")
                          (("1" (expand " map " 1)
                            (("1" (expand "map")
                              (("1" (expand "length" 1)
                                (("1" (expand "length" 1)
                                  (("1" (expand "walk?")
                                    (("1" (expand "verts_in?")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "nth" 1 1)
                                          (("1"
                                            (typepred "nth(cd, j)`v")
                                            (("1"
                                              (expand "vert?")
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (typepred "vc`v")
                                                (("2"
                                                  (expand "vert?")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep :preds? t)
          (("2" (skeep :preds? t)
            (("2" (case "i<j")
              (("1" (lemma "caret_length[vert_circ(G)]")
                (("1" (inst?)
                  (("1" (ground)
                    (("1" (expand "^" 1)
                      (("1" (inst -10 "G" "cd" "1+i" "j")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (expand "walk?" 1)
                              (("1" (assert)
                                (("1" (ground)
                                  (("1" (expand "verts_in?")
                                    (("1" (skeep :preds? t)
                                      (("1"
                                        (case-replace "i_1 = 0")
                                        (("1"
                                          (expand "list2finseq")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "nth" 1 1)
                                              (("1"
                                                (typepred "nth(cd, i)`v")
                                                (("1"
                                                  (expand "vert?")
                                                  (("1" (propax) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "map" 2)
                                          (("2"
                                            (expand "list2finseq" 2)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "walk?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "verts_in?")
                                                      (("2"
                                                        (hide -14)
                                                        (("2"
                                                          (inst -13 "i_1-1")
                                                          (("1"
                                                            (expand
                                                             "list2finseq")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "list2finseq")
                                                            (("2"
                                                              (hide -8)
                                                              (("2"
                                                                (rewrite
                                                                 "map_length[vert_circ(G), vert(G)]"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep :preds? t)
                                    (("2" (case "n=0")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (expand "finseq_appl" 1)
                                          (("1"
                                            (expand "list2finseq" 1)
                                            (("1"
                                              (expand "map" 1)
                                              (("1"
                                                (expand "^" 1 2)
                                                (("1"
                                                  (expand "nth" 1 1)
                                                  (("1"
                                                    (expand "nth" 1 2)
                                                    (("1"
                                                      (expand "walk?" -9)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst -10 "i")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (expand "map" 1)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq"
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                       "cd"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         i)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "1+i")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lift-if
                                                                                 1)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       2
                                                                                       2)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   1)
                                                                  (("2"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "map" 2)
                                        (("2"
                                          (expand "finseq_appl" 2)
                                          (("2"
                                            (expand "list2finseq" 2)
                                            (("2"
                                              (expand "nth" 2)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1" (flatten) nil nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand "walk?" -13)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst -14 "n-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "finseq_appl"
                                                               -14)
                                                              (("1"
                                                                (expand
                                                                 "list2finseq"
                                                                 -14)
                                                                (("1"
                                                                  (expand
                                                                   "list2finseq"
                                                                   -2)
                                                                  (("1"
                                                                    (rewrite
                                                                     "map_length[vert_circ(G), vert(G)]"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("2"
                                                                              (expand
                                                                               "vert?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("2"
                                                                          (expand
                                                                           "vert?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (expand "list2finseq" 1)
            (("3" (lemma "map_length[vert_circ(G), vert(G)]")
              (("3" (inst?)
                (("1" (ground) nil nil)
                 ("2" (skeep)
                  (("2" (typepred "vc`v")
                    (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (typepred "vc`v")
              (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (typepred "vc`v")
              (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (expand "list2finseq")
        (("3" (hide 2)
          (("3" (lemma "map_length[vert_circ(G), vert(G)]")
            (("3" (inst?)
              (("1" (ground) nil nil)
               ("2" (skeep)
                (("2" (typepred "vc`v")
                  (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "vc`v")
          (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "vc`v")
          (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)) nil))
 (walk_index_TCC1 0
  (walk_index_TCC1-1 nil 3656844379
   ("" (lemma "caret_decomp")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (caret_decomp formula-decl nil circuit_decomp_ nil))
   nil
   (walk_index subtype
    "more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)")))
 (walk_index_TCC2 0
  (walk_index_TCC2-1 nil 3656844379
   ("" (skeep :preds? t)
    (("" (assert) (("" (expand "length") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (walk_index subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)")))
 (walk_index_TCC3 0
  (walk_index_TCC3-1 nil 3656844379
   ("" (skeep)
    (("" (replace -1)
      (("" (expand "^")
        (("" (expand "decomp_to_walk")
          (("" (lift-if 1)
            (("" (expand "length" 1 1)
              (("" (expand "length" 1 1)
                (("" (expand "nth") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (length def-decl "nat" list_props nil) (nth def-decl "T" list_props nil)
    (^ def-decl "list[T]" more_list_props structures))
   nil
   (walk_index subtype
    "length(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c)"
    "{n: naturalnumbers.nat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))))}")))
 (walk_index_TCC4 0
  (walk_index_TCC4-1 nil 3656844379
   ("" (skeep :preds? t)
    (("" (ground) (("" (expand "length") (("" (ground) nil nil)) nil)) nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil
   (walk_index subtype "circuit_decomp_.cd"
    "(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons?)")))
 (walk_index_TCC5 0
  (walk_index_TCC5-1 nil 3656844379
   ("" (skeep)
    (("" (lemma "cdr_decomp") (("" (inst?) (("" (ground) nil nil)) nil)) nil))
    nil)
   ((cdr_decomp formula-decl nil circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil))
   nil
   (walk_index subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)")))
 (walk_index_TCC6 0
  (walk_index_TCC6-1 nil 3656844379
   ("" (skeep)
    (("" (ground)
      (("" (typepred (i))
        (("" (expand " length" -1)
          (("" (lift-if -1) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (walk_index subtype "(number_fields.-)(circuit_decomp_.i, 1)"
    "naturalnumbers.below(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd)))")))
 (walk_index_TCC7 0
  (walk_index_TCC7-1 nil 3656844379 ("" (termination-tcc) nil nil) nil nil
   (walk_index termination
    "circuit_decomp_.walk_index(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd), (number_fields.-)(circuit_decomp_.i, 1))"
    "nil")))
 (walk_index_TCC8 0
  (walk_index_TCC8-1 nil 3656844379
   ("" (skeep)
    (("" (typepred (cd))
      (("" (case "length(cd) =1")
        (("1" (typepred (i)) (("1" (ground) nil nil)) nil)
         ("2" (typepred "v(G, cdr[vert_circ(G)](cd), i - 1)")
          (("1" (hide -2)
            (("1" (lemma "caret_cdr[vert_circ(G)]")
              (("1" (expand "^" -2)
                (("1" (lift-if -2)
                  (("1" (split -2)
                    (("1" (ground)
                      (("1" (expand "length" (-4 1))
                        (("1" (lift-if -4) (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (ground)
                      (("1" (move-terms -1 r 2)
                        (("1" (swap-rel -1)
                          (("1" (replace -1)
                            (("1" (rewrite "decomp_to_walk_rw" 5)
                              (("1" (expand "^" 5)
                                (("1" (expand "^" 5)
                                  (("1" (expand "decomp_to_walk_length" 5)
                                    (("1" (ground)
                                      (("1"
                                        (lift-if 5)
                                        (("1"
                                          (expand "length" 5 1)
                                          (("1"
                                            (expand "length" 5 1)
                                            (("1"
                                              (expand "length" 5 1)
                                              (("1"
                                                (expand
                                                 "decomp_to_walk_length"
                                                 5)
                                                (("1"
                                                  (lift-if 5)
                                                  (("1"
                                                    (expand "length" 5 1)
                                                    (("1"
                                                      (expand "length" 5 1)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (rewrite
                                                           "decomp_to_walk_rw"
                                                           5)
                                                          (("1"
                                                            (expand
                                                             "decomp_to_walk_length"
                                                             5)
                                                            (("1"
                                                              (lift-if 5)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 5
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   5
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     5
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       5
                                                                       2)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "decomp_to_walk_rw" 6)
                        (("2" (expand "^" 6)
                          (("2" (expand "decomp_to_walk_length" 6)
                            (("2" (lift-if 6)
                              (("2" (expand "length" 6 1)
                                (("2" (lemma "caret_length[vert_circ(G)]")
                                  (("2" (inst?)
                                    (("2" (assert)
                                      (("2"
                                        (expand "nth" 6)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (rewrite "decomp_to_walk_rw" 6)
                                            (("2"
                                              (inst -3 "cd" "(1, i)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -3 :dir rl)
                                                  (("2"
                                                    (case-replace
                                                     "nth(cdr(cd), 0) = nth(cd^(1,i), 0)")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand "nth " 1 2)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (expand "nth")
                                                            (("2"
                                                              (expand "nth")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (ground)
            (("2" (ground)
              (("2" (typepred (i))
                (("2" (expand "length" -1)
                  (("2" (lift-if -1) (("2" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("3" (lemma "cdr_decomp")
            (("3" (inst?) (("3" (ground) nil nil)) nil)) nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "vc`v")
            (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (caret_cdr formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (decomp_to_walk_rw formula-decl nil circuit_decomp_ nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (decomp_to_walk_length def-decl
     "{n: posnat | n = length(decomp_to_walk(G, cd))}" circuit_decomp_ nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (caret_length formula-decl nil more_list_props structures)
    (odd_plus_odd_is_even application-judgement "even_int" integers nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (cdr_decomp formula-decl nil circuit_decomp_ nil))
   nil
   (walk_index subtype
    "(number_fields.+)(length(list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].car(circuit_decomp_.cd)`c), circuit_decomp_.walk_index(circuit_decomp_.G, list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cdr(circuit_decomp_.cd), (number_fields.-)(circuit_decomp_.i, 1)))"
    "{n: naturalnumbers.nat | n = length(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (0, circuit_decomp_.i))))}")))
 (walk_index_ub 0
  (walk_index_ub-2 nil 3659862989
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), j: below(length(cd))):
                      n=j IMPLIES walk_index(G, cd, j) <= decomp_to_walk(G, cd)`length")
    (("1" (skeep) (("1" (inst?) (("1" (inst -1 "j") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (replace -1 :dir rl)
            (("1" (expand "walk_index")
              (("1" (expand "decomp_to_walk")
                (("1" (ground)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (ground) nil nil)
                       ("2" (ground)
                        (("2" (expand "o ") (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "walk_index" 1 1)
              (("2" (lift-if 1)
                (("2" (ground)
                  (("2" (expand " decomp_to_walk" 2 1)
                    (("2" (expand "o ")
                      (("2" (inst -1 "G " "cdr(cd)" "j-1")
                        (("1" (ground) nil nil)
                         ("2" (skeep)
                          (("2" (typepred "vc`v")
                            (("2" (expand "vert?") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (^ def-decl "list[T]" more_list_props structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (walk_index_ub-1 nil 3656846486
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), j: below(length(cd))):
               n=j IMPLIES walk_index(G, cd, j) <= decomp_to_walk(G, cd)`length")
    (("1" (skeep) (("1" (inst?) (("1" (inst -1 "j") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (replace -1 :dir rl)
            (("1" (expand "walk_index")
              (("1" (expand "decomp_to_walk")
                (("1" (ground)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (ground) nil nil)
                       ("2" (ground)
                        (("2" (expand "o ") (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "walk_index" 1 1)
              (("2" (lift-if 1)
                (("2" (ground)
                  (("2" (expand " decomp_to_walk" 2 1)
                    (("2" (expand "o ")
                      (("2" (inst -1 "G " "cdr(cd)" "j-1")
                        (("1" (ground) nil nil)
                         ("2" (skeep)
                          (("2" (typepred "vc`v")
                            (("2" (expand "vert?") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   nil))
 (walk_index_incr 0
  (walk_index_incr-2 nil 3659863018
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat,  cd: walk_decomp(G), i, j: below(length(cd))):
                      n=j AND  i <= j IMPLIES walk_index(G, cd, i) <= walk_index(G, cd, j)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst - "j") (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "walk_index") (("1" (ground) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "walk_index" 1)
              (("2" (ground)
                (("2" (lift-if 1)
                  (("2" (ground)
                    (("2" (inst -1 "G" "cdr(cd)" "i-1" "j-1")
                      (("1" (ground) nil nil)
                       ("2" (skeep)
                        (("2" (typepred "vc`v")
                          (("2" (expand "vert?") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (^ def-decl "list[T]" more_list_props structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil) (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil)
  (walk_index_incr-1 nil 3656846525
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat,  cd: walk_decomp(G), i, j: below(length(cd))):
               n=j AND  i <= j IMPLIES walk_index(G, cd, i) <= walk_index(G, cd, j)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst - "j") (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "walk_index") (("1" (ground) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "walk_index" 1)
              (("2" (ground)
                (("2" (lift-if 1)
                  (("2" (ground)
                    (("2" (inst -1 "G" "cdr(cd)" "i-1" "j-1")
                      (("1" (ground) nil nil)
                       ("2" (skeep)
                        (("2" (typepred "vc`v")
                          (("2" (expand "vert?") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   nil))
 (walk_index_sincr 0
  (walk_index_sincr-1 nil 3656846560
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i, j: below(length(cd))):
               n=j and i < j IMPLIES walk_index(G, cd, i) < walk_index(G, cd, j)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst - "j") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep) (("1" (assert) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "walk_index" 1)
              (("2" (lift-if 1)
                (("2" (ground)
                  (("1" (expand "walk_index")
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (assert)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "G" "cdr(cd)" "i-1" "j-1")
                    (("1" (assert) nil nil)
                     ("2" (skeep)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (^ def-decl "list[T]" more_list_props structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (walk_index_last_TCC1 0
  (walk_index_last_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (walk_index_last subtype "(number_fields.+)(circuit_decomp_.i, 1)"
    "naturalnumbers.below(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd))")))
 (walk_index_last_TCC2 0
  (walk_index_last_TCC2-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (walk_index_last subtype "circuit_decomp_.i"
    "naturalnumbers.below(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd))")))
 (walk_index_last_TCC3 0
  (walk_index_last_TCC3-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (walk_index_last subtype "(number_fields.+)(1, circuit_decomp_.i)"
    "below[length[vert_circ(G)](cd)]")))
 (walk_index_last 0
  (walk_index_last-1 nil 3656846628
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd) - 1)): n=i IMPLIES
               walk_index(G, cd, i + 1) =
                walk_index(G, cd, i) + nth(cd, 1 + i)`c`length")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (replaces -1 :dir rl)
            (("1" (expand "walk_index")
              (("1" (expand "walk_index")
                (("1" (expand "nth")
                  (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "walk_index" 1)
              (("2" (ground)
                (("2" (inst -1 "G" "cdr(cd)" "i-1")
                  (("1" (ground)
                    (("1" (replaces -1)
                      (("1" (expand "nth" 1 2) (("1" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (typepred (i))
                    (("2" (typepred (cd))
                      (("2" (expand "length" -)
                        (("2" (ground)
                          (("2" (lift-if -4) (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (typepred "vc`v")
                      (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (^ def-decl "list[T]" more_list_props structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (i skolem-const-decl "below(length(cd) - 1)" circuit_decomp_ nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (walk_index_bound_TCC1 0
  (walk_index_bound_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (walk_index_bound subtype "circuit_decomp_.i"
    "naturalnumbers.below(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd))")))
 (walk_index_bound 0
  (walk_index_bound-1 nil 3656846671
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "walk_index")
        (("1" (expand "nth") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "walk_index" 1)
          (("2" (expand "nth" 1)
            (("2" (inst -1 "G" "cdr(cd)" "j-1")
              (("1" (ground)
                (("1" (expand "length" -2)
                  (("1" (typepred "cd")
                    (("1" (lift-if -5) (("1" (ground) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (typepred "j_1") (("2" (assert) nil nil)) nil)
               ("3" (skeep)
                (("3" (typepred "vc`v")
                  (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (ground) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "vc`v")
          (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (^ def-decl "list[T]" more_list_props structures)
    (walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (nth def-decl "T" list_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   nil))
 (walk_index_pos 0
  (walk_index_pos-1 nil 3656846720
   ("" (skeep)
    (("" (expand "walk_index")
      (("" (ground) (("" (lift-if 1) (("" (ground) nil nil)) nil)) nil)) nil))
    nil)
   ((walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil))
 (decomp_walk_index_TCC1 0
  (decomp_walk_index_TCC1-2 nil 3656846779
   ("" (skeep)
    (("" (lemma "walk_index_bound")
      (("" (inst?)
        (("" (inst - "i")
          (("" (assert)
            (("" (lemma "walk_index_ub")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk_index_bound formula-decl nil circuit_decomp_ nil)
    (walk_index_ub formula-decl nil circuit_decomp_ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil))
   nil
   (decomp_walk_index subtype
    "(number_fields.+)((number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length), circuit_decomp_.x)"
    "below[decomp_to_walk(G, cd)`length]"))
  (decomp_walk_index_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (decomp_walk_index subtype
    "(number_fields.+)((number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length), circuit_decomp_.x)"
    "below[decomp_to_walk(G, cd)`length]")))
 (decomp_walk_index 0
  (decomp_walk_index-3 "" 3790100772
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                            x: below(nth(cd, i)`c`length)):
                      n=i IMPLIES nth(cd, i)`c`seq(x) =
                       decomp_to_walk(G, cd)`seq
                           (walk_index(G, cd, i) - nth(cd, i)`c`length + x)")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (replace -1 :dir rl)
            (("1" (expand "walk_index")
              (("1" (expand "nth")
                (("1" (expand "decomp_to_walk")
                  (("1" (ground)
                    (("1" (lift-if 1)
                      (("1" (ground)
                        (("1" (expand "o ")
                          (("1" (ground)
                            (("1" (lift-if 2)
                              (("1" (ground)
                                (("1" (typepred (x))
                                  (("1" (replace -2 :dir rl)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (expand "walk_index" 1)
                  (("2" (inst -1 "G" "cdr(cd)" "j" "x")
                    (("1" (expand "decomp_to_walk" 1)
                      (("1" (typepred (i))
                        (("1" (lift-if 1)
                          (("1" (assert)
                            (("1" (expand "o ")
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (lemma "walk_index_bound")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst - "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -4 -2 :dir rl)
                                              (("1"
                                                (expand "length" -2)
                                                (("1"
                                                  (lift-if -2)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc`v")
                                            (("2"
                                              (expand "vert?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred (x))
                      (("2" (replace -2 -1 :dir rl)
                        (("2" (expand "nth" -1) (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (typepred "vc`v")
                        (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "walk_index_bound")
              (("3" (inst?)
                (("3" (inst - "i")
                  (("3" (assert)
                    (("3" (typepred (x))
                      (("3" (lemma "walk_index_ub")
                        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "decomp_walk_index_TCC1")
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (inst?) (("3" (inst - "x") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (^ def-decl "list[T]" more_list_props structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (walk_index_ub formula-decl nil circuit_decomp_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (i skolem-const-decl "below(length(cd))" circuit_decomp_ nil)
    (x skolem-const-decl "below(nth(cd, i)`c`length)" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (walk_index_bound formula-decl nil circuit_decomp_ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (decomp_walk_index_TCC1 subtype-tcc nil circuit_decomp_ nil))
   shostak)
  (decomp_walk_index-2 "" 3744351291
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                            x: below(nth(cd, i)`c`length)):
                      n=i IMPLIES nth(cd, i)`c`seq(x) =
                       decomp_to_walk(G, cd)`seq
                           (walk_index(G, cd, i) - nth(cd, i)`c`length + x)")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (replace -1 :dir rl)
            (("1" (expand "walk_index")
              (("1" (expand "nth")
                (("1" (expand "decomp_to_walk")
                  (("1" (ground)
                    (("1" (lift-if 1)
                      (("1" (ground)
                        (("1" (expand "o ")
                          (("1" (ground)
                            (("1" (lift-if 2)
                              (("1" (ground)
                                (("1" (typepred (x))
                                  (("1" (replace -2 :dir rl)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (expand "walk_index" 1)
                  (("2" (inst -1 "G" "cdr(cd)" "j" "x")
                    (("1" (expand "decomp_to_walk" 1)
                      (("1" (typepred (i))
                        (("1" (lift-if 1)
                          (("1" (assert)
                            (("1" (expand "o ")
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (lemma "walk_index_bound")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst - "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -4 -2 :dir rl)
                                              (("1"
                                                (expand "length" -2)
                                                (("1"
                                                  (lift-if -2)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc`v")
                                            (("2"
                                              (expand "vert?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred (x))
                      (("2" (replace -2 -1 :dir rl)
                        (("2" (expand "nth" -1) (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (typepred "vc`v")
                        (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "walk_index_bound")
              (("3" (inst?)
                (("3" (inst - "i")
                  (("3" (assert)
                    (("3" (typepred (x))
                      (("3" (lemma "walk_index_ub")
                        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "decomp_walk_index_TCC1")
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (inst?) (("3" (inst - "x") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   shostak)
  (decomp_walk_index-1 nil 3656846859
   (""
    (case "FORALL (G: ConcreteDigraph, n:nat, cd: walk_decomp(G), i: below(length(cd)),
                     x: below(nth(cd, i)`c`length)):
               n=i IMPLIES nth(cd, i)`c`seq(x) =
                decomp_to_walk(G, cd)`seq
                    (walk_index(G, cd, i) - nth(cd, i)`c`length + x)")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (replace -1 :dir rl)
            (("1" (expand "walk_index")
              (("1" (expand "nth")
                (("1" (expand "decomp_to_walk")
                  (("1" (ground)
                    (("1" (lift-if 1)
                      (("1" (ground)
                        (("1" (expand "o ")
                          (("1" (ground)
                            (("1" (lift-if 2)
                              (("1" (ground)
                                (("1" (typepred (x))
                                  (("1" (replace -2 :dir rl)
                                    (("1" (expand "nth")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (expand "walk_index" 1)
                  (("2" (inst -1 "G" "cdr(cd)" "j" "x")
                    (("1" (expand "decomp_to_walk" 1)
                      (("1" (typepred (i))
                        (("1" (lift-if 1)
                          (("1" (assert)
                            (("1" (expand "o ")
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (lemma "walk_index_bound")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (inst - "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -4 -2 :dir rl)
                                              (("1"
                                                (expand "length" -2)
                                                (("1"
                                                  (lift-if -2)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc`v")
                                            (("2"
                                              (expand "vert?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred (x))
                      (("2" (replace -2 -1 :dir rl)
                        (("2" (expand "nth" -1) (("2" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (typepred "vc`v")
                        (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (lemma "walk_index_bound")
              (("3" (inst?)
                (("3" (inst - "i")
                  (("3" (assert)
                    (("3" (typepred (x))
                      (("3" (lemma "walk_index_ub")
                        (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "decomp_walk_index_TCC1")
      (("3" (hide 2)
        (("3" (skeep)
          (("3" (inst?) (("3" (inst - "x") (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   nil))
 (caret_commute_TCC1 0
  (caret_commute_TCC1-2 nil 3656846916
   ("" (lemma "caret_decomp") (("" (propax) nil nil)) nil)
   ((caret_decomp formula-decl nil circuit_decomp_ nil)) nil
   (caret_commute subtype
    "more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j))"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)"))
  (caret_commute_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (caret_commute subtype
    "more_list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].^(circuit_decomp_.cd, (circuit_decomp_.i, circuit_decomp_.j))"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)")))
 (caret_commute_TCC2 0
  (caret_commute_TCC2-2 nil 3656846955
   ("" (lemma "walk_index_bound") (("" (propax) nil nil)) nil)
   ((walk_index_bound formula-decl nil circuit_decomp_ nil)) nil
   (caret_commute subtype
    "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length)"
    "nat"))
  (caret_commute_TCC2-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (caret_commute subtype
    "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.i), list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length)"
    "nat")))
 (caret_commute_TCC3 0
  (caret_commute_TCC3-2 nil 3656846996
   ("" (lemma "walk_index_pos") (("" (propax) nil nil)) nil)
   ((walk_index_pos formula-decl nil circuit_decomp_ nil)) nil
   (caret_commute subtype
    "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.j), 1)"
    "nat"))
  (caret_commute_TCC3-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (caret_commute subtype
    "(number_fields.-)(circuit_decomp_.walk_index(circuit_decomp_.G, circuit_decomp_.cd, circuit_decomp_.j), 1)"
    "nat")))
 (caret_commute 0
  (caret_commute-3 "" 3791887689
   (""
    (case "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                           N = j-i AND i <= j AND j < length(cd) IMPLIES
                                            decomp_to_walk(G, cd ^ (i, j)) =
                                             decomp_to_walk(G, cd) ^
                                              (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst - "j-i") (("1" (ground) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (induct "i")
          (("1" (skeep)
            (("1" (simplify -1)
              (("1" (replace -1 :dir rl)
                (("1" (expand "walk_index")
                  (("1" (expand "nth")
                    (("1" (expand "^" 1 1)
                      (("1" (expand "decomp_to_walk" 1 1)
                        (("1" (expand "length" 1 1)
                          (("1" (expand "length" 1 1)
                            (("1" (expand "decomp_to_walk")
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (expand "^")
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (decompose-equality 3)
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand "min")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "vc`v")
                                                      (("2"
                                                        (expand "vert?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "min")
                                                  (("2" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred "vc`v")
                                                    (("3"
                                                      (expand "vert?")
                                                      (("3" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred "vc`v")
                                                    (("4"
                                                      (expand "vert?")
                                                      (("4" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "o ")
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (decompose-equality 3)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand "min")
                                                      (("1" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "vc`v")
                                                        (("2"
                                                          (expand "vert?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep)
                                                    (("4"
                                                      (typepred "vc`v")
                                                      (("4"
                                                        (expand "vert?")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (move-terms -2 r 2)
                (("2" (move-terms -2 r 2)
                  (("2" (simplify -2)
                    (("2" (replace -2 1 :dir rl)
                      (("2" (inst -1 "G" "cdr(cd)" "j_1")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "^" 1 1)
                              (("1" (expand "decomp_to_walk" 1 1)
                                (("1" (expand "length" 1 1)
                                  (("1" (expand "length" 1 1)
                                    (("1" (expand "nth" 1)
                                      (("1"
                                        (expand "walk_index" 1)
                                        (("1"
                                          (expand "^" -1 1)
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -3 -5 :dir rl)
                                                (("1"
                                                  (typepred (cd))
                                                  (("1"
                                                    (expand "length" -8)
                                                    (("1"
                                                      (lift-if -8)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "decomp_to_walk" -1 1)
                                                (("2"
                                                  (expand "length" -1 1)
                                                  (("2"
                                                    (expand "length" -1 1)
                                                    (("2"
                                                      (expand
                                                       "decomp_to_walk"
                                                       2)
                                                      (("2"
                                                        (expand "o" 2)
                                                        (("2"
                                                          (replace -1 2)
                                                          (("2"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (expand "^" 1 1)
                                                              (("1"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "min")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_bound")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j_1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("5"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("5"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skeep)
                                                                              (("6"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("6"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("6"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand "^" 1)
                                                              (("3"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (lemma
                                                                         "walk_index_bound")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "j_1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "vc`v")
                                                                              (("2"
                                                                                (expand
                                                                                 "vert?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (skeep)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (skeep)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("5"
                                                                    (expand
                                                                     "vert?")
                                                                    (("5"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (skeep)
                                                              (("6"
                                                                (skeep)
                                                                (("6"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("6"
                                                                    (expand
                                                                     "vert?")
                                                                    (("6"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (skeep)
                                                              (("7"
                                                                (typepred
                                                                 "vc`v")
                                                                (("7"
                                                                  (expand
                                                                   "vert?")
                                                                  (("7"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (lemma
                                                               "walk_index_pos")
                                                              (("8"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("9"
                                                              (lemma
                                                               "walk_index_bound")
                                                              (("9"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("10"
                                                              (skeep)
                                                              (("10"
                                                                (typepred
                                                                 "vc`v")
                                                                (("10"
                                                                  (expand
                                                                   "vert?")
                                                                  (("10"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "length" -3)
                              (("2" (lift-if -3) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "cdr_decomp")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
                         ("3" (skeep)
                          (("3" (typepred "vc`v")
                            (("3" (expand "vert?") (("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred (cd))
                          (("4" (expand "length" -2)
                            (("4" (lift-if -2) (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "walk_index_pos")
            (("3" (skeep)
              (("3" (inst - "G" "cd" "i" "j") (("3" (assert) nil nil)) nil))
              nil))
            nil)
           ("4" (lemma "walk_index_bound")
            (("4" (skeep)
              (("4" (inst - "G" "cd" "i" "j") (("4" (assert) nil nil)) nil))
              nil))
            nil)
           ("5" (skeep) (("5" (assert) nil nil)) nil)
           ("6" (lemma "caret_decomp")
            (("6" (skeep) (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
            nil)
           ("7" (skeep)
            (("7" (skeep)
              (("7" (typepred "vc`v")
                (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
              nil))
            nil)
           ("8" (skeep)
            (("8" (skeep)
              (("8" (typepred "vc`v")
                (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "^" 1 1)
              (("2" (assert)
                (("2" (inst -1 "G" "cd" "i+1" "j")
                  (("2" (assert)
                    (("2" (expand "decomp_to_walk" 1 1)
                      (("2" (expand "length" 1 1)
                        (("2" (rewrite "caret_length[vert_circ(G)]" 1)
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1" (decompose-equality 1)
                                (("1" (expand "o")
                                  (("1" (expand "^" 1 1)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "walk_index_ub")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "walk_index_incr")
                                              (("1"
                                                (inst -1 "G" "cd" "i+1" "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "walk_index_ub")
                                                    (("1"
                                                      (inst -1 "G" "cd" "j")
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "^" 1)
                                                            (("1"
                                                              (expand "min")
                                                              (("1"
                                                                (lemma
                                                                 "walk_index_last")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "cd"
                                                                   "i")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (simplify
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "walk_index_incr")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "G"
                                                                           "cd"
                                                                           "i"
                                                                           "j")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (decompose-equality 1)
                                  (("1" (lemma "walk_index_last")
                                    (("1" (inst?)
                                      (("1"
                                        (simplify -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (simplify 1)
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "^" 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case "i=0")
                                                          (("1"
                                                            (replace -1 -2)
                                                            (("1"
                                                              (expand
                                                               "walk_index"
                                                               -2
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_pos")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_last")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cd"
                                                               "i-1")
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 2)
                                                                (("1"
                                                                  (simplify
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "walk_index_sincr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cd"
                                                                         "i-1"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "i=0")
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (expand
                                                               "walk_index"
                                                               -1)
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_last")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cd"
                                                               "i-1")
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 2)
                                                                (("1"
                                                                  (simplify
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "walk_index_sincr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cd"
                                                                         "i-1"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "walk_index_ub")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "G"
                                                                               "cd"
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "decomp_walk_index")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "^" 2)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (lift-if 2)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "walk_index_incr")
                                                            (("1"
                                                              (lemma
                                                               "walk_index_sincr")
                                                              (("1"
                                                                (hide -2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_sincr")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst -1 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "walk_index_ub")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "cd"
                                                                       "j")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "walk_index_bound")
                                    (("2" (inst?)
                                      (("2"
                                        (inst - "i")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (lemma "walk_index_pos")
                                    (("3" (inst?)
                                      (("3"
                                        (inst - "j")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (lemma "walk_index_bound")
                                    (("4" (inst?)
                                      (("4"
                                        (inst - "1+i")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5" (skeep)
                                    (("5" (typepred "vc`v")
                                      (("5"
                                        (expand "vert?")
                                        (("5" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (lemma "walk_index_bound")
                                  (("3" (inst?)
                                    (("3" (inst -1 "i")
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("4" (lemma "walk_index_pos")
                                  (("4" (inst?)
                                    (("4" (inst - "j")
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("5" (lemma "walk_index_bound")
                                  (("5" (inst?)
                                    (("5" (inst - "1+i")
                                      (("5" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("6" (skeep)
                                  (("6" (typepred "vc`v")
                                    (("6" (expand "vert?")
                                      (("6" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "walk_index_pos")
          (("3" (skeep)
            (("3" (inst - "G" "cd" "i" "j") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (lemma "walk_index_bound")
          (("4" (skeep)
            (("4" (inst - "G" "cd" "i" "j") (("4" (assert) nil nil)) nil))
            nil))
          nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil)
         ("6" (lemma "caret_decomp")
          (("6" (skeep) (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
          nil)
         ("7" (skeep)
          (("7" (skeep)
            (("7" (typepred "vc`v")
              (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (skeep)
            (("8" (typepred "vc`v")
              (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "walk_index_pos")
      (("3" (skeep)
        (("3" (inst - "G" "cd" "i" "j") (("3" (ground) nil nil)) nil)) nil))
      nil)
     ("4" (lemma "walk_index_bound")
      (("4" (skeep)
        (("4" (inst - "G" "cd" "i" "j") (("4" (ground) nil nil)) nil)) nil))
      nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil)
     ("6" (lemma "caret_decomp")
      (("6" (skeep) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (typepred "vc`v")
          (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (skeep)
        (("8" (typepred "vc`v")
          (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (^ def-decl "list[T]" more_list_props structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil) (< const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (i skolem-const-decl "nat" circuit_decomp_ nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (walk_index_sincr formula-decl nil circuit_decomp_ nil)
    (decomp_walk_index formula-decl nil circuit_decomp_ nil)
    (TRUE const-decl "bool" booleans nil)
    (walk_index_incr formula-decl nil circuit_decomp_ nil)
    (walk_index_last formula-decl nil circuit_decomp_ nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (i skolem-const-decl "nat" circuit_decomp_ nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (caret_length formula-decl nil more_list_props structures)
    (caret_decomp formula-decl nil circuit_decomp_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (cdr_decomp formula-decl nil circuit_decomp_ nil)
    (j_1 skolem-const-decl "nat" circuit_decomp_ nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (walk_index_ub formula-decl nil circuit_decomp_ nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (walk_index_bound formula-decl nil circuit_decomp_ nil)
    (walk_index_pos formula-decl nil circuit_decomp_ nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}" real_defs
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (O const-decl "finseq" finite_sequences nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (caret_commute-2 "" 3744359439
   (""
    (case "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                           N = j-i AND i <= j AND j < length(cd) IMPLIES
                                            decomp_to_walk(G, cd ^ (i, j)) =
                                             decomp_to_walk(G, cd) ^
                                              (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst - "j-i") (("1" (ground) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (induct "i")
          (("1" (skeep)
            (("1" (simplify -1)
              (("1" (replace -1 :dir rl)
                (("1" (expand "walk_index")
                  (("1" (expand "nth")
                    (("1" (expand "^" 1 1)
                      (("1" (expand "decomp_to_walk" 1 1)
                        (("1" (expand "length" 1 1)
                          (("1" (expand "length" 1 1)
                            (("1" (expand "decomp_to_walk")
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (expand "^")
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (decompose-equality 3)
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand "min")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "vc`v")
                                                      (("2"
                                                        (expand "vert?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "min")
                                                  (("2" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred "vc`v")
                                                    (("3"
                                                      (expand "vert?")
                                                      (("3" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred "vc`v")
                                                    (("4"
                                                      (expand "vert?")
                                                      (("4" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "o ")
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (decompose-equality 3)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand "min")
                                                      (("1" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "vc`v")
                                                        (("2"
                                                          (expand "vert?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep)
                                                    (("4"
                                                      (typepred "vc`v")
                                                      (("4"
                                                        (expand "vert?")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (move-terms -2 r 2)
                (("2" (move-terms -2 r 2)
                  (("2" (simplify -2)
                    (("2" (replace -2 1 :dir rl)
                      (("2" (inst -1 "G" "cdr(cd)" "j_1")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "^" 1 1)
                              (("1" (expand "decomp_to_walk" 1 1)
                                (("1" (expand "length" 1 1)
                                  (("1" (expand "length" 1 1)
                                    (("1" (expand "nth" 1)
                                      (("1"
                                        (expand "walk_index" 1)
                                        (("1"
                                          (expand "^" -1 1)
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -3 -5 :dir rl)
                                                (("1"
                                                  (typepred (cd))
                                                  (("1"
                                                    (expand "length" -8)
                                                    (("1"
                                                      (lift-if -8)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "decomp_to_walk" -1 1)
                                                (("2"
                                                  (expand "length" -1 1)
                                                  (("2"
                                                    (expand "length" -1 1)
                                                    (("2"
                                                      (expand
                                                       "decomp_to_walk"
                                                       2)
                                                      (("2"
                                                        (expand "o" 2)
                                                        (("2"
                                                          (replace -1 2)
                                                          (("2"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (expand "^" 1 1)
                                                              (("1"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "min")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_bound")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j_1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("5"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("5"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skeep)
                                                                              (("6"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("6"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("6"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand "^" 1)
                                                              (("3"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (lemma
                                                                         "walk_index_bound")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "j_1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "vc`v")
                                                                              (("2"
                                                                                (expand
                                                                                 "vert?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (skeep)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (skeep)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("5"
                                                                    (expand
                                                                     "vert?")
                                                                    (("5"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (skeep)
                                                              (("6"
                                                                (skeep)
                                                                (("6"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("6"
                                                                    (expand
                                                                     "vert?")
                                                                    (("6"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (skeep)
                                                              (("7"
                                                                (typepred
                                                                 "vc`v")
                                                                (("7"
                                                                  (expand
                                                                   "vert?")
                                                                  (("7"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (lemma
                                                               "walk_index_pos")
                                                              (("8"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("9"
                                                              (lemma
                                                               "walk_index_bound")
                                                              (("9"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("10"
                                                              (skeep)
                                                              (("10"
                                                                (typepred
                                                                 "vc`v")
                                                                (("10"
                                                                  (expand
                                                                   "vert?")
                                                                  (("10"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "length" -3)
                              (("2" (lift-if -3) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "cdr_decomp")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
                         ("3" (skeep)
                          (("3" (typepred "vc`v")
                            (("3" (expand "vert?") (("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred (cd))
                          (("4" (expand "length" -2)
                            (("4" (lift-if -2) (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "walk_index_pos")
            (("3" (skeep)
              (("3" (inst - "G" "cd" "i" "j") (("3" (assert) nil nil)) nil))
              nil))
            nil)
           ("4" (lemma "walk_index_bound")
            (("4" (skeep)
              (("4" (inst - "G" "cd" "i" "j") (("4" (assert) nil nil)) nil))
              nil))
            nil)
           ("5" (skeep) (("5" (assert) nil nil)) nil)
           ("6" (lemma "caret_decomp")
            (("6" (skeep) (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
            nil)
           ("7" (skeep)
            (("7" (skeep)
              (("7" (typepred "vc`v")
                (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
              nil))
            nil)
           ("8" (skeep)
            (("8" (skeep)
              (("8" (typepred "vc`v")
                (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "^" 1 1)
              (("2" (assert)
                (("2" (inst -1 "G" "cd" "i+1" "j")
                  (("2" (assert)
                    (("2" (expand "decomp_to_walk" 1 1)
                      (("2" (expand "length" 1 1)
                        (("2" (rewrite "caret_length[vert_circ(G)]" 1)
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2" (decompose-equality 1)
                                (("1" (expand "o")
                                  (("1" (expand "^" 1 1)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "walk_index_ub")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "walk_index_incr")
                                              (("1"
                                                (inst -1 "G" "cd" "i+1" "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "walk_index_ub")
                                                    (("1"
                                                      (inst -1 "G" "cd" "j")
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "^" 1)
                                                            (("1"
                                                              (expand "min")
                                                              (("1"
                                                                (lemma
                                                                 "walk_index_last")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "cd"
                                                                   "i")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (simplify
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "walk_index_incr")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "G"
                                                                           "cd"
                                                                           "i"
                                                                           "j")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (decompose-equality 1)
                                  (("1" (lemma "walk_index_last")
                                    (("1" (inst?)
                                      (("1"
                                        (simplify -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (simplify 1)
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "^" 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case "i=0")
                                                          (("1"
                                                            (replace -1 -2)
                                                            (("1"
                                                              (expand
                                                               "walk_index"
                                                               -2
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_pos")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_last")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cd"
                                                               "i-1")
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 2)
                                                                (("1"
                                                                  (simplify
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "walk_index_sincr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cd"
                                                                         "i-1"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "i=0")
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (expand
                                                               "walk_index"
                                                               -1)
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_last")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cd"
                                                               "i-1")
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 2)
                                                                (("1"
                                                                  (simplify
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "walk_index_sincr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cd"
                                                                         "i-1"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "walk_index_ub")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "G"
                                                                               "cd"
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "decomp_walk_index")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "^" 2)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (lift-if 2)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "walk_index_incr")
                                                            (("1"
                                                              (lemma
                                                               "walk_index_sincr")
                                                              (("1"
                                                                (hide -2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_sincr")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst -1 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "walk_index_ub")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "cd"
                                                                       "j")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "walk_index_bound")
                                    (("2" (inst?)
                                      (("2"
                                        (inst - "i")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (lemma "walk_index_pos")
                                    (("3" (inst?)
                                      (("3"
                                        (inst - "j")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (lemma "walk_index_bound")
                                    (("4" (inst?)
                                      (("4"
                                        (inst - "1+i")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5" (skeep)
                                    (("5" (typepred "vc`v")
                                      (("5"
                                        (expand "vert?")
                                        (("5" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (lemma "walk_index_bound")
                                  (("3" (inst?)
                                    (("3" (inst -1 "i")
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("4" (lemma "walk_index_pos")
                                  (("4" (inst?)
                                    (("4" (inst - "j")
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("5" (lemma "walk_index_bound")
                                  (("5" (inst?)
                                    (("5" (inst - "1+i")
                                      (("5" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("6" (skeep)
                                  (("6" (typepred "vc`v")
                                    (("6" (expand "vert?")
                                      (("6" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "walk_index_pos")
          (("3" (skeep)
            (("3" (inst - "G" "cd" "i" "j") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (lemma "walk_index_bound")
          (("4" (skeep)
            (("4" (inst - "G" "cd" "i" "j") (("4" (assert) nil nil)) nil))
            nil))
          nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil)
         ("6" (lemma "caret_decomp")
          (("6" (skeep) (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
          nil)
         ("7" (skeep)
          (("7" (skeep)
            (("7" (typepred "vc`v")
              (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (skeep)
            (("8" (typepred "vc`v")
              (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "walk_index_pos")
      (("3" (skeep)
        (("3" (inst - "G" "cd" "i" "j") (("3" (ground) nil nil)) nil)) nil))
      nil)
     ("4" (lemma "walk_index_bound")
      (("4" (skeep)
        (("4" (inst - "G" "cd" "i" "j") (("4" (ground) nil nil)) nil)) nil))
      nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil)
     ("6" (lemma "caret_decomp")
      (("6" (skeep) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (typepred "vc`v")
          (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (skeep)
        (("8" (typepred "vc`v")
          (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (caret_length formula-decl nil more_list_props structures))
   shostak)
  (caret_commute-1 nil 3656847041
   (""
    (case "FORALL (G: ConcreteDigraph, N:nat, cd: walk_decomp(G), i, j: nat):
                                    N = j-i AND i <= j AND j < length(cd) IMPLIES
                                     decomp_to_walk(G, cd ^ (i, j)) =
                                      decomp_to_walk(G, cd) ^
                                       (walk_index(G, cd, i) - nth(cd, i)`c`length, walk_index(G, cd, j)-1)")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst - "j-i") (("1" (ground) nil nil) ("2" (ground) nil nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "N")
        (("1" (induct "i")
          (("1" (skeep)
            (("1" (simplify -1)
              (("1" (replace -1 :dir rl)
                (("1" (expand "walk_index")
                  (("1" (expand "nth")
                    (("1" (expand "^" 1 1)
                      (("1" (expand "decomp_to_walk" 1 1)
                        (("1" (expand "length" 1 1)
                          (("1" (expand "length" 1 1)
                            (("1" (expand "decomp_to_walk")
                              (("1" (lift-if 1)
                                (("1" (split 1)
                                  (("1" (flatten)
                                    (("1" (expand "^")
                                      (("1"
                                        (lift-if 1)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (decompose-equality 3)
                                                (("1"
                                                  (decompose-equality 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (expand "min")
                                                      (("1" (propax) nil nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "vc`v")
                                                      (("2"
                                                        (expand "vert?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "min")
                                                  (("2" (propax) nil nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (typepred "vc`v")
                                                    (("3"
                                                      (expand "vert?")
                                                      (("3" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred "vc`v")
                                                    (("4"
                                                      (expand "vert?")
                                                      (("4" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (flatten)
                                    (("2" (expand "o ")
                                      (("2"
                                        (expand "^")
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (ground)
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (decompose-equality 3)
                                                  (("1"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (expand "min")
                                                      (("1" (propax) nil nil))
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "vc`v")
                                                        (("2"
                                                          (expand "vert?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "min")
                                                    (("2" (propax) nil nil))
                                                    nil)
                                                   ("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "vc`v")
                                                      (("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep)
                                                    (("4"
                                                      (typepred "vc`v")
                                                      (("4"
                                                        (expand "vert?")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (move-terms -2 r 2)
                (("2" (move-terms -2 r 2)
                  (("2" (simplify -2)
                    (("2" (replace -2 1 :dir rl)
                      (("2" (inst -1 "G" "cdr(cd)" "j_1")
                        (("1" (assert)
                          (("1" (ground)
                            (("1" (expand "^" 1 1)
                              (("1" (expand "decomp_to_walk" 1 1)
                                (("1" (expand "length" 1 1)
                                  (("1" (expand "length" 1 1)
                                    (("1" (expand "nth" 1)
                                      (("1"
                                        (expand "walk_index" 1)
                                        (("1"
                                          (expand "^" -1 1)
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (ground)
                                              (("1"
                                                (replace -3 -5 :dir rl)
                                                (("1"
                                                  (typepred (cd))
                                                  (("1"
                                                    (expand "length" -8)
                                                    (("1"
                                                      (lift-if -8)
                                                      (("1" (ground) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "decomp_to_walk" -1 1)
                                                (("2"
                                                  (expand "length" -1 1)
                                                  (("2"
                                                    (expand "length" -1 1)
                                                    (("2"
                                                      (expand
                                                       "decomp_to_walk"
                                                       2)
                                                      (("2"
                                                        (expand "o" 2)
                                                        (("2"
                                                          (replace -1 2)
                                                          (("2"
                                                            (decompose-equality
                                                             2)
                                                            (("1"
                                                              (expand "^" 1 1)
                                                              (("1"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "min")
                                                                      (("1"
                                                                        (expand
                                                                         "^"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "min")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_bound")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j_1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "^"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "^"
                                                                                 -3)
                                                                                (("1"
                                                                                  (expand
                                                                                   "min")
                                                                                  (("1"
                                                                                    (ground)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("5"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("5"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (skeep)
                                                                              (("6"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("6"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("6"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (expand "^" 1)
                                                              (("3"
                                                                (lemma
                                                                 "walk_index_ub")
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (expand
                                                                     "min")
                                                                    (("1"
                                                                      (ground)
                                                                      (("1"
                                                                        (lemma
                                                                         "walk_index_bound")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "j_1")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "vc`v")
                                                                              (("2"
                                                                                (expand
                                                                                 "vert?")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (skeep)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (skeep)
                                                              (("5"
                                                                (skeep)
                                                                (("5"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("5"
                                                                    (expand
                                                                     "vert?")
                                                                    (("5"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (skeep)
                                                              (("6"
                                                                (skeep)
                                                                (("6"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("6"
                                                                    (expand
                                                                     "vert?")
                                                                    (("6"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (skeep)
                                                              (("7"
                                                                (typepred
                                                                 "vc`v")
                                                                (("7"
                                                                  (expand
                                                                   "vert?")
                                                                  (("7"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("8"
                                                              (lemma
                                                               "walk_index_pos")
                                                              (("8"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("9"
                                                              (lemma
                                                               "walk_index_bound")
                                                              (("9"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "j-1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("10"
                                                              (skeep)
                                                              (("10"
                                                                (typepred
                                                                 "vc`v")
                                                                (("10"
                                                                  (expand
                                                                   "vert?")
                                                                  (("10"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "length" -3)
                              (("2" (lift-if -3) (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "cdr_decomp")
                          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil)
                         ("3" (skeep)
                          (("3" (typepred "vc`v")
                            (("3" (expand "vert?") (("3" (propax) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred (cd))
                          (("4" (expand "length" -2)
                            (("4" (lift-if -2) (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "walk_index_pos")
            (("3" (skeep)
              (("3" (inst - "G" "cd" "i" "j") (("3" (assert) nil nil)) nil))
              nil))
            nil)
           ("4" (lemma "walk_index_bound")
            (("4" (skeep)
              (("4" (inst - "G" "cd" "i" "j") (("4" (assert) nil nil)) nil))
              nil))
            nil)
           ("5" (skeep) (("5" (assert) nil nil)) nil)
           ("6" (lemma "caret_decomp")
            (("6" (skeep) (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
            nil)
           ("7" (skeep)
            (("7" (skeep)
              (("7" (typepred "vc`v")
                (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
              nil))
            nil)
           ("8" (skeep)
            (("8" (skeep)
              (("8" (typepred "vc`v")
                (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "^" 1 1)
              (("2" (assert)
                (("2" (inst -1 "G" "cd" "i+1" "j")
                  (("2" (assert)
                    (("2" (expand "decomp_to_walk" 1 1)
                      (("2" (expand "length" 1 1)
                        (("2" (rewrite "caret_length[vert_circ(G)]" 1)
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2" (decompose-equality 1)
                                (("1" (expand "o")
                                  (("1" (expand "^" 1 1)
                                    (("1" (assert)
                                      (("1"
                                        (lemma "walk_index_ub")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "walk_index_incr")
                                              (("1"
                                                (inst -1 "G" "cd" "i+1" "j")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "walk_index_ub")
                                                    (("1"
                                                      (inst -1 "G" "cd" "j")
                                                      (("1"
                                                        (expand "min")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand "^" 1)
                                                            (("1"
                                                              (expand "min")
                                                              (("1"
                                                                (lemma
                                                                 "walk_index_last")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "G"
                                                                   "cd"
                                                                   "i")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (simplify
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "walk_index_incr")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "G"
                                                                           "cd"
                                                                           "i"
                                                                           "j")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (decompose-equality 1)
                                  (("1" (lemma "walk_index_last")
                                    (("1" (inst?)
                                      (("1"
                                        (simplify -1)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (simplify 1)
                                            (("1"
                                              (expand "o")
                                              (("1"
                                                (lift-if 1)
                                                (("1"
                                                  (ground)
                                                  (("1"
                                                    (expand "^" 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (case "i=0")
                                                          (("1"
                                                            (replace -1 -2)
                                                            (("1"
                                                              (expand
                                                               "walk_index"
                                                               -2
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_pos")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_last")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cd"
                                                               "i-1")
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 2)
                                                                (("1"
                                                                  (simplify
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "walk_index_sincr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cd"
                                                                         "i-1"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "i=0")
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (expand
                                                               "walk_index"
                                                               -1)
                                                              (("1"
                                                                (expand "nth")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_last")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "G"
                                                               "cd"
                                                               "i-1")
                                                              (("1"
                                                                (move-terms
                                                                 -1
                                                                 r
                                                                 2)
                                                                (("1"
                                                                  (simplify
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "walk_index_sincr")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "G"
                                                                         "cd"
                                                                         "i-1"
                                                                         "j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "walk_index_ub")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "G"
                                                                               "cd"
                                                                               "j")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "decomp_walk_index")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "^" 2)
                                                    (("2"
                                                      (ground)
                                                      (("2"
                                                        (lift-if 2)
                                                        (("2"
                                                          (ground)
                                                          (("1"
                                                            (lemma
                                                             "walk_index_incr")
                                                            (("1"
                                                              (lemma
                                                               "walk_index_sincr")
                                                              (("1"
                                                                (hide -2)
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "walk_index_sincr")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (inst -1 "j")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "walk_index_ub")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "cd"
                                                                       "j")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (lemma "walk_index_bound")
                                    (("2" (inst?)
                                      (("2"
                                        (inst - "i")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (lemma "walk_index_pos")
                                    (("3" (inst?)
                                      (("3"
                                        (inst - "j")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4" (lemma "walk_index_bound")
                                    (("4" (inst?)
                                      (("4"
                                        (inst - "1+i")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5" (skeep)
                                    (("5" (typepred "vc`v")
                                      (("5"
                                        (expand "vert?")
                                        (("5" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (lemma "walk_index_bound")
                                  (("3" (inst?)
                                    (("3" (inst -1 "i")
                                      (("3" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("4" (lemma "walk_index_pos")
                                  (("4" (inst?)
                                    (("4" (inst - "j")
                                      (("4" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("5" (lemma "walk_index_bound")
                                  (("5" (inst?)
                                    (("5" (inst - "1+i")
                                      (("5" (assert) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("6" (skeep)
                                  (("6" (typepred "vc`v")
                                    (("6" (expand "vert?")
                                      (("6" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "walk_index_pos")
          (("3" (skeep)
            (("3" (inst - "G" "cd" "i" "j") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (lemma "walk_index_bound")
          (("4" (skeep)
            (("4" (inst - "G" "cd" "i" "j") (("4" (assert) nil nil)) nil))
            nil))
          nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil)
         ("6" (lemma "caret_decomp")
          (("6" (skeep) (("6" (inst?) (("6" (assert) nil nil)) nil)) nil))
          nil)
         ("7" (skeep)
          (("7" (skeep)
            (("7" (typepred "vc`v")
              (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (skeep)
            (("8" (typepred "vc`v")
              (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "walk_index_pos")
      (("3" (skeep)
        (("3" (inst - "G" "cd" "i" "j") (("3" (ground) nil nil)) nil)) nil))
      nil)
     ("4" (lemma "walk_index_bound")
      (("4" (skeep)
        (("4" (inst - "G" "cd" "i" "j") (("4" (ground) nil nil)) nil)) nil))
      nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil)
     ("6" (lemma "caret_decomp")
      (("6" (skeep) (("6" (inst?) (("6" (ground) nil nil)) nil)) nil)) nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (typepred "vc`v")
          (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("8" (skeep)
      (("8" (skeep)
        (("8" (typepred "vc`v")
          (("8" (expand "vert?") (("8" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((caret_length formula-decl nil more_list_props structures)
    (is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   nil))
 (append_decomp_TCC1 0
  (append_decomp_TCC1-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (append_decomp subtype
    "(number_fields.-)(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].length(circuit_decomp_.cd1), 1)"
    "below[length[vert_circ(G)](cd1)]")))
 (append_decomp_TCC2 0
  (append_decomp_TCC2-1 nil 3656844379 ("" (subtype-tcc) nil nil) nil nil
   (append_decomp subtype "0" "below[length[vert_circ(G)](cd2)]")))
 (append_decomp_TCC3 0
  (append_decomp_TCC3-1 nil 3656844379
   ("" (skeep)
    (("" (expand "list2finseq")
      (("" (rewrite "map_length[vert_circ(G), vert(G)]" 1)
        (("" (skeep)
          (("" (typepred "vc`v")
            (("" (expand "vert?") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (map_length formula-decl nil more_map_props nil))
   nil
   (append_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd1, circuit_decomp_.cd2)))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (append_decomp 0
  (append_decomp-4 "" 3791887699
   ("" (skeep)
    (("" (rewrite "length_append[vert_circ(G)]")
      (("1" (assert)
        (("1" (expand "walk?")
          (("1" (ground)
            (("1" (expand "verts_in?")
              (("1" (skeep)
                (("1" (typepred (cd1))
                  (("1" (typepred (cd2))
                    (("1" (typepred (i))
                      (("1" (expand "list2finseq" -1)
                        (("1" (rewrite "map_length[vert_circ(G), vert(G)]" -1)
                          (("1" (rewrite "length_append[vert_circ(G)]")
                            (("1" (expand "list2finseq" 1)
                              (("1"
                                (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                                (("1" (inst?)
                                  (("1" (replace -1)
                                    (("1" (lemma "nth_append[vert_circ(G)]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (expand "verts_in?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "list2finseq")
                                                        (("1"
                                                          (inst -11 "i")
                                                          (("1"
                                                            (lemma
                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "LAMBDA (vc: vert_circ(G)): vc`v"
                                                               "cd1"
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "list2finseq")
                                                            (("2"
                                                              (rewrite
                                                               "map_length[vert_circ(G), vert(G)]"
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-7 -8 -9))
                                                  (("2"
                                                    (hide -4)
                                                    (("2"
                                                      (expand "walk?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -6)
                                                          (("2"
                                                            (expand
                                                             "verts_in?")
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "i - length(cd1)")
                                                              (("1"
                                                                (expand
                                                                 "list2finseq")
                                                                (("1"
                                                                  (lemma
                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                     "cd2"
                                                                     "i- length(cd1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("2"
                                                                          (expand
                                                                           "vert?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("3"
                                                                    (expand
                                                                     "vert?")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "length_append[vert_circ(G)]")
                                    nil nil)
                                   ("3" (skeep)
                                    (("3" (typepred "vc`v")
                                      (("3"
                                        (expand "vert?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep :preds? t)
              (("2" (expand "list2finseq" -2)
                (("2" (rewrite "map_length[vert_circ(G), vert(G)]" -)
                  (("1" (rewrite "length_append[vert_circ(G)]")
                    (("1" (expand "finseq_appl")
                      (("1" (expand "list2finseq")
                        (("1" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                          (("1"
                            (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                             "append[vert_circ(G)](cd1, cd2)" "_")
                            (("1" (inst-cp -1 "n")
                              (("1" (inst -1 "1+n")
                                (("1" (replaces -1)
                                  (("1" (replaces -1)
                                    (("1" (lemma "nth_append[vert_circ(G)]")
                                      (("1"
                                        (inst -1 "cd1" "cd2" "_")
                                        (("1"
                                          (inst-cp -1 "n")
                                          (("1"
                                            (inst -1 "1+n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (typepred (cd1))
                                                          (("1"
                                                            (expand "walk?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst - "n")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -
                                                                                 "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                 "cd1"
                                                                                 " n")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                   "cd1"
                                                                                   " 1+n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred (cd2))
                                                          (("2"
                                                            (expand "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "n- length(cd1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -
                                                                                 "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                 "cd2"
                                                                                 " n- length(cd1)")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                   "cd2"
                                                                                   " 1- length(cd1)+n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep
                                                                   :preds?
                                                                   t)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "length_append[vert_circ(G)]")
                                  (("2" (assert) nil nil)) nil))
                                nil)
                               ("2" (rewrite "length_append[vert_circ(G)]")
                                (("2" (assert) nil nil)) nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "vc`v")
          (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "nat" circuit_decomp_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (append def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cd1 skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (cd2 skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (i skolem-const-decl "below(length
        (list2finseq[vert[T, ConcreteDigraph, vert, edges, size, make](G)]
             (map[vert_circ(G),
                  vert[T, ConcreteDigraph, vert, edges, size, make](G)]
                  (LAMBDA (vc: vert_circ(G)): vc`v)
                  (append[vert_circ(G)](cd1, cd2)))))" circuit_decomp_ nil)
    (nth_append formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_length formula-decl nil more_map_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (length_append formula-decl nil list_props nil))
   shostak)
  (append_decomp-3 "" 3744385519
   ("" (skeep)
    (("" (rewrite "length_append[vert_circ(G)]")
      (("" (assert)
        (("" (expand "walk?")
          (("" (ground)
            (("1" (expand "verts_in?")
              (("1" (skeep)
                (("1" (typepred (cd1))
                  (("1" (typepred (cd2))
                    (("1" (typepred (i))
                      (("1" (expand "list2finseq" -1)
                        (("1" (rewrite "map_length[vert_circ(G), vert(G)]" -1)
                          (("1" (rewrite "length_append[vert_circ(G)]")
                            (("1" (expand "list2finseq" 1)
                              (("1"
                                (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                                (("1" (inst?)
                                  (("1" (replace -1)
                                    (("1" (lemma "nth_append[vert_circ(G)]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (expand "verts_in?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "list2finseq")
                                                        (("1"
                                                          (inst -11 "i")
                                                          (("1"
                                                            (lemma
                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "LAMBDA (vc: vert_circ(G)): vc`v"
                                                               "cd1"
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep
                                                               :preds?
                                                               t)
                                                              (("2"
                                                                (typepred
                                                                 "vc`v")
                                                                (("2"
                                                                  (expand
                                                                   "vert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "list2finseq")
                                                            (("2"
                                                              (rewrite
                                                               "map_length[vert_circ(G), vert(G)]"
                                                               1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("2"
                                                                    (expand
                                                                     "vert?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-7 -8 -9))
                                                  (("2"
                                                    (hide -4)
                                                    (("2"
                                                      (expand "walk?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -6)
                                                          (("2"
                                                            (expand
                                                             "verts_in?")
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "i - length(cd1)")
                                                              (("1"
                                                                (expand
                                                                 "list2finseq")
                                                                (("1"
                                                                  (lemma
                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                     "cd2"
                                                                     "i- length(cd1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("2"
                                                                          (expand
                                                                           "vert?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("3"
                                                                    (expand
                                                                     "vert?")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "length_append[vert_circ(G)]")
                                    (("2" (skeep)
                                      (("2"
                                        (typepred "vc`v")
                                        (("2"
                                          (expand "vert?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (skeep)
                                    (("3" (typepred "vc`v")
                                      (("3"
                                        (expand "vert?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep :preds? t)
              (("2" (expand "list2finseq" -2)
                (("2" (rewrite "map_length[vert_circ(G), vert(G)]" -)
                  (("1" (rewrite "length_append[vert_circ(G)]")
                    (("1" (expand "finseq_appl")
                      (("1" (expand "list2finseq")
                        (("1" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                          (("1"
                            (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                             "append[vert_circ(G)](cd1, cd2)" "_")
                            (("1" (inst-cp -1 "n")
                              (("1" (inst -1 "1+n")
                                (("1" (replaces -1)
                                  (("1" (replaces -1)
                                    (("1" (lemma "nth_append[vert_circ(G)]")
                                      (("1"
                                        (inst -1 "cd1" "cd2" "_")
                                        (("1"
                                          (inst-cp -1 "n")
                                          (("1"
                                            (inst -1 "1+n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (typepred (cd1))
                                                          (("1"
                                                            (expand "walk?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst - "n")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -
                                                                                 "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                 "cd1"
                                                                                 " n")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                   "cd1"
                                                                                   " 1+n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred (cd2))
                                                          (("2"
                                                            (expand "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "n- length(cd1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -
                                                                                 "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                 "cd2"
                                                                                 " n- length(cd1)")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                   "cd2"
                                                                                   " 1- length(cd1)+n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep
                                                                   :preds?
                                                                   t)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "length_append[vert_circ(G)]")
                                  (("2" (assert) nil nil)) nil))
                                nil)
                               ("2" (rewrite "length_append[vert_circ(G)]")
                                (("2" (assert) nil nil)) nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (nth_append formula-decl nil more_list_props structures))
   shostak)
  (append_decomp-2 nil 3656857268
   ("" (skeep)
    (("" (rewrite "length_append[vert_circ(G)]")
      (("" (assert)
        (("" (expand "walk?")
          (("" (ground)
            (("1" (expand "verts_in?")
              (("1" (skeep)
                (("1" (typepred (cd1))
                  (("1" (typepred (cd2))
                    (("1" (typepred (i))
                      (("1" (expand "list2finseq" -1)
                        (("1" (rewrite "map_length[vert_circ(G), vert(G)]" -1)
                          (("1" (rewrite "length_append[vert_circ(G)]")
                            (("1" (expand "list2finseq" 1)
                              (("1"
                                (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                                (("1" (inst?)
                                  (("1" (replace -1)
                                    (("1" (lemma "nth_append[vert_circ(G)]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (ground)
                                                (("1"
                                                  (expand "walk?")
                                                  (("1"
                                                    (expand "verts_in?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "list2finseq")
                                                        (("1"
                                                          (inst -11 "i")
                                                          (("1"
                                                            (lemma
                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                            (("1"
                                                              (inst
                                                               -
                                                               "LAMBDA (vc: vert_circ(G)): vc`v"
                                                               "cd1"
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "list2finseq")
                                                            (("2"
                                                              (rewrite
                                                               "map_length[vert_circ(G), vert(G)]"
                                                               1)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (-7 -8 -9))
                                                  (("2"
                                                    (hide -4)
                                                    (("2"
                                                      (expand "walk?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (hide -6)
                                                          (("2"
                                                            (expand
                                                             "verts_in?")
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "i - length(cd1)")
                                                              (("1"
                                                                (expand
                                                                 "list2finseq")
                                                                (("1"
                                                                  (lemma
                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                  (("1"
                                                                    (inst
                                                                     -
                                                                     "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                     "cd2"
                                                                     "i- length(cd1)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("2"
                                                                          (expand
                                                                           "vert?")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "list2finseq")
                                                                (("2"
                                                                  (rewrite
                                                                   "map_length[vert_circ(G), vert(G)]"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("3"
                                                                    (expand
                                                                     "vert?")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "length_append[vert_circ(G)]")
                                    nil nil)
                                   ("3" (skeep)
                                    (("3" (typepred "vc`v")
                                      (("3"
                                        (expand "vert?")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep :preds? t)
              (("2" (expand "list2finseq" -2)
                (("2" (rewrite "map_length[vert_circ(G), vert(G)]" -)
                  (("1" (rewrite "length_append[vert_circ(G)]")
                    (("1" (expand "finseq_appl")
                      (("1" (expand "list2finseq")
                        (("1" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                          (("1"
                            (inst -1 "LAMBDA (vc: vert_circ(G)): vc`v"
                             "append[vert_circ(G)](cd1, cd2)" "_")
                            (("1" (inst-cp -1 "n")
                              (("1" (inst -1 "1+n")
                                (("1" (replaces -1)
                                  (("1" (replaces -1)
                                    (("1" (lemma "nth_append[vert_circ(G)]")
                                      (("1"
                                        (inst -1 "cd1" "cd2" "_")
                                        (("1"
                                          (inst-cp -1 "n")
                                          (("1"
                                            (inst -1 "1+n")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (lift-if 1)
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (typepred (cd1))
                                                          (("1"
                                                            (expand "walk?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (inst - "n")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -
                                                                                 "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                 "cd1"
                                                                                 " n")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                   "cd1"
                                                                                   " 1+n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred (cd2))
                                                          (("2"
                                                            (expand "walk?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -
                                                                 "n- length(cd1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "finseq_appl")
                                                                    (("1"
                                                                      (expand
                                                                       "list2finseq")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_length[vert_circ(G), vert(G)]"
                                                                         -)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -3)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -
                                                                                 "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                 "cd2"
                                                                                 " n- length(cd1)")
                                                                                (("1"
                                                                                  (inst
                                                                                   -
                                                                                   "LAMBDA (vc: vert_circ(G)): vc`v"
                                                                                   "cd2"
                                                                                   " 1- length(cd1)+n")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep
                                                                   :preds?
                                                                   t)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (rewrite "length_append[vert_circ(G)]")
                                  (("2" (assert) nil nil)) nil))
                                nil)
                               ("2" (rewrite "length_append[vert_circ(G)]")
                                (("2" (assert) nil nil)) nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (nth_append formula-decl nil more_list_props structures))
   nil)
  (append_decomp-1 nil 3656856160
   (""
    (case "FORALL (G: ConcreteDigraph, n: posnat, cd1, cd2: walk_decomp(G)):
       n=length(cd1) AND  edge?(G)(nth(cd1, length(cd1) - 1)`v, nth(cd2, 0)`v) IMPLIES
         decomp_to_walk(G, append[vert_circ(G)](cd1, cd2)) =
          decomp_to_walk(G, cd1) o decomp_to_walk(G, cd2)")
    (("1" (postpone) nil nil) ("2" (postpone) nil nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil))
    nil)
   nil shostak))
 (append_commute_TCC1 0
  (append_commute_TCC1-1 nil 3656857083
   ("" (lemma "append_decomp") (("" (propax) nil nil)) nil)
   ((append_decomp formula-decl nil circuit_decomp_ nil)) nil
   (append_commute subtype
    "list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd1, circuit_decomp_.cd2)"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)")))
 (append_commute 0
  (append_commute-1 nil 3656857307
   (""
    (case "FORALL (G: ConcreteDigraph, n: posnat, cd1, cd2: walk_decomp(G)):
       n=length(cd1) AND  edge?(G)(nth(cd1, length(cd1) - 1)`v, nth(cd2, 0)`v) IMPLIES
         decomp_to_walk(G, append[vert_circ(G)](cd1, cd2)) =
          decomp_to_walk(G, cd1) o decomp_to_walk(G, cd2)")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst -1 "length(cd1)")
          (("1" (assert) nil nil)
           ("2" (skeep)
            (("2" (typepred "vc`v")
              (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (assert) nil nil) ("2" (flatten) (("2" (assert) nil nil)) nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (case "j=0")
              (("1" (replace -1)
                (("1" (replace -4 :dir rl)
                  (("1" (simplify)
                    (("1" (hide -2)
                      (("1" (expand "append " 1)
                        (("1" (lift-if 1)
                          (("1" (ground)
                            (("1" (expand "length") (("1" (assert) nil nil))
                              nil)
                             ("2" (expand "decomp_to_walk" 2 1)
                              (("2" (expand "length" 2 1)
                                (("2" (rewrite "length_append[vert_circ(G)]")
                                  (("1" (assert)
                                    (("1" (expand "append" 2)
                                      (("1"
                                        (lift-if 2)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "decomp_to_walk" 1 2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length")
                                            (("2"
                                              (expand "length")
                                              (("2" (ground) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep)
                                    (("2" (typepred "vc`v")
                                      (("2"
                                        (expand "vert?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "append" 2)
                (("2" (lift-if 2)
                  (("2" (assert)
                    (("2" (ground)
                      (("1" (expand "length") (("1" (assert) nil nil)) nil)
                       ("2" (expand "decomp_to_walk" 2 1)
                        (("2" (expand "length" 2)
                          (("2" (rewrite "length_append[vert_circ(G)]")
                            (("1" (assert)
                              (("1" (expand "decomp_to_walk" 2 2)
                                (("1" (inst -1 "G" "cdr(cd1)" "cd2")
                                  (("1" (assert)
                                    (("1" (expand "length" -3)
                                      (("1"
                                        (expand "length" -4)
                                        (("1"
                                          (expand "nth" -4 1)
                                          (("1"
                                            (lift-if -4)
                                            (("1"
                                              (split -4)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (rewrite "o_assoc")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (typepred "vc`v")
                                                        (("2"
                                                          (expand "vert?")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (skeep)
                                    (("2" (typepred "vc`v")
                                      (("2"
                                        (expand "vert?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (lemma "append_decomp")
              (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep)
          (("5" (skeep)
            (("5" (skeep)
              (("5" (typepred "vc`v")
                (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("6" (skeep)
          (("6" (skeep)
            (("6" (skeep)
              (("6" (typepred "vc`v")
                (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("7" (skeep)
          (("7" (skeep)
            (("7" (skeep)
              (("7" (typepred "vc`v")
                (("7" (expand "vert?") (("7" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "append_decomp")
      (("3" (skeep) (("3" (inst?) (("3" (assert) nil nil)) nil)) nil)) nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (typepred "vc`v")
          (("5" (expand "vert?") (("5" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (typepred "vc`v")
          (("6" (expand "vert?") (("6" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((O const-decl "finseq" finite_sequences nil)
    (append def-decl "list[T]" list_props nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (append_decomp formula-decl nil circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (o_assoc formula-decl nil finite_sequences nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (circuit_vertex_TCC1 0
  (circuit_vertex_TCC1-1 nil 3656931646 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil
   (circuit_vertex subtype "0" "below[nth[vert_circ(G)](cd, i)`c`length]")))
 (circuit_vertex 0
  (circuit_vertex-3 "" 3744401639
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                             n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct " n")
        (("1" (skeep)
          (("1" (typepred (cd))
            (("1" (replace -4 :dir rl)
              (("1" (expand "nth")
                (("1" (expand "every")
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (expand "length") (("1" (assert) nil nil)) nil)
                         ("2" (replace -1)
                          (("2" (expand "gen_seq1") (("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (expand "circuit_at?")
                          (("3" (expand "finseq_appl")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (inst -1 " G" "cdr(cd)" "j")
                  (("1" (lemma " cdr_decomp")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep) (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_decomp formula-decl nil circuit_decomp_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (circuit_vertex-2 "" 3744386324
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
               n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct " n")
        (("1" (skeep)
          (("1" (typepred (cd))
            (("1" (replace -4 :dir rl)
              (("1" (expand "nth")
                (("1" (expand "every")
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (expand "length") (("1" (assert) nil nil)) nil)
                         ("2" (replace -1)
                          (("2" (expand "gen_seq1") (("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (expand "circuit_at?")
                          (("3" (expand "finseq_appl")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (inst -1 " G" "cdr(cd)" "j")
                  (("1" (lemma " cdr_decomp")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (postpone) nil nil)
                   ("3" (skeep)
                    (("3" (typepred "vc`v")
                      (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep) (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak)
  (circuit_vertex-1 nil 3656931713
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
        n=i IMPLIES nth(cd, i)`c`seq(0) = nth(cd, i)`v")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct " n")
        (("1" (skeep)
          (("1" (typepred (cd))
            (("1" (replace -4 :dir rl)
              (("1" (expand "nth")
                (("1" (expand "every")
                  (("1" (ground)
                    (("1" (lift-if -1)
                      (("1" (ground)
                        (("1" (expand "length") (("1" (assert) nil nil)) nil)
                         ("2" (replace -1)
                          (("2" (expand "gen_seq1") (("2" (propax) nil nil))
                            nil))
                          nil)
                         ("3" (expand "circuit_at?")
                          (("3" (expand "finseq_appl")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (inst -1 " G" "cdr(cd)" "j")
                  (("1" (lemma " cdr_decomp")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep) (("4" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil))
   shostak))
 (circuit_first_last_TCC1 0
  (circuit_first_last_TCC1-1 nil 3656932865 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil))
   nil
   (circuit_first_last subtype
    "(number_fields.-)(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].nth(circuit_decomp_.cd, circuit_decomp_.i)`c`length, 1)"
    "below[nth[vert_circ(G)](cd, i)`c`length]")))
 (circuit_first_last 0
  (circuit_first_last-3 "" 3744401699
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                      n=i implies nth(cd, i)`c`seq(0) = nth(cd, i)`c`seq(nth(cd, i)`c`length - 1)")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep :preds? t)
          (("1" (replace -5 :dir rl)
            (("1" (expand "nth")
              (("1" (expand "every")
                (("1" (lift-if -1)
                  (("1" (ground)
                    (("1" (expand "length") (("1" (assert) nil nil)) nil)
                     ("2" (replaces -1)
                      (("2" (expand "gen_seq1") (("2" (propax) nil nil)) nil))
                      nil)
                     ("3" (expand "circuit_at?")
                      (("3" (expand "circuit?")
                        (("3" (expand "pre_circuit?")
                          (("3" (expand "finseq_appl")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth " 1)
                (("2" (inst?)
                  (("1" (lemma "cdr_decomp")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil))
    nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr_decomp formula-decl nil circuit_decomp_ nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (circuit? const-decl "bool" circuits_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (circuit_first_last-2 "" 3744386425
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
                      n=i implies nth(cd, i)`c`seq(0) = nth(cd, i)`c`seq(nth(cd, i)`c`length - 1)")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep :preds? t)
          (("1" (replace -5 :dir rl)
            (("1" (expand "nth")
              (("1" (expand "every")
                (("1" (lift-if -1)
                  (("1" (ground)
                    (("1" (expand "length") (("1" (assert) nil nil)) nil)
                     ("2" (replaces -1)
                      (("2" (expand "gen_seq1") (("2" (propax) nil nil)) nil))
                      nil)
                     ("3" (expand "circuit_at?")
                      (("3" (expand "circuit?")
                        (("3" (expand "pre_circuit?")
                          (("3" (expand "finseq_appl")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth " 1)
                (("2" (inst?)
                  (("1" (lemma "cdr_decomp")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (postpone) nil nil)
                   ("3" (skeep)
                    (("3" (typepred "vc`v")
                      (("3" (expand "vert?") (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil))
   shostak)
  (circuit_first_last-1 nil 3656932866
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, cd: walk_decomp(G), i: below(length(cd))):
               n=i implies nth(cd, i)`c`seq(0) = nth(cd, i)`c`seq(nth(cd, i)`c`length - 1)")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep :preds? t)
          (("1" (replace -5 :dir rl)
            (("1" (expand "nth")
              (("1" (expand "every")
                (("1" (lift-if -1)
                  (("1" (ground)
                    (("1" (expand "length") (("1" (assert) nil nil)) nil)
                     ("2" (replaces -1)
                      (("2" (expand "gen_seq1") (("2" (propax) nil nil)) nil))
                      nil)
                     ("3" (expand "circuit_at?")
                      (("3" (expand "circuit?")
                        (("3" (expand "pre_circuit?")
                          (("3" (expand "finseq_appl")
                            (("3" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth " 1)
                (("2" (inst?)
                  (("1" (lemma "cdr_decomp")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                   ("2" (skeep)
                    (("2" (typepred "vc`v")
                      (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil)
         ("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "vc`v")
              (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (skeep) (("5" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (typepred "vc`v")
          (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil))
    nil)
   ((pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil))
   shostak))
 (shrink_repeat 0
  (shrink_repeat-3 "" 3744391278
   ("" (skeep)
    (("" (skoletin)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (case "j<length(cd)")
            (("1" (expand "finseq_appl")
              (("1"
                (name "vc_ij"
                      "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)")
                (("1"
                  (name "scd_fr"
                        "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF")
                  (("1" (name "scd_ba" "cd^(1+j, length(cd)-1)")
                    (("1"
                      (name "scd"
                            "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)")
                      (("1"
                        (case "length[vert_circ(G)](scd) = i+length(cd) -j")
                        (("1"
                          (case "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
                                       walk?(G,
                                                 list2finseq[vert(G)]
                                                     (map[vert_circ(G), vert(G)]
                                                          (LAMBDA (vc: vert_circ(G)): vc`v)
                                                          (append[vert_circ(G)](scd_fr, (: vc_ij :))
                                                                )))")
                          (("1"
                            (case "length[vert_circ(G)](scd) >0 AND walk?(G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                                                               (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))")
                            (("1" (inst + "scd")
                              (("1" (replace -11 1)
                                (("1" (expand "drop_circuits" 1)
                                  (("1" (expand "list2finseq" 1)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]")
                                      (("1"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred (W))
                                            (("1"
                                              (case "j=length(cd)-1")
                                              (("1"
                                                (replace -1 -9)
                                                (("1"
                                                  (simplify -9)
                                                  (("1"
                                                    (expand "^" -9)
                                                    (("1"
                                                      (replace -9 -8 :dir rl)
                                                      (("1"
                                                        (rewrite
                                                         "append_null_right[vert_circ(G)]")
                                                        (("1"
                                                          (lift-if -10)
                                                          (("1"
                                                            (split -10)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -11
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "append_null_left[vert_circ(G)]")
                                                                  (("1"
                                                                    (replace
                                                                     -11
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "decomp_to_walk"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "vc_ij")
                                                                            (("1"
                                                                              (case
                                                                               "cd = cd^(i,j)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "list_extensionality[vert_circ(G)]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_length[vert_circ(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "caret_nth[vert_circ(G)]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "(i,j)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -10
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -10
                                                                   2
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "append_commute")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "caret_commute")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "o"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "walk_index"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "walk_index"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   " nth"
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "walk_index"
                                                                                                     3
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "walk_index"
                                                                                                       3
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           " walk_index_ub")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "G"
                                                                                                             "cd"
                                                                                                             "i-1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "decomp_to_walk"
                                                                                                                 3
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   3
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     3
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "vc_ij")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "caret_commute")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "G"
                                                                                                                           "cd"
                                                                                                                           "i"
                                                                                                                           "j")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   3)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         (-2
                                                                                                                                          -3
                                                                                                                                          -4
                                                                                                                                          -5
                                                                                                                                          -11
                                                                                                                                          -12
                                                                                                                                          -13))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "walk_index_sincr")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "j")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "walk_index_ub")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "G"
                                                                                                                                                       "cd"
                                                                                                                                                       "j")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "min")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if
                                                                                                                                           3)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "walk_index_ub")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "G"
                                                                                                                                                     "cd"
                                                                                                                                                     "j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "walk_index_last")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "G"
                                                                                                                                                   "cd"
                                                                                                                                                   "i-1")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (move-terms
                                                                                                                                                       -1
                                                                                                                                                       r
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         2
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (simplify
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -7
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               (-13
                                                                                                                                                                -14
                                                                                                                                                                -15
                                                                                                                                                                -17))
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 (-11
                                                                                                                                                                  -12))
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     (-2
                                                                                                                                                                      -4))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "cd = cd^(0, length(cd)-1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "list_extensionality[vert_circ(G)]")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst?)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (ground)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_length[vert_circ(G)]")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (skeep)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "vc`v")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "vert?")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_nth[vert_circ(G)]")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skeep)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "vc`v")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "vert?")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skeep)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "vc`v")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "vert?")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "walk_index"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "o"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "walk_index_ub")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "G"
                                                                                                     "cd"
                                                                                                     "i-1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "min"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "decomp_to_walk"
                                                                                                                 2
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "min"
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "vc_ij")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             (-2
                                                                                                                              -3
                                                                                                                              -9
                                                                                                                              -10
                                                                                                                              -11))
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "caret_commute")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "G"
                                                                                                                                 "cd"
                                                                                                                                 "i"
                                                                                                                                 "j")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_last")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "i-1")
                                                                                                                                        (("2"
                                                                                                                                          (move-terms
                                                                                                                                           -1
                                                                                                                                           r
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (simplify
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "^"
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "walk_index_sincr")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "G"
                                                                                                                                                         "cd"
                                                                                                                                                         "i-1"
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skeep)
                                                                                        (("4"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("4"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "caret_nth[vert_circ(G)]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "cd"
                                                                             "length(cd ^ (0, i - 1)) - 1"
                                                                             "(0, i-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_length[vert_circ(G)]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "vc_ij")
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-8
                                                                                                -9
                                                                                                -10
                                                                                                -11
                                                                                                -12))
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 (cd))
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    -2))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "walk?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "list2finseq")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finseq_appl")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "i-1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "caret_length[vert_circ(G)]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("3"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "walk?"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (expand
                                                                             "list2finseq")
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "verts_in?")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "map")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "vc_ij`v")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "caret_decomp")
                                                                        (("3"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("4"
                                                                            (expand
                                                                             "vert?")
                                                                            (("4"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -7 2 :dir rl)
                                                (("2"
                                                  (lemma "append_commute")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lift-if -11)
                                                          (("1"
                                                            (split -11)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "append_null_left[vert_circ(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "(: vc_ij :)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "decomp_to_walk"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vc_ij")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -13
                                                                                     2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       2)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "o"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_commute")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "caret_commute")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "walk_index"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "walk_index_ub")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "G"
                                                                                                                     "cd"
                                                                                                                     "j")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "min"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "^"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lift-if
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "walk_index_last")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "G"
                                                                                                                                   "cd"
                                                                                                                                   "j")
                                                                                                                                  (("1"
                                                                                                                                    (move-terms
                                                                                                                                     -1
                                                                                                                                     r
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (simplify
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "walk_index_sincr")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "G"
                                                                                                                                               "cd"
                                                                                                                                               "j "
                                                                                                                                               "length(cd) -1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "walk_index_ub")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "G"
                                                                                                                                                     "cd"
                                                                                                                                                     "length(cd)-1")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "vc`v")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "vert?")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "vc`v")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "vert?")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "walk_index_ub")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "G"
                                                                                                                                     "cd"
                                                                                                                                     "length(cd)-1")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "min"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "walk_index_last")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "G"
                                                                                                                                             "cd"
                                                                                                                                             "j")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               3)
                                                                                                                                              (("1"
                                                                                                                                                (simplify
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "subl_idemp"
                                                                                                                                                       3)
                                                                                                                                                      (("1"
                                                                                                                                                        (typepred
                                                                                                                                                         "cd")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "length")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "vc`v")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "vert?")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_commute")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "walk_index"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "caret_commute")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "walk_index_last")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "G"
                                                                                                                   "cd"
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (move-terms
                                                                                                                       -1
                                                                                                                       r
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "walk_index(G, cd, length(cd) - 1)")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "subl_idemp"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "caret_o")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_sincr")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "j"
                                                                                                                                         "length(cd)-1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "walk_index_ub")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "G"
                                                                                                                                               "cd"
                                                                                                                                               "length(cd)-1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "vc`v")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "vert?")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "vc`v")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "vert?")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "length")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "vc`v")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "vert?")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "vc`v")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "vert?")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "append_commute")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "G"
                                                                   "scd_fr"
                                                                   "(: vc_ij :)")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "decomp_to_walk"
                                                                       -1
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               3
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_o_caret")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vc_ij"
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "caret_commute")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "walk_index"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "caret_commute")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "walk_index_last")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "G"
                                                                                                           "cd"
                                                                                                           "i-1")
                                                                                                          (("1"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             r
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (simplify
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       (-2
                                                                                                                        -4))
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "walk_index_ub")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "walk_index_sincr")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "G"
                                                                                                                                   "cd"
                                                                                                                                   "i"
                                                                                                                                   "j")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_pos")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "i"
                                                                                                                                         "i")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             (-1
                                                                                                                                              -2))
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "walk_index_incr")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -3
                                                                                                                                                           -1
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             3)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -13
                                                                                                                                                               3
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "caret_commute")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       (-2
                                                                                                                                                                        -3
                                                                                                                                                                        -4))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "walk_index_last")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "G"
                                                                                                                                                                           "cd"
                                                                                                                                                                           "j")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (move-terms
                                                                                                                                                                             -1
                                                                                                                                                                             r
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replaces
                                                                                                                                                                               -1
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "subl_idemp"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_o")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           " walk_index(G, cd, j) - 1"
                                                                                                                                                                                           "decomp_to_walk(G, cd)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "walk_index_sincr")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "G"
                                                                                                                                                                                                 "cd"
                                                                                                                                                                                                 "j"
                                                                                                                                                                                                 "length(cd)-1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "walk_index_ub")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "G"
                                                                                                                                                                                                       "cd"
                                                                                                                                                                                                       "length(cd) -1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                           "vc`v")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "vert?")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     "vc`v")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "vert?")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "vc`v")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "vert?")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "walk_index_pos")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "j")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (lemma
                                                                         "caret_nth[vert_circ(G)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "cd"
                                                                           "i-1"
                                                                           "(0, i-1)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "caret_length[vert_circ(G)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "cd"
                                                                                 "(0, i-1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -2
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "vc_ij"
                                                                                           1)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             (cd))
                                                                                            (("2"
                                                                                              (hide
                                                                                               (-1
                                                                                                -2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "walk?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "list2finseq"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "map_length[vert_circ(G), vert(G)]"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i-1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "map"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "map"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "list2finseq")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "walk?"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "verts_in?")
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc_ij`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "caret_decomp")
                                                                    (("3"
                                                                      (replace
                                                                       -2
                                                                       :dir
                                                                       rl)
                                                                      (("3"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append[vert_circ(G)]")
                                                        (("2"
                                                          (lemma
                                                           "nth_append[vert_circ(G)]")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "vc_ij"
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -10
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "caret_nth[vert_circ(G)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "cd"
                                                                             "1+j"
                                                                             "(1+j, length(cd)-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (typepred
                                                                                   (cd))
                                                                                  (("1"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "walk?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "j")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "list2finseq"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "finseq_appl"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -17
                                                                                                   -16)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "drop_circuits"
                                                                                                     -16)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "list2finseq"
                                                                                                       -16)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -16
                                                                                                         -1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "map_length[vert_circ(G), vert(G)]"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "vc`v")
                                                                (("2"
                                                                  (expand
                                                                   "vert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -8 :dir rl)
                                                      (("2"
                                                        (lemma "caret_decomp")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "vc`v")
                                                                (("2"
                                                                  (expand
                                                                   "vert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (case "j=length(cd)-1")
                                (("1" (replace -1 -5)
                                  (("1" (simplify -5)
                                    (("1" (expand "^" -5)
                                      (("1"
                                        (replace -5 -4 :dir rl)
                                        (("1"
                                          (rewrite
                                           "append_null_right[vert_circ(G)]")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "append_decomp")
                                  (("2"
                                    (inst - "G "
                                     "append[vert_circ(G)](scd_fr, (: vc_ij :))"
                                     " scd_ba")
                                    (("1" (assert)
                                      (("1"
                                        (hide (-1 -2))
                                        (("1"
                                          (lemma "nth_append[vert_circ(G)]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "length_append[vert_circ(G)]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replaces -1 1)
                                                    (("1"
                                                      (replace -2 1 :dir rl)
                                                      (("1"
                                                        (lemma
                                                         "caret_nth[vert_circ(G)]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "cd"
                                                           "1+j"
                                                           "(1 + j, length(cd) - 1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "vc_ij")
                                                                  (("1"
                                                                    (replace
                                                                     -8
                                                                     -7)
                                                                    (("1"
                                                                      (expand
                                                                       "drop_circuits"
                                                                       -7)
                                                                      (("1"
                                                                        (expand
                                                                         "list2finseq"
                                                                         -7)
                                                                        (("1"
                                                                          (lemma
                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -6
                                                                                       1)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         (cd))
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -2))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "walk?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "finseq_appl")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "list2finseq"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "map_length[vert_circ(G), vert(G)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "length_append[vert_circ(G)]")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (typepred "vc`v")
                                                (("3"
                                                  (expand "vert?")
                                                  (("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (replace -4 :dir rl)
                                      (("2"
                                        (lemma "caret_decomp")
                                        (("2"
                                          (inst?)
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (typepred "vc`v")
                                                (("2"
                                                  (expand "vert?")
                                                  (("2" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (skeep)
                                      (("3"
                                        (typepred "vc`v")
                                        (("3"
                                          (expand "vert?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3" (expand "list2finseq")
                                (("3"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  nil nil))
                                nil))
                              nil)
                             ("4" (flatten)
                              (("4" (skeep)
                                (("4" (typepred "vc`v")
                                  (("4" (expand "vert?")
                                    (("4" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lift-if -4)
                            (("2" (split -4)
                              (("1" (flatten)
                                (("1" (replace -2 :dir rl)
                                  (("1"
                                    (rewrite "append_null_left[vert_circ(G)]")
                                    (("1" (expand "length" 1)
                                      (("1"
                                        (expand "length" 1)
                                        (("1"
                                          (expand "map")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "list2finseq")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (expand "walk?")
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (typepred
                                                                 "vc_ij`v")
                                                                (("1"
                                                                  (expand
                                                                   "vert?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (rewrite "length_append[vert_circ(G)]")
                                  (("2" (assert)
                                    (("2" (hide 3)
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand "verts_in?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand "list2finseq")
                                                (("1"
                                                  (lemma
                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (typepred
                                                         "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v")
                                                        (("1"
                                                          (expand "vert?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred (i!1))
                                                      (("2"
                                                        (expand "list2finseq")
                                                        (("2"
                                                          (rewrite
                                                           "map_length[vert_circ(G), vert(G)]")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep :preds? t)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand "list2finseq")
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("2"
                                                    (rewrite
                                                     "length_append[vert_circ(G)]")
                                                    (("2"
                                                      (simplify -2)
                                                      (("2"
                                                        (lemma
                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (lemma
                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_append[vert_circ(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "scd_fr"
                                                                       "(: vc_ij :)"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "n")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1+n")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_decomp")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "walk?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "n")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "list2finseq")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "map_length[vert_circ(G), vert(G)]")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "vc`v")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "vert?")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "vc`v")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "vert?")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (case
                                                                                         "n = length(scd_fr)-1")
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           -1
                                                                                           r
                                                                                           2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (simplify
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vc_ij")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "caret_nth[vert_circ(G)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "cd"
                                                                                                         "n"
                                                                                                         "(0, i-1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -7
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "caret_length[vert_circ(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (move-terms
                                                                                                                         -2
                                                                                                                         l
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             (-3
                                                                                                                              -4))
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               (cd))
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "walk?")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "i-1")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "finseq_appl")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "list2finseq")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "length_append[vert_circ(G)]")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_append")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "vc`v")
                                                              (("3"
                                                                (expand
                                                                 "vert?")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (flatten)
                            (("3" (expand "list2finseq")
                              (("3"
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                nil nil))
                              nil))
                            nil)
                           ("4" (flatten)
                            (("4" (skeep)
                              (("4" (typepred "vc`v")
                                (("4" (expand "vert?")
                                  (("4" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (replace -1 :dir rl)
                            (("2" (lemma "length_append[vert_circ(G)]")
                              (("2" (inst?)
                                (("1" (replace -1)
                                  (("1" (lemma "length_append[vert_circ(G)]")
                                    (("1" (inst - "scd_fr" "(: vc_ij :)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 1)
                                            (("1"
                                              (case
                                               "length[vert_circ(G)](scd_fr) = i")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -5 :dir rl)
                                                  (("1"
                                                    (case "j=length(cd) -1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (simplify 1)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand "length")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "caret_length[vert_circ(G)]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lift-if -5)
                                                (("2"
                                                  (split -5)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2 :dir rl)
                                                      (("1"
                                                        (expand "length")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -1 :dir rl)
                                                      (("2"
                                                        (lemma
                                                         "caret_length[vert_circ(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten) (("3" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil)
                 ("3" (lemma "caret_decomp")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred (j))
              (("2" (replace -4)
                (("2" (expand "drop_circuits")
                  (("2" (expand "list2finseq")
                    (("2" (rewrite "map_length[vert_circ(G), vert(G)]") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "vc`v")
                (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (typepred "vc`v")
            (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((caret_nth formula-decl nil more_list_props structures)
    (caret_length formula-decl nil more_list_props structures)
    (list_extensionality formula-decl nil more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (caret_o formula-decl nil seq_extras structures)
    (subl_idemp formula-decl nil more_list_props structures)
    (caret_o_caret formula-decl nil seq_extras structures)
    (nth_append formula-decl nil more_list_props structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures)
    (walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak)
  (shrink_repeat-2 nil 3659863649
   ("" (skeep)
    (("" (skoletin)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (case "j<length(cd)")
            (("1" (expand "finseq_appl")
              (("1"
                (name "vc_ij"
                      "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)")
                (("1"
                  (name "scd_fr"
                        "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF")
                  (("1" (name "scd_ba" "cd^(1+j, length(cd)-1)")
                    (("1"
                      (name "scd"
                            "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)")
                      (("1"
                        (case "length[vert_circ(G)](scd) = i+length(cd) -j")
                        (("1"
                          (case "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
                    walk?(G,
                              list2finseq[vert(G)]
                                  (map[vert_circ(G), vert(G)]
                                       (LAMBDA (vc: vert_circ(G)): vc`v)
                                       (append[vert_circ(G)](scd_fr, (: vc_ij :))
                                             )))")
                          (("1"
                            (case "length[vert_circ(G)](scd) >0 AND walk?(G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                                          (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))")
                            (("1" (inst + "scd")
                              (("1" (replace -11 1)
                                (("1" (expand "drop_circuits" 1)
                                  (("1" (expand "list2finseq" 1)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]")
                                      (("1"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred (W))
                                            (("1"
                                              (case "j=length(cd)-1")
                                              (("1"
                                                (replace -1 -9)
                                                (("1"
                                                  (simplify -9)
                                                  (("1"
                                                    (expand "^" -9)
                                                    (("1"
                                                      (replace -9 -8 :dir rl)
                                                      (("1"
                                                        (rewrite
                                                         "append_null_right[vert_circ(G)]")
                                                        (("1"
                                                          (lift-if -10)
                                                          (("1"
                                                            (split -10)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -11
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "append_null_left[vert_circ(G)]")
                                                                  (("1"
                                                                    (replace
                                                                     -11
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "decomp_to_walk"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "vc_ij")
                                                                            (("1"
                                                                              (case
                                                                               "cd = cd^(i,j)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "list_extensionality[vert_circ(G)]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_length[vert_circ(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil)))))
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "caret_nth[vert_circ(G)]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "(i,j)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil)))))))))))))))
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))))))))))))))))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -10
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -10
                                                                   2
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "append_commute")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "caret_commute")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "o"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "walk_index"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "walk_index"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil)))))))))))
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   " nth"
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "walk_index"
                                                                                                     3
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "walk_index"
                                                                                                       3
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           " walk_index_ub")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "G"
                                                                                                             "cd"
                                                                                                             "i-1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "decomp_to_walk"
                                                                                                                 3
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   3
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     3
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "vc_ij")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "caret_commute")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "G"
                                                                                                                           "cd"
                                                                                                                           "i"
                                                                                                                           "j")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   3)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         (-2
                                                                                                                                          -3
                                                                                                                                          -4
                                                                                                                                          -5
                                                                                                                                          -11
                                                                                                                                          -12
                                                                                                                                          -13))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "walk_index_sincr")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "j")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "walk_index_ub")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "G"
                                                                                                                                                       "cd"
                                                                                                                                                       "j")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil)))))))))))))))))))
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "min")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if
                                                                                                                                           3)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "walk_index_ub")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "G"
                                                                                                                                                     "cd"
                                                                                                                                                     "j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil)))))))))
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "walk_index_last")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "G"
                                                                                                                                                   "cd"
                                                                                                                                                   "i-1")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (move-terms
                                                                                                                                                       -1
                                                                                                                                                       r
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         2
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (simplify
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -7
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               (-13
                                                                                                                                                                -14
                                                                                                                                                                -15
                                                                                                                                                                -17))
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 (-11
                                                                                                                                                                  -12))
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     (-2
                                                                                                                                                                      -4))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "cd = cd^(0, length(cd)-1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "list_extensionality[vert_circ(G)]")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst?)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (ground)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_length[vert_circ(G)]")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (skeep)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "vc`v")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "vert?")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil)))))))))))
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_nth[vert_circ(G)]")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skeep)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "vc`v")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "vert?")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil)))))))))))))))))))
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skeep)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "vc`v")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "vert?")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                       ("2"
                                                                                        (expand
                                                                                         "walk_index"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "o"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "walk_index_ub")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "G"
                                                                                                     "cd"
                                                                                                     "i-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil)))))
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "decomp_to_walk"
                                                                                                                 2
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "min"
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "vc_ij")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             (-2
                                                                                                                              -3
                                                                                                                              -9
                                                                                                                              -10
                                                                                                                              -11))
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "caret_commute")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "G"
                                                                                                                                 "cd"
                                                                                                                                 "i"
                                                                                                                                 "j")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_last")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "i-1")
                                                                                                                                        (("2"
                                                                                                                                          (move-terms
                                                                                                                                           -1
                                                                                                                                           r
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (simplify
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "^"
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "walk_index_sincr")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "G"
                                                                                                                                                         "cd"
                                                                                                                                                         "i-1"
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "vc`v")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vert?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil)))))))
                                                                                             ("3"
                                                                                              (skeep)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil)))
                                                                                             ("4"
                                                                                              (skeep)
                                                                                              (("4"
                                                                                                (skeep)
                                                                                                (("4"
                                                                                                  (typepred
                                                                                                   "vc`v")
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "vert?")
                                                                                                    (("4"
                                                                                                      (propax)
                                                                                                      nil)))))))))
                                                                                             ("5"
                                                                                              (skeep)
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil)))
                                                                                             ("6"
                                                                                              (skeep)
                                                                                              (("6"
                                                                                                (typepred
                                                                                                 "vc`v")
                                                                                                (("6"
                                                                                                  (expand
                                                                                                   "vert?")
                                                                                                  (("6"
                                                                                                    (propax)
                                                                                                    nil)))))))))))))
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("4"
                                                                                        (skeep)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("4"
                                                                                                (propax)
                                                                                                nil)))))))))
                                                                                       ("5"
                                                                                        (skeep)
                                                                                        (("5"
                                                                                          (assert)
                                                                                          nil)))
                                                                                       ("6"
                                                                                        (skeep)
                                                                                        (("6"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("6"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("6"
                                                                                              (propax)
                                                                                              nil)))))))
                                                                                       ("7"
                                                                                        (lemma
                                                                                         "walk_index_bound")
                                                                                        (("7"
                                                                                          (inst?)
                                                                                          (("7"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("7"
                                                                                              (assert)
                                                                                              nil)))))))
                                                                                       ("8"
                                                                                        (skeep)
                                                                                        (("8"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("8"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("8"
                                                                                              (propax)
                                                                                              nil)))))))))))))))))))))
                                                                         ("2"
                                                                          (lemma
                                                                           "caret_nth[vert_circ(G)]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "cd"
                                                                             "length(cd ^ (0, i - 1)) - 1"
                                                                             "(0, i-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_length[vert_circ(G)]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "vc_ij")
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-8
                                                                                                -9
                                                                                                -10
                                                                                                -11
                                                                                                -12))
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 (cd))
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    -2))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "walk?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "list2finseq")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finseq_appl")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "i-1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              nil)))))))))))))))))))))))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (lemma
                                                                               "caret_length[vert_circ(G)]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil)))))
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("3"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil)))))))))))))
                                                                       ("2"
                                                                        (expand
                                                                         "walk?"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (expand
                                                                             "list2finseq")
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "verts_in?")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "map")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "vc_ij`v")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil)))))))))))))))))))))))
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil)))
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("4"
                                                                              (expand
                                                                               "vert?")
                                                                              (("4"
                                                                                (propax)
                                                                                nil)))))))))
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (assert)
                                                                          nil)))
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("6"
                                                                            (expand
                                                                             "vert?")
                                                                            (("6"
                                                                              (propax)
                                                                              nil)))))))
                                                                       ("7"
                                                                        (lemma
                                                                         "caret_decomp")
                                                                        (("7"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil)))))
                                                                       ("8"
                                                                        (assert)
                                                                        (("8"
                                                                          (skeep)
                                                                          (("8"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("8"
                                                                              (expand
                                                                               "vert?")
                                                                              (("8"
                                                                                (propax)
                                                                                nil)))))))))
                                                                       ("9"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))
                                               ("2"
                                                (replace -7 2 :dir rl)
                                                (("2"
                                                  (lemma "append_commute")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lift-if -11)
                                                          (("1"
                                                            (split -11)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "append_null_left[vert_circ(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "(: vc_ij :)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "decomp_to_walk"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vc_ij")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -13
                                                                                     2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       2)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "o"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_commute")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "caret_commute")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "walk_index"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "walk_index_ub")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "G"
                                                                                                                     "cd"
                                                                                                                     "j")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "min"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "^"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lift-if
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "walk_index_last")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "G"
                                                                                                                                   "cd"
                                                                                                                                   "j")
                                                                                                                                  (("1"
                                                                                                                                    (move-terms
                                                                                                                                     -1
                                                                                                                                     r
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (simplify
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "walk_index_sincr")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "G"
                                                                                                                                               "cd"
                                                                                                                                               "j "
                                                                                                                                               "length(cd) -1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "walk_index_ub")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "G"
                                                                                                                                                     "cd"
                                                                                                                                                     "length(cd)-1")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "vc`v")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "vert?")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil)))))))))))))
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "vc`v")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "vert?")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil)))))))))))))))))))))))
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "walk_index_ub")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "G"
                                                                                                                                     "cd"
                                                                                                                                     "length(cd)-1")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "min"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "walk_index_last")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "G"
                                                                                                                                             "cd"
                                                                                                                                             "j")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               3)
                                                                                                                                              (("1"
                                                                                                                                                (simplify
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "subl_idemp"
                                                                                                                                                       3)
                                                                                                                                                      (("1"
                                                                                                                                                        (typepred
                                                                                                                                                         "cd")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "length")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil)))))))))))))))))))))))
                                                                                                                                     ("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "vc`v")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "vert?")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil)))))))))))))))))))))
                                                                                         ("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_commute")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "walk_index"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "caret_commute")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "walk_index_last")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "G"
                                                                                                                   "cd"
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (move-terms
                                                                                                                       -1
                                                                                                                       r
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "walk_index(G, cd, length(cd) - 1)")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "subl_idemp"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "caret_o")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_sincr")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "j"
                                                                                                                                         "length(cd)-1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "walk_index_ub")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "G"
                                                                                                                                               "cd"
                                                                                                                                               "length(cd)-1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "vc`v")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "vert?")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil)))))))))))))
                                                                                                                                         ("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "vc`v")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "vert?")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil)))))))))))))))))
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "length")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil)))))))))))))))))))))))
                                                                                                           ("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "vc`v")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "vert?")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil)))))))))))))))))))))))
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "vc`v")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "vert?")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil)))))))))
                                                                                         ("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil)))))))))))))))))))))))))
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil)))
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("4"
                                                                              (expand
                                                                               "vert?")
                                                                              (("4"
                                                                                (propax)
                                                                                nil)))))))))
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (assert)
                                                                          nil)))
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("6"
                                                                            (expand
                                                                             "vert?")
                                                                            (("6"
                                                                              (propax)
                                                                              nil)))))))))))))))))
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "append_commute")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "G"
                                                                   "scd_fr"
                                                                   "(: vc_ij :)")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "decomp_to_walk"
                                                                       -1
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               3
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_o_caret")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vc_ij"
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "caret_commute")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "walk_index"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "caret_commute")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "walk_index_last")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "G"
                                                                                                           "cd"
                                                                                                           "i-1")
                                                                                                          (("1"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             r
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (simplify
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       (-2
                                                                                                                        -4))
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "walk_index_ub")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "walk_index_sincr")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "G"
                                                                                                                                   "cd"
                                                                                                                                   "i"
                                                                                                                                   "j")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_pos")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "i"
                                                                                                                                         "i")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             (-1
                                                                                                                                              -2))
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "walk_index_incr")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -3
                                                                                                                                                           -1
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             3)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -13
                                                                                                                                                               3
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "caret_commute")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       (-2
                                                                                                                                                                        -3
                                                                                                                                                                        -4))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "walk_index_last")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "G"
                                                                                                                                                                           "cd"
                                                                                                                                                                           "j")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (move-terms
                                                                                                                                                                             -1
                                                                                                                                                                             r
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replaces
                                                                                                                                                                               -1
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "subl_idemp"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_o")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           " walk_index(G, cd, j) - 1"
                                                                                                                                                                                           "decomp_to_walk(G, cd)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "walk_index_sincr")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "G"
                                                                                                                                                                                                 "cd"
                                                                                                                                                                                                 "j"
                                                                                                                                                                                                 "length(cd)-1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "walk_index_ub")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "G"
                                                                                                                                                                                                       "cd"
                                                                                                                                                                                                       "length(cd) -1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                           "vc`v")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "vert?")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil)))))))))))))
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     "vc`v")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "vert?")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil)))))))))))))))))))))
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil)))))))))))))))))))
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "vc`v")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "vert?")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "walk_index_pos")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "j")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                     ("2"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (lemma
                                                                         "caret_nth[vert_circ(G)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "cd"
                                                                           "i-1"
                                                                           "(0, i-1)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "caret_length[vert_circ(G)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "cd"
                                                                                 "(0, i-1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -2
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "vc_ij"
                                                                                           1)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             (cd))
                                                                                            (("2"
                                                                                              (hide
                                                                                               (-1
                                                                                                -2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "walk?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "list2finseq"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "map_length[vert_circ(G), vert(G)]"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i-1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                   ("2"
                                                                    (expand
                                                                     "map"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "map"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "list2finseq")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "walk?"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "verts_in?")
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc_ij`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil)))))))))))))))))))))))
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("3"
                                                                        (expand
                                                                         "vert?")
                                                                        (("3"
                                                                          (propax)
                                                                          nil)))))))
                                                                   ("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (assert)
                                                                      nil)))
                                                                   ("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (skeep)
                                                                      (("5"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("5"
                                                                          (expand
                                                                           "vert?")
                                                                          (("5"
                                                                            (propax)
                                                                            nil)))))))))
                                                                   ("6"
                                                                    (skeep)
                                                                    (("6"
                                                                      (assert)
                                                                      nil)))
                                                                   ("7"
                                                                    (skeep)
                                                                    (("7"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("7"
                                                                        (expand
                                                                         "vert?")
                                                                        (("7"
                                                                          (propax)
                                                                          nil)))))))
                                                                   ("8"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("8"
                                                                      (lemma
                                                                       "caret_decomp")
                                                                      (("8"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (rewrite
                                                         "length_append[vert_circ(G)]")
                                                        (("2"
                                                          (lemma
                                                           "nth_append[vert_circ(G)]")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "vc_ij"
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -10
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "caret_nth[vert_circ(G)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "cd"
                                                                             "1+j"
                                                                             "(1+j, length(cd)-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (typepred
                                                                                   (cd))
                                                                                  (("1"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "walk?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "j")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "list2finseq"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "finseq_appl"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -17
                                                                                                   -16)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "drop_circuits"
                                                                                                     -16)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "list2finseq"
                                                                                                       -16)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -16
                                                                                                         -1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "map_length[vert_circ(G), vert(G)]"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        nil)))))))))))))))))))))))))))))))))))))))))))
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil)))))))))))))))))))))))
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "vc`v")
                                                                (("2"
                                                                  (expand
                                                                   "vert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil)))))))
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (assert)
                                                                nil)))
                                                             ("4"
                                                              (skeep)
                                                              (("4"
                                                                (skeep)
                                                                (("4"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("4"
                                                                    (expand
                                                                     "vert?")
                                                                    (("4"
                                                                      (propax)
                                                                      nil)))))))))
                                                             ("5"
                                                              (skeep)
                                                              (("5"
                                                                (assert)
                                                                nil)))
                                                             ("6"
                                                              (skeep)
                                                              (("6"
                                                                (typepred
                                                                 "vc`v")
                                                                (("6"
                                                                  (expand
                                                                   "vert?")
                                                                  (("6"
                                                                    (propax)
                                                                    nil)))))))))))))))
                                                     ("2"
                                                      (lemma "caret_decomp")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "G"
                                                         "cd"
                                                         "1 + j"
                                                         "length(cd) - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -9 -1)
                                                            (("1"
                                                              (propax)
                                                              nil)))))
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil)))))))))))
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil)))))))
                                                     ("4"
                                                      (skeep)
                                                      (("4" (assert) nil)))
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (skeep)
                                                        (("5"
                                                          (typepred "vc`v")
                                                          (("5"
                                                            (expand "vert?")
                                                            (("5"
                                                              (propax)
                                                              nil)))))))))
                                                     ("6"
                                                      (skeep)
                                                      (("6" (assert) nil)))
                                                     ("7"
                                                      (skeep)
                                                      (("7"
                                                        (typepred "vc`v")
                                                        (("7"
                                                          (expand "vert?")
                                                          (("7"
                                                            (propax)
                                                            nil)))))))))))))))))))))))))))))))
                             ("2" (assert)
                              (("2" (case "j=length(cd)-1")
                                (("1" (replace -1 -5)
                                  (("1" (simplify -5)
                                    (("1" (expand "^" -5)
                                      (("1"
                                        (replace -5 -4 :dir rl)
                                        (("1"
                                          (rewrite
                                           "append_null_right[vert_circ(G)]")
                                          (("1" (assert) nil)))))))))))
                                 ("2" (lemma "append_decomp")
                                  (("2"
                                    (inst - "G "
                                     "append[vert_circ(G)](scd_fr, (: vc_ij :))"
                                     " scd_ba")
                                    (("1" (assert)
                                      (("1"
                                        (hide (-1 -2))
                                        (("1"
                                          (lemma "nth_append[vert_circ(G)]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "length_append[vert_circ(G)]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replaces -1 1)
                                                    (("1"
                                                      (replace -2 1 :dir rl)
                                                      (("1"
                                                        (lemma
                                                         "caret_nth[vert_circ(G)]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "cd"
                                                           "1+j"
                                                           "(1 + j, length(cd) - 1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "vc_ij")
                                                                  (("1"
                                                                    (replace
                                                                     -8
                                                                     -7)
                                                                    (("1"
                                                                      (expand
                                                                       "drop_circuits"
                                                                       -7)
                                                                      (("1"
                                                                        (expand
                                                                         "list2finseq"
                                                                         -7)
                                                                        (("1"
                                                                          (lemma
                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -6
                                                                                       1)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         (cd))
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -2))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "walk?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "finseq_appl")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "list2finseq"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "map_length[vert_circ(G), vert(G)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil)))))))))))))))))))))
                                             ("2"
                                              (rewrite
                                               "length_append[vert_circ(G)]")
                                              (("2" (assert) nil)))
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (typepred "vc`v")
                                                (("3"
                                                  (expand "vert?")
                                                  (("3" (propax) nil)))))))
                                             ("4"
                                              (skeep)
                                              (("4" (assert) nil)))
                                             ("5"
                                              (skeep)
                                              (("5"
                                                (skeep)
                                                (("5"
                                                  (typepred "vc`v")
                                                  (("5"
                                                    (expand "vert?")
                                                    (("5"
                                                      (propax)
                                                      nil)))))))))
                                             ("6"
                                              (skeep)
                                              (("6" (assert) nil)))
                                             ("7"
                                              (skeep)
                                              (("7"
                                                (typepred "vc`v")
                                                (("7"
                                                  (expand "vert?")
                                                  (("7"
                                                    (propax)
                                                    nil)))))))))))))))
                                     ("2" (lemma "caret_decomp")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5)
                                            (("1" (propax) nil)))))
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc`v")
                                            (("2"
                                              (expand "vert?")
                                              (("2" (propax) nil)))))))))))
                                     ("3" (skeep)
                                      (("3"
                                        (typepred "vc`v")
                                        (("3"
                                          (expand "vert?")
                                          (("3" (propax) nil)))))))
                                     ("4" (skeep) (("4" (assert) nil)))
                                     ("5" (skeep)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (typepred "vc`v")
                                          (("5"
                                            (expand "vert?")
                                            (("5" (propax) nil)))))))))
                                     ("6" (skeep) (("6" (assert) nil)))
                                     ("7" (skeep)
                                      (("7"
                                        (typepred "vc`v")
                                        (("7"
                                          (expand "vert?")
                                          (("7" (propax) nil)))))))))))))))
                             ("3" (flatten)
                              (("3" (expand "list2finseq")
                                (("3"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  nil)))))
                             ("4" (flatten)
                              (("4" (skeep)
                                (("4" (typepred "vc`v")
                                  (("4" (expand "vert?")
                                    (("4" (propax) nil)))))))))))
                           ("2" (lift-if -4)
                            (("2" (split -4)
                              (("1" (flatten)
                                (("1" (replace -2 :dir rl)
                                  (("1"
                                    (rewrite "append_null_left[vert_circ(G)]")
                                    (("1" (expand "length" 1)
                                      (("1"
                                        (expand "length" 1)
                                        (("1"
                                          (expand "map")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "list2finseq")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (expand "walk?")
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (typepred
                                                                 "vc_ij`v")
                                                                (("1"
                                                                  (expand
                                                                   "vert?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))))))))))))
                               ("2" (flatten)
                                (("2" (rewrite "length_append[vert_circ(G)]")
                                  (("2" (assert)
                                    (("2" (hide 3)
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand "verts_in?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand "list2finseq")
                                                (("1"
                                                  (lemma
                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (typepred
                                                         "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v")
                                                        (("1"
                                                          (expand "vert?")
                                                          (("1"
                                                            (propax)
                                                            nil)))))))
                                                     ("2"
                                                      (typepred (i!1))
                                                      (("2"
                                                        (expand "list2finseq")
                                                        (("2"
                                                          (rewrite
                                                           "map_length[vert_circ(G), vert(G)]")
                                                          nil)))))
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil)))))))
                                                     ("4"
                                                      (skeep)
                                                      (("4" (assert) nil)))
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (skeep)
                                                        (("5"
                                                          (typepred "vc`v")
                                                          (("5"
                                                            (expand "vert?")
                                                            (("5"
                                                              (propax)
                                                              nil)))))))))
                                                     ("6"
                                                      (skeep)
                                                      (("6" (assert) nil)))
                                                     ("7"
                                                      (skeep)
                                                      (("7"
                                                        (typepred "vc`v")
                                                        (("7"
                                                          (expand "vert?")
                                                          (("7"
                                                            (propax)
                                                            nil)))))))))))))))))
                                           ("2"
                                            (skeep :preds? t)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand "list2finseq")
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("2"
                                                    (rewrite
                                                     "length_append[vert_circ(G)]")
                                                    (("2"
                                                      (simplify -2)
                                                      (("2"
                                                        (lemma
                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (lemma
                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_append[vert_circ(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "scd_fr"
                                                                       "(: vc_ij :)"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "n")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1+n")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_decomp")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "walk?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "n")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "list2finseq")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "map_length[vert_circ(G), vert(G)]")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "vc`v")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "vert?")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil)))))))))))))
                                                                                                                   ("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "vc`v")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "vert?")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil)))))))))))))))))))))))))))))))))))))
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (case
                                                                                         "n = length(scd_fr)-1")
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           -1
                                                                                           r
                                                                                           2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (simplify
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vc_ij")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "caret_nth[vert_circ(G)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "cd"
                                                                                                         "n"
                                                                                                         "(0, i-1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -7
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "caret_length[vert_circ(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (move-terms
                                                                                                                         -2
                                                                                                                         l
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             (-3
                                                                                                                              -4))
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               (cd))
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "walk?")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "i-1")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "finseq_appl")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "list2finseq")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil)))))))))))))))))))
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil)))))))
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil)))
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("4"
                                                                              (expand
                                                                               "vert?")
                                                                              (("4"
                                                                                (propax)
                                                                                nil)))))))))
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (assert)
                                                                          nil)))
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("6"
                                                                            (expand
                                                                             "vert?")
                                                                            (("6"
                                                                              (propax)
                                                                              nil)))))))))))))
                                                                 ("2"
                                                                  (rewrite
                                                                   "length_append[vert_circ(G)]")
                                                                  (("2"
                                                                    (assert)
                                                                    nil)))
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil)))))))
                                                                 ("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (assert)
                                                                    nil)))
                                                                 ("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("5"
                                                                        (expand
                                                                         "vert?")
                                                                        (("5"
                                                                          (propax)
                                                                          nil)))))))))
                                                                 ("6"
                                                                  (skeep)
                                                                  (("6"
                                                                    (assert)
                                                                    nil)))
                                                                 ("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("7"
                                                                      (expand
                                                                       "vert?")
                                                                      (("7"
                                                                        (propax)
                                                                        nil)))))))))))))
                                                           ("2"
                                                            (rewrite
                                                             "length_append[vert_circ(G)]")
                                                            (("2"
                                                              (assert)
                                                              nil)))
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "vc`v")
                                                              (("3"
                                                                (expand
                                                                 "vert?")
                                                                (("3"
                                                                  (propax)
                                                                  nil)))))))
                                                           ("4"
                                                            (skeep)
                                                            (("4"
                                                              (assert)
                                                              nil)))
                                                           ("5"
                                                            (skeep)
                                                            (("5"
                                                              (skeep)
                                                              (("5"
                                                                (typepred
                                                                 "vc`v")
                                                                (("5"
                                                                  (expand
                                                                   "vert?")
                                                                  (("5"
                                                                    (propax)
                                                                    nil)))))))))
                                                           ("6"
                                                            (skeep)
                                                            (("6"
                                                              (assert)
                                                              nil)))
                                                           ("7"
                                                            (skeep)
                                                            (("7"
                                                              (typepred
                                                               "vc`v")
                                                              (("7"
                                                                (expand
                                                                 "vert?")
                                                                (("7"
                                                                  (propax)
                                                                  nil)))))))))))))))))))))))))))))))))))))))
                           ("3" (flatten)
                            (("3" (expand "list2finseq")
                              (("3"
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                nil)))))
                           ("4" (flatten)
                            (("4" (skeep)
                              (("4" (typepred "vc`v")
                                (("4" (expand "vert?")
                                  (("4" (propax) nil)))))))))
                           ("5" (flatten)
                            (("5" (skeep) (("5" (assert) nil)))))
                           ("6" (flatten)
                            (("6" (skeep)
                              (("6" (skeep)
                                (("6" (typepred "vc`v")
                                  (("6" (expand "vert?")
                                    (("6" (propax) nil)))))))))))
                           ("7" (flatten)
                            (("7" (skeep) (("7" (assert) nil)))))
                           ("8" (flatten)
                            (("8" (skeep)
                              (("8" (typepred "vc`v")
                                (("8" (expand "vert?")
                                  (("8" (propax) nil)))))))))))
                         ("2" (hide 2)
                          (("2" (replace -1 :dir rl)
                            (("2" (lemma "length_append[vert_circ(G)]")
                              (("2" (inst?)
                                (("1" (replace -1)
                                  (("1" (lemma "length_append[vert_circ(G)]")
                                    (("1" (inst - "scd_fr" "(: vc_ij :)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 1)
                                            (("1"
                                              (case
                                               "length[vert_circ(G)](scd_fr) = i")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -5 :dir rl)
                                                  (("1"
                                                    (case "j=length(cd) -1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (simplify 1)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand "length")
                                                            (("1"
                                                              (propax)
                                                              nil)))))))))
                                                     ("2"
                                                      (lemma
                                                       "caret_length[vert_circ(G)]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil)))
                                                           ("2" (assert) nil)
                                                           ("3"
                                                            (assert)
                                                            nil)))
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil)))))))))))))))))
                                               ("2"
                                                (lift-if -5)
                                                (("2"
                                                  (split -5)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2 :dir rl)
                                                      (("1"
                                                        (expand "length")
                                                        (("1"
                                                          (assert)
                                                          nil)))))))
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -1 :dir rl)
                                                      (("2"
                                                        (lemma
                                                         "caret_length[vert_circ(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1" (assert) nil)
                                                           ("2"
                                                            (assert)
                                                            nil)))))))))))))))))))))
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (typepred "vc`v")
                                          (("2"
                                            (expand "vert?")
                                            (("2" (propax) nil)))))))
                                       ("3" (skeep) (("3" (assert) nil)))
                                       ("4"
                                        (skeep)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (typepred "vc`v")
                                            (("4"
                                              (expand "vert?")
                                              (("4" (propax) nil)))))))))
                                       ("5" (skeep) (("5" (assert) nil)))
                                       ("6"
                                        (skeep)
                                        (("6"
                                          (typepred "vc`v")
                                          (("6"
                                            (expand "vert?")
                                            (("6" (propax) nil)))))))))))))
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil)))))))
                                 ("3" (skeep) (("3" (assert) nil)))
                                 ("4" (skeep)
                                  (("4" (skeep)
                                    (("4" (typepred "vc`v")
                                      (("4"
                                        (expand "vert?")
                                        (("4" (propax) nil)))))))))
                                 ("5" (skeep) (("5" (assert) nil)))
                                 ("6" (skeep)
                                  (("6" (typepred "vc`v")
                                    (("6" (expand "vert?")
                                      (("6" (propax) nil)))))))))))))))))
                       ("2" (assert)
                        (("2" (expand "every") (("2" (propax) nil)))))
                       ("3" (skeep)
                        (("3" (expand "drop_circuits")
                          (("3" (expand "list2finseq")
                            (("3" (hide -1)
                              (("3"
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                (("3" (lemma "caret_length[vert_circ(G)]")
                                  (("3" (inst?)
                                    (("3" (assert) nil)))))))))))))))
                       ("4" (skeep)
                        (("4" (skeep)
                          (("4" (typepred "vc`v")
                            (("4" (expand "vert?") (("4" (propax) nil)))))))))
                       ("5" (skeep)
                        (("5" (expand "drop_circuits")
                          (("5" (expand "list2finseq")
                            (("5"
                              (rewrite "map_length[vert_circ(G), vert(G)]")
                              (("5" (lemma "caret_length[vert_circ(G)]")
                                (("5" (inst?) (("5" (assert) nil)))))))))))))
                       ("6" (skeep)
                        (("6" (typepred "vc`v")
                          (("6" (expand "vert?") (("6" (propax) nil)))))))
                       ("7" (case "circuit_at?(G, vc_ij`c, vc_ij`v)")
                        (("1" (assert) nil)
                         ("2" (hide 2)
                          (("2" (expand "circuit_at?")
                            (("2" (expand "finseq_appl")
                              (("2" (ground)
                                (("1" (expand "vc_ij")
                                  (("1" (lemma "caret_commute")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "circuit?")
                                            (("1"
                                              (expand "pre_circuit?")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand "finseq_appl")
                                                  (("1"
                                                    (expand "^" 1)
                                                    (("1"
                                                      (case
                                                       "walk_index(G, cd, i) - nth(cd, i)`c`length <=
                                walk_index(G, cd, j)-1  AND walk_index(G, cd, i) - nth(cd, i)`c`length <
                                 decomp_to_walk(G, cd)`length")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "min(nth(cd, i)`c`length + walk_index(G, cd, j) -
                                   walk_index(G, cd, i),
                                  nth(cd, i)`c`length + decomp_to_walk(G, cd)`length -
                                   walk_index(G, cd, i)) = nth(cd, i)`c`length + walk_index(G, cd, j) -
                                   walk_index(G, cd, i)")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (simplify 1)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_sincr")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "cd"
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -2))
                                                                          (("1"
                                                                            (hide
                                                                             (-1
                                                                              -2))
                                                                            (("1"
                                                                              (lemma
                                                                               "decomp_walk_index")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "G"
                                                                                 "cd"
                                                                                 "_"
                                                                                 "_")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "i"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       " j"
                                                                                       "nth(cd, j)`c`length -1")
                                                                                      (("1"
                                                                                        (simplify
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "circuit_first_last")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "G"
                                                                                               "cd"
                                                                                               "j")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "circuit_vertex")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "circuit_vertex")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "drop_circuits")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "list2finseq")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                nil)))))))))))))))))))))))))))))))))))))))))
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil)))))))))))))))))))))))))))))))
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (lemma
                                                                   " walk_index_ub")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (propax)
                                                                          nil)))))))))))))))))))
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "walk_index_sincr")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst - "j")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (lemma
                                                                     "walk_index_ub")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (ground)
                                                                        nil)))))))))))))))))
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "vc`v")
                                                              (("3"
                                                                (expand
                                                                 "vert?")
                                                                (("3"
                                                                  (propax)
                                                                  nil)))))))))))))))))))))))))))))))))
                                 ("2" (expand "vc_ij")
                                  (("2" (expand "decomp_to_walk" 1)
                                    (("2" (ground)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (typepred (cd))
                                              (("1"
                                                (lemma " circuit_vertex")
                                                (("1" (inst?) nil)))))))
                                           ("2"
                                            (expand "o ")
                                            (("2"
                                              (expand "^" 2)
                                              (("2"
                                                (lemma " circuit_vertex")
                                                (("2"
                                                  (inst?)
                                                  nil)))))))))))))))))))))))))))))))
                   ("2" (flatten)
                    (("2" (skeep)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil)))))))))
                   ("3" (flatten) (("3" (assert) nil)))))
                 ("2" (assert) nil)
                 ("3" (lemma "caret_decomp")
                  (("3" (inst?) (("3" (assert) nil)))))))))
             ("2" (typepred (j))
              (("2" (replace -4)
                (("2" (expand "drop_circuits")
                  (("2" (expand "list2finseq")
                    (("2" (rewrite "map_length[vert_circ(G), vert(G)]")
                      nil)))))))))
             ("3" (skeep)
              (("3" (typepred "vc`v")
                (("3" (expand "vert?") (("3" (propax) nil)))))))))))))
       ("2" (skeep)
        (("2" (skeep)
          (("2" (typepred "vc`v")
            (("2" (expand "vert?") (("2" (propax) nil))))))))))))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (length_singleton formula-decl nil more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (caret_nth formula-decl nil more_list_props structures)
    (caret_length formula-decl nil more_list_props structures)
    (list_extensionality formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (caret_o_caret formula-decl nil seq_extras structures)
    (caret_o formula-decl nil seq_extras structures)
    (subl_idemp formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures))
   nil)
  (shrink_repeat-1 nil 3656859422
   ("" (skeep)
    (("" (skoletin)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (case "j<length(cd)")
            (("1" (expand "finseq_appl")
              (("1"
                (name "vc_ij"
                      "(# v:= nth(cd, i)`v, c:= decomp_to_walk(G, cd^(i,j)) #)")
                (("1"
                  (name "scd_fr"
                        "IF i=0 THEN null[vert_circ(G)] ELSE cd^(0,i-1) ENDIF")
                  (("1" (name "scd_ba" "cd^(1+j, length(cd)-1)")
                    (("1"
                      (name "scd"
                            "append[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :)), scd_ba)")
                      (("1"
                        (case "length[vert_circ(G)](scd) = i+length(cd) -j")
                        (("1"
                          (case "length[vert_circ(G)](append[vert_circ(G)](scd_fr, (: vc_ij :))) > 0 AND
 walk?[T](G,
           list2finseq[vert(G)]
               (map[vert_circ(G), vert(G)]
                    (LAMBDA (vc: vert_circ(G)): vc`v)
                    (append[vert_circ(G)](scd_fr, (: vc_ij :))
                          )))")
                          (("1"
                            (case "length[vert_circ(G)](scd) >0 AND walk?[T](G, list2finseq[vert(G)](map[vert_circ(G), vert(G)]
                     (LAMBDA (vc: vert_circ(G)): vc`v)(scd)))")
                            (("1" (inst + "scd")
                              (("1" (replace -11 1)
                                (("1" (expand "drop_circuits" 1)
                                  (("1" (expand "list2finseq" 1)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]")
                                      (("1"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred (W))
                                            (("1"
                                              (case "j=length(cd)-1")
                                              (("1"
                                                (replace -1 -9)
                                                (("1"
                                                  (simplify -9)
                                                  (("1"
                                                    (expand "^" -9)
                                                    (("1"
                                                      (replace -9 -8 :dir rl)
                                                      (("1"
                                                        (rewrite
                                                         "append_null_right[vert_circ(G)]")
                                                        (("1"
                                                          (lift-if -10)
                                                          (("1"
                                                            (split -10)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -11
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (rewrite
                                                                   "append_null_left[vert_circ(G)]")
                                                                  (("1"
                                                                    (replace
                                                                     -11
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "decomp_to_walk"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "vc_ij")
                                                                            (("1"
                                                                              (case
                                                                               "cd = cd^(i,j)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "list_extensionality[vert_circ(G)]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_length[vert_circ(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "caret_nth[vert_circ(G)]")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -
                                                                                                 "(i,j)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -10
                                                                 :dir
                                                                 rl)
                                                                (("2"
                                                                  (replace
                                                                   -10
                                                                   2
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (lemma
                                                                     "append_commute")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (ground)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "caret_commute")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -7
                                                                                     2)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "o"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "^"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "walk_index"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "walk_index"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   " nth"
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "walk_index"
                                                                                                     3
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "walk_index"
                                                                                                       3
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "min")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           " walk_index_ub")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "G"
                                                                                                             "cd"
                                                                                                             "i-1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "decomp_to_walk"
                                                                                                                 3
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   3
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     3
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "vc_ij")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "caret_commute")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "G"
                                                                                                                           "cd"
                                                                                                                           "i"
                                                                                                                           "j")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "^"
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   3)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         (-2
                                                                                                                                          -3
                                                                                                                                          -4
                                                                                                                                          -5
                                                                                                                                          -11
                                                                                                                                          -12
                                                                                                                                          -13))
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "walk_index_sincr")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "j")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "walk_index_ub")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -
                                                                                                                                                       "G"
                                                                                                                                                       "cd"
                                                                                                                                                       "j")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "min")
                                                                                                                                        (("2"
                                                                                                                                          (lift-if
                                                                                                                                           3)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "walk_index_ub")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "G"
                                                                                                                                                     "cd"
                                                                                                                                                     "j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "walk_index_last")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -
                                                                                                                                                   "G"
                                                                                                                                                   "cd"
                                                                                                                                                   "i-1")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (move-terms
                                                                                                                                                       -1
                                                                                                                                                       r
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         2
                                                                                                                                                         :dir
                                                                                                                                                         rl)
                                                                                                                                                        (("2"
                                                                                                                                                          (simplify
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (replace
                                                                                                                                                             -7
                                                                                                                                                             2)
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               (-13
                                                                                                                                                                -14
                                                                                                                                                                -15
                                                                                                                                                                -17))
                                                                                                                                                              (("2"
                                                                                                                                                                (hide
                                                                                                                                                                 (-11
                                                                                                                                                                  -12))
                                                                                                                                                                (("2"
                                                                                                                                                                  (hide
                                                                                                                                                                   -5)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (hide
                                                                                                                                                                     (-2
                                                                                                                                                                      -4))
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (case
                                                                                                                                                                           "cd = cd^(0, length(cd)-1)")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (hide-all-but
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (lemma
                                                                                                                                                                               "list_extensionality[vert_circ(G)]")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst?)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (hide
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (ground)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_length[vert_circ(G)]")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst?)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (skeep)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (typepred
                                                                                                                                                                                               "vc`v")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "vert?")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                  nil
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil)
                                                                                                                                                                                       ("2"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_nth[vert_circ(G)]")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst?)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              nil
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (skeep)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (typepred
                                                                                                                                                                                                 "vc`v")
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "vert?")
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (skeep)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "vc`v")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "vert?")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (propax)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "walk_index"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1)
                                                                                          (("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "o"
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "walk_index_ub")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "G"
                                                                                                     "cd"
                                                                                                     "i-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "min"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "decomp_to_walk"
                                                                                                                 2
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "^"
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "min"
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "vc_ij")
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             (-2
                                                                                                                              -3
                                                                                                                              -9
                                                                                                                              -10
                                                                                                                              -11))
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "caret_commute")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "G"
                                                                                                                                 "cd"
                                                                                                                                 "i"
                                                                                                                                 "j")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_last")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "i-1")
                                                                                                                                        (("2"
                                                                                                                                          (move-terms
                                                                                                                                           -1
                                                                                                                                           r
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (simplify
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "^"
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "walk_index_sincr")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "G"
                                                                                                                                                         "cd"
                                                                                                                                                         "i-1"
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "vc`v")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vert?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (skeep)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (skeep)
                                                                                              (("4"
                                                                                                (skeep)
                                                                                                (("4"
                                                                                                  (typepred
                                                                                                   "vc`v")
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "vert?")
                                                                                                    (("4"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("5"
                                                                                              (skeep)
                                                                                              (("5"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("6"
                                                                                              (skeep)
                                                                                              (("6"
                                                                                                (typepred
                                                                                                 "vc`v")
                                                                                                (("6"
                                                                                                  (expand
                                                                                                   "vert?")
                                                                                                  (("6"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (skeep)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("4"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (skeep)
                                                                                        (("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("6"
                                                                                        (skeep)
                                                                                        (("6"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("6"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("6"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("7"
                                                                                        (lemma
                                                                                         "walk_index_bound")
                                                                                        (("7"
                                                                                          (inst?)
                                                                                          (("7"
                                                                                            (inst
                                                                                             -
                                                                                             "0")
                                                                                            (("7"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("8"
                                                                                        (skeep)
                                                                                        (("8"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("8"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("8"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "caret_nth[vert_circ(G)]")
                                                                          (("2"
                                                                            (inst
                                                                             -
                                                                             "cd"
                                                                             "length(cd ^ (0, i - 1)) - 1"
                                                                             "(0, i-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_length[vert_circ(G)]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1
                                                                                           2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "vc_ij")
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-8
                                                                                                -9
                                                                                                -10
                                                                                                -11
                                                                                                -12))
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 (cd))
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   (-1
                                                                                                    -2))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "walk?")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "list2finseq")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finseq_appl")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "i-1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "caret_length[vert_circ(G)]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("3"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "walk?"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "finseq_appl")
                                                                          (("2"
                                                                            (expand
                                                                             "list2finseq")
                                                                            (("2"
                                                                              (rewrite
                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "verts_in?")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "map")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "vc_ij`v")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("4"
                                                                              (expand
                                                                               "vert?")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("6"
                                                                            (expand
                                                                             "vert?")
                                                                            (("6"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("7"
                                                                        (lemma
                                                                         "caret_decomp")
                                                                        (("7"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("8"
                                                                        (assert)
                                                                        (("8"
                                                                          (skeep)
                                                                          (("8"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("8"
                                                                              (expand
                                                                               "vert?")
                                                                              (("8"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("9"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -7 2 :dir rl)
                                                (("2"
                                                  (lemma "append_commute")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (ground)
                                                      (("1"
                                                        (replace -1 2)
                                                        (("1"
                                                          (lift-if -11)
                                                          (("1"
                                                            (split -11)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "append_null_left[vert_circ(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "(: vc_ij :)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "decomp_to_walk"
                                                                           2
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "vc_ij")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -13
                                                                                     2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -7
                                                                                       2)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "o"
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_commute")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "caret_commute")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "walk_index"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "^"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "walk_index_ub")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -
                                                                                                                     "G"
                                                                                                                     "cd"
                                                                                                                     "j")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "min"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "^"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lift-if
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "walk_index_last")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "G"
                                                                                                                                   "cd"
                                                                                                                                   "j")
                                                                                                                                  (("1"
                                                                                                                                    (move-terms
                                                                                                                                     -1
                                                                                                                                     r
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (simplify
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         1
                                                                                                                                         :dir
                                                                                                                                         rl)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "walk_index_sincr")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "G"
                                                                                                                                               "cd"
                                                                                                                                               "j "
                                                                                                                                               "length(cd) -1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "walk_index_ub")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "G"
                                                                                                                                                     "cd"
                                                                                                                                                     "length(cd)-1")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "vc`v")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "vert?")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "vc`v")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "vert?")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "walk_index_ub")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -
                                                                                                                                     "G"
                                                                                                                                     "cd"
                                                                                                                                     "length(cd)-1")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "min"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "walk_index_last")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -
                                                                                                                                             "G"
                                                                                                                                             "cd"
                                                                                                                                             "j")
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               3)
                                                                                                                                              (("1"
                                                                                                                                                (simplify
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (rewrite
                                                                                                                                                       "subl_idemp"
                                                                                                                                                       3)
                                                                                                                                                      (("1"
                                                                                                                                                        (typepred
                                                                                                                                                         "cd")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "length")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "vc`v")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "vert?")
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_commute")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "walk_index"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "caret_commute")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "walk_index_last")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -
                                                                                                                   "G"
                                                                                                                   "cd"
                                                                                                                   "j")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (move-terms
                                                                                                                       -1
                                                                                                                       r
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "walk_index(G, cd, length(cd) - 1)")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "subl_idemp"
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "caret_o")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_sincr")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "j"
                                                                                                                                         "length(cd)-1")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "walk_index_ub")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -
                                                                                                                                               "G"
                                                                                                                                               "cd"
                                                                                                                                               "length(cd)-1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "vc`v")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "vert?")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "vc`v")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "vert?")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (expand
                                                                                                                                 "length")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "vc`v")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "vert?")
                                                                                                                (("2"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "vc`v")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "vert?")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("4"
                                                                              (expand
                                                                               "vert?")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("6"
                                                                            (expand
                                                                             "vert?")
                                                                            (("6"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "append_commute")
                                                                (("2"
                                                                  (inst
                                                                   -
                                                                   "G"
                                                                   "scd_fr"
                                                                   "(: vc_ij :)")
                                                                  (("1"
                                                                    (ground)
                                                                    (("1"
                                                                      (expand
                                                                       "decomp_to_walk"
                                                                       -1
                                                                       3)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -2
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               3
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_o_caret")
                                                                                (("1"
                                                                                  (expand
                                                                                   "vc_ij"
                                                                                   -2
                                                                                   2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "caret_commute")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "walk_index"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "caret_commute")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "walk_index_last")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "G"
                                                                                                           "cd"
                                                                                                           "i-1")
                                                                                                          (("1"
                                                                                                            (move-terms
                                                                                                             -1
                                                                                                             r
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (simplify
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       (-2
                                                                                                                        -4))
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "walk_index_ub")
                                                                                                                        (("1"
                                                                                                                          (inst?)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "walk_index_sincr")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -
                                                                                                                                   "G"
                                                                                                                                   "cd"
                                                                                                                                   "i"
                                                                                                                                   "j")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "walk_index_pos")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -
                                                                                                                                         "G"
                                                                                                                                         "cd"
                                                                                                                                         "i"
                                                                                                                                         "i")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             (-1
                                                                                                                                              -2))
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "walk_index_incr")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -
                                                                                                                                                     "j")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -9)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -3
                                                                                                                                                           -1
                                                                                                                                                           :dir
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             3)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -13
                                                                                                                                                               3
                                                                                                                                                               :dir
                                                                                                                                                               rl)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "caret_commute")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (hide
                                                                                                                                                                       (-2
                                                                                                                                                                        -3
                                                                                                                                                                        -4))
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "walk_index_last")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -
                                                                                                                                                                           "G"
                                                                                                                                                                           "cd"
                                                                                                                                                                           "j")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (move-terms
                                                                                                                                                                             -1
                                                                                                                                                                             r
                                                                                                                                                                             2)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (replaces
                                                                                                                                                                               -1
                                                                                                                                                                               -2)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "walk_index(G, cd, length(cd) - 1)")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (rewrite
                                                                                                                                                                                   "subl_idemp"
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replaces
                                                                                                                                                                                       -1
                                                                                                                                                                                       3)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lemma
                                                                                                                                                                                         "caret_o")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           -1
                                                                                                                                                                                           " walk_index(G, cd, j) - 1"
                                                                                                                                                                                           "decomp_to_walk(G, cd)")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "walk_index_sincr")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (inst
                                                                                                                                                                                                 -
                                                                                                                                                                                                 "G"
                                                                                                                                                                                                 "cd"
                                                                                                                                                                                                 "j"
                                                                                                                                                                                                 "length(cd)-1")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (lemma
                                                                                                                                                                                                     "walk_index_ub")
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       -
                                                                                                                                                                                                       "G"
                                                                                                                                                                                                       "cd"
                                                                                                                                                                                                       "length(cd) -1")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (skeep)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                           "vc`v")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "vert?")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (skeep)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     "vc`v")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "vert?")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "vc`v")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "vert?")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "walk_index_pos")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -
                                                                                                                         "j")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       :dir
                                                                       rl)
                                                                      (("2"
                                                                        (lemma
                                                                         "caret_nth[vert_circ(G)]")
                                                                        (("2"
                                                                          (inst
                                                                           -
                                                                           "cd"
                                                                           "i-1"
                                                                           "(0, i-1)")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "caret_length[vert_circ(G)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -
                                                                                 "cd"
                                                                                 "(0, i-1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -2
                                                                                       1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "vc_ij"
                                                                                           1)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             (cd))
                                                                                            (("2"
                                                                                              (hide
                                                                                               (-1
                                                                                                -2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "walk?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "list2finseq"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "map_length[vert_circ(G), vert(G)]"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -
                                                                                                             "i-1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "map"
                                                                     1
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "map"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "list2finseq")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "walk?"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "verts_in?")
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "vc_ij`v")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "vert?")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("3"
                                                                        (expand
                                                                         "vert?")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (skeep)
                                                                      (("5"
                                                                        (typepred
                                                                         "vc`v")
                                                                        (("5"
                                                                          (expand
                                                                           "vert?")
                                                                          (("5"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("6"
                                                                    (skeep)
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("7"
                                                                    (skeep)
                                                                    (("7"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("7"
                                                                        (expand
                                                                         "vert?")
                                                                        (("7"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("8"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("8"
                                                                      (lemma
                                                                       "caret_decomp")
                                                                      (("8"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append[vert_circ(G)]")
                                                        (("2"
                                                          (lemma
                                                           "nth_append[vert_circ(G)]")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (replace -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "vc_ij"
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -10
                                                                         1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (lemma
                                                                           "caret_nth[vert_circ(G)]")
                                                                          (("1"
                                                                            (inst
                                                                             -
                                                                             "cd"
                                                                             "1+j"
                                                                             "(1+j, length(cd)-1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 1
                                                                                 :dir
                                                                                 rl)
                                                                                (("1"
                                                                                  (typepred
                                                                                   (cd))
                                                                                  (("1"
                                                                                    (hide
                                                                                     (-1
                                                                                      -2))
                                                                                    (("1"
                                                                                      (expand
                                                                                       "walk?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "j")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "list2finseq"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "finseq_appl"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -17
                                                                                                   -16)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "drop_circuits"
                                                                                                     -16)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "list2finseq"
                                                                                                       -16)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -16
                                                                                                         -1
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "map_length[vert_circ(G), vert(G)]"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "vc`v")
                                                                (("2"
                                                                  (expand
                                                                   "vert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (skeep)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (skeep)
                                                              (("4"
                                                                (skeep)
                                                                (("4"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("4"
                                                                    (expand
                                                                     "vert?")
                                                                    (("4"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (skeep)
                                                              (("5"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (skeep)
                                                              (("6"
                                                                (typepred
                                                                 "vc`v")
                                                                (("6"
                                                                  (expand
                                                                   "vert?")
                                                                  (("6"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma "caret_decomp")
                                                      (("2"
                                                        (inst
                                                         -
                                                         "G"
                                                         "cd"
                                                         "1 + j"
                                                         "length(cd) - 1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace -9 -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4" (assert) nil nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (skeep)
                                                        (("5"
                                                          (typepred "vc`v")
                                                          (("5"
                                                            (expand "vert?")
                                                            (("5"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (skeep)
                                                      (("6" (assert) nil nil))
                                                      nil)
                                                     ("7"
                                                      (skeep)
                                                      (("7"
                                                        (typepred "vc`v")
                                                        (("7"
                                                          (expand "vert?")
                                                          (("7"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2" (case "j=length(cd)-1")
                                (("1" (replace -1 -5)
                                  (("1" (simplify -5)
                                    (("1" (expand "^" -5)
                                      (("1"
                                        (replace -5 -4 :dir rl)
                                        (("1"
                                          (rewrite
                                           "append_null_right[vert_circ(G)]")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (lemma "append_decomp")
                                  (("2"
                                    (inst - "G "
                                     "append[vert_circ(G)](scd_fr, (: vc_ij :))"
                                     " scd_ba")
                                    (("1" (assert)
                                      (("1"
                                        (hide (-1 -2))
                                        (("1"
                                          (lemma "nth_append[vert_circ(G)]")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (rewrite
                                                 "length_append[vert_circ(G)]")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replaces -1 1)
                                                    (("1"
                                                      (replace -2 1 :dir rl)
                                                      (("1"
                                                        (lemma
                                                         "caret_nth[vert_circ(G)]")
                                                        (("1"
                                                          (inst
                                                           -
                                                           "cd"
                                                           "1+j"
                                                           "(1 + j, length(cd) - 1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replaces
                                                               -1
                                                               1
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "vc_ij")
                                                                  (("1"
                                                                    (replace
                                                                     -8
                                                                     -7)
                                                                    (("1"
                                                                      (expand
                                                                       "drop_circuits"
                                                                       -7)
                                                                      (("1"
                                                                        (expand
                                                                         "list2finseq"
                                                                         -7)
                                                                        (("1"
                                                                          (lemma
                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -1)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -6
                                                                                       1)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         (cd))
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-1
                                                                                            -2))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "walk?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "finseq_appl")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "list2finseq"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "map_length[vert_circ(G), vert(G)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "j")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite
                                               "length_append[vert_circ(G)]")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (skeep)
                                              (("3"
                                                (typepred "vc`v")
                                                (("3"
                                                  (expand "vert?")
                                                  (("3" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (skeep)
                                              (("4" (assert) nil nil))
                                              nil)
                                             ("5"
                                              (skeep)
                                              (("5"
                                                (skeep)
                                                (("5"
                                                  (typepred "vc`v")
                                                  (("5"
                                                    (expand "vert?")
                                                    (("5" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("6"
                                              (skeep)
                                              (("6" (assert) nil nil))
                                              nil)
                                             ("7"
                                              (skeep)
                                              (("7"
                                                (typepred "vc`v")
                                                (("7"
                                                  (expand "vert?")
                                                  (("7" (propax) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (lemma "caret_decomp")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -5)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (typepred "vc`v")
                                            (("2"
                                              (expand "vert?")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (skeep)
                                      (("3"
                                        (typepred "vc`v")
                                        (("3"
                                          (expand "vert?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4" (skeep) (("4" (assert) nil nil))
                                      nil)
                                     ("5" (skeep)
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (typepred "vc`v")
                                          (("5"
                                            (expand "vert?")
                                            (("5" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6" (skeep) (("6" (assert) nil nil))
                                      nil)
                                     ("7" (skeep)
                                      (("7"
                                        (typepred "vc`v")
                                        (("7"
                                          (expand "vert?")
                                          (("7" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3" (expand "list2finseq")
                                (("3"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  nil nil))
                                nil))
                              nil)
                             ("4" (flatten)
                              (("4" (skeep)
                                (("4" (typepred "vc`v")
                                  (("4" (expand "vert?")
                                    (("4" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lift-if -4)
                            (("2" (split -4)
                              (("1" (flatten)
                                (("1" (replace -2 :dir rl)
                                  (("1"
                                    (rewrite "append_null_left[vert_circ(G)]")
                                    (("1" (expand "length" 1)
                                      (("1"
                                        (expand "length" 1)
                                        (("1"
                                          (expand "map")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand "list2finseq")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (expand "walk?")
                                                    (("1"
                                                      (expand "verts_in?")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (ground)
                                                          (("1"
                                                            (expand "nth")
                                                            (("1"
                                                              (ground)
                                                              (("1"
                                                                (typepred
                                                                 "vc_ij`v")
                                                                (("1"
                                                                  (expand
                                                                   "vert?")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (flatten)
                                (("2" (rewrite "length_append[vert_circ(G)]")
                                  (("2" (assert)
                                    (("2" (hide 3)
                                      (("2"
                                        (expand "walk?")
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand "verts_in?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand "list2finseq")
                                                (("1"
                                                  (lemma
                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (typepred
                                                         "nth(append[vert_circ(G)](scd_fr, (: vc_ij :)), i!1)`v")
                                                        (("1"
                                                          (expand "vert?")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred (i!1))
                                                      (("2"
                                                        (expand "list2finseq")
                                                        (("2"
                                                          (rewrite
                                                           "map_length[vert_circ(G), vert(G)]")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep)
                                                      (("3"
                                                        (typepred "vc`v")
                                                        (("3"
                                                          (expand "vert?")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4" (assert) nil nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (skeep)
                                                        (("5"
                                                          (typepred "vc`v")
                                                          (("5"
                                                            (expand "vert?")
                                                            (("5"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (skeep)
                                                      (("6" (assert) nil nil))
                                                      nil)
                                                     ("7"
                                                      (skeep)
                                                      (("7"
                                                        (typepred "vc`v")
                                                        (("7"
                                                          (expand "vert?")
                                                          (("7"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep :preds? t)
                                            (("2"
                                              (expand "finseq_appl")
                                              (("2"
                                                (expand "list2finseq")
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("2"
                                                    (rewrite
                                                     "length_append[vert_circ(G)]")
                                                    (("2"
                                                      (simplify -2)
                                                      (("2"
                                                        (lemma
                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (replaces -1)
                                                            (("1"
                                                              (lemma
                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (replaces
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_append[vert_circ(G)]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "scd_fr"
                                                                       "(: vc_ij :)"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "n")
                                                                        (("1"
                                                                          (inst
                                                                           -
                                                                           "1+n")
                                                                          (("1"
                                                                            (ground)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (lift-if
                                                                                   1)
                                                                                  (("1"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_decomp")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "walk?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "n")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "finseq_appl")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "list2finseq")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "map_length[vert_circ(G), vert(G)]")
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "vc`v")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "vert?")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "vc`v")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "vert?")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (case
                                                                                         "n = length(scd_fr)-1")
                                                                                        (("1"
                                                                                          (move-terms
                                                                                           -1
                                                                                           r
                                                                                           2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             2
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (simplify
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "vc_ij")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -6
                                                                                                     2
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "caret_nth[vert_circ(G)]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "cd"
                                                                                                         "n"
                                                                                                         "(0, i-1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -7
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "caret_length[vert_circ(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -2
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (move-terms
                                                                                                                         -2
                                                                                                                         l
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             (-3
                                                                                                                              -4))
                                                                                                                            (("1"
                                                                                                                              (typepred
                                                                                                                               (cd))
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2))
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "walk?")
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "i-1")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "finseq_appl")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "list2finseq")
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "map_length[vert_circ(G), vert(G)]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst?)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("2"
                                                                            (expand
                                                                             "vert?")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("4"
                                                                              (expand
                                                                               "vert?")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (skeep)
                                                                        (("5"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("6"
                                                                        (skeep)
                                                                        (("6"
                                                                          (typepred
                                                                           "vc`v")
                                                                          (("6"
                                                                            (expand
                                                                             "vert?")
                                                                            (("6"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "length_append[vert_circ(G)]")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("5"
                                                                        (expand
                                                                         "vert?")
                                                                        (("5"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (skeep)
                                                                  (("6"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("7"
                                                                      (expand
                                                                       "vert?")
                                                                      (("7"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (rewrite
                                                             "length_append[vert_circ(G)]")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "vc`v")
                                                              (("3"
                                                                (expand
                                                                 "vert?")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (skeep)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (skeep)
                                                            (("5"
                                                              (skeep)
                                                              (("5"
                                                                (typepred
                                                                 "vc`v")
                                                                (("5"
                                                                  (expand
                                                                   "vert?")
                                                                  (("5"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (skeep)
                                                            (("6"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("7"
                                                            (skeep)
                                                            (("7"
                                                              (typepred
                                                               "vc`v")
                                                              (("7"
                                                                (expand
                                                                 "vert?")
                                                                (("7"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (flatten)
                            (("3" (expand "list2finseq")
                              (("3"
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                nil nil))
                              nil))
                            nil)
                           ("4" (flatten)
                            (("4" (skeep)
                              (("4" (typepred "vc`v")
                                (("4" (expand "vert?")
                                  (("4" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil)
                           ("5" (flatten)
                            (("5" (skeep) (("5" (assert) nil nil)) nil)) nil)
                           ("6" (flatten)
                            (("6" (skeep)
                              (("6" (skeep)
                                (("6" (typepred "vc`v")
                                  (("6" (expand "vert?")
                                    (("6" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("7" (flatten)
                            (("7" (skeep) (("7" (assert) nil nil)) nil)) nil)
                           ("8" (flatten)
                            (("8" (skeep)
                              (("8" (typepred "vc`v")
                                (("8" (expand "vert?")
                                  (("8" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (replace -1 :dir rl)
                            (("2" (lemma "length_append[vert_circ(G)]")
                              (("2" (inst?)
                                (("1" (replace -1)
                                  (("1" (lemma "length_append[vert_circ(G)]")
                                    (("1" (inst - "scd_fr" "(: vc_ij :)")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "length" 1 2)
                                          (("1"
                                            (expand "length" 1 1)
                                            (("1"
                                              (case
                                               "length[vert_circ(G)](scd_fr) = i")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (replace -5 :dir rl)
                                                  (("1"
                                                    (case "j=length(cd) -1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (simplify 1)
                                                        (("1"
                                                          (expand "^")
                                                          (("1"
                                                            (expand "length")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "caret_length[vert_circ(G)]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (replace -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lift-if -5)
                                                (("2"
                                                  (split -5)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2 :dir rl)
                                                      (("1"
                                                        (expand "length")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -1 :dir rl)
                                                      (("2"
                                                        (lemma
                                                         "caret_length[vert_circ(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (typepred "vc`v")
                                          (("2"
                                            (expand "vert?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3" (assert) nil nil))
                                        nil)
                                       ("4"
                                        (skeep)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (typepred "vc`v")
                                            (("4"
                                              (expand "vert?")
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("5"
                                        (skeep)
                                        (("5" (assert) nil nil))
                                        nil)
                                       ("6"
                                        (skeep)
                                        (("6"
                                          (typepred "vc`v")
                                          (("6"
                                            (expand "vert?")
                                            (("6" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("3" (skeep) (("3" (assert) nil nil)) nil)
                                 ("4" (skeep)
                                  (("4" (skeep)
                                    (("4" (typepred "vc`v")
                                      (("4"
                                        (expand "vert?")
                                        (("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5" (skeep) (("5" (assert) nil nil)) nil)
                                 ("6" (skeep)
                                  (("6" (typepred "vc`v")
                                    (("6" (expand "vert?")
                                      (("6" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "every") (("2" (propax) nil nil)) nil))
                        nil)
                       ("3" (skeep)
                        (("3" (expand "drop_circuits")
                          (("3" (expand "list2finseq")
                            (("3" (hide -1)
                              (("3"
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                (("3" (lemma "caret_length[vert_circ(G)]")
                                  (("3" (inst?) (("3" (assert) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (skeep)
                          (("4" (typepred "vc`v")
                            (("4" (expand "vert?") (("4" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (skeep)
                        (("5" (expand "drop_circuits")
                          (("5" (expand "list2finseq")
                            (("5"
                              (rewrite "map_length[vert_circ(G), vert(G)]")
                              (("5" (lemma "caret_length[vert_circ(G)]")
                                (("5" (inst?) (("5" (assert) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (skeep)
                        (("6" (typepred "vc`v")
                          (("6" (expand "vert?") (("6" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("7" (case "circuit_at?[T](G, vc_ij`c, vc_ij`v)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2)
                          (("2" (expand "circuit_at?")
                            (("2" (expand "finseq_appl")
                              (("2" (ground)
                                (("1" (expand "vc_ij")
                                  (("1" (lemma "caret_commute")
                                    (("1" (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replaces -1)
                                          (("1"
                                            (expand "circuit?")
                                            (("1"
                                              (expand "pre_circuit?")
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (expand "finseq_appl")
                                                  (("1"
                                                    (expand "^" 1)
                                                    (("1"
                                                      (case
                                                       "walk_index(G, cd, i) - nth(cd, i)`c`length <=
           walk_index(G, cd, j)-1  AND walk_index(G, cd, i) - nth(cd, i)`c`length <
            decomp_to_walk(G, cd)`length")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "min(nth(cd, i)`c`length + walk_index(G, cd, j) -
            walk_index(G, cd, i),
           nth(cd, i)`c`length + decomp_to_walk(G, cd)`length -
            walk_index(G, cd, i)) = nth(cd, i)`c`length + walk_index(G, cd, j) -
            walk_index(G, cd, i)")
                                                              (("1"
                                                                (replace -1)
                                                                (("1"
                                                                  (simplify 1)
                                                                  (("1"
                                                                    (lemma
                                                                     "walk_index_sincr")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "G"
                                                                       "cd"
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           (-1
                                                                            -2))
                                                                          (("1"
                                                                            (hide
                                                                             (-1
                                                                              -2))
                                                                            (("1"
                                                                              (lemma
                                                                               "decomp_walk_index")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "G"
                                                                                 "cd"
                                                                                 "_"
                                                                                 "_")
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "i"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       " j"
                                                                                       "nth(cd, j)`c`length -1")
                                                                                      (("1"
                                                                                        (simplify
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "circuit_first_last")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -
                                                                                               "G"
                                                                                               "cd"
                                                                                               "j")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "circuit_vertex")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "circuit_vertex")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replaces
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "drop_circuits")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "list2finseq")
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (lemma
                                                                   " walk_index_ub")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "min")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (lemma
                                                           "walk_index_sincr")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (inst - "j")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (ground)
                                                                  (("2"
                                                                    (lemma
                                                                     "walk_index_ub")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "vc`v")
                                                              (("3"
                                                                (expand
                                                                 "vert?")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "vc_ij")
                                  (("2" (expand "decomp_to_walk" 1)
                                    (("2" (ground)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (ground)
                                          (("1"
                                            (expand "^" 1)
                                            (("1"
                                              (typepred (cd))
                                              (("1"
                                                (lemma " circuit_vertex")
                                                (("1" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "o ")
                                            (("2"
                                              (expand "^" 2)
                                              (("2"
                                                (lemma " circuit_vertex")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep)
                      (("2" (typepred "vc`v")
                        (("2" (expand "vert?") (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten) (("3" (assert) nil nil)) nil))
                  nil)
                 ("2" (assert) nil nil)
                 ("3" (lemma "caret_decomp")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (typepred (j))
              (("2" (replace -4)
                (("2" (expand "drop_circuits")
                  (("2" (expand "list2finseq")
                    (("2" (rewrite "map_length[vert_circ(G), vert(G)]") nil
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep)
              (("3" (typepred "vc`v")
                (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (typepred "vc`v")
            (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (length_singleton formula-decl nil more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (list_extensionality formula-decl nil more_list_props structures)
    (subl_idemp formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures))
   shostak))
 (circuit_decomp_prep 0
  (circuit_decomp_prep-4 "" 3791887892
   (""
    (deftactic vert (then (skeep) (skeep) (typepred "vc`v") (expand "vert?")))
    (("" (induct "n" 1 "NAT_induction")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (skeep :preds? t)
          (("3" (name "p1" "drop_circuits(G, cd)")
            (("3"
              (case "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)")
              (("1" (inst 1 "cd")
                (("1" (assert)
                  (("1" (skeep) (("1" (inst?) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (lemma "shrink_repeat")
                  (("2" (inst?)
                    (("2" (inst - "w")
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (inst -14 "length(scd)")
                              (("1" (expand "drop_circuits" -2)
                                (("1" (expand "list2finseq" -2)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]" -2)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]"
                                       -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -14 "G" "v" "w" "scd")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (typepred "vc`v")
                                          (("2"
                                            (expand "vert?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (skeep)
                                      (("2"
                                        (typepred "vc`v")
                                        (("2"
                                          (expand "vert?")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (typepred "vc`v")
                                  (("2" (expand "vert?")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 1 "k" "l") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (vert) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (shrink_repeat formula-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (w skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (NAT_induction formula-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (circuit_decomp_prep-3 "" 3744392011
   (""
    (deftactic vert (then (skeep) (skeep) (typepred "vc`v") (expand "vert?")))
    (("" (induct "n" 1 "NAT_induction")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (skeep :preds? t)
          (("3" (name "p1" "drop_circuits(G, cd)")
            (("3"
              (case "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)")
              (("1" (inst 1 "cd")
                (("1" (assert)
                  (("1" (skeep) (("1" (inst?) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (lemma "shrink_repeat")
                  (("2" (inst?)
                    (("2" (inst - "w")
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (inst -14 "length(scd)")
                              (("1" (expand "drop_circuits" -2)
                                (("1" (expand "list2finseq" -2)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]" -2)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]"
                                       -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -14 "G" "v" "w" "scd")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (typepred "vc`v")
                                          (("2"
                                            (expand "vert?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (typepred "vc`v")
                                  (("2" (expand "vert?")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 1 "k" "l") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (vert) nil nil))
      nil))
    nil)
   ((last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (is_finite const-decl "bool" finite_sets nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil))
   shostak)
  (circuit_decomp_prep-2 nil 3660504672
   (""
    (deftactic vert (then (skeep) (skeep) (typepred "vc`v") (expand "vert?")))
    (("" (induct "n" 1 "NAT_induction")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (skeep :preds? t)
          (("3" (name "p1" "drop_circuits(G, cd)")
            (("3"
              (case "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)")
              (("1" (inst 1 "cd")
                (("1" (assert)
                  (("1" (skeep) (("1" (inst?) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (lemma "shrink_repeat")
                  (("2" (inst?)
                    (("2" (inst - "w")
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (inst -14 "length(scd)")
                              (("1" (expand "drop_circuits" -2)
                                (("1" (expand "list2finseq" -2)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]" -2)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]"
                                       -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -14 "G" "v" "w" "scd")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (vert) nil nil))
                              nil))
                            nil)
                           ("2" (inst 1 "k" "l") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (vert) nil nil))
      nil))
    nil)
   ((circuit_at? const-decl "bool" circuits_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   nil)
  (circuit_decomp_prep-1 nil 3657038988
   (""
    (deftactic vert (then (skeep) (skeep) (typepred "vc`v") (expand "vert?")))
    (("" (induct "n" 1 NAT_induction)
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (skeep :preds? t)
          (("3" (name "p1" "drop_circuits(G, cd)")
            (("3"
              (case "FORALL (k,l : below(length(p1))): k<l IMPLIES p1(k)/=p1(l)")
              (("1" (inst 1 "cd")
                (("1" (assert)
                  (("1" (skeep) (("1" (inst?) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (lemma "shrink_repeat")
                  (("2" (inst?)
                    (("2" (inst - "w")
                      (("1" (ground)
                        (("1" (ground)
                          (("1" (skeep)
                            (("1" (inst -15 "length(scd)")
                              (("1" (expand "drop_circuits" -2)
                                (("1" (expand "list2finseq" -2)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]" -2)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]"
                                       -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -15 "G" "v" "w" "scd")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep :preds? t)
                                              (("1"
                                                (inst 1 "scd_1")
                                                (("1"
                                                  (assert)
                                                  (("1" (postpone) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (vert) nil nil))
                              nil))
                            nil)
                           ("2" (inst 1 "k" "l") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (vert) nil nil))
      nil))
    nil)
   ((finite_set type-eq-decl nil finite_sets nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   shostak))
 (vert2vc_TCC1 0
  (vert2vc_TCC1-1 nil 3657278006 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil))
   nil
   (vert2vc subtype "circuit_decomp_.v"
    "(circuit_decomp_.vert(circuit_decomp_.G))")))
 (vert2vc_TCC2 0
  (vert2vc_TCC2-1 nil 3657278006 ("" (subtype-tcc) nil nil)
   ((vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil))
   nil
   (vert2vc subtype
    "walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].gen_seq1(circuit_decomp_.G, circuit_decomp_.v)"
    "walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G)")))
 (trivial_decomp_TCC1 0
  (trivial_decomp_TCC1-1 nil 3657277273 ("" (subtype-tcc) nil nil) nil nil
   (trivial_decomp subtype "0" "below[length(w)]")))
 (trivial_decomp_TCC2 0
  (trivial_decomp_TCC2-1 nil 3657277273 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (edge? const-decl "bool" digraphs_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (vert? const-decl "bool" digraphs_ nil))
   nil
   (trivial_decomp subtype
    "finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)"
    "digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)")))
 (trivial_decomp_TCC3 0
  (trivial_decomp_TCC3-3 "" 3790101319
   ("" (skeep)
    (("" (expand "finseq_appl")
      (("" (expand "length")
        (("" (expand "length")
          (("" (expand "decomp_to_walk")
            (("" (expand "length")
              (("" (expand "length")
                (("" (expand "vert2vc")
                  (("" (expand "gen_seq1")
                    (("" (expand "walk?")
                      (("" (expand "finseq_appl")
                        (("" (expand "list2finseq")
                          (("" (expand "map")
                            (("" (expand "length")
                              ((""
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                (("1" (expand "map")
                                  (("1" (expand "verts_in?")
                                    (("1" (ground)
                                      (("1"
                                        (skeep :preds? t)
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (typepred (w))
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (expand "verts_in?")
                                                  (("1"
                                                    (inst?)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3"
                                        (decompose-equality 1)
                                        (("1" (decompose-equality 1) nil nil)
                                         ("2"
                                          (ground)
                                          (("1"
                                            (skeep)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (typepred (w))
                                            (("2"
                                              (expand "walk?")
                                              (("2"
                                                (expand "verts_in?")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred (w))
                                          (("3"
                                            (expand "walk?")
                                            (("3"
                                              (expand "verts_in?")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (skeep)
                                                  (("3" (inst?) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand "drop_circuits")
                                        (("4"
                                          (expand "list2finseq")
                                          (("4"
                                            (expand "map")
                                            (("4"
                                              (expand "map")
                                              (("4"
                                                (expand "length")
                                                (("4"
                                                  (expand "length")
                                                  (("4"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (typepred (x!1))
                                                        (("1"
                                                          (expand "map")
                                                          (("1"
                                                            (expand "map")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep :preds? t)
                                                        (("2"
                                                          (expand "map")
                                                          (("2"
                                                            (expand "map")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (typepred (w))
                                                          (("3"
                                                            (expand "walk?")
                                                            (("3"
                                                              (expand
                                                               "verts_in?")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (skeep)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (skeep)
                                                        (("4"
                                                          (typepred "vc`v")
                                                          (("4"
                                                            (expand "vert?")
                                                            (("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (rewrite
                                                           "map_length[vert_circ(G), vert(G)]")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred (w))
                                                        (("2"
                                                          (expand "walk?")
                                                          (("2"
                                                            (expand
                                                             "verts_in?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep :preds? t)
                                                      (("3"
                                                        (expand "map")
                                                        (("3"
                                                          (expand "map")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (typepred (w))
                                                        (("4"
                                                          (expand "vert?")
                                                          (("4"
                                                            (expand "walk?")
                                                            (("4"
                                                              (expand
                                                               "verts_in?")
                                                              (("4"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (typepred "vc`v")
                                                        (("5"
                                                          (expand "vert?")
                                                          (("5"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (walk? const-decl "bool" walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map_length formula-decl nil more_map_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil) (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil) (edge? const-decl "bool" digraphs_ nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (w skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (odd? const-decl "bool" integers nil)
    (odd_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (length def-decl "nat" list_props nil))
   shostak
   (trivial_decomp subtype
    "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)"
    "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}"))
  (trivial_decomp_TCC3-2 "" 3744392657
   ("" (skeep)
    (("" (expand "finseq_appl")
      (("" (expand "length")
        (("" (expand "length")
          (("" (expand "decomp_to_walk")
            (("" (expand "length")
              (("" (expand "length")
                (("" (expand "vert2vc")
                  (("" (expand "gen_seq1")
                    (("" (expand "walk?")
                      (("" (expand "finseq_appl")
                        (("" (expand "list2finseq")
                          (("" (expand "map")
                            (("" (expand "length")
                              ((""
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                (("1" (expand "map")
                                  (("1" (expand "verts_in?")
                                    (("1" (ground)
                                      (("1"
                                        (skeep :preds? t)
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (typepred (w))
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (expand "verts_in?")
                                                  (("1"
                                                    (inst?)
                                                    (("1" (assert) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil)
                                       ("3"
                                        (decompose-equality 1)
                                        (("1" (decompose-equality 1) nil nil)
                                         ("2"
                                          (ground)
                                          (("1"
                                            (skeep)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (typepred (w))
                                            (("2"
                                              (expand "walk?")
                                              (("2"
                                                (expand "verts_in?")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred (w))
                                          (("3"
                                            (expand "walk?")
                                            (("3"
                                              (expand "verts_in?")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (skeep)
                                                  (("3" (inst?) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (expand "drop_circuits")
                                        (("4"
                                          (expand "list2finseq")
                                          (("4"
                                            (expand "map")
                                            (("4"
                                              (expand "map")
                                              (("4"
                                                (expand "length")
                                                (("4"
                                                  (expand "length")
                                                  (("4"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (typepred (x!1))
                                                        (("1"
                                                          (expand "map")
                                                          (("1"
                                                            (expand "map")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep :preds? t)
                                                        (("2"
                                                          (expand "map")
                                                          (("2"
                                                            (expand "map")
                                                            (("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (typepred (w))
                                                          (("3"
                                                            (expand "walk?")
                                                            (("3"
                                                              (expand
                                                               "verts_in?")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (skeep)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (skeep)
                                                        (("4"
                                                          (typepred "vc`v")
                                                          (("4"
                                                            (expand "vert?")
                                                            (("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (rewrite
                                                           "map_length[vert_circ(G), vert(G)]")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred (w))
                                                        (("2"
                                                          (expand "walk?")
                                                          (("2"
                                                            (expand
                                                             "verts_in?")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep :preds? t)
                                                      (("3"
                                                        (expand "map")
                                                        (("3"
                                                          (expand "map")
                                                          (("3"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("3"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (typepred (w))
                                                        (("4"
                                                          (expand "vert?")
                                                          (("4"
                                                            (expand "walk?")
                                                            (("4"
                                                              (expand
                                                               "verts_in?")
                                                              (("4"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (typepred "vc`v")
                                                        (("5"
                                                          (expand "vert?")
                                                          (("5"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (length_singleton formula-decl nil more_list_props structures)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil) (Seq type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil))
   shostak
   (trivial_decomp subtype
    "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)"
    "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}"))
  (trivial_decomp_TCC3-1 nil 3657285561
   ("" (skeep)
    (("" (expand "finseq_appl")
      (("" (expand "length")
        (("" (expand "length")
          (("" (expand "decomp_to_walk")
            (("" (expand "length")
              (("" (expand "length")
                (("" (expand "vert2vc")
                  (("" (expand "gen_seq1")
                    (("" (expand "walk?")
                      (("" (expand "finseq_appl")
                        (("" (expand "list2finseq")
                          (("" (expand "map")
                            (("" (expand "length")
                              ((""
                                (rewrite "map_length[vert_circ(G), vert(G)]")
                                (("1" (expand "map")
                                  (("1" (expand "verts_in?")
                                    (("1" (ground)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (ground)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (typepred (w))
                                              (("1"
                                                (expand "walk?")
                                                (("1"
                                                  (expand "verts_in?")
                                                  (("1" (inst?) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("1" (decompose-equality 1) nil nil)
                                         ("2"
                                          (ground)
                                          (("1"
                                            (skeep)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (typepred (w))
                                            (("2"
                                              (expand "walk?")
                                              (("2"
                                                (expand "verts_in?")
                                                (("2" (propax) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred (w))
                                          (("3"
                                            (expand "walk?")
                                            (("3"
                                              (expand "verts_in?")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (skeep)
                                                  (("3" (inst?) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "drop_circuits")
                                        (("3"
                                          (expand "list2finseq")
                                          (("3"
                                            (expand "map")
                                            (("3"
                                              (expand "map")
                                              (("3"
                                                (expand "length")
                                                (("3"
                                                  (expand "length")
                                                  (("3"
                                                    (decompose-equality 1)
                                                    (("1"
                                                      (decompose-equality 1)
                                                      (("1"
                                                        (typepred (x!1))
                                                        (("1"
                                                          (expand "map")
                                                          (("1"
                                                            (expand "map")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep :preds? t)
                                                        (("2"
                                                          (expand "map")
                                                          (("2"
                                                            (expand "map")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand "vert?")
                                                        (("3"
                                                          (typepred (w))
                                                          (("3"
                                                            (expand "walk?")
                                                            (("3"
                                                              (expand
                                                               "verts_in?")
                                                              (("3"
                                                                (inst?)
                                                                (("3"
                                                                  (skeep)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (skeep)
                                                        (("4"
                                                          (typepred "vc`v")
                                                          (("4"
                                                            (expand "vert?")
                                                            (("4"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (expand "gen_seq1")
                                                        (("5"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (typepred (w))
                                                        (("6"
                                                          (expand "vert?")
                                                          (("6"
                                                            (expand "walk?")
                                                            (("6"
                                                              (expand
                                                               "verts_in?")
                                                              (("6"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("7"
                                                        (expand "walk?")
                                                        (("7"
                                                          (expand "verts_in?")
                                                          (("7"
                                                            (typepred (w))
                                                            (("7"
                                                              (expand "walk?")
                                                              (("7"
                                                                (expand
                                                                 "verts_in?")
                                                                (("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (ground)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (rewrite
                                                           "map_length[vert_circ(G), vert(G)]")
                                                          (("1"
                                                            (ground)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred (w))
                                                            (("3"
                                                              (expand "walk?")
                                                              (("3"
                                                                (expand
                                                                 "verts_in?")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (expand "walk?")
                                                            (("4"
                                                              (expand
                                                               "verts_in?")
                                                              (("4"
                                                                (skeep)
                                                                (("4"
                                                                  (typepred
                                                                   (w))
                                                                  (("4"
                                                                    (expand
                                                                     "walk?")
                                                                    (("4"
                                                                      (expand
                                                                       "verts_in?")
                                                                      (("4"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand "vert?")
                                                          (("2"
                                                            (typepred (w))
                                                            (("2"
                                                              (expand "walk?")
                                                              (("2"
                                                                (expand
                                                                 "verts_in?")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep :preds? t)
                                                      (("3"
                                                        (expand "map")
                                                        (("3"
                                                          (expand "map")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep)
                                                      (("4"
                                                        (typepred (w))
                                                        (("4"
                                                          (expand "vert?")
                                                          (("4"
                                                            (expand "walk?")
                                                            (("4"
                                                              (expand
                                                               "verts_in?")
                                                              (("4"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (typepred "vc`v")
                                                        (("5"
                                                          (expand "vert?")
                                                          (("5"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("6"
                                                      (expand "gen_seq1")
                                                      (("6" (propax) nil nil))
                                                      nil)
                                                     ("7"
                                                      (typepred (w))
                                                      (("7"
                                                        (expand "vert?")
                                                        (("7"
                                                          (expand "walk?")
                                                          (("7"
                                                            (expand
                                                             "verts_in?")
                                                            (("7"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("8"
                                                      (expand "walk?")
                                                      (("8"
                                                        (expand "verts_in?")
                                                        (("8"
                                                          (skeep)
                                                          (("8"
                                                            (typepred (w))
                                                            (("8"
                                                              (expand "walk?")
                                                              (("8"
                                                                (expand
                                                                 "verts_in?")
                                                                (("8"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (typepred "vc`v")
                                    (("2" (expand "vert?")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((walk? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil)
    (length_singleton formula-decl nil more_list_props structures)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil) (Seq type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil))
   nil
   (trivial_decomp subtype
    "(: circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)) :)"
    "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")))
 (trivial_decomp_TCC4 0
  (trivial_decomp_TCC4-1 nil 3657285561 ("" (subtype-tcc) nil nil) nil nil
   (trivial_decomp subtype "0" "below[length(w)]")))
 (trivial_decomp_TCC5 0
  (trivial_decomp_TCC5-1 nil 3657285561 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (verts_in? const-decl "bool" walks_ nil)
    (edge? const-decl "bool" digraphs_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (vert? const-decl "bool" digraphs_ nil))
   nil
   (trivial_decomp subtype
    "finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)"
    "digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)")))
 (trivial_decomp_TCC6 0
  (trivial_decomp_TCC6-1 nil 3657285561
   ("" (skeep) (("" (ground) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (trivial_decomp subtype "(number_fields.-)(length(circuit_decomp_.w), 1)"
    "nat")))
 (trivial_decomp_TCC7 0
  (trivial_decomp_TCC7-1 nil 3657285561
   ("" (skeep)
    (("" (lemma "walk?_caret")
      (("" (inst?)
        (("" (assert)
          (("" (expand "^") (("" (expand "min") (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (walk?_caret formula-decl nil walks_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil))
   nil
   (trivial_decomp subtype
    "finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))"
    "walks_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].Walk(circuit_decomp_.G)")))
 (trivial_decomp_TCC8 0
  (trivial_decomp_TCC8-1 nil 3657285561 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil))
   nil
   (trivial_decomp termination
    "circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1))))"
    "nil")))
 (trivial_decomp_TCC9 0
  (trivial_decomp_TCC9-2 "" 3744393039
   ("" (skeep)
    (("" (expand "length" 2 1)
      (("" (assert)
        (("" (assert)
          (("" (typepred "v1(G, ^[T](w, (1, length(w) - 1)))")
            (("1" (expand "decomp_to_walk" 2)
              (("1" (expand "length" 2)
                (("1" (expand "map" 2)
                  (("1" (ground)
                    (("1" (expand "list2finseq" 1)
                      (("1" (expand "finseq_appl")
                        (("1" (expand "length" 1)
                          (("1" (rewrite "map_length[vert_circ(G), vert(G)]")
                            (("1" (expand "walk?")
                              (("1" (ground)
                                (("1" (expand "verts_in?")
                                  (("1" (skeep)
                                    (("1" (case "i=0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (typepred
                                             "vert2vc(G, w`seq(0))`v")
                                            (("1"
                                              (expand "vert?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nth")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (inst -3 "i-1")
                                              (("2"
                                                (expand "list2finseq")
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("1" (assert) nil nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "vc`v")
                                                      (("2"
                                                        (expand "vert?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (case "n=0")
                                    (("1" (expand "finseq_appl")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1"
                                            (typepred
                                             "decomp_to_walk(G, v1(G, ^[T](w, (1, length(w) - 1))))")
                                            (("1"
                                              (replace -11 -3)
                                              (("1"
                                                (expand "drop_circuits" -3)
                                                (("1"
                                                  (expand "first")
                                                  (("1"
                                                    (expand "list2finseq" -3)
                                                    (("1"
                                                      (expand
                                                       "finseq_appl"
                                                       -3)
                                                      (("1"
                                                        (replace -3 1 :dir rl)
                                                        (("1"
                                                          (expand "vert2vc")
                                                          (("1"
                                                            (expand "^")
                                                            (("1"
                                                              (hide -)
                                                              (("1"
                                                                (typepred (w))
                                                                (("1"
                                                                  (expand
                                                                   "walk?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "nth" 2)
                                      (("2"
                                        (expand "finseq_appl" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -5 "n-1")
                                            (("2"
                                              (expand "list2finseq" -5 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "list2finseq")
                                                      (("1"
                                                        (expand "finseq_appl")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "vc`v")
                                                      (("2"
                                                        (expand "vert?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (skeep :preds? t)
                                (("2" (typepred "vc`v")
                                  (("2" (expand "vert?")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -4)
                      (("2" (expand "finseq_appl")
                        (("2" (expand "vert2vc")
                          (("2" (expand "gen_seq1")
                            (("2" (decompose-equality 1)
                              (("1" (expand "^")
                                (("1" (expand "o")
                                  (("1" (expand "min")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (decompose-equality 1)
                                (("2" (expand "o")
                                  (("2" (ground)
                                    (("2" (lift-if 1)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (expand "^")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (decompose-equality 1)
                      (("1" (expand "drop_circuits")
                        (("1" (expand "list2finseq" 1)
                          (("1" (rewrite "map_length[vert_circ(G), vert(G)]")
                            (("1" (expand "length" 1)
                              (("1"
                                (case "length(v1(G, ^[T](w, (1, length(w) - 1)))) = ^[T](w, (1, length(w) - 1))`length")
                                (("1" (replace -1)
                                  (("1" (expand "^")
                                    (("1" (expand "min")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name-replace "LL"
                                   "length(v1(G, ^[T](w, (1, length(w) - 1))))")
                                  (("2" (replace -5 1 :dir rl)
                                    (("2" (expand "list2finseq")
                                      (("2"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]")
                                        (("2"
                                          (expand "LL")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "drop_circuits" 1)
                        (("2" (decompose-equality 1)
                          (("1" (expand "map" 1)
                            (("1" (case "x!1=0")
                              (("1" (replace -1)
                                (("1" (expand "list2finseq")
                                  (("1" (expand "nth")
                                    (("1" (expand "finseq_appl")
                                      (("1"
                                        (expand "vert2vc")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "w`seq(x!1) = ^[T](w, (1, length(w) - 1))`seq(x!1-1)")
                                (("1" (replace -1 2)
                                  (("1" (replace -6 2 :dir rl)
                                    (("1" (expand "drop_circuits")
                                      (("1"
                                        (expand "list2finseq")
                                        (("1"
                                          (expand "nth" 2 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "^") (("2" (propax) nil nil))
                                  nil)
                                 ("3" (assert)
                                  (("3" (replace -5 1 :dir rl)
                                    (("3" (assert)
                                      (("3"
                                        (typepred (x!1))
                                        (("3"
                                          (expand "drop_circuits")
                                          (("3"
                                            (expand "list2finseq")
                                            (("3"
                                              (rewrite
                                               "map_length[vert_circ(G), vert(G)]")
                                              (("1"
                                                (rewrite
                                                 "map_length[vert_circ(G), vert(G)]")
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1" (assert) nil nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "vc`v")
                                                  (("2"
                                                    (expand "vert?")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "vc`v")
                          (("3" (expand "vert?") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "^")
              (("2" (expand "min") (("2" (assert) nil nil)) nil)) nil)
             ("3" (hide 3)
              (("3" (lemma "trivial_decomp_TCC7")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (^ const-decl "finseq" finite_sequences nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (< const-decl "bool" reals nil) (walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (LL skolem-const-decl "nat" circuit_decomp_ nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (O const-decl "finseq" finite_sequences nil)
    (map_length formula-decl nil more_map_props nil)
    (i skolem-const-decl
       "below(1 + length(v1(G, ^[T](w, (1, length(w) - 1)))))" circuit_decomp_
       nil)
    (v1 skolem-const-decl "[d1:
   {z:
      [G: ConcreteDigraph,
       Walk[T, ConcreteDigraph, vert, edges, size, make](G)] |
      length(z`2) < length(w)} ->
   {cd: walk_decomp(d1`1) |
      decomp_to_walk(d1`1, cd) = d1`2 AND drop_circuits(d1`1, cd) = d1`2}]"
     circuit_decomp_ nil)
    (w skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (trivial_decomp_TCC7 subtype-tcc nil circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak
   (trivial_decomp subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons(circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)), circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))))"
    "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}"))
  (trivial_decomp_TCC9-1 nil 3657286467
   ("" (skeep)
    (("" (expand "length" 2 1)
      (("" (assert)
        (("" (assert)
          (("" (typepred "v1(G, ^[T](w, (1, length(w) - 1)))")
            (("1" (expand "decomp_to_walk" 2)
              (("1" (expand "length" 2)
                (("1" (expand "map" 2)
                  (("1" (ground)
                    (("1" (expand "list2finseq" 1)
                      (("1" (expand "finseq_appl")
                        (("1" (expand "length" 1)
                          (("1" (rewrite "map_length[vert_circ(G), vert(G)]")
                            (("1" (expand "walk?")
                              (("1" (ground)
                                (("1" (expand "verts_in?")
                                  (("1" (skeep)
                                    (("1" (case "i=0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (typepred
                                             "vert2vc(G, w`seq(0))`v")
                                            (("1"
                                              (expand "vert?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "nth")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "list2finseq")
                                            (("2"
                                              (inst -3 "i-1")
                                              (("2"
                                                (expand "list2finseq")
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("2" (assert) nil nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (skeep)
                                  (("2" (case "n=0")
                                    (("1" (expand "finseq_appl")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1"
                                            (typepred
                                             "decomp_to_walk(G, v1(G, ^[T](w, (1, length(w) - 1))))")
                                            (("1"
                                              (replace -11 -3)
                                              (("1"
                                                (expand "drop_circuits" -3)
                                                (("1"
                                                  (expand "first")
                                                  (("1"
                                                    (expand "list2finseq" -3)
                                                    (("1"
                                                      (expand
                                                       "finseq_appl"
                                                       -3)
                                                      (("1"
                                                        (replace -3 1 :dir rl)
                                                        (("1"
                                                          (expand "vert2vc")
                                                          (("1"
                                                            (expand "^")
                                                            (("1"
                                                              (hide -)
                                                              (("1"
                                                                (typepred (w))
                                                                (("1"
                                                                  (expand
                                                                   "walk?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (expand "nth" 2)
                                      (("2"
                                        (expand "finseq_appl" 2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -5 "n-1")
                                            (("2"
                                              (expand "list2finseq" -5 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "map_length[vert_circ(G), vert(G)]")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "list2finseq")
                                                      (("2"
                                                        (expand "finseq_appl")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (replace -4)
                      (("2" (expand "finseq_appl")
                        (("2" (expand "vert2vc")
                          (("2" (expand "gen_seq1")
                            (("2" (decompose-equality 1)
                              (("1" (expand "^")
                                (("1" (expand "o")
                                  (("1" (expand "min")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil)
                               ("2" (decompose-equality 1)
                                (("2" (expand "o")
                                  (("2" (ground)
                                    (("2" (lift-if 1)
                                      (("2"
                                        (ground)
                                        (("2"
                                          (expand "^")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (decompose-equality 1)
                      (("1" (expand "drop_circuits")
                        (("1" (expand "list2finseq" 1)
                          (("1" (rewrite "map_length[vert_circ(G), vert(G)]")
                            (("1" (expand "length" 1)
                              (("1"
                                (case "length(v1(G, ^[T](w, (1, length(w) - 1)))) = ^[T](w, (1, length(w) - 1))`length")
                                (("1" (replace -1)
                                  (("1" (expand "^")
                                    (("1" (expand "min")
                                      (("1" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (name-replace "LL"
                                   "length(v1(G, ^[T](w, (1, length(w) - 1))))")
                                  (("2" (replace -5 1 :dir rl)
                                    (("2" (expand "list2finseq")
                                      (("2"
                                        (rewrite
                                         "map_length[vert_circ(G), vert(G)]")
                                        (("2"
                                          (expand "LL")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2" (typepred "vc`v")
                                (("2" (expand "vert?")
                                  (("2" (propax) nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "drop_circuits" 1)
                        (("2" (decompose-equality 1)
                          (("1" (expand "map" 1)
                            (("1" (case "x!1=0")
                              (("1" (replace -1)
                                (("1" (expand "list2finseq")
                                  (("1" (expand "nth")
                                    (("1" (expand "finseq_appl")
                                      (("1"
                                        (expand "vert2vc")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "w`seq(x!1) = ^[T](w, (1, length(w) - 1))`seq(x!1-1)")
                                (("1" (replace -1 2)
                                  (("1" (replace -6 2 :dir rl)
                                    (("1" (expand "drop_circuits")
                                      (("1"
                                        (expand "list2finseq")
                                        (("1"
                                          (expand "nth" 2 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "^") (("2" (propax) nil nil))
                                  nil)
                                 ("3" (assert)
                                  (("3" (replace -5 1 :dir rl)
                                    (("3" (assert)
                                      (("3"
                                        (typepred (x!1))
                                        (("3"
                                          (expand "drop_circuits")
                                          (("3"
                                            (expand "list2finseq")
                                            (("3"
                                              (rewrite
                                               "map_length[vert_circ(G), vert(G)]")
                                              (("1"
                                                (rewrite
                                                 "map_length[vert_circ(G), vert(G)]")
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1" (assert) nil nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "vc`v")
                                                  (("2"
                                                    (expand "vert?")
                                                    (("2" (propax) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "vc`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "vc`v")
                          (("3" (expand "vert?") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "^")
              (("2" (expand "min") (("2" (assert) nil nil)) nil)) nil)
             ("3" (hide 3)
              (("3" (lemma "trivial_decomp_TCC7")
                (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (walk? const-decl "bool" walks_ nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (last const-decl "T" seq_extras structures))
   nil
   (trivial_decomp subtype
    "list_adt[circuit_decomp_.vert_circ(circuit_decomp_.G)].cons(circuit_decomp_.vert2vc(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].finseq_appl(circuit_decomp_.w)(0)), circuit_decomp_.trivial_decomp(circuit_decomp_.G, finite_sequences[circuit_decomp_.T].^(circuit_decomp_.w, (1, (number_fields.-)(length(circuit_decomp_.w), 1)))))"
    "{cd: circuit_decomp_.walk_decomp(circuit_decomp_.G) | booleans.AND(circuit_decomp_.decomp_to_walk(circuit_decomp_.G, cd) = circuit_decomp_.w, circuit_decomp_.drop_circuits(circuit_decomp_.G, cd) = circuit_decomp_.w)}")))
 (trivial_decomp_idemp 0
  (trivial_decomp_idemp-1 nil 3657284250
   ("" (skeep)
    (("" (typepred "trivial_decomp(G, w)") (("" (assert) nil nil)) nil)) nil)
   ((trivial_decomp def-decl "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" circuit_decomp_
     nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (walk? const-decl "bool" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (trivial_decomp_length 0
  (trivial_decomp_length-1 nil 3657292813
   (""
    (case "FORALL (G: ConcreteDigraph, n: nat, w: Walk(G)):
        n=length(trivial_decomp(G, w)) IMPLIES length(trivial_decomp(G, w)) = length(w)")
    (("1" (skeep)
      (("1" (inst?)
        (("1" (inst - "length(trivial_decomp(G, w))")
          (("1" (skeep)
            (("1" (typepred "vc`v")
              (("1" (expand "vert?") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (ground)
          (("1" (skeep)
            (("1" (expand "length")
              (("1" (ground)
                (("1" (lift-if -1)
                  (("1" (ground)
                    (("1" (expand "trivial_decomp")
                      (("1" (lift-if -1) (("1" (ground) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (case "j=0")
            (("1" (skeep)
              (("1" (expand "trivial_decomp" 1)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (flatten)
                      (("1" (expand "length")
                        (("1" (expand "length") (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -2 "G" "w^(1, length(w)-1)")
                        (("2" (expand "trivial_decomp" -3)
                          (("2" (ground)
                            (("1" (expand "length" 2 1)
                              (("1" (replace -1)
                                (("1" (expand "^")
                                  (("1" (expand "min")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (move-terms -2 l 1)
                              (("1" (replace -2)
                                (("1" (expand "length" 1 1)
                                  (("1" (propax) nil nil)) nil))
                                nil)
                               ("2" (skeep)
                                (("2" (typepred "vc`v")
                                  (("2" (expand "vert?")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (expand "trivial_decomp" -2)
                (("2" (lift-if -2)
                  (("2" (split -2)
                    (("1" (flatten)
                      (("1" (expand "trivial_decomp") (("1" (ground) nil nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "length" -1)
                        (("2" (inst -2 "G" "w^(1, length(w)-1)")
                          (("2" (assert)
                            (("2" (expand "trivial_decomp" 3)
                              (("2" (expand "length" 3)
                                (("2" (replaces -2)
                                  (("2" (expand "^")
                                    (("2" (expand "min")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (typepred "vc`v")
            (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (typepred "vc`v")
        (("4" (expand "vert?") (("4" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((trivial_decomp def-decl "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" circuit_decomp_
     nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (TRUE const-decl "bool" booleans nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (trivial_decomp_circuit_length_TCC1 0
  (trivial_decomp_circuit_length_TCC1-1 nil 3657292811
   ("" (skeep :preds? t)
    (("" (lemma "trivial_decomp_length")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((trivial_decomp_length formula-decl nil circuit_decomp_ nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil))
   nil
   (trivial_decomp_circuit_length subtype "circuit_decomp_.i"
    "below[length[vert_circ(G)](trivial_decomp(G, w))]")))
 (trivial_decomp_circuit_length 0
  (trivial_decomp_circuit_length-1 nil 3657294161
   (""
    (case " FORALL (G: ConcreteDigraph, n: nat, w: Walk(G), i: below(length(w))):
        n=i IMPLIES nth(trivial_decomp(G, w), i)`c`length = 1")
    (("1" (skeep) (("1" (inst?) (("1" (inst - "i") nil nil)) nil)) nil)
     ("2" (hide 2)
      (("2" (induct " n")
        (("1" (skeep)
          (("1" (replaces -1 :dir rl)
            (("1" (expand "nth")
              (("1" (expand "trivial_decomp")
                (("1" (ground)
                  (("1" (expand "finseq_appl")
                    (("1" (expand "vert2vc")
                      (("1" (expand "gen_seq1") (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (replace -2 :dir rl)
              (("2" (expand "nth" 1)
                (("2" (expand "trivial_decomp" 1)
                  (("2" (typepred (i))
                    (("2" (assert)
                      (("2" (inst - "G" " w ^ (1, length(w) - 1)" "j")
                        (("2" (expand "^")
                          (("2" (expand "min") (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (typepred "vc`v")
              (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
            nil))
          nil)
         ("4" (skeep :preds? t)
          (("4" (lemma "trivial_decomp_length")
            (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (typepred "vc`v")
          (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (lemma "trivial_decomp_length")
        (("4" (inst?) (("4" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((trivial_decomp def-decl "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" circuit_decomp_
     nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nth def-decl "T" list_props nil) (length def-decl "nat" list_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (vert type-eq-decl nil digraphs_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (Walk type-eq-decl nil walks_ nil)
    (walk? const-decl "bool" walks_ nil) (prewalk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trivial_decomp_length formula-decl nil circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (w skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (j skolem-const-decl "nat" circuit_decomp_ nil)
    (^ const-decl "finseq" finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (TRUE const-decl "bool" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (trunk_decomp_TCC1 0
  (trunk_decomp_TCC1-1 nil 3657301293 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (edge? const-decl "bool" digraphs_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (circuit? const-decl "bool" circuits_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (trunk_decomp subtype "circuit_decomp_.w"
    "Longprewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (trunk_decomp_TCC2 0
  (trunk_decomp_TCC2-2 "" 3744398703
   ("" (skeep)
    (("" (expand "list2finseq")
      (("" (rewrite "map_length[vert_circ(G), vert(G)]")
        (("" (skeep)
          (("" (typepred "vc`v")
            (("" (expand "vert?") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list2finseq const-decl "finseq[T]" list2finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil) (> const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk? const-decl "bool" walks_ nil)
    (length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (map_length formula-decl nil more_map_props nil))
   shostak
   (trunk_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd, (: circuit_decomp_.vert2vc(circuit_decomp_.G, seq_extras[circuit_decomp_.T].last(circuit_decomp_.w)) :))))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]"))
  (trunk_decomp_TCC2-1 nil 3657301293 ("" (subtype-tcc) nil nil)
   ((circuit_at? const-decl "bool" circuits_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (walk? const-decl "bool" walks_ nil))
   nil
   (trunk_decomp subtype
    "list2finseq[digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].list2finseq(list_adt_map[circuit_decomp_.vert_circ(circuit_decomp_.G), digraphs_[circuit_decomp_.T, circuit_decomp_.ConcreteDigraph, circuit_decomp_.vert, circuit_decomp_.edges, circuit_decomp_.size, circuit_decomp_.make].vert(circuit_decomp_.G)].map(LAMBDA (vc: circuit_decomp_.vert_circ(circuit_decomp_.G)): vc`v)(list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd, (: circuit_decomp_.vert2vc(circuit_decomp_.G, seq_extras[circuit_decomp_.T].last(circuit_decomp_.w)) :))))"
    "prewalk[T, ConcreteDigraph, vert, edges, size, make]")))
 (trunk_decomp 0
  (trunk_decomp-3 "" 3791887913
   ("" (lemma "append_decomp")
    (("" (skeep)
      (("" (inst?)
        (("1" (assert)
          (("1" (ground)
            (("1" (rewrite "length_append[vert_circ(G)]")
              (("1" (assert) nil nil)
               ("2" (skeep)
                (("2" (typepred "vc`v")
                  (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 1)
              (("2" (expand "nth" 1 2)
                (("2" (expand "vert2vc")
                  (("2" (typepred "decomp_to_walk(G, cd)")
                    (("2" (expand "drop_circuits" -4)
                      (("2" (expand "list2finseq" -4)
                        (("2" (expand "last" -4 2)
                          (("2" (expand "finseq_appl")
                            (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("1" (inst?)
                                (("1" (replace -1)
                                  (("1" (hide -1)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]")
                                      (("1"
                                        (replace -6 -4)
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (expand "last")
                                            (("1"
                                              (expand "trunc1")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "min")
                                                  (("1"
                                                    (expand "finseq_appl")
                                                    (("1"
                                                      (typepred (w))
                                                      (("1"
                                                        (expand "walk?" -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "length(w)-2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  (("2" (assert) nil nil)) nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (typepred "vc`v")
                                  (("2" (expand "vert?")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "map")
            (("2" (expand "map")
              (("2" (expand "list2finseq")
                (("2" (expand "length")
                  (("2" (expand "length")
                    (("2" (expand "walk?")
                      (("2" (expand "verts_in?")
                        (("2" (skeep)
                          (("2" (expand "nth")
                            (("2" (typepred "vert2vc(G, last[T](w))`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (w skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Walk type-eq-decl nil walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (walk? const-decl "bool" walks_ nil) (prewalk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length def-decl "nat" list_props nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (map_length formula-decl nil more_map_props nil)
    (trunc1 const-decl "prewalk" walks_ nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (first const-decl "T" seq_extras structures)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_append formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (append_decomp formula-decl nil circuit_decomp_ nil))
   shostak)
  (trunk_decomp-2 "" 3744398834
   ("" (lemma "append_decomp")
    (("" (skeep)
      (("" (inst?)
        (("1" (assert)
          (("1" (ground)
            (("1" (rewrite "length_append[vert_circ(G)]")
              (("1" (assert) nil nil)) nil)
             ("2" (hide 1)
              (("2" (expand "nth" 1 2)
                (("2" (expand "vert2vc")
                  (("2" (typepred "decomp_to_walk(G, cd)")
                    (("2" (expand "drop_circuits" -4)
                      (("2" (expand "list2finseq" -4)
                        (("2" (expand "last" -4 2)
                          (("2" (expand "finseq_appl")
                            (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("2" (inst?)
                                (("1" (replace -1)
                                  (("1" (hide -1)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]")
                                      (("1"
                                        (replace -6 -4)
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (expand "last")
                                            (("1"
                                              (expand "trunc1")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "min")
                                                  (("1"
                                                    (expand "finseq_appl")
                                                    (("1"
                                                      (typepred (w))
                                                      (("1"
                                                        (expand "walk?" -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "length(w)-2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  (("1" (assert) nil nil)
                                   ("2" (skeep)
                                    (("2" (typepred "vc`v")
                                      (("2"
                                        (expand "vert?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "map")
            (("2" (expand "map")
              (("2" (expand "list2finseq")
                (("2" (expand "length")
                  (("2" (expand "length")
                    (("2" (expand "walk?")
                      (("2" (expand "verts_in?")
                        (("2" (skeep)
                          (("2" (expand "nth")
                            (("2" (typepred "vert2vc(G, last[T](w))`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (circuit_at? const-decl "bool" circuits_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil) (prewalk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (length_singleton formula-decl nil more_list_props structures)
    (trunc1 const-decl "prewalk" walks_ nil)
    (first const-decl "T" seq_extras structures))
   shostak)
  (trunk_decomp-1 nil 3657362796
   ("" (lemma "append_decomp")
    (("" (skeep)
      (("" (inst?)
        (("1" (assert)
          (("1" (ground)
            (("1" (rewrite "length_append[vert_circ(G)]")
              (("1" (assert) nil nil)
               ("2" (skeep)
                (("2" (typepred "vc`v")
                  (("2" (expand "vert?") (("2" (propax) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (hide 1)
              (("2" (expand "nth" 1 2)
                (("2" (expand "vert2vc")
                  (("2" (typepred "decomp_to_walk(G, cd)")
                    (("2" (expand "drop_circuits" -4)
                      (("2" (expand "list2finseq" -4)
                        (("2" (expand "last" -4 2)
                          (("2" (expand "finseq_appl")
                            (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("2" (inst?)
                                (("1" (replace -1)
                                  (("1" (hide -1)
                                    (("1"
                                      (rewrite
                                       "map_length[vert_circ(G), vert(G)]")
                                      (("1"
                                        (replace -6 -4)
                                        (("1"
                                          (replace -4 :dir rl)
                                          (("1"
                                            (expand "last")
                                            (("1"
                                              (expand "trunc1")
                                              (("1"
                                                (expand "^")
                                                (("1"
                                                  (expand "min")
                                                  (("1"
                                                    (expand "finseq_appl")
                                                    (("1"
                                                      (typepred (w))
                                                      (("1"
                                                        (expand "walk?" -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (inst
                                                             -
                                                             "length(w)-2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "finseq_appl")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  (("2" (assert) nil nil)) nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (expand "map")
            (("2" (expand "map")
              (("2" (expand "list2finseq")
                (("2" (expand "length")
                  (("2" (expand "length")
                    (("2" (expand "walk?")
                      (("2" (expand "verts_in?")
                        (("2" (skeep)
                          (("2" (expand "nth")
                            (("2" (typepred "vert2vc(G, last[T](w))`v")
                              (("2" (expand "vert?") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "vc`v")
            (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
          nil)
         ("4" (typepred (w))
          (("4" (expand "length")
            (("4" (hide 2)
              (("4" (expand "walk?")
                (("4" (flatten)
                  (("4" (expand "verts_in?")
                    (("4" (expand "vert?")
                      (("4" (expand "last")
                        (("4" (expand "finseq_appl") (("4" (inst?) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trunc1 const-decl "prewalk" walks_ nil)
    (first const-decl "T" seq_extras structures)
    (length_singleton formula-decl nil more_list_props structures)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures))
   shostak))
 (trunc_decomp_def_TCC1 0
  (trunc_decomp_def_TCC1-1 nil 3657301293
   ("" (lemma "trunk_decomp") (("" (propax) nil nil)) nil)
   ((trunk_decomp formula-decl nil circuit_decomp_ nil)) nil
   (trunc_decomp_def subtype
    "list_props[circuit_decomp_.vert_circ(circuit_decomp_.G)].append(circuit_decomp_.cd, (: circuit_decomp_.vert2vc(circuit_decomp_.G, seq_extras[circuit_decomp_.T].last(circuit_decomp_.w)) :))"
    "circuit_decomp_.walk_decomp(circuit_decomp_.G)")))
 (trunc_decomp_def 0
  (trunc_decomp_def-3 "" 3791887916
   ("" (skeep)
    (("" (lemma "append_commute")
      (("" (inst?)
        (("1" (ground)
          (("1" (replace -1)
            (("1" (replace -3)
              (("1" (hide -1)
                (("1" (expand "decomp_to_walk" 1 1)
                  (("1" (expand "length" 1)
                    (("1" (expand "length" 1)
                      (("1" (expand "vert2vc")
                        (("1" (decompose-equality 1)
                          (("1" (expand "o ")
                            (("1" (expand "gen_seq1")
                              (("1" (expand "trunc1")
                                (("1" (expand "^")
                                  (("1" (expand "min")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality 1)
                            (("2" (expand "o ")
                              (("2" (expand "trunc1" 1 1)
                                (("2" (expand "^")
                                  (("2" (expand "min")
                                    (("2" (lift-if 1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "trunc1")
                                          (("1"
                                            (expand "^")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "trunc1")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (typepred (x!1))
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand "gen_seq1")
                                                    (("2"
                                                      (expand "trunc1")
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (expand "last")
                                                            (("2"
                                                              (expand
                                                               "finseq_appl")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 1 2)
            (("2" (expand "vert2vc" 1)
              (("2" (typepred (cd))
                (("2" (typepred "decomp_to_walk(G, cd)")
                  (("2" (expand "drop_circuits" -4)
                    (("2" (replace -9 -4)
                      (("2" (expand "last" -4 2)
                        (("2" (expand "finseq_appl")
                          (("2" (expand "list2finseq" -4)
                            (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("1" (inst?)
                                (("1" (replaces -1)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]")
                                    (("1" (replaces -4 :dir rl)
                                      (("1"
                                        (expand "trunc1" 1)
                                        (("1"
                                          (expand "^" 1)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (expand "last" 1)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (typepred (w))
                                                  (("1"
                                                    (expand "walk?" -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "length(w) -2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  (("2" (assert) nil nil)) nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (skeep)
                                (("2" (typepred "vc`v")
                                  (("2" (expand "vert?")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "map")
          (("2" (expand "map")
            (("2" (expand "list2finseq")
              (("2" (expand "length")
                (("2" (expand "length")
                  (("2" (expand "walk?")
                    (("2" (expand "verts_in?")
                      (("2" (skeep)
                        (("2" (expand "nth")
                          (("2" (typepred "vert2vc(G, last[T](w))`v")
                            (("2" (expand "vert?") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_commute formula-decl nil circuit_decomp_ nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (w skolem-const-decl
     "Walk[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (/= const-decl "boolean" notequal nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Walk type-eq-decl nil walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (walk? const-decl "bool" walks_ nil) (prewalk type-eq-decl nil walks_ nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (length_singleton formula-decl nil more_list_props structures)
    (length def-decl "nat" list_props nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (< const-decl "bool" reals nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_min application-judgement "{k: int | k <= i AND k <= j}" real_defs
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (^ const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (Longprewalk type-eq-decl nil walks_ nil)
    (trunc1 const-decl "prewalk" walks_ nil)
    (first const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (TRUE const-decl "bool" booleans nil)
    (map_length formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (nth def-decl "T" list_props nil))
   shostak)
  (trunc_decomp_def-2 "" 3744398993
   ("" (skeep)
    (("" (lemma "append_commute")
      (("" (inst?)
        (("1" (ground)
          (("1" (replace -1)
            (("1" (replace -3)
              (("1" (hide -1)
                (("1" (expand "decomp_to_walk" 1 1)
                  (("1" (expand "length" 1)
                    (("1" (expand "length" 1)
                      (("1" (expand "vert2vc")
                        (("1" (decompose-equality 1)
                          (("1" (expand "o ")
                            (("1" (expand "gen_seq1")
                              (("1" (expand "trunc1")
                                (("1" (expand "^")
                                  (("1" (expand "min")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality 1)
                            (("2" (expand "o ")
                              (("2" (expand "trunc1" 1 1)
                                (("2" (expand "^")
                                  (("2" (expand "min")
                                    (("2" (lift-if 1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "trunc1")
                                          (("1"
                                            (expand "^")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "trunc1")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (typepred (x!1))
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand "gen_seq1")
                                                    (("2"
                                                      (expand "trunc1")
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (expand "last")
                                                            (("2"
                                                              (expand
                                                               "finseq_appl")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 1 2)
            (("2" (expand "vert2vc" 1)
              (("2" (typepred (cd))
                (("2" (typepred "decomp_to_walk(G, cd)")
                  (("2" (expand "drop_circuits" -4)
                    (("2" (replace -9 -4)
                      (("2" (expand "last" -4 2)
                        (("2" (expand "finseq_appl")
                          (("2" (expand "list2finseq" -4)
                            (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("2" (inst?)
                                (("1" (replaces -1)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]")
                                    (("1" (replaces -4 :dir rl)
                                      (("1"
                                        (expand "trunc1" 1)
                                        (("1"
                                          (expand "^" 1)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (expand "last" 1)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (typepred (w))
                                                  (("1"
                                                    (expand "walk?" -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "length(w) -2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  (("1" (assert) nil nil)
                                   ("2" (skeep)
                                    (("2" (typepred "vc`v")
                                      (("2"
                                        (expand "vert?")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "map")
          (("2" (expand "map")
            (("2" (expand "list2finseq")
              (("2" (expand "length")
                (("2" (expand "length")
                  (("2" (expand "walk?")
                    (("2" (expand "verts_in?")
                      (("2" (skeep)
                        (("2" (expand "nth")
                          (("2" (typepred "vert2vc(G, last[T](w))`v")
                            (("2" (expand "vert?") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (circuit_at? const-decl "bool" circuits_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (walk? const-decl "bool" walks_ nil) (prewalk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (length_singleton formula-decl nil more_list_props structures)
    (Longprewalk type-eq-decl nil walks_ nil)
    (trunc1 const-decl "prewalk" walks_ nil)
    (first const-decl "T" seq_extras structures))
   shostak)
  (trunc_decomp_def-1 nil 3657301450
   ("" (skeep)
    (("" (lemma "append_commute")
      (("" (inst?)
        (("1" (ground)
          (("1" (replace -1)
            (("1" (replace -3)
              (("1" (hide -1)
                (("1" (expand "decomp_to_walk" 1 1)
                  (("1" (expand "length" 1)
                    (("1" (expand "length" 1)
                      (("1" (expand "vert2vc")
                        (("1" (decompose-equality 1)
                          (("1" (expand "o ")
                            (("1" (expand "gen_seq1")
                              (("1" (expand "trunc1")
                                (("1" (expand "^")
                                  (("1" (expand "min")
                                    (("1" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (decompose-equality 1)
                            (("2" (expand "o ")
                              (("2" (expand "trunc1" 1 1)
                                (("2" (expand "^")
                                  (("2" (expand "min")
                                    (("2" (lift-if 1)
                                      (("2"
                                        (ground)
                                        (("1"
                                          (expand "trunc1")
                                          (("1"
                                            (expand "^")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "trunc1")
                                          (("2"
                                            (expand "^")
                                            (("2"
                                              (expand "min")
                                              (("2"
                                                (typepred (x!1))
                                                (("2"
                                                  (expand "o ")
                                                  (("2"
                                                    (expand "gen_seq1")
                                                    (("2"
                                                      (expand "trunc1")
                                                      (("2"
                                                        (expand "^")
                                                        (("2"
                                                          (expand "min")
                                                          (("2"
                                                            (expand "last")
                                                            (("2"
                                                              (expand
                                                               "finseq_appl")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "nth" 1 2)
            (("2" (expand "vert2vc" 1)
              (("2" (typepred (cd))
                (("2" (typepred "decomp_to_walk(G, cd)")
                  (("2" (expand "drop_circuits" -4)
                    (("2" (replace -9 -4)
                      (("2" (expand "last" -4 2)
                        (("2" (expand "finseq_appl")
                          (("2" (expand "list2finseq" -4)
                            (("2" (lemma "map_nth_rw[vert_circ(G), vert(G)]")
                              (("2" (inst?)
                                (("1" (replaces -1)
                                  (("1"
                                    (rewrite
                                     "map_length[vert_circ(G), vert(G)]")
                                    (("1" (replaces -4 :dir rl)
                                      (("1"
                                        (expand "trunc1" 1)
                                        (("1"
                                          (expand "^" 1)
                                          (("1"
                                            (expand "min")
                                            (("1"
                                              (expand "last" 1)
                                              (("1"
                                                (expand "finseq_appl")
                                                (("1"
                                                  (typepred (w))
                                                  (("1"
                                                    (expand "walk?" -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "length(w) -2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "finseq_appl")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite
                                   "map_length[vert_circ(G), vert(G)]")
                                  (("2" (assert) nil nil)) nil)
                                 ("3" (skeep)
                                  (("3" (typepred "vc`v")
                                    (("3" (expand "vert?")
                                      (("3" (propax) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "map")
          (("2" (expand "map")
            (("2" (expand "list2finseq")
              (("2" (expand "length")
                (("2" (expand "length")
                  (("2" (expand "walk?")
                    (("2" (expand "verts_in?")
                      (("2" (skeep)
                        (("2" (expand "nth")
                          (("2" (typepred "vert2vc(G, last[T](w))`v")
                            (("2" (expand "vert?") (("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "vc`v")
            (("3" (expand "vert?") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trunc1 const-decl "prewalk" walks_ nil)
    (Longprewalk type-eq-decl nil walks_ nil)
    (first const-decl "T" seq_extras structures)
    (length_singleton formula-decl nil more_list_props structures)
    (is_finite const-decl "bool" finite_sets nil)
    (prewalk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil) (Walk type-eq-decl nil walks_ nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (circuit_at? const-decl "bool" circuits_ nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (last const-decl "T" seq_extras structures))
   shostak))
 (circuit_decomposition 0
  (circuit_decomposition-3 "" 3790101422
   ("" (skeep :preds? t)
    (("" (case "cycle_at?(G, circ, v)")
      (("1" (inst + "trivial_decomp(G, circ)")
        (("1" (typepred "trivial_decomp(G, circ)")
          (("1" (assert)
            (("1" (lemma "trivial_decomp_circuit_length")
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (expand "circuit_at?")
                        (("1" (expand "circuit?") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "cycle_at?" 1)
        (("2" (expand "cycle?" 1)
          (("2" (ground)
            (("1" (expand "circuit_at?") (("1" (propax) nil nil)) nil)
             ("2"
              (case "FORALL (i, j: below(length(trunc1(circ)))):
                                         i < j IMPLIES finseq_appl(trunc1(circ))(i) /= finseq_appl(trunc1(circ))(j)")
              (("1" (skeep)
                (("1" (case "i<j")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "trunc1")
                        (("1" (assert)
                          (("1" (expand "^" -2)
                            (("1" (expand "min")
                              (("1" (expand "finseq_appl")
                                (("1" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "trunc1")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "trunc1")
                      (("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "j" "i")
                    (("1" (assert)
                      (("1" (expand "trunc1")
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (expand "finseq_appl")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "trunc1")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "trunc1")
                      (("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (lemma " circuit_decomp_prep")
                    (("2"
                      (inst - "G" "v" "trunc1(circ)"
                       "trivial_decomp(G, trunc1(circ))"
                       "length(trivial_decomp(G, trunc1(circ)))")
                      (("1" (rewrite "trivial_decomp_idemp" :dir rl)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (lemma "trunc_decomp_def")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "circuit_at?")
                                    (("1" (expand "circuit?")
                                      (("1"
                                        (expand "pre_circuit?")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "append[vert_circ(G)]
                                                 (scd, (: vert2vc(G, last(circ)) :))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "cycle_at?")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand "cycle?")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (typepred
                                                               "drop_circuits(G,
                                                                     append[vert_circ(G)]
                                                                         (scd, (: vert2vc(G, last(circ)) :)))")
                                                              (("1"
                                                                (expand
                                                                 "circuit?")
                                                                (("1"
                                                                  (rewrite
                                                                   "length_append[vert_circ(G)]")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "pre_circuit?")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (expand
                                                                           "drop_circuits"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "list2finseq"
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "nth_append[vert_circ(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "map_length[vert_circ(G), vert(G)]")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nth_append[vert_circ(G)]")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "length_append[vert_circ(G)]")
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "vert2vc")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "trunc1(circ)`seq(0) = last(circ)")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "decomp_to_walk(G, scd)")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           (-5
                                                                                                                            -6
                                                                                                                            -7
                                                                                                                            -8))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "first")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "finseq_appl")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "drop_circuits"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "list2finseq")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "trunc1")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "last")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "finseq_appl")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "length_append[vert_circ(G)]")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("2"
                                                                    (expand
                                                                     "vert?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "FORALL (i,
                                                                j:
                                                                  below(length
                                                                          (drop_circuits(G,
                                                                                         append[vert_circ(G)]
                                                                                         (scd,
                                                                                          (: vert2vc(G, last(circ)) :))))
                                                                         - 1)):
                                                          i < j IMPLIES
                                                           finseq_appl                                      (drop_circuits(G,
                                                                              append[vert_circ(G)]
                                                                                  (scd, (: vert2vc(G, last(circ)) :))))
                                                               (i)
                                                            /=
                                                            finseq_appl
                                                                (drop_circuits(G,
                                                                               append[vert_circ(G)]
                                                                                   (scd, (: vert2vc(G, last(circ)) :))))
                                                                (j)")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (case
                                                                   "i!1<j!1")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -
                                                                     "j!1"
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skeep
                                                                   :preds?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "drop_circuits"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "drop_circuits"
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "list2finseq"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "list2finseq"
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "map_length[vert_circ(G), vert(G)]")
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_append[vert_circ(G)]")
                                                                              (("1"
                                                                                (simplify)
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "i!1"
                                                                                   "j!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "finseq_appl")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "drop_circuits")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "list2finseq")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_append[vert_circ(G)]")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   -1
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "nth_append[vert_circ(G)]")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "length"
                                                                                                                                             -1
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               -1
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (replaces
                                                                                                                                                 -1)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "vc`v")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "vert?")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "vc`v")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vert?")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "vc`v")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "vert?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "drop_circuits"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "list2finseq")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "drop_circuits"
                                                                                     1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "list2finseq"
                                                                                       1)
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "drop_circuits")
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (expand
                                                               "list2finseq")
                                                              (("2"
                                                                (lemma
                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_append[vert_circ(G)]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "decomp_to_walk(G, scd)")
                                                                              (("1"
                                                                                (expand
                                                                                 "drop_circuits"
                                                                                 -3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "first")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "finseq_appl")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "list2finseq")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "trunc1"
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep :preds? t)
                                                      (("2"
                                                        (lemma
                                                         "nth_append[vert_circ(G)]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (rewrite
                                                             "length_append[vert_circ(G)]")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i!1=0")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "walk_index_ub")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "scd"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "walk_index")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "trunc1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "min")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "walk_index_last")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 " G"
                                                                                 "scd"
                                                                                 "i!1-1")
                                                                                (("1"
                                                                                  (simplify
                                                                                   -1)
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     -1
                                                                                     r
                                                                                     2)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "walk_index_ub")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "G"
                                                                                           "scd"
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "trunc1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "min")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "vert2vc")
                                                                                (("2"
                                                                                  (expand
                                                                                   "gen_seq1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "trivial_decomp_length")
                        (("2" (expand "trunc1")
                          (("2" (expand "^")
                            (("2" (expand "min")
                              (("2" (expand "circuit_at?")
                                (("2" (expand "circuit?")
                                  (("2" (expand "pre_circuit?")
                                    (("2" (assert) (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "vc`v")
                          (("3" (expand "vert?") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "trunc1")
                        (("4" (expand "circuit_at?")
                          (("4" (expand "circuit?")
                            (("4" (expand "pre_circuit?")
                              (("4" (flatten)
                                (("4" (lemma "walk?_caret")
                                  (("4" (inst?)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (expand "circuit_at?")
                  (("3" (expand "circuit?")
                    (("3" (expand "pre_circuit?") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "circuit_at?") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((circuit_decomp_prep formula-decl nil circuit_decomp_ nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (trunc_decomp_def formula-decl nil circuit_decomp_ nil)
    (vert2vc const-decl "vert_circ(G)" circuit_decomp_ nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (walk_index_ub formula-decl nil circuit_decomp_ nil)
    (walk_index def-decl
     "{n: nat | n = length(decomp_to_walk(G, cd ^ (0, i)))}" circuit_decomp_
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (^ def-decl "list[T]" more_list_props structures)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (i!1 skolem-const-decl
     "below(length(append[vert_circ(G)](scd, (: vert2vc(G, last(circ)) :))))"
     circuit_decomp_ nil)
    (walk_index_last formula-decl nil circuit_decomp_ nil)
    (i!1 skolem-const-decl "below(length
        (drop_circuits(G,
                       append[vert_circ(G)]
                           (scd, (: vert2vc(G, last(circ)) :))))
       - 1)" circuit_decomp_ nil)
    (j!1 skolem-const-decl "below(length
        (drop_circuits(G,
                       append[vert_circ(G)]
                           (scd, (: vert2vc(G, last(circ)) :))))
       - 1)" circuit_decomp_ nil)
    (TRUE const-decl "bool" booleans nil) (nth def-decl "T" list_props nil)
    (map_length formula-decl nil more_map_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (scd skolem-const-decl "walk_decomp(G)" circuit_decomp_ nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (length_append formula-decl nil list_props nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (trivial_decomp_idemp formula-decl nil circuit_decomp_ nil)
    (trivial_decomp_length formula-decl nil circuit_decomp_ nil)
    (walk?_caret formula-decl nil walks_ nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (G skolem-const-decl "ConcreteDigraph" circuit_decomp_ nil)
    (v skolem-const-decl
     "vert[T, ConcreteDigraph, vert, edges, size, make](G)" circuit_decomp_
     nil)
    (circ skolem-const-decl "{circ: prewalk | circuit_at?(G, circ, v)}"
     circuit_decomp_ nil)
    (i skolem-const-decl "below(length(circ) - 1)" circuit_decomp_ nil)
    (j skolem-const-decl "below(length(circ) - 1)" circuit_decomp_ nil)
    (posint_plus_nnint_is_posint application-judgement "posint" integers nil)
    (^ const-decl "finseq" finite_sequences nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Longprewalk type-eq-decl nil walks_ nil)
    (trunc1 const-decl "prewalk" walks_ nil)
    (finseq_appl const-decl "[below[length(fs)] -> T]" finite_sequences nil)
    (cycle? const-decl "bool" cycles_ nil) (Walk type-eq-decl nil walks_ nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (verts_in? const-decl "bool" walks_ nil) (Seq type-eq-decl nil walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (vert_circ type-eq-decl nil circuit_decomp_ nil)
    (length def-decl "nat" list_props nil)
    (walk? const-decl "bool" walks_ nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (walk_decomp type-eq-decl nil circuit_decomp_ nil)
    (/= const-decl "boolean" notequal nil)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (drop_circuits const-decl "{W: Walk(G) | length(W) = length(cd)}"
     circuit_decomp_ nil)
    (last const-decl "T" seq_extras structures)
    (decomp_to_walk def-decl "{ww: Walk(G) |
   LET W = drop_circuits(G, cd) IN
     first(ww) = first(W) AND last(ww) = last(W)}" circuit_decomp_ nil)
    (trivial_decomp def-decl "{cd: walk_decomp(G) |
   decomp_to_walk(G, cd) = w AND drop_circuits(G, cd) = w}" circuit_decomp_
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (circuit? const-decl "bool" circuits_ nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trivial_decomp_circuit_length formula-decl nil circuit_decomp_ nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ConcreteDigraph formal-type-decl nil circuit_decomp_ nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil circuit_decomp_ nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (vert formal-const-decl "[ConcreteDigraph -> [T -> bool]]" circuit_decomp_
     nil)
    (edges formal-const-decl "[ConcreteDigraph -> [T, T -> bool]]"
     circuit_decomp_ nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (size formal-const-decl "[ConcreteDigraph -> nat]" circuit_decomp_ nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (make formal-const-decl "[v: (is_finite[T]),
 {e: (is_finite[[T, T]]) |
    FORALL (x, y: T): e(x, y) IMPLIES v(x) AND v(y)} ->
   ConcreteDigraph]" circuit_decomp_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (cycle_at? const-decl "bool" cycles_ nil)
    (circuit_at? const-decl "bool" circuits_ nil))
   shostak)
  (circuit_decomposition-2 "" 3744400073
   ("" (skeep :preds? t)
    (("" (case "cycle_at?(G, circ, v)")
      (("1" (inst + "trivial_decomp(G, circ)")
        (("1" (typepred "trivial_decomp(G, circ)")
          (("1" (assert)
            (("1" (lemma "trivial_decomp_circuit_length")
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (expand "circuit_at?")
                        (("1" (expand "circuit?") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "circuit_at?")
            (("2" (expand "circuit?")
              (("2" (expand "pre_circuit?") (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "circuit_at?")
          (("2" (expand "circuit?")
            (("2" (expand "pre_circuit?") (("2" (flatten) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "cycle_at?" 1)
        (("2" (expand "cycle?" 1)
          (("2" (ground)
            (("1" (expand "circuit_at?") (("1" (propax) nil nil)) nil)
             ("2"
              (case "FORALL (i, j: below(length(trunc1(circ)))):
                                         i < j IMPLIES finseq_appl(trunc1(circ))(i) /= finseq_appl(trunc1(circ))(j)")
              (("1" (skeep)
                (("1" (case "i<j")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "trunc1")
                        (("1" (assert)
                          (("1" (expand "^" -2)
                            (("1" (expand "min")
                              (("1" (expand "finseq_appl")
                                (("1" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "trunc1")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "trunc1")
                      (("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "j" "i")
                    (("1" (assert)
                      (("1" (expand "trunc1")
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (expand "finseq_appl")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "trunc1")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "trunc1")
                      (("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (lemma " circuit_decomp_prep")
                    (("2"
                      (inst - "G" "v" "trunc1(circ)"
                       "trivial_decomp(G, trunc1(circ))"
                       "length(trivial_decomp(G, trunc1(circ)))")
                      (("1" (rewrite "trivial_decomp_idemp" :dir rl)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (lemma "trunc_decomp_def")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "circuit_at?")
                                    (("1" (expand "circuit?")
                                      (("1"
                                        (expand "pre_circuit?")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "append[vert_circ(G)]
                                                 (scd, (: vert2vc(G, last(circ)) :))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "cycle_at?")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand "cycle?")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (typepred
                                                               "drop_circuits(G,
                                                                     append[vert_circ(G)]
                                                                         (scd, (: vert2vc(G, last(circ)) :)))")
                                                              (("1"
                                                                (expand
                                                                 "circuit?")
                                                                (("1"
                                                                  (rewrite
                                                                   "length_append[vert_circ(G)]")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "pre_circuit?")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (expand
                                                                           "drop_circuits"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "list2finseq"
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "nth_append[vert_circ(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "map_length[vert_circ(G), vert(G)]")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nth_append[vert_circ(G)]")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "length_append[vert_circ(G)]")
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "vert2vc")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "trunc1(circ)`seq(0) = last(circ)")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "decomp_to_walk(G, scd)")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           (-5
                                                                                                                            -6
                                                                                                                            -7
                                                                                                                            -8))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "first")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "finseq_appl")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "drop_circuits"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "list2finseq")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "trunc1")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "last")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "finseq_appl")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "length_append[vert_circ(G)]")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("2"
                                                                    (expand
                                                                     "vert?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "FORALL (i,
                                                                j:
                                                                  below(length
                                                                          (drop_circuits(G,
                                                                                         append[vert_circ(G)]
                                                                                         (scd,
                                                                                          (: vert2vc(G, last(circ)) :))))
                                                                         - 1)):
                                                          i < j IMPLIES
                                                           finseq_appl                                      (drop_circuits(G,
                                                                              append[vert_circ(G)]
                                                                                  (scd, (: vert2vc(G, last(circ)) :))))
                                                               (i)
                                                            /=
                                                            finseq_appl
                                                                (drop_circuits(G,
                                                                               append[vert_circ(G)]
                                                                                   (scd, (: vert2vc(G, last(circ)) :))))
                                                                (j)")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (case
                                                                   "i!1<j!1")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -
                                                                     "j!1"
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skeep
                                                                   :preds?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "drop_circuits"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "drop_circuits"
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "list2finseq"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "list2finseq"
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "map_length[vert_circ(G), vert(G)]")
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_append[vert_circ(G)]")
                                                                              (("1"
                                                                                (simplify)
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "i!1"
                                                                                   "j!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "finseq_appl")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "drop_circuits")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "list2finseq")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_append[vert_circ(G)]")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       -1
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "nth_append[vert_circ(G)]")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "length"
                                                                                                                                                 -1
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "vc`v")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "vert?")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "vc`v")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vert?")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "vc`v")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "vert?")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "drop_circuits"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "list2finseq")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "drop_circuits"
                                                                                     1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "list2finseq"
                                                                                       1)
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "vc`v")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "vert?")
                                                                                              (("3"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "drop_circuits")
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (expand
                                                               "list2finseq")
                                                              (("2"
                                                                (lemma
                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_append[vert_circ(G)]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "decomp_to_walk(G, scd)")
                                                                              (("1"
                                                                                (expand
                                                                                 "drop_circuits"
                                                                                 -3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "first")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "finseq_appl")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "list2finseq")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "trunc1"
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("2"
                                                                      (expand
                                                                       "vert?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep :preds? t)
                                                      (("2"
                                                        (lemma
                                                         "nth_append[vert_circ(G)]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (rewrite
                                                             "length_append[vert_circ(G)]")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i!1=0")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "walk_index_ub")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "scd"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "walk_index")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "trunc1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "min")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "walk_index_last")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 " G"
                                                                                 "scd"
                                                                                 "i!1-1")
                                                                                (("1"
                                                                                  (simplify
                                                                                   -1)
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     -1
                                                                                     r
                                                                                     2)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "walk_index_ub")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "G"
                                                                                           "scd"
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "trunc1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "min")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "vert2vc")
                                                                                (("2"
                                                                                  (expand
                                                                                   "gen_seq1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred "vc`v")
                                                            (("2"
                                                              (expand "vert?")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "circuit_at?")
                                  (("2" (expand "circuit?")
                                    (("2" (expand "pre_circuit?")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "trivial_decomp_length")
                        (("2" (expand "trunc1")
                          (("2" (expand "^")
                            (("2" (expand "min")
                              (("2" (expand "circuit_at?")
                                (("2" (expand "circuit?")
                                  (("2" (expand "pre_circuit?")
                                    (("2" (assert) (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "vc`v")
                          (("3" (expand "vert?") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "trunc1")
                        (("4" (expand "circuit_at?")
                          (("4" (expand "circuit?")
                            (("4" (expand "pre_circuit?")
                              (("4" (flatten)
                                (("4" (lemma "walk?_caret")
                                  (("4" (inst?)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (expand "circuit_at?")
                  (("3" (expand "circuit?")
                    (("3" (expand "pre_circuit?") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "circuit_at?") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((circuit_at? const-decl "bool" circuits_ nil)
    (cycle_at? const-decl "bool" cycles_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (circuit? const-decl "bool" circuits_ nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (walk? const-decl "bool" walks_ nil)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (cycle? const-decl "bool" cycles_ nil)
    (trunc1 const-decl "prewalk" walks_ nil)
    (Longprewalk type-eq-decl nil walks_ nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (walk?_caret formula-decl nil walks_ nil))
   shostak)
  (circuit_decomposition-1 nil 3659867783
   ("" (skeep :preds? t)
    (("" (case "cycle_at?(G, circ, v)")
      (("1" (inst + "trivial_decomp(G, circ)")
        (("1" (typepred "trivial_decomp(G, circ)")
          (("1" (assert)
            (("1" (lemma "trivial_decomp_circuit_length")
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (expand "circuit_at?")
                        (("1" (expand "circuit?") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "circuit_at?")
            (("2" (expand "circuit?")
              (("2" (expand "pre_circuit?") (("2" (flatten) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "circuit_at?")
          (("2" (expand "circuit?")
            (("2" (expand "pre_circuit?") (("2" (flatten) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "cycle_at?" 1)
        (("2" (expand "cycle?" 1)
          (("2" (ground)
            (("1" (expand "circuit_at?") (("1" (propax) nil nil)) nil)
             ("2"
              (case "FORALL (i, j: below(length(trunc1(circ)))):
                              i < j IMPLIES finseq_appl(trunc1(circ))(i) /= finseq_appl(trunc1(circ))(j)")
              (("1" (skeep)
                (("1" (case "i<j")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (expand "trunc1")
                        (("1" (assert)
                          (("1" (expand "^" -2)
                            (("1" (expand "min")
                              (("1" (expand "finseq_appl")
                                (("1" (propax) nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "trunc1")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "trunc1")
                      (("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "j" "i")
                    (("1" (assert)
                      (("1" (expand "trunc1")
                        (("1" (expand "^")
                          (("1" (expand "min")
                            (("1" (expand "finseq_appl")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "trunc1")
                      (("2" (expand "^")
                        (("2" (expand "min") (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "trunc1")
                      (("3" (expand "^")
                        (("3" (expand "min") (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep :preds? t)
                  (("2" (lemma " circuit_decomp_prep")
                    (("2"
                      (inst - "G" "v" "trunc1(circ)"
                       "trivial_decomp(G, trunc1(circ))"
                       "length(trivial_decomp(G, trunc1(circ)))")
                      (("1" (rewrite "trivial_decomp_idemp" :dir rl)
                        (("1" (skeep)
                          (("1" (assert)
                            (("1" (lemma "trunc_decomp_def")
                              (("1" (inst?)
                                (("1" (assert)
                                  (("1" (expand "circuit_at?")
                                    (("1" (expand "circuit?")
                                      (("1"
                                        (expand "pre_circuit?")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "append[vert_circ(G)]
                                     (scd, (: vert2vc(G, last(circ)) :))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (ground)
                                                    (("1"
                                                      (expand "cycle_at?")
                                                      (("1"
                                                        (ground)
                                                        (("1"
                                                          (expand "cycle?")
                                                          (("1"
                                                            (ground)
                                                            (("1"
                                                              (typepred
                                                               "drop_circuits(G,
                                                 append[vert_circ(G)]
                                                     (scd, (: vert2vc(G, last(circ)) :)))")
                                                              (("1"
                                                                (expand
                                                                 "circuit?")
                                                                (("1"
                                                                  (rewrite
                                                                   "length_append[vert_circ(G)]")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "pre_circuit?")
                                                                      (("1"
                                                                        (expand
                                                                         "finseq_appl")
                                                                        (("1"
                                                                          (expand
                                                                           "drop_circuits"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "list2finseq"
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "nth_append[vert_circ(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replaces
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "map_length[vert_circ(G), vert(G)]")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nth_append[vert_circ(G)]")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "length_append[vert_circ(G)]")
                                                                                                            (("1"
                                                                                                              (simplify
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 1
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "vert2vc")
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "trunc1(circ)`seq(0) = last(circ)")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (typepred
                                                                                                                         "decomp_to_walk(G, scd)")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           (-5
                                                                                                                            -6
                                                                                                                            -7
                                                                                                                            -8))
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "first")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "finseq_appl")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -5
                                                                                                                                 -3)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "drop_circuits"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "list2finseq")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "trunc1")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "^")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "last")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "finseq_appl")
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "vc`v")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "vert?")
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "vc`v")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "vert?")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "length_append[vert_circ(G)]")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "vc`v")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "vert?")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vc`v")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "vert?")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "vc`v")
                                                                  (("2"
                                                                    (expand
                                                                     "vert?")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (case
                                                               "FORALL (i,
                                       j:
                                         below(length
                                                 (drop_circuits(G,
                                                                append[vert_circ(G)]
                                                                (scd,
                                                                 (: vert2vc(G, last(circ)) :))))
                                                - 1)):
                                 i < j IMPLIES
                                  finseq_appl                                      (drop_circuits(G,
                                                     append[vert_circ(G)]
                                                         (scd, (: vert2vc(G, last(circ)) :))))
                                      (i)
                                   /=
                                   finseq_appl
                                       (drop_circuits(G,
                                                      append[vert_circ(G)]
                                                          (scd, (: vert2vc(G, last(circ)) :))))
                                       (j)")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (case
                                                                   "i!1<j!1")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (inst
                                                                     -
                                                                     "j!1"
                                                                     "i!1")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide 2)
                                                                (("2"
                                                                  (skeep
                                                                   :preds?
                                                                   t)
                                                                  (("2"
                                                                    (expand
                                                                     "drop_circuits"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "drop_circuits"
                                                                       -2)
                                                                      (("2"
                                                                        (expand
                                                                         "list2finseq"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "list2finseq"
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "map_length[vert_circ(G), vert(G)]")
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_append[vert_circ(G)]")
                                                                              (("1"
                                                                                (simplify)
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "i!1"
                                                                                   "j!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "finseq_appl")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "drop_circuits")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "list2finseq")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                      (("1"
                                                                                                        (inst?)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_append[vert_circ(G)]")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -1
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       -1
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "nth_append[vert_circ(G)]")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "length"
                                                                                                                                                 -1
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (replaces
                                                                                                                                                   -1)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "vc`v")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "vert?")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (skeep)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "vc`v")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "vert?")
                                                                                                                                      (("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "vc`v")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "vert?")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "vc`v")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "vert?")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "drop_circuits"
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "list2finseq")
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (expand
                                                                                     "drop_circuits"
                                                                                     1)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "list2finseq"
                                                                                       1)
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "map_length[vert_circ(G), vert(G)]")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "vc`v")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "vert?")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (typepred
                                                                                 "vc`v")
                                                                                (("2"
                                                                                  (expand
                                                                                   "vert?")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (skeep)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "vc`v")
                                                                    (("3"
                                                                      (expand
                                                                       "vert?")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "drop_circuits")
                                                          (("2"
                                                            (expand
                                                             "finseq_appl")
                                                            (("2"
                                                              (expand
                                                               "list2finseq")
                                                              (("2"
                                                                (lemma
                                                                 "map_nth_rw[vert_circ(G), vert(G)]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "nth_append[vert_circ(G)]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (typepred
                                                                               "decomp_to_walk(G, scd)")
                                                                              (("1"
                                                                                (expand
                                                                                 "drop_circuits"
                                                                                 -3)
                                                                                (("1"
                                                                                  (replace
                                                                                   -6
                                                                                   -3)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "first")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "finseq_appl")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "list2finseq")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "map_nth_rw[vert_circ(G), vert(G)]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "trunc1"
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "^")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "vc`v")
                                                                            (("2"
                                                                              (expand
                                                                               "vert?")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (typepred
                                                                       "vc`v")
                                                                      (("2"
                                                                        (expand
                                                                         "vert?")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skeep :preds? t)
                                                      (("2"
                                                        (lemma
                                                         "nth_append[vert_circ(G)]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (rewrite
                                                             "length_append[vert_circ(G)]")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -1
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replaces
                                                                     -1)
                                                                    (("1"
                                                                      (lift-if
                                                                       1)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "i!1=0")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "walk_index_ub")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G"
                                                                                   "scd"
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "walk_index")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "trunc1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "^")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "min")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "walk_index_last")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 " G"
                                                                                 "scd"
                                                                                 "i!1-1")
                                                                                (("1"
                                                                                  (simplify
                                                                                   -1)
                                                                                  (("1"
                                                                                    (move-terms
                                                                                     -1
                                                                                     r
                                                                                     2)
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "walk_index_ub")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "G"
                                                                                           "scd"
                                                                                           "i!1")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -5
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "trunc1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "^")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "min")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (typepred
                                                                                         "vc`v")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "vert?")
                                                                                          (("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "vert2vc")
                                                                                (("2"
                                                                                  (expand
                                                                                   "gen_seq1")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "vc`v")
                                                                (("2"
                                                                  (expand
                                                                   "vert?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "vc`v")
                                                              (("2"
                                                                (expand
                                                                 "vert?")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (typepred "vc`v")
                                                    (("2"
                                                      (expand "vert?")
                                                      (("2" (propax) nil nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (expand "circuit_at?")
                                  (("2" (expand "circuit?")
                                    (("2" (expand "pre_circuit?")
                                      (("2" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (rewrite "trivial_decomp_length")
                        (("2" (expand "trunc1")
                          (("2" (expand "^")
                            (("2" (expand "min")
                              (("2" (expand "circuit_at?")
                                (("2" (expand "circuit?")
                                  (("2" (expand "pre_circuit?")
                                    (("2" (assert) (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep)
                        (("3" (typepred "vc`v")
                          (("3" (expand "vert?") (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("4" (expand "trunc1")
                        (("4" (expand "circuit_at?")
                          (("4" (expand "circuit?")
                            (("4" (expand "pre_circuit?")
                              (("4" (flatten)
                                (("4" (lemma "walk?_caret")
                                  (("4" (inst?)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (expand "circuit_at?")
                  (("3" (expand "circuit?")
                    (("3" (expand "pre_circuit?") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "circuit_at?") (("3" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((circuit_at? const-decl "bool" circuits_ nil)
    (cycle_at? const-decl "bool" cycles_ nil)
    (vert type-eq-decl nil digraphs_ nil)
    (vert? const-decl "bool" digraphs_ nil)
    (prewalk type-eq-decl nil walks_ nil)
    (is_finite const-decl "bool" finite_sets nil)
    (circuit? const-decl "bool" circuits_ nil)
    (pre_circuit? const-decl "bool" circuits_ nil)
    (last const-decl "T" seq_extras structures)
    (first const-decl "T" seq_extras structures)
    (not_empty_seq type-eq-decl nil seq_extras structures)
    (gen_seq1 const-decl "Seq(G)" walks_ nil)
    (Seq type-eq-decl nil walks_ nil) (verts_in? const-decl "bool" walks_ nil)
    (Walk type-eq-decl nil walks_ nil) (walk? const-decl "bool" walks_ nil)
    (cycle? const-decl "bool" cycles_ nil)
    (trunc1 const-decl "prewalk" walks_ nil)
    (Longprewalk type-eq-decl nil walks_ nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (walk?_caret formula-decl nil walks_ nil))
   nil)))

