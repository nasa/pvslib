%==============================================================================%
%                                                                              %
% Definitions and properties about subgraphs for uninterpreted digraphs.       %
%                                                                              %
% This theory is based on the previous version of the theory "di_subgraph.pvs" %
%                                                                              %
%   Mariano Moscato        National Institute of Aerospace (US)   2015         %
%   (among others)                                                             %
%                                                                              %
%==============================================================================%
di_subgraphs_[
 T    : TYPE,
 ConcreteDigraph: TYPE,
 vert : [ConcreteDigraph-> [T -> bool]],
 edges: [ConcreteDigraph -> [T,T -> bool]],
 size : [ConcreteDigraph -> nat],
 make : [ v:(is_finite[T]),
              {e: (is_finite[[T,T]]) | FORALL(x,y:T):
       	          e(x,y) IMPLIES v(x) AND v(y) } -> ConcreteDigraph]
]: THEORY
BEGIN
  ASSUMING
    % This theory only makes sense if the parametric type ConcreteDigraph is a
    % correct interpretation for (uninterpreted) digraphs. That is checked using
    % the predicate defined in digraphs_abs.
    IMPORTING digraphs_abs[T,ConcreteDigraph,vert,edges,size,make]
    concretedigraph_implements_abstractdigraph: ASSUMPTION
      digraphs_abs.correct_implementation
  ENDASSUMING

  AUTO_REWRITE+ concretedigraph_implements_abstractdigraph

  IMPORTING digraphs_[T,ConcreteDigraph,vert,edges,size,make]

   V: VAR set[T]
   G,G1,G2,SS: VAR ConcreteDigraph
   i: VAR T
   e: VAR edgetype

   di_subgraph?(G1,G2): bool = subset?(vert(G1),vert(G2)) AND
                               subset?(edges(G1),edges(G2))

   equal?(G1,G2): bool = di_subgraph?(G1,G2) AND di_subgraph?(G2,G1)

   di_subgraph(G): TYPE = {SS | di_subgraph?(SS,G)}

   finite_vert_subset: LEMMA is_finite(LAMBDA (i:T): vert(G)(i) AND V(i))

   finite_edge_subset: LEMMA is_finite[edgetype]
               ({e | edges(G)(e) AND (LET (x, y) = e IN V(x) AND V(y))})


   x,y: VAR T
   di_subgraph(G, V): di_subgraph(G) =
     make({i | vert(G)(i) AND V(i)},
          {e | edges(G)(e) AND (Let (x,y) = e IN V(x) AND V(y))})

   di_subgraph_vert_sub: LEMMA subset?(V,vert(G)) IMPLIES
                                        vert(di_subgraph(G,V)) = V

   di_subgraph_lem     : LEMMA di_subgraph?(di_subgraph(G,V),G)

   di_subgraph_smaller: LEMMA di_subgraph?(SS, G) IMPLIES
   	                     size(SS) <= size(G)

   IMPORTING finite_sets@finite_cross

   di_subgraph_vert: LEMMA
     di_subgraph?(G1,G2) AND
     (FORALL (u, v: (vert(G1))):
           edge?(G2)(u, v) IMPLIES edge?(G1)(u, v))
     IMPLIES obs_eq(di_subgraph(G2,vert(G1)), G1)

END di_subgraphs_
